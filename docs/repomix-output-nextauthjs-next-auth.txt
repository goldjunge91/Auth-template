This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter), security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  broken-link-checker/
    src/
      index.ts
    action.yml
    index.d.ts
    package.json
    tsconfig.json
  DISCUSSION_TEMPLATE/
    ideas.yml
    questions.yml
  ISSUE_TEMPLATE/
    1_bug_framework.yml
    2_bug_provider.yml
    3_bug_adapter.yml
    4_documentation.yml
    config.yml
  version-pr/
    action.yml
    index.js
  workflows/
    broken-link-checker.yml
    codeql-analysis.yml
    pr-labeler.yml
    release.yml
    sync-examples.yml
    triage.yml
  CODEOWNERS
  dependabot.yml
  FUNDING.yml
  good-first-issue.md
  help-needed.md
  invalid-reproduction.md
  pr-labeler.yml
  PULL_REQUEST_TEMPLATE.md
  stale.yml
  sync.yml
apps/
  dev/
    express/
      api/
        index.js
      public/
        css/
          style.css
      src/
        config/
          auth.config.ts
        middleware/
          auth.middleware.ts
          error.middleware.ts
        app.ts
        errors.ts
        server.ts
      views/
        error.pug
        index.pug
        layout.pug
        protected.pug
      .env.example
      .gitignore
      .prettierignore
      package.json
      README.md
      tsconfig.json
    nextjs/
      .vscode/
        settings.json
      app/
        api/
          protected/
            route.ts
        auth/
          [...nextauth]/
            route.ts
        dashboard/
          page.tsx
        client.tsx
        layout.tsx
        page.tsx
        styles.css
      components/
        access-denied.tsx
        footer.module.css
        footer.tsx
        header.module.css
        header.tsx
      pages/
        api/
          examples/
            protected.ts
            session.ts
        _app.tsx
        client.tsx
        credentials.tsx
        email.tsx
        policy.tsx
        protected-ssr.tsx
        protected.tsx
        styles.css
      prisma/
        migrations/
          20231023165117_/
            migration.sql
          20240124035029_init/
            migration.sql
          migration_lock.toml
        schema.prisma
      tests/
        signin.spec.ts
      .env.local.example
      .gitignore
      auth.ts
      middleware.ts
      next-env.d.ts
      next.config.js
      package.json
      README.md
      tsconfig.json
    qwik/
      public/
        favicon.svg
        manifest.json
      src/
        components/
          router-head/
            router-head.tsx
        routes/
          index.tsx
          layout.tsx
          plugin@auth.ts
          service-worker.ts
        entry.dev.tsx
        entry.preview.tsx
        entry.ssr.tsx
        root.tsx
      .env.example
      .gitignore
      package.json
      qwik.env.d.ts
      README.md
      tsconfig.json
      vite.config.ts
    sveltekit/
      src/
        components/
          header.svelte
        routes/
          protected/
            +page.svelte
          signin/
            +page.server.ts
          signout/
            +page.server.ts
          +layout.server.ts
          +layout.svelte
          +page.svelte
        app.d.ts
        app.html
        auth.ts
        hooks.server.ts
        style.css
      .env.example
      .eslintignore
      .eslintrc.cjs
      .gitignore
      .prettierignore
      .prettierrc
      package.json
      README.md
      svelte.config.js
      tsconfig.json
      vite.config.js
  examples/
    express/
      api/
        index.js
      public/
        css/
          style.css
      src/
        config/
          auth.config.ts
        middleware/
          auth.middleware.ts
          error.middleware.ts
        app.ts
        errors.ts
        server.ts
      types/
        express/
          index.d.ts
      views/
        error.pug
        index.pug
        layout.pug
        protected.pug
      .env.example
      .eslintrc.cjs
      .gitignore
      .prettierignore
      .prettierrc
      package.json
      README.md
      tailwind.config.js
      tsconfig.json
      vercel.json
    nextjs/
      app/
        [...proxy]/
          route.tsx
        api/
          protected/
            route.ts
        api-example/
          page.tsx
        auth/
          [...nextauth]/
            route.ts
        client-example/
          page.tsx
        middleware-example/
          page.tsx
        policy/
          page.tsx
        server-example/
          page.tsx
        globals.css
        layout.tsx
        page.tsx
      components/
        ui/
          avatar.tsx
          button.tsx
          dropdown-menu.tsx
          input.tsx
          navigation-menu.tsx
        auth-components.tsx
        client-example.tsx
        custom-link.tsx
        footer.tsx
        header.tsx
        main-nav.tsx
        session-data.tsx
        user-button.tsx
      lib/
        utils.ts
      .env.local.example
      .gitignore
      auth.ts
      components.json
      docker-compose.yml
      Dockerfile
      middleware.ts
      next.config.js
      package.json
      postcss.config.js
      README.md
      tailwind.config.js
      test-docker.sh
      tsconfig.json
    nextjs-pages/
      app/
        api/
          auth/
            [...nextauth]/
              route.ts
      components/
        ui/
          avatar.tsx
          button.tsx
          dropdown-menu.tsx
          input.tsx
          navigation-menu.tsx
        auth-components.tsx
        client-example.tsx
        custom-link.tsx
        footer.tsx
        header.tsx
        main-nav.tsx
        session-data.tsx
        user-button.tsx
      lib/
        utils.ts
      pages/
        api/
          protected.ts
        api-example/
          index.tsx
        client-example/
          index.tsx
        middleware-example/
          index.tsx
        policy/
          index.tsx
        server-example/
          index.tsx
        _app.tsx
        globals.css
        index.tsx
      .env.local.example
      .gitignore
      auth.ts
      components.json
      middleware.ts
      next.config.js
      package.json
      postcss.config.js
      README.md
      tailwind.config.js
      tsconfig.json
    qwik/
      .vscode/
        launch.json
        qwik-city.code-snippets
        qwik.code-snippets
      adapters/
        vercel-edge/
          vite.config.ts
      public/
        favicon.svg
        manifest.json
      src/
        components/
          avatar/
            avatar.tsx
          header/
            header.tsx
          icones/
            qwik.tsx
          router-head/
            router-head.tsx
        routes/
          protected/
            index.tsx
          index.tsx
          layout.tsx
          plugin@auth.ts
          service-worker.ts
        entry.dev.tsx
        entry.preview.tsx
        entry.ssr.tsx
        entry.vercel-edge.tsx
        global.css
        root.tsx
      .env.example
      .eslintignore
      .eslintrc.cjs
      .gitignore
      .prettierignore
      .prettierrc.js
      package.json
      postcss.config.cjs
      qwik.env.d.ts
      README.md
      tailwind.config.js
      tsconfig.json
      vercel.json
      vite.config.ts
    solid-start/
      src/
        components/
          NavBar/
            index.ts
            NavBar.tsx
          Protected/
            index.ts
            Protected.tsx
          index.ts
        env/
          client.ts
          schema.ts
          server.ts
        routes/
          api/
            auth/
              [...solidauth].ts
          index.tsx
          protected.tsx
        entry-client.tsx
        entry-server.tsx
        root.css
        root.tsx
      .env.example
      .gitignore
      package.json
      postcss.config.cjs
      README.md
      tailwind.config.cjs
      tsconfig.json
      vite.config.ts
    sveltekit/
      src/
        components/
          external-icon.svelte
          footer.svelte
          header.svelte
        routes/
          protected/
            +page.svelte
          signin/
            +page.server.ts
          signout/
            +page.server.ts
          +layout.server.ts
          +layout.svelte
          +page.svelte
        app.d.ts
        app.html
        auth.ts
        hooks.server.ts
      .env.example
      .eslintignore
      .eslintrc.cjs
      .gitignore
      .prettierignore
      .prettierrc
      package.json
      README.md
      svelte.config.js
      tsconfig.json
      vite.config.js
  playgrounds/
    README.md
  proxy/
    api/
      callback/
        [auth].ts
      [auth].ts
    .env.example
    .gitignore
    package.json
    README.md
    tsconfig.json
docs/
  .vscode/
    settings.json
  app/
    api/
      cron/
        route.ts
      og/
        route.tsx
  components/
    Accordion/
      index.tsx
    Blur/
      index.tsx
    Code/
      index.tsx
    DocSearch/
      index.tsx
      wrapper.tsx
    Footer/
      index.tsx
    FrameworkLink/
      index.tsx
    Guides/
      index.tsx
    Icons/
      ArrowRight.tsx
      ArrowSquareOut.tsx
      Browser.tsx
      CaretRight.tsx
      ChatCircleText.tsx
      Check.tsx
      Flask.tsx
      GitBranch.tsx
      GithubLogo.tsx
      index.tsx
      Link.tsx
      Plus.tsx
      SealWarning.tsx
      ShieldStar.tsx
      Sparkle.tsx
    InkeepSearch/
      index.tsx
    Link/
      index.tsx
    ListDisclosure/
      index.tsx
      useListDisclosure.ts
    LogosMarquee/
      index.tsx
      logo.tsx
    OAuthProviderInstructions/
      content/
        components/
          SetupCode.tsx
          SignInCode.tsx
          StepTitle.tsx
          TSIcon.tsx
        index.tsx
      index.tsx
      OAuthProviderSelect.tsx
    RichTabs/
      index.tsx
      useRichTabs.ts
    Screenshot/
      index.tsx
    SearchBarProviders/
      PreviewProviders.tsx
  hooks/
    use-select-combobox.ts
  pages/
    concepts/
      _meta.js
      database-models.mdx
      index.mdx
      oauth.mdx
      session-strategies.mdx
    data/
      manifest.json
    getting-started/
      adapters/
        _meta.js
        azure-tables.mdx
        d1.mdx
        dgraph.mdx
        drizzle.mdx
        dynamodb.mdx
        edgedb.mdx
        fauna.mdx
        firebase.mdx
        hasura.mdx
        kysely.mdx
        mikro-orm.mdx
        mongodb.mdx
        neo4j.mdx
        neon.mdx
        pg.mdx
        pouchdb.mdx
        prisma.mdx
        sequelize.mdx
        supabase.mdx
        surrealdb.mdx
        typeorm.mdx
        unstorage.mdx
        upstash-redis.mdx
        xata.mdx
      authentication/
        _meta.js
        credentials.mdx
        email.mdx
        oauth.mdx
        webauthn.mdx
      providers/
        42-school.mdx
        apple.mdx
        asgardeo.mdx
        auth0.mdx
        authentik.mdx
        azure-ad-b2c.mdx
        azure-ad.mdx
        azure-devops.mdx
        bankid-no.mdx
        battlenet.mdx
        beyondidentity.mdx
        bitbucket.mdx
        box.mdx
        boxyhq-saml.mdx
        bungie.mdx
        click-up.mdx
        cognito.mdx
        coinbase.mdx
        credentials.mdx
        descope.mdx
        discord.mdx
        dribbble.mdx
        dropbox.mdx
        duende-identity-server6.mdx
        eveonline.mdx
        facebook.mdx
        faceit.mdx
        figma.mdx
        forwardemail.mdx
        foursquare.mdx
        freshbooks.mdx
        frontegg.mdx
        fusionauth.mdx
        github.mdx
        gitlab.mdx
        google.mdx
        hubspot.mdx
        identity-server4.mdx
        instagram.mdx
        kakao.mdx
        keycloak.mdx
        line.mdx
        linkedin.mdx
        logto.mdx
        loops.mdx
        mailchimp.mdx
        mailgun.mdx
        mailru.mdx
        mastodon.mdx
        mattermost.mdx
        medium.mdx
        microsoft-entra-id.mdx
        naver.mdx
        netlify.mdx
        netsuite.mdx
        nextcloud.mdx
        nodemailer.mdx
        notion.mdx
        okta.mdx
        onelogin.mdx
        osso.mdx
        osu.mdx
        passage.mdx
        passkey.mdx
        patreon.mdx
        pinterest.mdx
        pipedrive.mdx
        postmark.mdx
        reddit.mdx
        resend.mdx
        sailpoint.mdx
        salesforce.mdx
        sendgrid.mdx
        simplelogin.mdx
        slack.mdx
        spotify.mdx
        strava.mdx
        threads.mdx
        tiktok.mdx
        todoist.mdx
        trakt.mdx
        twitch.mdx
        twitter.mdx
        united-effects.mdx
        vipps-mobilepay.mdx
        vk.mdx
        webex.mdx
        wikimedia.mdx
        wordpress.mdx
        workos.mdx
        yandex.mdx
        zitadel.mdx
        zoho.mdx
        zoom.mdx
      session-management/
        _meta.js
        custom-pages.mdx
        get-session.mdx
        login.mdx
        protecting.mdx
      _meta.js
      authentication.mdx
      database.mdx
      deployment.mdx
      index.mdx
      installation.mdx
      integrations.mdx
      migrating-to-v5.mdx
      typescript.mdx
    guides/
      pages/
        _meta.js
        built-in-pages.mdx
        error.mdx
        signin.mdx
        signout.mdx
      _meta.js
      configuring-github.mdx
      configuring-http-email.mdx
      configuring-oauth-providers.mdx
      configuring-resend.mdx
      corporate-proxy.mdx
      creating-a-database-adapter.mdx
      creating-a-framework-integration.mdx
      debugging.mdx
      edge-compatibility.mdx
      environment-variables.mdx
      extending-the-session.mdx
      integrating-third-party-backends.mdx
      refresh-token-rotation.mdx
      restricting-user-access.mdx
      role-based-access-control.mdx
      testing.mdx
    _app.tsx
    _document.tsx
    _meta.js
    404.mdx
    animated-stars.css
    contributors.mdx
    global.css
    index.mdx
    security.mdx
    sponsors.mdx
  public/
    .well-known/
      security.txt
    img/
      adapters/
        azure-tables.svg
        d1.svg
        dgraph.svg
        drizzle.svg
        dynamodb.svg
        edgedb.svg
        fauna.svg
        firebase.svg
        hasura.svg
        kysely.svg
        mikro-orm.svg
        mongodb.svg
        neo4j.svg
        neon.svg
        pg.svg
        pouchdb.svg
        prisma.svg
        sequelize.svg
        supabase.svg
        surrealdb.svg
        typeorm.svg
        unstorage.svg
        upstash-redis.svg
        xata.svg
      etc/
        clerk-logo.svg
        cli.svg
        express.svg
        nextjs.svg
        opencollective-logomark.svg
        opencollective-wordmark.svg
        powered-by-vercel.svg
        qwik.svg
        solidstart.svg
        sveltekit.svg
      providers/
        42-school.svg
        apple.svg
        asgardeo.svg
        atlassian.svg
        auth0.svg
        authentik.svg
        azure-ad-b2c.svg
        azure-ad.svg
        azure-devops.svg
        azure.svg
        bankid-no.svg
        battlenet.svg
        beyondidentity.svg
        bitbucket.svg
        box.svg
        boxyhq-saml.svg
        bungie.svg
        click-up.svg
        cognito.svg
        coinbase.svg
        concept2.svg
        descope.svg
        discord.svg
        dribbble.svg
        dropbox.svg
        duende-identityserver-6.svg
        eventbrite.svg
        eveonline.svg
        facebook.svg
        faceit.svg
        figma.svg
        forwardemail.svg
        foursquare.svg
        freshbooks.svg
        frontegg.svg
        fusionauth.svg
        github.svg
        gitlab.svg
        google.svg
        hubspot.svg
        huggingface.svg
        identity-server4.svg
        instagram.svg
        kakao.svg
        keycloak.svg
        kinde.svg
        line.svg
        linkedin.svg
        logto.svg
        loops.svg
        mailchimp.svg
        mailgun.svg
        mailru.svg
        mastodon.svg
        mattermost.svg
        medium.svg
        microsoft-entra-id.svg
        naver.svg
        netlify.svg
        netsuite.svg
        nextcloud.svg
        nodemailer.svg
        notion.svg
        okta.svg
        onelogin.svg
        osso.svg
        osu.svg
        passage.svg
        passkey.svg
        patreon.svg
        ping-id.svg
        pinterest.svg
        pipedrive.svg
        postmark.svg
        reddit.svg
        resend.svg
        roblox.svg
        sailpoint.svg
        salesforce.svg
        sendgrid.svg
        simplelogin.svg
        slack.svg
        spotify.svg
        strava.svg
        threads.svg
        tiktok.svg
        todoist.svg
        trakt.svg
        twitch.svg
        twitter.svg
        united-effects.svg
        vercel.svg
        vipps-mobilepay.svg
        vipps.svg
        vk.svg
        webex.svg
        wechat.svg
        wikimedia.svg
        wordpress.svg
        workos.svg
        yandex.svg
        zitadel.svg
        zoho.svg
        zoom.svg
  utils/
    types.ts
    useCopyButton.ts
    useInkeepSettings.ts
  .gitignore
  LICENSE
  next-env.d.ts
  next-sitemap.config.cjs
  next.config.js
  package.json
  postcss.config.cjs
  README.md
  tailwind.config.js
  theme.config.tsx
  tsconfig.json
  typedoc-nextauth.js
  typedoc.config.cjs
  types.d.ts
  vercel.json
packages/
  adapter-azure-tables/
    src/
      index.ts
    test/
      index.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-d1/
    src/
      index.ts
      migrations.ts
      queries.ts
    test/
      index.test.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-dgraph/
    src/
      lib/
        graphql/
          fragments.ts
          schema.gql
        client.ts
      index.ts
    test/
      index.test.ts
      private.key
      public.key
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-drizzle/
    src/
      lib/
        mysql.ts
        pg.ts
        sqlite.ts
        utils.ts
      index.ts
    test/
      mysql/
        drizzle.config.ts
        index.test.ts
        migrator.ts
        schema.ts
        test.sh
      mysql-multi-project-schema/
        drizzle.config.ts
        index.test.ts
        migrator.ts
        schema.ts
        test.sh
      pg/
        drizzle.config.ts
        index.test.ts
        migrator.ts
        schema.ts
        test.sh
      pg-multi-project-schema/
        drizzle.config.ts
        index.test.ts
        migrator.ts
        schema.ts
        test.sh
      sqlite/
        drizzle.config.ts
        index.test.ts
        migrator.ts
        schema.ts
        test.sh
      sqlite-multi-project-schema/
        drizzle.config.ts
        index.test.ts
        migrator.ts
        schema.ts
        test.sh
      fixtures.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-dynamodb/
    src/
      index.ts
    test/
      format.test.ts
      index.test.ts
    jest-dynamodb-config.cjs
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-edgedb/
    src/
      index.ts
    test/
      index.test.ts
    logo.svg
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-fauna/
    fauna/
      account.fsl
      session.fsl
      user.fsl
      verificationToken.fsl
    src/
      index.ts
    test/
      index.test.ts
      test.sh
    .fauna-project
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-firebase/
    src/
      index.ts
    test/
      firestore.rules
      index.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-hasura/
    hasura/
      metadata/
        databases/
          default/
            tables/
              public_accounts.yaml
              public_provider_type.yaml
              public_sessions.yaml
              public_users.yaml
              public_verification_tokens.yaml
              tables.yaml
          databases.yaml
        actions.yaml
        allow_list.yaml
        api_limits.yaml
        cron_triggers.yaml
        graphql_schema_introspection.yaml
        inherited_roles.yaml
        network.yaml
        query_collections.yaml
        remote_schemas.yaml
        rest_endpoints.yaml
        version.yaml
      migrations/
        default/
          1666885939998_init_nextauth_models/
            up.sql
      config.yaml
    src/
      lib/
        client.ts
      queries/
        account.graphql
        delete.graphql
        fragments.graphql
        session.graphql
        user.graphql
        verification-token.graphql
      index.ts
    test/
      index.test.ts
      test.sh
    codegen.ts
    docker-compose.yml
    package.json
    README.md
    schema.gql
    tsconfig.json
    typedoc.config.cjs
  adapter-kysely/
    src/
      index.ts
    test/
      scripts/
        mysql-init.sql
      index.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-mikro-orm/
    src/
      lib/
        entities.ts
      index.ts
    test/
      __snapshots__/
        schema.test.ts.snap
      entities.test.ts
      schema.test.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-mongodb/
    src/
      index.ts
    test/
      custom.test.ts
      index.test.ts
      serverless.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-neo4j/
    src/
      index.ts
    test/
      resources/
        statements.ts
      index.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-neon/
    src/
      index.ts
    test/
      index.test.ts
      test.sh
    package.json
    README.md
    schema.sql
    tsconfig.json
    typedoc.config.cjs
  adapter-pg/
    src/
      index.ts
    test/
      index.test.ts
      test.sh
    package.json
    README.md
    schema.sql
    tsconfig.json
    typedoc.config.cjs
  adapter-pouchdb/
    src/
      index.ts
    test/
      index.test.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-prisma/
    prisma/
      custom.prisma
      mongodb.prisma
      schema.prisma
    src/
      index.ts
    test/
      index.test.ts
      mongodb.test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.js
  adapter-sequelize/
    src/
      index.ts
      models.ts
    test/
      index.test.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-supabase/
    src/
      index.ts
    supabase/
      migrations/
        20221108043803_create_next_auth_schema.sql
        20221108044627_create_public_users_table.sql
      config.toml
    test/
      index.test.ts
      test.sh
    .env.example
    .gitignore
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-surrealdb/
    src/
      index.ts
    test/
      common.ts
      index.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-typeorm/
    src/
      entities.ts
      index.ts
      utils.ts
    test/
      mysql/
        index.custom.test.ts
        index.test.ts
        test.sh
      postgresql/
        index.custom.test.ts
        index.test.ts
        test.sh
      sqlite/
        index.custom.test.ts
        index.test.ts
        test.sh
      custom-entities.ts
      helpers.ts
      index.test.ts
    .dockerignore
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-unstorage/
    src/
      index.ts
    test/
      filesystem.test.ts
      memory.test.ts
      redis-json.test.ts
      redis.test.ts
      test.sh
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-upstash-redis/
    src/
      index.ts
    test/
      index.test.ts
      test.sh
    .env.example
    docker-compose.yml
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  adapter-xata/
    src/
      index.ts
      xata.ts
    test/
      index.test.ts
    package.json
    README.md
    schema.json
    tsconfig.json
    typedoc.config.cjs
  core/
    scripts/
      generate-css.js
      generate-providers.js
    src/
      lib/
        actions/
          callback/
            oauth/
              callback.ts
              checks.ts
              csrf-token.ts
            handle-login.ts
            index.ts
          signin/
            authorization-url.ts
            index.ts
            send-token.ts
          index.ts
          session.ts
          signout.ts
          webauthn-options.ts
        pages/
          error.tsx
          index.ts
          signin.tsx
          signout.tsx
          styles.css
          verify-request.tsx
        utils/
          actions.ts
          assert.ts
          callback-url.ts
          cookie.ts
          date.ts
          email.ts
          env.ts
          logger.ts
          merge.ts
          providers.ts
          session.ts
          web.ts
          webauthn-client.js
          webauthn-utils.ts
        vendored/
          cookie.ts
        index.ts
        init.ts
        symbols.ts
      providers/
        42-school.ts
        apple.ts
        asgardeo.ts
        atlassian.ts
        auth0.ts
        authentik.ts
        azure-ad-b2c.ts
        azure-ad.ts
        azure-devops.ts
        bankid-no.ts
        battlenet.ts
        beyondidentity.ts
        bitbucket.ts
        box.ts
        boxyhq-saml.ts
        bungie.ts
        click-up.ts
        cognito.ts
        coinbase.ts
        concept2.ts
        credentials.ts
        descope.ts
        discord.ts
        dribbble.ts
        dropbox.ts
        duende-identity-server6.ts
        email.ts
        eventbrite.ts
        eveonline.ts
        facebook.ts
        faceit.ts
        figma.ts
        forwardemail.ts
        foursquare.ts
        freshbooks.ts
        frontegg.ts
        fusionauth.ts
        github.ts
        gitlab.ts
        google.ts
        hubspot.ts
        huggingface.ts
        identity-server4.ts
        index.ts
        instagram.ts
        kakao.ts
        keycloak.ts
        kinde.ts
        line.ts
        linkedin.ts
        logto.ts
        loops.ts
        mailchimp.ts
        mailgun.ts
        mailru.ts
        mastodon.ts
        mattermost.ts
        medium.ts
        microsoft-entra-id.ts
        naver.ts
        netlify.ts
        netsuite.ts
        nextcloud.ts
        nodemailer.ts
        notion.ts
        oauth.ts
        okta.ts
        onelogin.ts
        ory-hydra.ts
        osso.ts
        osu.ts
        passage.ts
        passkey.ts
        patreon.ts
        ping-id.ts
        pinterest.ts
        pipedrive.ts
        postmark.ts
        reddit.ts
        resend.ts
        roblox.ts
        salesforce.ts
        sendgrid.ts
        simplelogin.ts
        slack.ts
        spotify.ts
        strava.ts
        threads.ts
        tiktok.ts
        todoist.ts
        trakt.ts
        twitch.ts
        twitter.ts
        united-effects.ts
        vipps.ts
        vk.ts
        webauthn.ts
        webex.ts
        wechat.ts
        wikimedia.ts
        wordpress.ts
        workos.ts
        yandex.ts
        zitadel.ts
        zoho.ts
        zoom.ts
      adapters.ts
      errors.ts
      index.ts
      jwt.ts
      types.ts
      warnings.ts
    test/
      actions/
        callback.test.ts
        csrf.test.ts
        session.test.ts
      fixtures/
        oauth-callback.ts
        pages.ts
      assert-config.test.ts
      authorize.test.ts
      env.test.ts
      jwt.test.ts
      memory-adapter.ts
      merge.test.ts
      pages.test.ts
      url-parsing.test.ts
      utils.ts
      webauthn-utils.test.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  frameworks-express/
    src/
      lib/
        http-api-adapters.ts
        index.ts
      adapters.ts
      index.ts
    test/
      http-api-adapters/
        request.test.ts
        response.test.ts
      login.test.ts
      routing.test.ts
      session.test.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  frameworks-qwik/
    src/
      adapters.ts
      index.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
    vite.config.ts
  frameworks-solid-start/
    src/
      adapters.ts
      client.ts
      index.ts
    test/
      index.test.ts
    .gitignore
    package.json
    README.MD
    tsconfig.json
    typedoc.config.cjs
  frameworks-sveltekit/
    scripts/
      postbuild.js
    src/
      lib/
        components/
          index.ts
          SignIn.svelte
          SignOut.svelte
        actions.ts
        adapters.ts
        client.ts
        env.ts
        index.ts
        types.ts
        webauthn.ts
    test/
      index.test.ts
    package.json
    playwright.config.ts
    README.md
    tsconfig.json
    typedoc.config.cjs
  frameworks-template/
    src/
      index.ts
    test/
      index.test.ts
      test-setup.ts
    package.json
    README.md
    tsconfig.json
    typedoc.config.cjs
  next-auth/
    src/
      lib/
        actions.ts
        client.ts
        env.ts
        index.ts
        types.ts
      adapters.ts
      index.ts
      jwt.ts
      middleware.ts
      next.ts
      react.tsx
      webauthn.ts
    test/
      e2e/
        fixtures/
          auth.ts
          webApp.ts
        helpers/
          authTest.ts
        poms/
          keycloakLoginPom.ts
        tests/
          api/
            session.spec.ts
          providers/
            credentials.spec.ts
            keycloak.spec.ts
      actions.test.ts
      env.test.ts
    package.json
    playwright.config.ts
    README.md
    tsconfig.json
    typedoc.config.cjs
  utils/
    scripts/
      providers.js
      setup-fw-integration.js
    adapter.ts
    package.json
    tsconfig.eslint.json
    tsconfig.json
    vitest-setup.ts
    vitest.config.ts
patches/
  @balazsorban__monorepo-release@0.5.1.patch
.dockerignore
.gitignore
.nvmrc
.prettierignore
eslint.config.mjs
lefthook.yml
LICENSE
package.json
pnpm-workspace.yaml
README.md
turbo.json

================================================================
Files
================================================================

================
File: .github/broken-link-checker/src/index.ts
================
import blc from "broken-link-checker"
import { setFailed } from "@actions/core"
⋮----
type TODO = any
type Output = {
  errors: any[]
  links: any[]
  pages: any[]
  sites: any[]
}
type Comment = {
  id: number
}
type FindBotComment = {
  octokit: TODO
  owner: string
  repo: string
  prNumber: number
}
⋮----
async function findBotComment({
  octokit,
  owner,
  repo,
  prNumber,
}: FindBotComment): Promise<Comment | undefined>
async function updateCheckStatus(
  brokenLinkCount: number,
  commentUrl?: string
): Promise<void>
⋮----
// Can only update status on 'pull_request' events
⋮----
const postComment = async (
  outputMd: string,
  brokenLinkCount: number = 0
): Promise<string> =>
⋮----
// Handle various trigger events
⋮----
// Triggered by `pull_request`
⋮----
// Triggered by `issue_comment`
⋮----
const generateOutputMd = (output: Output): string =>
⋮----
// Add comment header
⋮----
// Build map of page and array of its found broken links
⋮----
// Write out markdown tables of these links
⋮----
// @ts-expect-error
⋮----
// If there were scrape errors, append to bottom of comment
⋮----
// Main function that triggers link validation across .mdx files
async function brokenLinkChecker(): Promise<void>
⋮----
// DEBUG
// console.debug(output.links)
// Skip links that returned 308
⋮----
// Update GitHub "check" status

================
File: .github/broken-link-checker/action.yml
================
name: "Broken Link Checker"
description: "Recursively checks input URL for broken links"
outputs:
  version:
    description: "Check for broken internal links"
runs:
  using: "node20"
  main: "dist/index.js"

================
File: .github/broken-link-checker/index.d.ts
================


================
File: .github/broken-link-checker/package.json
================
{
  "name": "broken-link-checker",
  "private": true,
  "version": "0.2.0",
  "description": "Find broken links as a GitHub Action",
  "main": "dist/index.js",
  "type": "module",
  "scripts": {
    "dev": "tsx src/index.ts",
    "build": "npx tsup --clean --minify --format esm src/index.ts",
    "types": "tsc"
  },
  "keywords": [
    "typescript",
    "broken-link-checker",
    "github-action"
  ],
  "author": "ndom91 <yo@ndo.dev> (https://ndo.dev/)",
  "license": "MIT",
  "devDependencies": {
    "@types/node": "^20.11.15",
    "tsup": "^8.0.1",
    "tsx": "^4.7.0",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@actions/core": "^1.10.1",
    "@actions/github": "^6.0.0",
    "broken-link-checker": "^0.7.8"
  }
}

================
File: .github/broken-link-checker/tsconfig.json
================
{
  "compilerOptions": {
    "noEmit": true,
    "target": "esnext",
    "moduleResolution": "node",
    "rootDir": "./src",
    "types": ["./index.d.ts", "node"],
    "strict": true,
    "noImplicitAny": true,
    "allowSyntheticDefaultImports": true
  }
}

================
File: .github/DISCUSSION_TEMPLATE/ideas.yml
================
body:
  - type: textarea
    attributes:
      label: Goals
      description: Short list of what the feature request aims to address?
      value: |
        1.
        2.
        3.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Non-Goals
      description: Short list of what the feature request _does not_ aim to address?
      value: |
        1.
        2.
        3.
    validations:
      required: false
  - type: textarea
    attributes:
      label: Background
      description: Discuss prior art, why do you think this feature is needed? Are there current alternatives?
    validations:
      required: true
  - type: textarea
    attributes:
      label: Proposal
      description: How should this feature be implemented? Are you interested in contributing?
    validations:
      required: true

================
File: .github/DISCUSSION_TEMPLATE/questions.yml
================
body:
  - type: textarea
    attributes:
      label: Summary
      description: What do you need help with?
    validations:
      required: true
  - type: textarea
    attributes:
      label: Additional information
      description: Any code snippets, error messages, or dependency details that may be related?
      render: js
    validations:
      required: false
  - type: input
    attributes:
      label: Example
      description: A link to a minimal reproduction is helpful for collaborative debugging!
    validations:
      required: false

================
File: .github/ISSUE_TEMPLATE/1_bug_framework.yml
================
name: Bug report
description: Report an issue so we can improve
labels: [triage, bug]
body:
  - type: markdown
    attributes:
      value: |
        **NOTE:** Issues that are potentially security related should be reported to us by following the [Security guidelines](https://next-auth.js.org/security) rather than on GitHub.
        Thanks for taking the time to fill out this issue after reading/searching through the [documentation](https://next-auth.js.org) first!
        Is this your first time contributing? Check out this video: https://www.youtube.com/watch?v=cuoNzXFLitc
        ### Important :exclamation:
        _Providing incorrect/insufficient information or skipping steps to reproduce the issue *will* result in closing the issue or converting to a discussion without further explanation._
        If you have a generic question specific to your project, it is best asked in Discussions under the [Questions category](https://github.com/nextauthjs/next-auth/discussions/new?category=Questions)
  # Let's wait with this until adoption in other frameworks.
  # - type: dropdown
  #   attributes:
  #     label: Framework
  #     description: Which framework(s) is this issue related to?
  #     multiple: true
  #     options:
  #       - "Next.js"
  #       - "Other"
  - type: textarea
    attributes:
      label: Environment
      description: |
        Run this command in your project's root folder and paste the result:
        `npx envinfo --system --binaries --browsers --npmPackages "{next,react,next-auth,@auth/*}"`
        Alternatively, you can manually gather the version information from your package.json for these packages: "next", "react" and "next-auth". Please also mention your OS and Node.js version, as well as the browser you are using.
      value: |
        ```
        Paste here
        ```
    validations:
      required: true
  - type: input
    attributes:
      label: Reproduction URL
      description: A URL to a public github.com repository outside the next-auth org that clearly reproduces your issue. You can use our [`next-auth-example`](https://github.com/nextauthjs/next-auth-example) template repository to get started more easily
    validations:
      required: true
  - type: textarea
    attributes:
      label: Describe the issue
      description: Describe us what the issue is and what have you tried so far to fix it. Add any extra useful information in this section. Feel free to use screenshots (but prefer [code blocks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#syntax-highlighting) over a picture of your code) or a video explanation.
    validations:
      required: true
  - type: textarea
    attributes:
      label: How to reproduce
      description: Explain with clear steps how to reproduce the issue
    validations:
      required: true
  - type: textarea
    attributes:
      label: Expected behavior
      description: Explain what should have happened instead of what actually happened
    validations:
      required: true

================
File: .github/ISSUE_TEMPLATE/2_bug_provider.yml
================
name: Bug report (Provider)
description: Create a provider-specific report
labels: [triage, bug, providers]
body:
  - type: markdown
    attributes:
      value: |
        **NOTE:** Issues that are potentially security related should be reported to us by following the [Security guidelines](https://next-auth.js.org/security) rather than on GitHub.
        Thanks for taking the time to fill out this [Provider](https://next-auth.js.org/providers/overview) related issue!
        Is this your first time contributing? Check out this video: https://www.youtube.com/watch?v=cuoNzXFLitc
        ### Important :exclamation:
        _Providing incorrect/insufficient information or skipping steps to reproduce the issue *will* result in closing the issue or converting to a discussion without further explanation._
        If you have a generic question specific to your project, it is best asked in Discussions under the [Questions category](https://github.com/nextauthjs/next-auth/discussions/new?category=Questions)
  - type: dropdown
    attributes:
      label: Provider type
      description: Provider(s) this issue is related to
      multiple: true
      options:
        - "Credentials"
        - "Email"
        - "Custom provider"
        - "42 School"
        - "Apple"
        - "Asgardeo"
        - "Atlassian"
        - "Auth0"
        - "Authentik"
        - "Azure Active Directory"
        - "Azure Active Directory B2C"
        - "Azure DevOps"
        - "Battlenet"
        - "Beyond Identity"
        - "Bitbucket"
        - "Box"
        - "Bungie"
        - "ClickUp"
        - "Cognito"
        - "Concept2"
        - "Coinbase"
        - "Descope"
        - "Discord"
        - "Dribbble"
        - "Dropbox"
        - "Eventbrite"
        - "EVE Online"
        - "Facebook"
        - "FACEIT"
        - "Figma"
        - "Foursquare"
        - "Freshbooks"
        - "FusionAuth"
        - "GitHub"
        - "GitLab"
        - "Google"
        - "Hugging Face"
        - "Identity Server 4"
        - "Instagram"
        - "Kakao"
        - "Frontegg"
        - "Keycloak"
        - "Kinde"
        - "Line"
        - "LinkedIn"
        - "Logto"
        - "Loops"
        - "Mailchimp"
        - "Mail.ru"
        - "Mastodon"
        - "Medium"
        - "Naver"
        - "Netlify"
        - "NetSuite"
        - "Nextcloud"
        - "Notion"
        - "Okta"
        - "OneLogin"
        - "Osso"
        - "Osu"
        - "Patreon"
        - "Ping Identity"
        - "Pipedrive"
        - "Reddit"
        - "Roblox"
        - "Salesforce"
        - "SimpleLogin"
        - "Slack"
        - "Spotify"
        - "Strava"
        - "Threads"
        - "Tiktok"
        - "Todoist"
        - "Trakt"
        - "Twitch"
        - "Twitter"
        - "Vk"
        - "Webex"
        - "Wordpress"
        - "WorkOS"
        - "Yandex"
        - "Zoho"
        - "Zoom"
    validations:
      required: true
  - type: textarea
    attributes:
      label: Environment
      description: |
        Run this command in your project's root folder and paste the result:
        `npx envinfo --system --binaries --browsers --npmPackages "{next,react,next-auth,@auth/*}"`
        Alternatively, you can manually gather the version information from your package.json for these packages: "next", "react" and "next-auth". Please also mention your OS and Node.js version, as well as the browser you are using.
      value: |
        ```
        Paste here
        ```
    validations:
      required: true
  - type: input
    attributes:
      label: Reproduction URL
      description: A URL to a public github.com repository outside the next-auth org that clearly reproduces your issue. You can use our [`next-auth-example`](https://github.com/nextauthjs/next-auth-example) template repository to get started more easily
    validations:
      required: true
  - type: textarea
    attributes:
      label: Describe the issue
      description: Describe us what the issue is and what have you tried so far to fix it. Add any extra useful information in this section. Feel free to use screenshots (but prefer [code blocks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#syntax-highlighting) over a picture of your code) or a video explanation.
    validations:
      required: true
  - type: textarea
    attributes:
      label: How to reproduce
      description: Explain with clear steps how to reproduce the issue
    validations:
      required: true
  - type: textarea
    attributes:
      label: Expected behavior
      description: Explain what should have happened instead of what actually happened
    validations:
      required: true

================
File: .github/ISSUE_TEMPLATE/3_bug_adapter.yml
================
name: Bug report (Adapter)
description: Create an adapter-specific report
labels: [triage, bug, adapters]
body:
  - type: markdown
    attributes:
      value: |
        **NOTE:** Issues that are potentially security related should be reported to us by following the [Security guidelines](https://next-auth.js.org/security) rather than on GitHub.
        Thanks for taking the time to fill out this [Adapter](https://next-auth.js.org/getting-started/adapters) related issue!
        Is this your first time contributing? Check out this video: https://www.youtube.com/watch?v=cuoNzXFLitc
        ### Important :exclamation:
        _Providing incorrect/insufficient information or skipping steps to reproduce the issue *will* result in closing the issue or converting to a discussion without further explanation._
        If you have a generic question specific to your project, it is best asked in Discussions under the [Questions category](https://github.com/nextauthjs/next-auth/discussions/new?category=Questions)
  - type: dropdown
    attributes:
      label: Adapter type
      description: Adapter(s) this issue is related to
      multiple: true
      options:
        - "Custom adapter"
        - "@auth/azure-tables-adapter"
        - "@auth/edgedb-adapter"
        - "@auth/d1-adapter"
        - "@auth/dgraph-adapter"
        - "@auth/drizzle-adapter"
        - "@auth/dynamodb-adapter"
        - "@auth/fauna-adapter"
        - "@auth/firebase-adapter"
        - "@auth/hasura-adapter"
        - "@auth/kysely-adapter"
        - "@auth/mikro-orm-adapter"
        - "@auth/mongodb-adapter"
        - "@auth/neo4j-adapter"
        - "@auth/pg-adapter"
        - "@auth/pouchdb-adapter"
        - "@auth/prisma-adapter"
        - "@auth/sequelize-adapter"
        - "@auth/supabase-adapter"
        - "@auth/surrealdb-adapter"
        - "@auth/typeorm-adapter"
        - "@auth/unstorage-adapter"
        - "@auth/upstash-redis-adapter"
        - "@auth/xata-adapter"
    validations:
      required: true
  - type: textarea
    attributes:
      label: Environment
      description: |
        Run this command in your project's root folder and paste the result:
        `npx envinfo --system --binaries --browsers --npmPackages "{next,react,next-auth,@auth/*}"`
        Alternatively, you can manually gather the version information from your package.json for these packages: "next", "react" and "next-auth". Please also mention your OS and Node.js version, as well as the browser you are using.
      value: |
        ```
        Paste here
        ```
    validations:
      required: true
  - type: input
    attributes:
      label: Reproduction URL
      description: A URL to a public github.com repository outside the next-auth org that clearly reproduces your issue. You can use our [`next-auth-example`](https://github.com/nextauthjs/next-auth-example) template repository to get started more easily
    validations:
      required: true
  - type: textarea
    attributes:
      label: Describe the issue
      description: Describe us what the issue is and what have you tried so far to fix it. Add any extra useful information in this section. Feel free to use screenshots (but prefer [code blocks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#syntax-highlighting) over a picture of your code) or a video explanation.
    validations:
      required: true
  - type: textarea
    attributes:
      label: How to reproduce
      description: Explain with clear steps how to reproduce the issue
    validations:
      required: true
  - type: textarea
    attributes:
      label: Expected behavior
      description: Explain what should have happened instead of what actually happened
    validations:
      required: true

================
File: .github/ISSUE_TEMPLATE/4_documentation.yml
================
name: "Documentation"
description: Request to update or improve NextAuth.js documentation
labels: ["triage", "documentation"]
body:
  - type: textarea
    attributes:
      label: What is the improvement or update you wish to see?
      description: "Example: The `next-auth` docs are missing information about X."
    validations:
      required: true
  - type: textarea
    attributes:
      label: Is there any context that might help us understand?
      description: A clear description of any added context that might help us understand.
    validations:
      required: true
  - type: input
    attributes:
      label: Does the docs page already exist? Please link to it.
      description: "Example: https://next-auth.js.org/getting-started/introduction"
    validations:
      required: false

================
File: .github/ISSUE_TEMPLATE/config.yml
================
blank_issues_enabled: false
contact_links:
  - name: Get help from the community (Discord)
    url: https://discord.authjs.dev
    about: Ask questions and discuss with other community members
  - name: Ask a question
    url: https://github.com/nextauthjs/next-auth/discussions/new?category=questions
    about: Ask questions and discuss with other community members
  - name: Feature request
    url: https://github.com/nextauthjs/next-auth/discussions/new?category=ideas
    about: Feature requests should be opened as discussions

================
File: .github/version-pr/action.yml
================
name: "Determine version"
description: "Determines npm package version based on PR number and commit SHA"
outputs:
  version:
    description: "npm package version"
runs:
  using: "node20"
  main: "index.js"

================
File: .github/version-pr/index.js
================
const packageJSONPath = path.join(
process.cwd(),
⋮----
const packageJSON = JSON.parse(fs.readFileSync(packageJSONPath, "utf8"))
const sha8 = process.env.GITHUB_SHA.substring(0, 8)
⋮----
core.setOutput("version", packageVersion)
fs.writeFileSync(packageJSONPath, JSON.stringify(packageJSON))
⋮----
core.setFailed(error.message)

================
File: .github/workflows/broken-link-checker.yml
================
name: "Broken Link Checker"
on:
  issue_comment:
    types: [edited]
permissions:
  pull-requests: write
  checks: write
jobs:
  broken-link-checker:
    runs-on: ubuntu-latest
    if: github.actor == 'vercel[bot]'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: corepack enable
      - uses: aaimio/vercel-preview-url-action@v2.2.0
        id: vercel_preview_url
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          preview_url_regexp: https.*\/(.*-authjs.vercel.app)
      - name: Install dependencies
        run: cd ./.github/broken-link-checker && pnpm install --ignore-workspace && pnpm build
      - name: Run link checker
        uses: ./.github/broken-link-checker
        id: broken-links
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERCEL_PREVIEW_URL: https://${{ steps.vercel_preview_url.outputs.vercel_preview_url }}

================
File: .github/workflows/codeql-analysis.yml
================
name: Code Analysis
on:
  push:
    branches: [beta, next]
  pull_request:
    branches: [main]
  schedule:
    - cron: "43 17 * * 2"
jobs:
  analyze:
    name: Verify
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

================
File: .github/workflows/pr-labeler.yml
================
# https://github.com/actions/labeler#create-workflow
name: Label Pull Requests
on:
  pull_request_target:
jobs:
  prs:
    name: Triage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: ".github/pr-labeler.yml"

================
File: .github/workflows/release.yml
================
name: Release
on:
  push:
    branches:
      - main
      - beta
      - next
      - 3.x
  pull_request:
  # TODO: Support latest releases
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: Package name (npm)
        options:
          - "next-auth"
          - "@auth/core"
          - "@auth/express"
          - "@auth/nuxt"
          - "@auth/qwik"
          - "@auth/solid-start"
          - "@auth/sveltekit"
          - "@auth/azure-tables-adapter"
          - "@auth/d1-adapter"
          - "@auth/dgraph-adapter"
          - "@auth/drizzle-adapter"
          - "@auth/dynamodb-adapter"
          - "@auth/edgedb-adapter"
          - "@auth/fauna-adapter"
          - "@auth/firebase-adapter"
          - "@auth/hasura-adapter"
          - "@auth/kysely-adapter"
          - "@auth/mikro-orm-adapter"
          - "@auth/mongodb-adapter"
          - "@auth/neo4j-adapter"
          - "@auth/pg-adapter"
          - "@auth/pouchdb-adapter"
          - "@auth/prisma-adapter"
          - "@auth/sequelize-adapter"
          - "@auth/supabase-adapter"
          - "@auth/surrealdb-adapter"
          - "@auth/test-adapter"
          - "@auth/typeorm-adapter"
          - "@auth/typeorm-legacy-adapter"
          - "@auth/unstorage-adapter"
          - "@auth/upstash-redis-adapter"
          - "@auth/xata-adapter"
permissions:
  id-token: write
env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  FORCE_COLOR: true
  NPM_CONFIG_PROVENANCE: true
jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - name: Init
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Peek
        run: pnpm peek
        if: ${{ github.repository == 'nextauthjs/next-auth' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      - name: Get base commit SHA from main
        id: get_base_sha
        run: echo "BASE_SHA=$(git merge-base origin/main HEAD)" >> $GITHUB_ENV
      - name: Check for changes under /packages
        id: check-packages
        run: |
          if git diff --name-only ${{ env.BASE_SHA }}...HEAD | grep '^packages/'; then
            echo "PACKAGES_CHANGES=true" >> $GITHUB_ENV
          else
            echo "PACKAGES_CHANGES=false" >> $GITHUB_ENV
          fi
      - name: Build
        if: ${{ env.PACKAGES_CHANGES == 'true' || github.ref == 'refs/heads/main' }}
        run: pnpm build
      - name: Check formatting
        run: pnpm format
        timeout-minutes: 15
      - name: Run unit tests
        if: ${{ env.PACKAGES_CHANGES == 'true' || github.ref == 'refs/heads/main' }}
        run: pnpm test
      - name: Install Playwright
        if: github.repository == 'nextauthjs/next-auth'
        run: pnpm exec playwright install --with-deps chromium
      - name: Run E2E tests (Nextjs-Docker)
        continue-on-error: true
        if: false
        timeout-minutes: 15
        run: cd apps/examples/nextjs-docker && pnpm test:docker
      - name: Run E2E tests
        continue-on-error: true # TODO: Make this less flakey
        if: ${{ env.PACKAGES_CHANGES == 'true' || github.ref == 'refs/heads/main' }}
        timeout-minutes: 15
        env:
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          TEST_KEYCLOAK_USERNAME: ${{ secrets.TEST_KEYCLOAK_USERNAME }}
          TEST_KEYCLOAK_PASSWORD: ${{ secrets.TEST_KEYCLOAK_PASSWORD }}
          AUTH_KEYCLOAK_ID: ${{ secrets.AUTH_KEYCLOAK_ID }}
          AUTH_KEYCLOAK_SECRET: ${{ secrets.AUTH_KEYCLOAK_SECRET }}
          AUTH_KEYCLOAK_ISSUER: ${{ secrets.AUTH_KEYCLOAK_ISSUER }}
          AUTH_TRUST_HOST: 1
          DEBUG: "pw:webserver"
        run: pnpm test:e2e
      - uses: actions/upload-artifact@v4
        name: Upload Playwright artifacts
        with:
          name: playwright-traces
          path: "**/packages/next-auth/test-results/*/trace.zip"
          retention-days: 7
      - uses: codecov/codecov-action@v4
        if: always()
        name: Coverage
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  release-branch:
    name: Publish branch
    timeout-minutes: 120
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' }}
    environment: Production
    steps:
      - name: Init
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Please upvote https://github.com/orgs/community/discussions/13836
          token: ${{ secrets.GH_PAT }}
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Publish to npm and GitHub
        run: pnpm release
        env:
          # Please upvote https://github.com/orgs/community/discussions/13836
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  release-pr:
    name: Publish PR
    timeout-minutes: 120
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'pull_request' }}
    environment: Preview
    steps:
      - name: Init
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Determine version
        uses: ./.github/version-pr
        id: determine-version
        env:
          PR_NUMBER: ${{ github.event.number }}
      - name: Publish to npm
        run: |
          cd packages/core
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          pnpm publish --no-git-checks --access public --tag experimental
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Comment version on PR
        uses: NejcZdovc/comment-pr@v2
        with:
          message:
            "🎉 Experimental release [published 📦️ on npm](https://npmjs.com/package/@auth/core/v/${{ env.VERSION }})!\n \
            ```sh\npnpm add @auth/core@${{ env.VERSION }}\n```\n \
            ```sh\nyarn add @auth/core@${{ env.VERSION }}\n```\n \
            ```sh\nnpm i @auth/core@${{ env.VERSION }}\n```"
        env:
          VERSION: ${{ steps.determine-version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  release-manual:
    name: Publish manually
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Init
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Map package name to path
        run: |
          case "${{ github.event.inputs.name }}" in
            *"-adapter")
              adapter_name=$(echo "${{ github.event.inputs.name }}" | sed 's/@auth\///' | sed 's/-adapter//')
              echo "PACKAGE_PATH=adapter-${adapter_name}" >> $GITHUB_ENV
              ;;
            "next-auth")
              echo "PACKAGE_PATH=next-auth" >> $GITHUB_ENV
              ;;
            "@auth/core")
              echo "PACKAGE_PATH=core" >> $GITHUB_ENV
              ;;
            *)
              framework_name=$(echo "${{ github.event.inputs.name }}" | sed 's/@auth\///')
              echo "PACKAGE_PATH=frameworks-${framework_name}" >> $GITHUB_ENV
              ;;
          esac
      - name: Determine version
        uses: ./.github/version-pr
        id: determine-version
        env:
          PACKAGE_PATH: ${{ env.PACKAGE_PATH }}
      - name: Publish to npm
        run: |
          pnpm build
          cd packages/$PACKAGE_PATH
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          pnpm publish --no-git-checks --access public --tag experimental
          echo "🎉 Experimental release published 📦️ on npm: https://npmjs.com/package/${{ github.event.inputs.name }}/v/${{ env.VERSION }}"
          echo "Install via: pnpm add ${{ github.event.inputs.name }}@${{ env.VERSION }}"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          PACKAGE_PATH: ${{ env.PACKAGE_PATH }}
          VERSION: ${{ steps.determine-version.outputs.version }}

================
File: .github/workflows/sync-examples.yml
================
name: Sync Example Repositories
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Run GitHub File Sync
        uses: balazsorban44/repo-file-sync-action@master
        with:
          GH_PAT: ${{ secrets.GH_PAT }}
          IS_FINE_GRAINED: true
          SKIP_PR: true
          ORIGINAL_MESSAGE: true

================
File: .github/workflows/triage.yml
================
name: Triage issue
on:
  issues:
    types: [labeled, opened]
  issue_comment:
    types: [created]
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  issues: write
jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Nissuer
        uses: balazsorban44/nissuer@1.9.2
        with:
          label-area-prefix: ""
          label-area-section: "[Provider|Adapter] type(.*)### Environment"
          label-comments: '{ "incomplete": ".github/invalid-reproduction.md", "good first issue": ".github/good-first-issue.md", "help needed": ".github/help-needed.md" }'
          reproduction-link-section: "### Reproduction URL(.*)### Describe the issue"
          reproduction-invalid-label: "invalid reproduction"
          reproduction-issue-labels: "bug,"
          reproduction-blocklist: "github.com/nextauthjs.*"

================
File: .github/CODEOWNERS
================
# Learn how to add code owners here:
# https://help.github.com/en/articles/about-code-owners

*                     @balazsorban44
.github               @ThangHuuVu @ndom91
/apps/                @ubbe-xyz @ndom91 @ThangHuuVu
/docs/                @ubbe-xyz @ndom91
/packages/            @ThangHuuVu
/packages/adapter-*/  @ndom91
/**/*test*            @ubbe-xyz
/**/*type*            @ubbe-xyz

================
File: .github/dependabot.yml
================
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates
version: 2
updates:
  - package-ecosystem: "npm" # See documentation for possible values
    directory: "/" # Location of package manifests
    schedule:
      interval: "weekly"
    versioning-strategy: "increase"
    allow:
      - dependency-name: "oauth4webapi"
      - dependency-name: "jose"

================
File: .github/FUNDING.yml
================
# https://docs.github.com/en/github/administering-a-repository/displaying-a-sponsor-button-in-your-repository
open_collective: nextauth
github: [balazsorban44, ThangHuuVu]

================
File: .github/good-first-issue.md
================
This issue was marked with the `good first issue` label by a maintainer.

This means that it is a good candidate for someone interested in contributing to the project, but does not know where to start.

Have a look at the [Contributing Guide](https://github.com/nextauthjs/.github/blob/main/CONTRIBUTING.md) first.

This will help you set up your development environment to get started. When you are ready, open a PR, and link back to this issue in the form of adding `Fixes #1234` to the PR description, where `1234` is the issue number. This will auto-close the issue when the PR gets merged, making it easier for us to keep track of what has been fixed.

Please make sure that - if applicable - you add tests for the changes you make.

If you have any questions, feel free to ask in the comments below or the PR. Generally, you don't need to `@mention` anyone directly, as we will get notified anyway and will respond as soon as we can)

> [!NOTE]  
> There is no need to ask for permission "can I work on this?" Please, go ahead if there is no linked PR :slightly_smiling_face:

================
File: .github/help-needed.md
================
This issue was marked with the `help needed` label by a maintainer.

The issue might require some digging, so it is recommended to have some experience with the project.

Have a look at the [Contributing Guide](https://github.com/nextauthjs/.github/blob/main/CONTRIBUTING.md) first.

This will help you set up your development environment to get started. When you are ready, open a PR, and link back to this issue in the form of adding `Fixes #1234` to the PR description, where `1234` is the issue number. This will auto-close the issue when the PR gets merged, making it easier for us to keep track of what has been fixed.

Please make sure that - if applicable - you add tests for the changes you make.

If you have any questions, feel free to ask in the comments below or the PR. Generally, you don't need to `@mention` anyone directly, as we will get notified anyway and will respond as soon as we can)

> [!NOTE]  
> There is no need to ask for permission "can I work on this?" Please, go ahead if there is no linked PR :slightly_smiling_face:

================
File: .github/invalid-reproduction.md
================
We could not detect a valid reproduction link. **Make sure to follow the bug report template carefully.**

### Why was this issue closed?

To be able to investigate, we need access to a reproduction to identify what triggered the issue. We need a link to a **public** GitHub repository. Example: ([NextAuth.js example repository](https://github.com/nextauthjs/next-auth-example)).

The bug template that you filled out has a section called "Reproduction URL", which is where you should provide the link to the reproduction.

- If you did not provide a link or the link you provided is not hosted on github.com outside of the next-auth organization, we will close the issue.
- If you provide a link to a private repository, we will close the issue.
- If you provide a link to a repository but not in the correct section, we will close the issue.

### What should I do?

Depending on the reason the issue was closed, you can do the following:

- If you did not provide a link hosted on github.com outside of the next-auth organization, please open a new issue with a link to such a reproduction.
- If you provided a link to a private repository, please open a new issue with a link to a public repository.
- If you provided a link to a repository but not in the correct section, please open a new issue with a link to a reproduction in the correct section.

**In general, assume that we should not go through a lengthy onboarding process at your company code only to be able to verify an issue.**

### My repository is private and cannot make it public

In most cases, a private repo will not be a sufficient **minimal reproduction**, as this codebase might contain a lot of unrelated parts that would make our investigation take longer. Please do **not** make it public. Instead, create a new repository using the templates above, adding the relevant code to reproduce the issue. Common things to look out for:

- Remove any code that is not related to the issue. (pages, API Routes, components, etc.)
- Remove any dependencies that are not related to the issue.
- Remove any third-party service that would require us to sign up for an account to reproduce the issue.
- Remove any environment variables that are not related to the issue.
- Remove private packages that we do not have access to.
- If the issue is not related to a monorepo specifically, try to reproduce the issue without a complex monorepo setup

### I did not open this issue, but it is relevant to me, what can I do to help?

Anyone experiencing the same issue is welcome to provide a minimal reproduction following the above steps by opening a new issue.

### I think my reproduction is good enough, why aren't you looking into it quickly?

We look into every issue and monitor open issues for new comments.

However, sometimes we might miss a few due to the popularity/high traffic of the repository. We apologize, and kindly ask you to refrain from tagging core maintainers, as that will usually not result in increased priority.

Upvoting issues to show your interest will help us prioritize and address them as quickly as possible. That said, every issue is important to us, and if an issue gets closed by accident, we encourage you to open a new one linking to the old issue and we will look into it.

### Useful Resources

- [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve)
- [Bug report: Framework](https://github.com/nextauthjs/next-auth/issues/new?assignees=&labels=triage&projects=&template=1_bug_framework.yml)
- [Bug report: Provider](https://github.com/nextauthjs/next-auth/issues/new?assignees=&labels=triage%2Cproviders&projects=&template=2_bug_provider.yml)
- [Bug report: Adapter](https://github.com/nextauthjs/next-auth/issues/new?assignees=&labels=triage%2Cadapters&projects=&template=3_bug_adapter.yml)

================
File: .github/pr-labeler.yml
================
# https://github.com/actions/labeler#create-githublabeleryml
adapters: ["packages/core/src/adapters.ts", "packages/adapter-*/**/*"]
core: ["packages/core/src/**/*"]
azure-tables: ["packages/adapter-azure-tables/**/*"]
edgedb: ["packages/adapter-edgedb/**/*"]
d1: ["packages/adapter-d1/**/*"]
dgraph: ["packages/adapter-dgraph/**/*"]
drizzle: ["packages/adapter-drizzle/**/*"]
documentation: ["packages/docs/docs/**/*"]
dynamodb: ["packages/adapter-dynamodb/**/*"]
examples: ["apps/examples/**/*"]
express: ["packages/frameworks-express/**/*"]
fauna: ["packages/adapter-fauna/**/*"]
firebase: ["packages/adapter-firebase/**/*"]
hasura: ["packages/adapter-hasura/**/*"]
frameworks: ["packages/frameworks-*/**/*"]
mikro-orm: ["packages/adapter-mikro-orm/**/*"]
mongodb: ["packages/adapter-mongodb/**/*"]
neo4j: ["packages/adapter-neo4j/**/*"]
next-auth: ["packages/next-auth/**/*"]
pg: ["packages/adapter-pg/**/*"]
neon: ["packages/adapter-neon/**/*"]
playgrounds: ["apps/playgrounds/**/*"]
pouchdb: ["packages/adapter-pouchdb/**/*"]
prisma: ["packages/adapter-prisma/**/*"]
kysely: ["packages/adapter-kysely/**/*"]
providers: ["packages/core/src/providers/**/*"]
sequelize: ["packages/adapter-sequelize/**/*"]
solidjs: ["packages/frameworks-solid-start/**/*"]
supabase: ["packages/adapter-supabase/**/*"]
surrealdb: ["packages/adapter-surrealdb/**/*"]
svelte: ["packages/frameworks-sveltekit/**/*"]
test: ["**test**/*"]
typeorm: ["packages/adapter-typeorm/**/*"]
unstorage: ["packages/adapter-unstorage/**/*"]
upstash-redis: ["packages/adapter-upstash-redis/**/*"]
xata: ["packages/adapter-xata/**/*"]

================
File: .github/PULL_REQUEST_TEMPLATE.md
================
<!--
Thanks for your interest in the project. Bugs filed and PRs submitted are appreciated!

Please fill out the information below to expedite the review and (hopefully)
merge of your pull request!

**NOTE**:

- It's a good idea to open an issue first to discuss potential changes.
- Please make sure that you are _NOT_ opening a PR to fix a potential security vulnerability. Instead, please follow the [Security guidelines](https://github.com/nextauthjs/.github/blob/main/SECURITY.md) to disclose the issue to us confidentially.

-->

## ☕️ Reasoning

<!-- What changes are being made? What feature/bug is being fixed here? -->

## 🧢 Checklist

- [ ] Documentation
- [ ] Tests
- [ ] Ready to be merged

## 🎫 Affected issues

<!--
Please [scout and link issues](https://github.com/nextauthjs/next-auth/issues) that might be solved by this PR. And include text like the following to close them automatically when this is merged:

Fixes: INSERT_ISSUE_LINK_HERE
-->

## 📌 Resources

- [Security guidelines](https://github.com/nextauthjs/.github/blob/main/SECURITY.md)
- [Contributing guidelines](https://github.com/nextauthjs/.github/blob/main/CONTRIBUTING.md)
- [Code of conduct](https://github.com/nextauthjs/.github/blob/main/CODE_OF_CONDUCT.md)
- [Contributing to Open Source](https://kcd.im/pull-request)

================
File: .github/stale.yml
================
# https://github.com/probot/stale#usage
daysUntilStale: 60
daysUntilClose: 7
exemptLabels:
  - pinned
  - security
  - priority
  - bug
  - triage
  - accepted
staleLabel: stale
only: issues
markComment: >
  It looks like this issue did not receive any activity for 60 days.
  It will be closed in 7 days if no further activity occurs. If you think your issue
  is still relevant, commenting will keep it open. Thanks!
closeComment: >
  To keep things tidy, we are closing this issue for now.
  If you think your issue is still relevant, leave a comment
  and we might reopen it. Thanks!

================
File: .github/sync.yml
================
nextauthjs/express-auth-example:
  - source: apps/examples/express
    dest: .
    deleteOrphaned: true
  - .github/FUNDING.yml
  - LICENSE
nextauthjs/sveltekit-auth-example:
  - source: apps/examples/sveltekit
    dest: .
    deleteOrphaned: true
  - .github/FUNDING.yml
  - LICENSE
nextauthjs/solid-start-auth-example:
  - source: "apps/examples/solid-start"
    dest: .
    deleteOrphaned: true
  - .github/FUNDING.yml
  - LICENSE
nextauthjs/next-auth-example:
  - source: apps/examples/nextjs
    dest: .
    deleteOrphaned: true
  - .github/FUNDING.yml
  - LICENSE
nextauthjs/next-auth-pages-example:
  - source: apps/examples/nextjs-pages
    dest: .
    deleteOrphaned: true
  - .github/FUNDING.yml
  - LICENSE
nextauthjs/qwik-auth-example:
  - source: apps/examples/qwik
    dest: .
    deleteOrphaned: true
  - .github/FUNDING.yml
  - LICENSE

================
File: apps/dev/express/api/index.js
================


================
File: apps/dev/express/public/css/style.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: apps/dev/express/src/config/auth.config.ts
================
import Apple from "@auth/express/providers/apple"
import Auth0 from "@auth/express/providers/auth0"
import AzureB2C from "@auth/express/providers/azure-ad-b2c"
import BoxyHQSAML from "@auth/express/providers/boxyhq-saml"
import Cognito from "@auth/express/providers/cognito"
import Coinbase from "@auth/express/providers/coinbase"
import Discord from "@auth/express/providers/discord"
import Dropbox from "@auth/express/providers/dropbox"
import Facebook from "@auth/express/providers/facebook"
import GitHub from "@auth/express/providers/github"
import Gitlab from "@auth/express/providers/gitlab"
import Google from "@auth/express/providers/google"
import Hubspot from "@auth/express/providers/hubspot"
import Keycloak from "@auth/express/providers/keycloak"
import LinkedIn from "@auth/express/providers/linkedin"
import Netlify from "@auth/express/providers/netlify"
import Okta from "@auth/express/providers/okta"
import Passage from "@auth/express/providers/passage"
import Pinterest from "@auth/express/providers/pinterest"
import Reddit from "@auth/express/providers/reddit"
import Slack from "@auth/express/providers/slack"
import Spotify from "@auth/express/providers/spotify"
import Twitch from "@auth/express/providers/twitch"
import Twitter from "@auth/express/providers/twitter"
import WorkOS from "@auth/express/providers/workos"
import Zoom from "@auth/express/providers/zoom"

================
File: apps/dev/express/src/middleware/auth.middleware.ts
================
import { getSession } from "@auth/express"
import { authConfig } from "../config/auth.config.js"
import type { NextFunction, Request, Response } from "express"
export async function authenticatedUser(
  req: Request,
  res: Response,
  next: NextFunction
)
export async function currentSession(
  req: Request,
  res: Response,
  next: NextFunction
)

================
File: apps/dev/express/src/middleware/error.middleware.ts
================
import type { NextFunction, Request, Response } from "express"
import { HttpError, NotFoundError } from "../errors.js"
export const errorHandler = (
  err: HttpError | Error,
  _req: Request,
  res: Response,
  _next: NextFunction
): void =>
⋮----
// Render the error page
⋮----
export const errorNotFoundHandler = (
  _req: Request,
  _res: Response,
  next: NextFunction
): void =>

================
File: apps/dev/express/src/app.ts
================
import express, { type Request, type Response } from "express"
import logger from "morgan"
import { join } from "node:path"
import {
  errorHandler,
  errorNotFoundHandler,
} from "./middleware/error.middleware.js"
import {
  authenticatedUser,
  currentSession,
} from "./middleware/auth.middleware.js"
import { ExpressAuth } from "@auth/express"
import { authConfig } from "./config/auth.config.js"
⋮----
// @ts-expect-error (https://stackoverflow.com/questions/45342307/error-cannot-find-module-pug)
⋮----
// Trust Proxy for Proxies (Heroku, Render.com, Docker behind Nginx, etc)
// https://stackoverflow.com/questions/40459511/in-express-js-req-protocol-is-not-picking-up-https-for-my-secure-link-it-alwa
⋮----
// Serve static files
// NB: Uncomment this out if you want Express to serve static files for you vs. using a
// hosting provider which does so for you (for example through a CDN).
// app.use(express.static(join(import.meta.dirname, "..", "public")))
// Parse incoming requests data
⋮----
// Set session in res.locals
⋮----
// Set up ExpressAuth to handle authentication
// IMPORTANT: It is highly encouraged set up rate limiting on this route
⋮----
// Routes
⋮----
// Error handlers

================
File: apps/dev/express/src/errors.ts
================
export class HttpError extends Error
⋮----
constructor(status: number, message: string)
⋮----
export class NotFoundError extends HttpError
⋮----
constructor(message: string, status = 404)

================
File: apps/dev/express/src/server.ts
================
import { app } from "./app.js"

================
File: apps/dev/express/views/error.pug
================
extends layout

block content
  h1=title
  p=message

================
File: apps/dev/express/views/index.pug
================
extends layout

block content
  h1=title
  p
    | This is an example site to demonstrate how to use #{ ' ' }
    a(href="https://expressjs.com/") Express
    | #{ ' ' } with #{ ' ' }
    a(href="https://authjs.dev/reference/express") Express Auth
    |
    | for authentication.

================
File: apps/dev/express/views/layout.pug
================
doctype html
html
  head
    title=title
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
  body
    div
      div
        if session
          div
            if session.user.image
              img(src=`${session.user.image}` style="width:64px;border-radius:50%;")
            span
              | Signed in as #{ ' ' }
              strong= session.user.email || session.user.name
          a(
            href="/api/auth/signout"
          ) Sign out
        else
          span You are not signed in #{ ' ' }
          a#sign-indiv(
            href="/api/auth/signin"
          ) Sign in

      nav
        ul
          li
            a(href="/") Home
          li
            a(href="/protected") Protected
          li
            a(href="/api/protected") Protected (API)

      block content

================
File: apps/dev/express/views/protected.pug
================
extends layout

block content
  if session
    h1 Protected page
    p
      | This is a protected content. You can access this content because you are
      | signed in.
    p Session expiry: #{ session.expires ? session.expires : '' }
  else
    h1 Access Denied
    p
      | You must be #{ ' ' }
      a(href="/api/auth/signin") signed in
      | #{ ' ' } to view this page

================
File: apps/dev/express/.env.example
================
AUTH_SECRET=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

AUTH_GOOGLE_ID=
AUTH_GOOGLE_SECRET=

================
File: apps/dev/express/.gitignore
================
# API keys and secrets
.env

# Dependency directory
node_modules

# Editors
.idea
*.iml
.vscode/settings.json

# OS metadata
.DS_Store
Thumbs.db

# Ignore built ts files
dist/**/*

# Ignore built css files
/public/css/output.css

================
File: apps/dev/express/.prettierignore
================
.DS_Store
node_modules
/dist
/.turbo
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: apps/dev/express/package.json
================
{
  "name": "express-auth-app",
  "description": "Express + Auth.js Developer app",
  "type": "module",
  "private": true,
  "scripts": {
    "start": "node --env-file=.env dist/server.js",
    "clean": "rm -rf dist",
    "build": "pnpm build:ts && pnpm build:css",
    "build:ts": "tsc",
    "build:css": "tailwindcss -i ./public/css/style.css -o ./public/css/output.css",
    "dev": "tsx watch --env-file=.env src/server.ts & pnpm build:css -w",
    "lint": "eslint src/*.ts --fix",
    "prettier": "prettier src/*.ts --write"
  },
  "author": "Auth.js Team (https://authjs.dev/contributors)",
  "license": "MIT",
  "dependencies": {
    "@auth/express": "workspace:*",
    "express": "^4.20.0",
    "morgan": "^1.10.0",
    "pug": "^3.0.2"
  },
  "devDependencies": {
    "@prettier/plugin-pug": "^3.0.0",
    "@types/express": "^4.17.21",
    "@types/morgan": "^1.9.9",
    "@types/pug": "^2.0.10",
    "tsx": "^4.7.3",
    "typescript": "5.4.5"
  }
}

================
File: apps/dev/express/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/examples/express). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center">Auth.js Example App with <a href="https://expressjs.com">Express</a></h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/@auth/express">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/express?color=green&label=@auth/express&style=flat-square">
      </a>
      <a href="https://bundlephobia.com/result?p=@auth/express">
        <img src="https://img.shields.io/bundlephobia/minzip/@auth/express?label=size&style=flat-square" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/@auth/express">
        <img src="https://img.shields.io/npm/dm/@auth/express?label=%20downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
   </p>
</p>

# Documentation

- [express.authjs.dev](https://express.authjs.dev)

================
File: apps/dev/express/tsconfig.json
================
{
  "compilerOptions": {
    "module": "NodeNext",
    "esModuleInterop": true,
    "target": "esnext",
    "noImplicitAny": true,
    "moduleResolution": "NodeNext",
    "sourceMap": true,
    "outDir": "dist",
    "baseUrl": ".",
    "skipLibCheck": true,
    "strict": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: apps/dev/nextjs/.vscode/settings.json
================
{
  "typescript.tsdk": "../../../node_modules/.pnpm/typescript@4.9.4/node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true
}

================
File: apps/dev/nextjs/app/api/protected/route.ts
================
import { auth } from "auth"
import { NextResponse } from "next/server"

================
File: apps/dev/nextjs/app/auth/[...nextauth]/route.ts
================
import { handlers } from "auth"
⋮----
// export const runtime = "edge"

================
File: apps/dev/nextjs/app/dashboard/page.tsx
================
export default function Page()

================
File: apps/dev/nextjs/app/client.tsx
================
import { signIn, signOut, useSession } from "next-auth/react"
import { useRouter } from "next/navigation"
⋮----
onClick=

================
File: apps/dev/nextjs/app/layout.tsx
================
import { auth, signIn, signOut, unstable_update as update } from "auth"
import Footer from "components/footer"
import { Header } from "components/header"
import styles from "components/header.module.css"
⋮----
import { AuthError } from "next-auth"
export default function RootLayout(props:
⋮----
if (error instanceof AuthError)
⋮----
action=

================
File: apps/dev/nextjs/app/page.tsx
================
import { auth, unstable_update as update } from "auth"
import { SessionProvider } from "next-auth/react"
import Client from "./client"
import { revalidatePath } from "next/cache"
import { redirect } from "next/navigation"
⋮----
action=
⋮----
// revalidatePath("/")
⋮----
{/* 
       NOTE: The `auth()` result is not run through the `session` callback, be careful passing down data
       to a client component, this will be exposed via the /api/auth/session endpoint
      */}

================
File: apps/dev/nextjs/app/styles.css
================
body {
li,
a {
hr {
iframe {
h1,
main {
.container {
.card {
⋮----
.card-header {
.card-body {
⋮----
&:has(button) {
⋮----
.card-footer {
pre {
.btn-wrapper {
button {
button:hover {

================
File: apps/dev/nextjs/components/access-denied.tsx
================
import { signIn } from "next-auth/react"
export default function AccessDenied()

================
File: apps/dev/nextjs/components/footer.module.css
================
.footer {
.navItems {
.navItemsLeft {
.navItem {
.navItem a {
.navItem svg {
.footerLogo {

================
File: apps/dev/nextjs/components/footer.tsx
================
import Link from "next/link"
import styles from "./footer.module.css"
import packageJSON from "next-auth/package.json"

================
File: apps/dev/nextjs/components/header.module.css
================
/* Set min-height to avoid page reflow while session loading */
.signedInStatus {
.loading,
.loading {
.signedInText,
.signedInText {
.avatar {
.button,
.buttonPrimary {
.buttonPrimary:hover {
.navItems {
.navItem {
.navItem:hover {
.header {
.passwordInput {

================
File: apps/dev/nextjs/components/header.tsx
================
import type { Session } from "next-auth"
import Link from "next/link"
import styles from "./header.module.css"
⋮----
`https://api.dicebear.com/9.x/thumbs/svg?seed=${Math.floor(Math.random() * 100000) + 1}&randomizeIds=true`

================
File: apps/dev/nextjs/pages/api/examples/protected.ts
================
import type { NextApiHandler } from "next"
import { auth } from "../../../auth"
export default async function handler(...args: Parameters<NextApiHandler>)
⋮----
// Do something with the session

================
File: apps/dev/nextjs/pages/api/examples/session.ts
================
// This is an example of how to access a session from an API route
import { auth } from "auth"

================
File: apps/dev/nextjs/pages/_app.tsx
================
import { SessionProvider, signIn, signOut, useSession } from "next-auth/react"
⋮----
import { Header } from "components/header"
import styles from "components/header.module.css"
import Footer from "components/footer"
export default function App(

================
File: apps/dev/nextjs/pages/client.tsx
================


================
File: apps/dev/nextjs/pages/credentials.tsx
================
import { signIn, signOut, useSession } from "next-auth/react"
import { SignInResponse, SignOutResponse } from "next-auth/react"

================
File: apps/dev/nextjs/pages/email.tsx
================
// eslint-disable-next-line no-use-before-define
⋮----
import { signIn, signOut, useSession } from "next-auth/react"
⋮----
const handleChange = (event) =>
const handleLogin = (options) => async (event) =>
const handleLogout = (options) => async (event) =>
⋮----
<button onClick=
⋮----
<form onSubmit=

================
File: apps/dev/nextjs/pages/policy.tsx
================


================
File: apps/dev/nextjs/pages/protected-ssr.tsx
================
// This is an example of how to protect content using server rendering
import { auth } from "../auth"
import AccessDenied from "components/access-denied"
import { GetServerSideProps } from "next"
export default function Page(
⋮----
// If no session exists, display access denied message
⋮----
// If session exists, display content
⋮----
export const getServerSideProps: GetServerSideProps = async (context) =>
⋮----
// Note usually you don't need to fetch from an API route in getServerSideProps
// This is done here to demonstrate how you can fetch from a third-party API
// with a valid session. Likely you would also not pass cookies but an `Authorization` header

================
File: apps/dev/nextjs/pages/protected.tsx
================
import { useState, useEffect } from "react"
import { useSession } from "next-auth/react"
export default function Page()
⋮----
// Fetch content from protected route
⋮----
const fetchData = async () =>
⋮----
// If session exists, display content

================
File: apps/dev/nextjs/pages/styles.css
================
body {
li,
a {
hr {
iframe {

================
File: apps/dev/nextjs/prisma/migrations/20231023165117_/migration.sql
================
-- CreateTable
CREATE TABLE "Account" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,
    CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);
-- CreateTable
CREATE TABLE "Session" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" DATETIME NOT NULL,
    CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "name" TEXT,
    "email" TEXT,
    "emailVerified" DATETIME,
    "image" TEXT
);
-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" DATETIME NOT NULL
);
-- CreateIndex
CREATE UNIQUE INDEX "Account_provider_providerAccountId_key" ON "Account"("provider", "providerAccountId");
-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");
-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_token_key" ON "VerificationToken"("token");
-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_identifier_token_key" ON "VerificationToken"("identifier", "token");

================
File: apps/dev/nextjs/prisma/migrations/20240124035029_init/migration.sql
================
-- CreateTable
CREATE TABLE "Account" (
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,
    PRIMARY KEY ("provider", "providerAccountId"),
    CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);
-- CreateTable
CREATE TABLE "Session" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" DATETIME NOT NULL,
    CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "name" TEXT,
    "email" TEXT,
    "emailVerified" DATETIME,
    "image" TEXT
);
-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" DATETIME NOT NULL
);
-- CreateTable
CREATE TABLE "Authenticator" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "credentialID" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "credentialPublicKey" TEXT NOT NULL,
    "counter" INTEGER NOT NULL,
    "credentialDeviceType" TEXT NOT NULL,
    "credentialBackedUp" BOOLEAN NOT NULL,
    "transports" TEXT,
    CONSTRAINT "Authenticator_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);
-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");
-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_token_key" ON "VerificationToken"("token");
-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_identifier_token_key" ON "VerificationToken"("identifier", "token");
-- CreateIndex
CREATE UNIQUE INDEX "Authenticator_credentialID_key" ON "Authenticator"("credentialID");

================
File: apps/dev/nextjs/prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "sqlite"

================
File: apps/dev/nextjs/prisma/schema.prisma
================
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

================
File: apps/dev/nextjs/tests/signin.spec.ts
================
import { test, expect } from "@playwright/test"
⋮----
// Go to NextAuth example app
⋮----
// Click 'Sign In'
⋮----
// Auth0 Login Provider
⋮----
// Enter Credentials (Username/Password Login) on Auth0 Widget
⋮----
// Snap a screenshot
// await page.screenshot({ path: "1-auth0-login.png", fullPage: true })
// Press submit on Auth0 form
⋮----
// Wait for next-auth example page login status header to appear
⋮----
// Snap a screenshot
// await page.screenshot({
//   path: "2-next-auth-redirect-result.png",
//   fullPage: false,
// })
// Check session object after successful login
⋮----
// TODO: Check whole object with .toEqual()

================
File: apps/dev/nextjs/.env.local.example
================
# Rename file to .env.local (or .env) and populate values
# to be able to run the dev app

# You can use `openssl rand -hex 32` or 
# https://generate-secret.vercel.app/32 to generate a secret.
# Note: Changing a secret may invalidate existing sessions
# and/or verification tokens.
AUTH_SECRET=secret

AUTH_ASGARDEO_CLIENT_ID=
AUTH_ASGARDEO_CLIENT_SECRET=
AUTH_ASGARDEO_ISSUER=

AUTH_AUTH0_ID=
AUTH_AUTH0_SECRET=
AUTH_AUTH0_ISSUER=

AUTH_ORY_HYDRA_CLIENT_ID=
AUTH_ORY_HYDRA_CLIENT_SECRET=
AUTH_ORY_HYDRA_ISSUER=

# Beyond Identity Provider
AUTH_BEYOND_IDENTITY_CLIENT_ID=
AUTH_BEYOND_IDENTITY_CLIENT_SECRET=
AUTH_BEYOND_IDENTITY_ISSUER=

AUTH_DESCOPE_ID=
AUTH_DESCOPE_SECRET=
AUTH_DESCOPE_ISSUER=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

AUTH_NOTION_ID=
AUTH_NOTION_SECRET=
AUTH_NOTION_REDIRECT_URI=

AUTH_IDS4_ID=
AUTH_IDS4_SECRET=
AUTH_IDS4_ISSUER=

AUTH_KEYCLOAK_ID=
AUTH_KEYCLOAK_SECRET=
AUTH_KEYCLOAK_ISSUER=

AUTH_LINE_ID=
AUTH_LINE_SECRET=

AUTH_TRAKT_ID=
AUTH_TRAKT_SECRET=

AUTH_TWITCH_ID=
AUTH_TWITCH_SECRET=

AUTH_TWITTER_ID=
AUTH_TWITTER_SECRET=

AUTH_WIKIMEDIA_ID=
AUTH_WIKIMEDIA_SECRET=

AUTH_FRONTEGG_ID=
AUTH_FRONTEGG_SECRET=
AUTH_FRONTEGG_ISSUER=

# Yandex OAuth. new app -> https://oauth.yandex.com/client/new/id
AUTH_YANDEX_ID=
AUTH_YANDEX_SECRET=

# ClickUp OAuth. https://clickup.com/api/
AUTH_CLICK_UP_ID=
AUTH_CLICK_UP_SECRET=

# Example configuration for a Gmail account (will need SMTP enabled)
EMAIL_SERVER=smtps://user@gmail.com:password@smtp.gmail.com:465
EMAIL_FROM=user@gmail.com

# Note: If using with Prisma adapter, you need to use a `.env`
# file rather than a `.env.local` file to configure env vars.
# Postgres: DATABASE_URL=postgres://nextauth:password@127.0.0.1:5432/nextauth?synchronize=true
# MySQL:    DATABASE_URL=mysql://nextauth:password@127.0.0.1:3306/nextauth?synchronize=true
# MongoDB:  DATABASE_URL=mongodb://nextauth:password@127.0.0.1:27017/nextauth?synchronize=true
DATABASE_URL=

# Supabase Example Configuration
# Supabase Example Configuration
# NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
# SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.vI9obAHOGyVVKa3pD--kJlyxp-Z2zV9UUMAhKpNLAcU
# SUPABASE_JWT_SECRET=super-secret-jwt-token-with-at-least-32-characters-long
# NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24ifQ.625_WdcF3KHqz5amU0x2X5WWHP-OEs_4qj0ssLNHzTs

================
File: apps/dev/nextjs/.gitignore
================
node_modules/
/test-results/
/playwright-report/
/playwright/.cache/
dbschema/edgeql-js

================
File: apps/dev/nextjs/auth.ts
================
import NextAuth from "next-auth"
import Credentials from "next-auth/providers/credentials"
import Keycloak from "next-auth/providers/keycloak"
import GitHub from "next-auth/providers/github"
// import { PrismaClient } from "@prisma/client"
// import { PrismaAdapter } from "@auth/prisma-adapter"
// import SendGrid from "next-auth/providers/sendgrid"
// import Resend from "next-auth/providers/resend"
// import Email from "next-auth/providers/email"
// globalThis.prisma ??= new PrismaClient()
// authConfig.providers.push(
//   // Start server with `pnpm email`
//   Email({ server: "smtp://127.0.0.1:1025?tls.rejectUnauthorized=false" }),
//   SendGrid,
//   Resend
// )
// export const { handlers, auth, signIn, signOut, unstable_update } = NextAuth(
//   (request) => {
//     if (request?.nextUrl.searchParams.get("test")) {
//       return {
//         // adapter: PrismaAdapter(globalThis.prisma),
//         session: { strategy: "jwt" },
//         ...authConfig,
//         providers: [],
//       }
//     }
//     return {
//       // adapter: PrismaAdapter(globalThis.prisma),
//       session: { strategy: "jwt" },
//       ...authConfig,
//     }
//   }
// )
⋮----
/**
   * Returned by `useSession`, `getSession`, `auth` and received as a prop on the `SessionProvider` React Context
   */
interface Session {
    user: {
      /** The user's postal address. */
      address: string
    } & User
  }
⋮----
/** The user's postal address. */
⋮----
interface User {
    foo?: string
  }
⋮----
authorize(c)
⋮----
jwt(

================
File: apps/dev/nextjs/middleware.ts
================
// Or like this if you need to do something here.
// export default auth((req) => {
//   console.log(req.auth) //  { session: { user: { ... } } }
// })
// Read more: https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher

================
File: apps/dev/nextjs/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />
// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: apps/dev/nextjs/next.config.js
================
/** @type {import("next").NextConfig} */
⋮----
webpack(config) {

================
File: apps/dev/nextjs/package.json
================
{
  "name": "next-auth-app",
  "version": "1.0.1",
  "description": "Next.js + Auth.js Developer App",
  "private": true,
  "scripts": {
    "clean": "rm -rf .next",
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "license": "ISC",
  "dependencies": {
    "next": "15.3.1",
    "next-auth": "workspace:*",
    "react": "19.0.0-rc-4c58fce7-20240904",
    "react-dom": "19.0.0-rc-4c58fce7-20240904"
  },
  "devDependencies": {
    "@types/react": "^18.2.23",
    "@types/react-dom": "^18.2.8"
  }
}

================
File: apps/dev/nextjs/README.md
================
# NextAuth.js Development App

This folder contains a Next.js app using NextAuth.js for local development. See the following section on how to start:

[Setting up local environment
](https://github.com/nextauthjs/.github/blob/main/CONTRIBUTING.md#setting-up-local-environment)

================
File: apps/dev/nextjs/tsconfig.json
================
{
  "compilerOptions": {
    "target": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "incremental": true,
    "jsx": "preserve",
    "baseUrl": ".",
    "plugins": [
      {
        "name": "next"
      }
    ],
    "strictNullChecks": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: apps/dev/qwik/public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 500 500"><g clip-path="url(#a)"><circle cx="250" cy="250" r="250" fill="#fff"/><path fill="#18B6F6" d="m367.87 418.45-61.17-61.18-.94.13v-.67L175.7 227.53l32.05-31.13L188.9 87.73 99.56 199.09c-15.22 15.42-18.03 40.51-7.08 59.03l55.83 93.11a46.82 46.82 0 0 0 40.73 22.81l27.65-.27 151.18 44.68Z"/><path fill="#AC7EF4" d="m401.25 196.94-12.29-22.81-6.41-11.67-2.54-4.56-.26.26-33.66-58.63a47.07 47.07 0 0 0-41.27-23.75l-29.51.8-88.01.28a47.07 47.07 0 0 0-40.33 23.34L93.4 207l95.76-119.54L314.7 226.19l-22.3 22.67 13.35 108.54.13-.26v.26h-.26l.26.27 10.42 10.2 50.62 49.78c2.13 2 5.6-.4 4.13-2.96l-31.25-61.85 54.5-101.3 1.73-2c.67-.81 1.33-1.62 1.87-2.42a46.8 46.8 0 0 0 3.34-50.18Z"/><path fill="#fff" d="M315.1 225.65 189.18 87.6l17.9 108.14L175 227l130.5 130.27-11.75-108.14 21.37-23.48Z"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h500v500H0z"/></clipPath></defs></svg>

================
File: apps/dev/qwik/public/manifest.json
================
{
  "$schema": "https://json.schemastore.org/web-manifest-combined.json",
  "name": "qwik-project-name",
  "short_name": "Welcome to Qwik",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#fff",
  "description": "A Qwik project app."
}

================
File: apps/dev/qwik/src/components/router-head/router-head.tsx
================
import { component$ } from "@builder.io/qwik"
import { useDocumentHead, useLocation } from "@builder.io/qwik-city"
/**
 * The RouterHead component is placed inside of the document `<head>` element.
 */

================
File: apps/dev/qwik/src/routes/index.tsx
================
import { component$ } from "@builder.io/qwik"
import { Form, type RequestHandler } from "@builder.io/qwik-city"
import { useSession, useSignIn, useSignOut } from "./plugin@auth"
export const onRequest: RequestHandler = (event) =>
⋮----
Session:

================
File: apps/dev/qwik/src/routes/layout.tsx
================
import { component$, Slot } from "@builder.io/qwik"
import type { RequestHandler } from "@builder.io/qwik-city"
export const onGet: RequestHandler = async (
⋮----
// Control caching for this request for best performance and to reduce hosting costs:
// https://qwik.dev/docs/caching/
⋮----
// Always serve a cached response by default, up to a week stale
⋮----
// Max once every 5 seconds, revalidate on the server to get a fresh version of this page

================
File: apps/dev/qwik/src/routes/plugin@auth.ts
================
import { DefaultSession, QwikAuth$ } from "@auth/qwik"
import GitHub from "@auth/qwik/providers/github"
⋮----
interface Session {
    user: {
      roles: string[]
    } & DefaultSession["user"]
  }

================
File: apps/dev/qwik/src/routes/service-worker.ts
================
/*
 * WHAT IS THIS FILE?
 *
 * The service-worker.ts file is used to have state of the art prefetching.
 * https://qwik.dev/qwikcity/prefetching/overview/
 *
 * Qwik uses a service worker to speed up your site and reduce latency, ie, not used in the traditional way of offline.
 * You can also use this file to add more functionality that runs in the service worker.
 */
import { setupServiceWorker } from "@builder.io/qwik-city/service-worker"

================
File: apps/dev/qwik/src/entry.dev.tsx
================
/*
 * WHAT IS THIS FILE?
 *
 * Development entry point using only client-side modules:
 * - Do not use this mode in production!
 * - No SSR
 * - No portion of the application is pre-rendered on the server.
 * - All of the application is running eagerly in the browser.
 * - More code is transferred to the browser than in SSR mode.
 * - Optimizer/Serialization/Deserialization code is not exercised!
 */
import { render, type RenderOptions } from "@builder.io/qwik"
import Root from "./root"

================
File: apps/dev/qwik/src/entry.preview.tsx
================
/*
 * WHAT IS THIS FILE?
 *
 * It's the bundle entry point for `npm run preview`.
 * That is, serving your app built in production mode.
 *
 * Feel free to modify this file, but don't remove it!
 *
 * Learn more about Vite's preview command:
 * - https://vitejs.dev/config/preview-options.html#preview-options
 *
 */
import { createQwikCity } from "@builder.io/qwik-city/middleware/node"
import qwikCityPlan from "@qwik-city-plan"
// make sure qwikCityPlan is imported before entry
import render from "./entry.ssr"
/**
 * The default export is the QwikCity adapter used by Vite preview.
 */

================
File: apps/dev/qwik/src/entry.ssr.tsx
================
/**
 * WHAT IS THIS FILE?
 *
 * SSR entry point, in all cases the application is rendered outside the browser, this
 * entry point will be the common one.
 *
 * - Server (express, cloudflare...)
 * - npm run start
 * - npm run preview
 * - npm run build
 *
 */
import {
  renderToStream,
  type RenderToStreamOptions,
} from "@builder.io/qwik/server"
import { manifest } from "@qwik-client-manifest"
import Root from "./root"
⋮----
// Use container attributes to set attributes on the html tag.

================
File: apps/dev/qwik/src/root.tsx
================
import { component$ } from "@builder.io/qwik"
import {
  QwikCityProvider,
  RouterOutlet,
  ServiceWorkerRegister,
} from "@builder.io/qwik-city"
import { RouterHead } from "./components/router-head/router-head"
⋮----
/**
   * The root of a QwikCity site always start with the <QwikCityProvider> component,
   * immediately followed by the document's <head> and <body>.
   *
   * Don't remove the `<head>` and `<body>` elements.
   */

================
File: apps/dev/qwik/.env.example
================
AUTH_SECRET=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

================
File: apps/dev/qwik/.gitignore
================
# Build
/dist
/lib
/lib-types
/server

# Development
node_modules
*.local

# Cache
.cache
.mf
.rollup.cache
tsconfig.tsbuildinfo

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Editor
.vscode/*
!.vscode/launch.json
!.vscode/*.code-snippets

.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Yarn
.yarn/*
!.yarn/releases

================
File: apps/dev/qwik/package.json
================
{
  "name": "qwik-auth-app",
  "description": "Qwik + Auth.js Developer app",
  "engines": {
    "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  },
  "engines-annotation": "Mostly required by sharp which needs a Node-API v9 compatible runtime",
  "private": true,
  "trustedDependencies": [
    "sharp"
  ],
  "trustedDependencies-annotation": "Needed for bun to allow running install scripts",
  "type": "module",
  "scripts": {
    "build": "qwik build",
    "build.client": "vite build",
    "build.preview": "vite build --ssr src/entry.preview.tsx",
    "build.types": "tsc --incremental --noEmit",
    "deploy": "echo 'Run \"npm run qwik add\" to install a server adapter'",
    "dev": "vite --mode ssr",
    "dev.debug": "node --inspect-brk ./node_modules/vite/bin/vite.js --mode ssr --force",
    "fmt": "prettier --write .",
    "fmt.check": "prettier --check .",
    "preview": "qwik build preview && vite preview --open",
    "start": "vite --open --mode ssr",
    "qwik": "qwik"
  },
  "devDependencies": {
    "@auth/qwik": "workspace:*",
    "@builder.io/qwik": "^1.5.5",
    "@builder.io/qwik-city": "^1.5.5",
    "@types/eslint": "^8.56.10",
    "@types/node": "^20.12.7",
    "@typescript-eslint/eslint-plugin": "^7.7.1",
    "@typescript-eslint/parser": "^7.7.1",
    "eslint": "^8.57.0",
    "eslint-plugin-qwik": "^1.5.5",
    "prettier": "^3.2.5",
    "typescript": "5.4.5",
    "undici": "*",
    "vite": "^5.2.10",
    "vite-tsconfig-paths": "^4.2.1"
  }
}

================
File: apps/dev/qwik/qwik.env.d.ts
================
// This file can be used to add references for global types like `vite/client`.
// Add global `vite/client` types. For more info, see: https://vitejs.dev/guide/features#client-types
/// <reference types="vite/client" />

================
File: apps/dev/qwik/README.md
================
# Qwik City App ⚡️

- [Qwik Docs](https://qwik.dev/)
- [Discord](https://qwik.dev/chat)
- [Qwik GitHub](https://github.com/QwikDev/qwik)
- [@QwikDev](https://twitter.com/QwikDev)
- [Vite](https://vitejs.dev/)

---

## Project Structure

This project is using Qwik with [QwikCity](https://qwik.dev/qwikcity/overview/). QwikCity is just an extra set of tools on top of Qwik to make it easier to build a full site, including directory-based routing, layouts, and more.

Inside your project, you'll see the following directory structure:

```
├── public/
│   └── ...
└── src/
    ├── components/
    │   └── ...
    └── routes/
        └── ...
```

- `src/routes`: Provides the directory-based routing, which can include a hierarchy of `layout.tsx` layout files, and an `index.tsx` file as the page. Additionally, `index.ts` files are endpoints. Please see the [routing docs](https://qwik.dev/qwikcity/routing/overview/) for more info.

- `src/components`: Recommended directory for components.

- `public`: Any static assets, like images, can be placed in the public directory. Please see the [Vite public directory](https://vitejs.dev/guide/assets.html#the-public-directory) for more info.

## Add Integrations and deployment

Use the `pnpm qwik add` command to add additional integrations. Some examples of integrations includes: Cloudflare, Netlify or Express Server, and the [Static Site Generator (SSG)](https://qwik.dev/qwikcity/guides/static-site-generation/).

```shell
pnpm qwik add # or `pnpm qwik add`
```

## Development

Development mode uses [Vite's development server](https://vitejs.dev/). The `dev` command will server-side render (SSR) the output during development.

```shell
npm start # or `pnpm start`
```

> Note: during dev mode, Vite may request a significant number of `.js` files. This does not represent a Qwik production build.

## Preview

The preview command will create a production build of the client modules, a production build of `src/entry.preview.tsx`, and run a local server. The preview server is only for convenience to preview a production build locally and should not be used as a production server.

```shell
pnpm preview # or `pnpm preview`
```

## Production

The production build will generate client and server modules by running both client and server build commands. The build command will use TypeScript to run a type check on the source code.

```shell
pnpm build # or `pnpm build`
```

================
File: apps/dev/qwik/tsconfig.json
================
{
  "compilerOptions": {
    "allowJs": true,
    "target": "ES2017",
    "module": "ES2022",
    "lib": ["es2022", "DOM", "WebWorker", "DOM.Iterable"],
    "jsx": "react-jsx",
    "jsxImportSource": "@builder.io/qwik",
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "moduleResolution": "Bundler",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "incremental": true,
    "isolatedModules": true,
    "outDir": "tmp",
    "noEmit": true,
    "paths": {
      "~/*": ["./src/*"]
    }
  },
  "include": ["src", "./*.d.ts", "./*.config.ts"]
}

================
File: apps/dev/qwik/vite.config.ts
================
/**
 * This is the base config for vite.
 * When building, the adapter config is used which loads this file and extends it.
 */
import { qwikCity } from "@builder.io/qwik-city/vite"
import { qwikVite } from "@builder.io/qwik/optimizer"
import { defineConfig, type UserConfig } from "vite"
import tsconfigPaths from "vite-tsconfig-paths"
import pkg from "./package.json"
type PkgDep = Record<string, string>
⋮----
/**
 * Note that Vite normally starts from `index.html` but the qwikCity plugin makes start at `src/entry.ssr.tsx` instead.
 */
⋮----
// This tells Vite which dependencies to pre-build in dev mode.
⋮----
// Put problematic deps that break bundling here, mostly those with binaries.
// For example ['better-sqlite3'] if you use that in server functions.
⋮----
/**
     * This is an advanced setting. It improves the bundling of your server code. To use it, make sure you understand when your consumed packages are dependencies or dev depencies. (otherwise things will break in production)
     */
// ssr:
//   command === "build" && mode === "production"
//     ? {
//         // All dev dependencies should be bundled in the server build
//         noExternal: Object.keys(devDependencies),
//         // Anything marked as a dependency will not be bundled
//         // These should only be production binary deps (including deps of deps), CLI deps, and their module graph
//         // If a dep-of-dep needs to be external, add it here
//         // For example, if something uses `bcrypt` but you don't have it as a dep, you can write
//         // external: [...Object.keys(dependencies), 'bcrypt']
//         external: Object.keys(dependencies),
//       }
//     : undefined,
⋮----
// Don't cache the server response in dev mode
⋮----
// Do cache the server response in preview (non-adapter production build)
⋮----
// *** utils ***
/**
 * Function to identify duplicate dependencies and throw an error
 * @param {Object} devDependencies - List of development dependencies
 * @param {Object} dependencies - List of production dependencies
 */
function errorOnDuplicatesPkgDeps(
  devDependencies: PkgDep,
  dependencies: PkgDep
)
⋮----
// Create an array 'duplicateDeps' by filtering devDependencies.
// If a dependency also exists in dependencies, it is considered a duplicate.
⋮----
// include any known qwik packages
⋮----
// any errors for missing "qwik-city-plan"
// [PLUGIN_ERROR]: Invalid module "@qwik-city-plan" is not a valid package
⋮----
// Format the error message with the duplicates list.
// The `join` function is used to represent the elements of the 'duplicateDeps' array as a comma-separated string.
⋮----
// Throw an error with the constructed message.

================
File: apps/dev/sveltekit/src/components/header.svelte
================
<script lang="ts">
  import { page } from "$app/stores"
  import { SignIn, SignOut } from "@auth/sveltekit/components"
</script>
<header>
  <nav class="nojs-show loaded">
    <div class="nav-left">
      <img
        alt="Avatar"
        src={$page.data.session?.user?.image ??
          `https://api.dicebear.com/9.x/thumbs/svg?seed=${Math.floor(Math.random() * 100000) + 1}&randomizeIds=true`}
        class="avatar"
      />
    </div>
    <div class="nav-right">
      {#if $page.data.session}
        <span class="header-text">
          <small>Signed in as</small><br />
          <strong>
            {$page.data.session.user?.email ?? $page.data.session.user?.name}
          </strong>
        </span>
        <SignOut>
          <div class="buttonPrimary" slot="submitButton">Sign out</div>
        </SignOut>
      {:else}
        <span class="header-text">You are not signed in</span>
        <SignIn>
          <div class="buttonPrimary" slot="submitButton">Sign in</div>
        </SignIn>
      {/if}
    </div>
  </nav>
  <div class="links">
    <a class="linkItem" href="/">Home</a>
    <a class="linkItem" href="/protected">Protected</a>
  </div>
</header>

================
File: apps/dev/sveltekit/src/routes/protected/+page.svelte
================
<script lang="ts">
  import { page } from "$app/stores"
</script>
{#if $page.data.session}
  <h1>Protected page</h1>
  <p>
    This is a protected content. You can access this content because you are
    signed in.
  </p>
  <p>Session expiry: {$page.data.session?.expires}</p>
{:else}
  <h1>Access Denied</h1>
{/if}

================
File: apps/dev/sveltekit/src/routes/signin/+page.server.ts
================
import { signIn } from "$/auth"
import type { Actions } from "./$types"

================
File: apps/dev/sveltekit/src/routes/signout/+page.server.ts
================
import { signOut } from "$/auth"
import type { Actions } from "./$types"

================
File: apps/dev/sveltekit/src/routes/+layout.server.ts
================
import type { LayoutServerLoad } from "./$types"
export const load: LayoutServerLoad = async (event) =>

================
File: apps/dev/sveltekit/src/routes/+layout.svelte
================
<script lang="ts">
  import Header from "$components/header.svelte"
  import "../style.css"
</script>
<Header />
<slot />

================
File: apps/dev/sveltekit/src/routes/+page.svelte
================
<script lang="ts">
  import { page } from "$app/stores"
  import { SignIn } from "@auth/sveltekit/components"
  import { signIn } from "@auth/sveltekit/client"
  let password = ""
</script>
<h1>SvelteKit Auth Example</h1>
<div class="container">
  <p>
    This is an example site to demonstrate how to use
    <a href="https://kit.svelte.dev/">SvelteKit</a>
    with <a href="https://sveltekit.authjs.dev">SvelteKit Auth</a> for authentication.
  </p>
  <div class="session-code">
    <div class="session-code-header">
      <h3>Session</h3>
    </div>
    <div class="session-code-body">
      <pre>
{JSON.stringify($page.data.session, null, 2)}
      </pre>
    </div>
  </div>
  <div class="login-cards">
    <div class="card">
      <div class="card-header">
        <h3>Server</h3>
      </div>
      <div class="card-body">
        <p>
          These actions are all using the components exported from
          <code>@auth/sveltekit/components</code> to run via form actions.
        </p>
        <div class="actions">
          <SignIn provider="github">
            <span slot="submitButton">
              <img
                src="https://authjs.dev/img/providers/github.svg"
                alt="GitHub Logo"
                width="20"
                height="20"
              />
              GitHub
            </span>
          </SignIn>
          <SignIn provider="discord">
            <span slot="submitButton">
              <img
                src="https://authjs.dev/img/providers/discord.svg"
                alt="Discord Logo"
                width="20"
                height="20"
              />
              Discord
            </span>
          </SignIn>
          <div class="or-split">or</div>
          <SignIn provider="credentials">
            <span slot="submitButton">Sign In with Credentials</span>
            <div slot="credentials" style="width: 100%;">
              <div class="wrapper-form" style="width: 100%;">
                <div class="input-wrapper">
                  <label for="server-password">Password</label>
                  <input
                    type="password"
                    id="server-password"
                    name="password"
                    placeholder="password"
                    required
                  />
                </div>
              </div>
            </div>
          </SignIn>
        </div>
      </div>
    </div>
    <div class="card">
      <div class="card-header">
        <h3>Client</h3>
      </div>
      <div class="card-body">
        <p>
          These actions are all using the methods exported from
          <code>@auth/sveltekit/client</code>
        </p>
        <div class="actions">
          <div class="wrapper-form social-btn">
            <button on:click={() => signIn("github")}>
              <img
                src="https://authjs.dev/img/providers/github.svg"
                alt="GitHub Logo"
                width="20"
                height="20"
              />
              GitHub
            </button>
          </div>
          <div class="wrapper-form social-btn">
            <button on:click={() => signIn("discord")}>
              <img
                src="https://authjs.dev/img/providers/discord.svg"
                alt="Discord Logo"
                width="20"
                height="20"
              />
              Discord
            </button>
          </div>
          <div class="or-split">or</div>
          <div class="wrapper-form">
            <div class="input-wrapper">
              <label for="client-password">Password</label>
              <input
                bind:value={password}
                type="password"
                placeholder="password"
                id="client-password"
                name="password"
                required
              />
            </div>
            <button on:click={() => signIn("credentials", { password })}>
              Sign In with Credentials
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

================
File: apps/dev/sveltekit/src/app.d.ts
================
/// <reference types="@auth/sveltekit" />

================
File: apps/dev/sveltekit/src/app.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%sveltekit.assets%/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    %sveltekit.head%
  </head>
  <body>
    <div>%sveltekit.body%</div>
  </body>
</html>

================
File: apps/dev/sveltekit/src/auth.ts
================
import { SvelteKitAuth } from "@auth/sveltekit"
import GitHub from "@auth/sveltekit/providers/github"
import Credentials from "@auth/sveltekit/providers/credentials"
import Facebook from "@auth/sveltekit/providers/facebook"
import Discord from "@auth/sveltekit/providers/discord"
import Google from "@auth/sveltekit/providers/google"
import Passkey from "@auth/sveltekit/providers/passkey"
import { createStorage } from "unstorage"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
import fsDriver from "unstorage/drivers/fs"
import { dev } from "$app/environment"
⋮----
async authorize(credentials)

================
File: apps/dev/sveltekit/src/hooks.server.ts
================


================
File: apps/dev/sveltekit/src/style.css
================
body {
code {
li,
a {
iframe {
h1,
main {
/* Index Page Cards */
.container {
.session-code {
⋮----
.session-code-header {
.session-code-body {
⋮----
.login-cards {
.card {
⋮----
.card-header {
.card-body {
⋮----
.actions {
⋮----
& > div:last-of-type {
& > form:last-of-type {
⋮----
.or-split {
⋮----
&::before,
⋮----
.wrapper-form,
⋮----
button {
.input-wrapper {
input::placeholder {
⋮----
.signInButton button,
.signInButton button span {
&:has(button) {
⋮----
.card-footer {
pre {
.btn-wrapper {
⋮----
button:hover {
⋮----
label {
input {
⋮----
/* Header */
header {
⋮----
nav {
⋮----
.nav-left {
.nav-right {
⋮----
.links {
⋮----
.linkItem {
.linkItem:hover {
⋮----
.header-text {
.avatar {
.button,
.buttonPrimary {
.buttonPrimary:hover {

================
File: apps/dev/sveltekit/.env.example
================
AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=
# On UNIX systems you can use `openssl rand -hex 32` or 
# https://generate-secret.vercel.app/32 to generate a secret.
AUTH_SECRET=

================
File: apps/dev/sveltekit/.eslintignore
================
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: apps/dev/sveltekit/.eslintrc.cjs
================


================
File: apps/dev/sveltekit/.gitignore
================
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example
.vercel
.output
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
tmp-unstorage

================
File: apps/dev/sveltekit/.prettierignore
================
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: apps/dev/sveltekit/.prettierrc
================
{
  "semi": false,
  "plugins": ["prettier-plugin-svelte"],
  "overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
}

================
File: apps/dev/sveltekit/package.json
================
{
  "name": "sveltekit-auth-app",
  "version": "1.0.0",
  "description": "SvelteKit + Auth.js Developer app",
  "private": true,
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch"
  },
  "devDependencies": {
    "@sveltejs/adapter-auto": "next",
    "@sveltejs/kit": "^2.5.7",
    "@sveltejs/vite-plugin-svelte": "^3.0.0",
    "svelte": "^4",
    "svelte-check": "2.10.2",
    "typescript": "5.2.2"
  },
  "dependencies": {
    "@auth/sveltekit": "workspace:*",
    "@auth/unstorage-adapter": "workspace:*",
    "unstorage": "^1.10.2"
  },
  "type": "module"
}

================
File: apps/dev/sveltekit/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/example-sveltekit). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center">Auth.js Example App with <a href="https://kit.svelte.dev">SvelteKit</a></h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/@auth/sveltekit">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/sveltekit?color=green&label=@auth/sveltekit&style=flat-square">
      </a>
      <a href="https://bundlephobia.com/result?p=sveltekit-auth-example">
        <img src="https://img.shields.io/bundlephobia/minzip/@auth/sveltekit?label=size&style=flat-square" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/@auth/sveltekit">
        <img src="https://img.shields.io/npm/dm/@auth/sveltekit?label=%20downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
   </p>
</p>

# Documentation

- [sveltekit.authjs.dev](https://sveltekit.authjs.dev)

================
File: apps/dev/sveltekit/svelte.config.js
================
/** @type {import('@sveltejs/kit').Config} */
⋮----
// Consult https://kit.svelte.dev/docs/integrations#preprocessors
// for more information about preprocessors
preprocess: vitePreprocess(),
⋮----
adapter: adapter(),

================
File: apps/dev/sveltekit/tsconfig.json
================
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true
  }
  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
}

================
File: apps/dev/sveltekit/vite.config.js
================
export default defineConfig({
⋮----
plugins: [sveltekit()],

================
File: apps/examples/express/api/index.js
================


================
File: apps/examples/express/public/css/style.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: apps/examples/express/src/config/auth.config.ts
================
import Apple from "@auth/express/providers/apple"
import Auth0 from "@auth/express/providers/auth0"
import AzureB2C from "@auth/express/providers/azure-ad-b2c"
import BoxyHQSAML from "@auth/express/providers/boxyhq-saml"
import Cognito from "@auth/express/providers/cognito"
import Coinbase from "@auth/express/providers/coinbase"
import Discord from "@auth/express/providers/discord"
import Dropbox from "@auth/express/providers/dropbox"
import Facebook from "@auth/express/providers/facebook"
import GitHub from "@auth/express/providers/github"
import GitLab from "@auth/express/providers/gitlab"
import Google from "@auth/express/providers/google"
import Hubspot from "@auth/express/providers/hubspot"
import Keycloak from "@auth/express/providers/keycloak"
import LinkedIn from "@auth/express/providers/linkedin"
import Netlify from "@auth/express/providers/netlify"
import Okta from "@auth/express/providers/okta"
import Passage from "@auth/express/providers/passage"
import Pinterest from "@auth/express/providers/pinterest"
import Reddit from "@auth/express/providers/reddit"
import Slack from "@auth/express/providers/slack"
import Spotify from "@auth/express/providers/spotify"
import Twitch from "@auth/express/providers/twitch"
import Twitter from "@auth/express/providers/twitter"
import WorkOS from "@auth/express/providers/workos"
import Zoom from "@auth/express/providers/zoom"

================
File: apps/examples/express/src/middleware/auth.middleware.ts
================
// @ts-nocheck
import { getSession } from "@auth/express"
import { authConfig } from "../config/auth.config.js"
import type { NextFunction, Request, Response } from "express"
export async function authenticatedUser(
  req: Request,
  res: Response,
  next: NextFunction,
)
export async function currentSession(
  req: Request,
  res: Response,
  next: NextFunction,
)

================
File: apps/examples/express/src/middleware/error.middleware.ts
================
// @ts-nocheck
import type { NextFunction, Request, Response } from "express"
import { HttpError, NotFoundError } from "../errors.js"
export const errorHandler = (
  err: HttpError | Error,
  _req: Request,
  res: Response,
  _next: NextFunction,
): void =>
⋮----
// Render the error page
⋮----
export const errorNotFoundHandler = (
  _req: Request,
  _res: Response,
  next: NextFunction,
): void =>

================
File: apps/examples/express/src/app.ts
================
// @ts-nocheck
import express, { type Request, type Response } from "express"
import logger from "morgan"
⋮----
import {
  errorHandler,
  errorNotFoundHandler,
} from "./middleware/error.middleware.js"
import {
  authenticatedUser,
  currentSession,
} from "./middleware/auth.middleware.js"
import { ExpressAuth } from "@auth/express"
import { authConfig } from "./config/auth.config.js"
⋮----
// @ts-expect-error (https://stackoverflow.com/questions/45342307/error-cannot-find-module-pug)
⋮----
// Trust Proxy for Proxies (Heroku, Render.com, Docker behind Nginx, etc)
// https://stackoverflow.com/questions/40459511/in-express-js-req-protocol-is-not-picking-up-https-for-my-secure-link-it-alwa
⋮----
// Serve static files
// NB: Uncomment this out if you want Express to serve static files for you vs. using a
// hosting provider which does so for you (for example through a CDN).
⋮----
// Parse incoming requests data
⋮----
// Set session in res.locals
⋮----
// Set up ExpressAuth to handle authentication
// IMPORTANT: It is highly encouraged set up rate limiting on this route
⋮----
// Routes
⋮----
// Error handlers

================
File: apps/examples/express/src/errors.ts
================
export class HttpError extends Error
⋮----
constructor(status: number, message: string)
⋮----
export class NotFoundError extends HttpError
⋮----
constructor(message: string, status = 404)

================
File: apps/examples/express/src/server.ts
================


================
File: apps/examples/express/types/express/index.d.ts
================
import { type Session } from "@auth/express"
⋮----
interface Response {
    locals: {
      session?: Session
    }
  }

================
File: apps/examples/express/views/error.pug
================
extends layout

block content
  h1(class="text-3xl font-bold")= title
  p= message

================
File: apps/examples/express/views/index.pug
================
extends layout

block content
  h1(class="text-3xl font-bold")= title
  p
    | This is an example site to demonstrate how to use #{ ' ' }
    a(href="https://expressjs.com/", class="mb-2 font-medium underline") Express
    | #{ ' ' } with #{ ' ' }
    a(href="https://authjs.dev/reference/express", class="underline") Express Auth
    |
    | for authentication.

================
File: apps/examples/express/views/layout.pug
================
doctype html
html
  head
    title= title
    link(rel="stylesheet", href="/css/output.css")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
  body(class="flex flex-col items-center")
    div(class="flex w-[90%] max-w-2xl flex-col justify-start gap-2")
      div(
        class="mb-2 flex items-center justify-between gap-2 rounded-b-md bg-gray-100 p-2 pl-4"
      )
        if session
          div(class="flex flex-row items-center gap-2")
            if session.user.image
              img(src=`${session.user.image}`, class="h-8 w-8 rounded-full")
            span
              | Signed in as #{ ' ' }
              strong= session.user.email || session.user.name
          a(
            class="rounded-md bg-blue-600 px-5 py-2.5 font-medium text-white",
            href="/api/auth/signout"
          ) Sign out
        else
          span(class="") You are not signed in
          a#sign-indiv(
            ,
            class="rounded-md bg-blue-600 px-5 py-2.5 font-medium text-white",
            href="/api/auth/signin"
          ) Sign in

      nav(class="mb-4")
        ul(class="flex flex-row gap-4 underline")
          li
            a(href="/") Home
          li
            a(href="/protected") Protected
          li
            a(href="/api/protected") Protected (API)

      block content

================
File: apps/examples/express/views/protected.pug
================
extends layout

block content
  if session
    h1(class="mb-2 text-3xl font-medium") Protected page
    p
      | This is a protected content. You can access this content because you are
      | signed in.
    p Session expiry: #{ session.expires ? session.expires : '' }
  else
    h1(class="mb-2 text-3xl font-medium") Access Denied
    p
      | You must be #{ ' ' }
      a(href="/api/auth/signin", class="underline") signed in
      | #{ ' ' } to view this page

================
File: apps/examples/express/.env.example
================
AUTH_SECRET=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

AUTH_GOOGLE_ID=
AUTH_GOOGLE_SECRET=

================
File: apps/examples/express/.eslintrc.cjs
================


================
File: apps/examples/express/.gitignore
================
# API keys and secrets
.env

# Dependency directory
node_modules

# Editors
.idea
*.iml
.vscode/settings.json

# OS metadata
.DS_Store
Thumbs.db

# Ignore built ts files
dist/**/*

# Ignore built css files
/public/css/output.css

================
File: apps/examples/express/.prettierignore
================
.DS_Store
node_modules
/dist
/.turbo
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: apps/examples/express/.prettierrc
================
{
  "semi": false,
  "plugins": ["@prettier/plugin-pug", "prettier-plugin-tailwindcss"],
  "pugClassNotation": "attribute"
}

================
File: apps/examples/express/package.json
================
{
  "description": "Express Auth example app",
  "engines": {
    "node": ">=20.11.0"
  },
  "type": "module",
  "private": true,
  "scripts": {
    "start": "node dist/server.js",
    "clean": "rm -rf dist",
    "build": "pnpm build:ts && pnpm build:css",
    "build:ts": "tsc",
    "build:css": "tailwindcss -i ./public/css/style.css -o ./public/css/output.css",
    "dev": "tsx watch --env-file=.env src/server.ts & pnpm build:css -w",
    "lint": "eslint src/*.ts --fix",
    "prettier": "prettier src/*.ts --write"
  },
  "author": "Rexford Essilfie <rexfordessilfie09@gmail.com>",
  "license": "ISC",
  "dependencies": {
    "@auth/express": "latest",
    "express": "^4.19.2",
    "morgan": "^1.10.0",
    "pug": "^3.0.2",
    "tailwindcss": "^3.4.3"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/morgan": "^1.9.9",
    "@types/node": "^20.12.7",
    "@types/pug": "^2.0.10",
    "tsx": "^4.7.0",
    "typescript": "5.3.3"
  }
}

================
File: apps/examples/express/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/examples/express). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank">
   <img height="64" src="https://authjs.dev/img/logo-sm.png" />
   </a>
   <a href="https://expressjs.com" target="_blank">
   <img height="64" src="https://i.cloudup.com/zfY6lL7eFa-3000x3000.png" />
   </a>
   <h3 align="center"><b>Express Auth</b> - Example App</h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/@auth/express">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/express?color=green&label=@auth/express&style=flat-square">
      </a>
      <a href="https://bundlephobia.com/result?p=@auth/express">
        <img src="https://img.shields.io/bundlephobia/minzip/@auth/express?label=size&style=flat-square" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/@auth/express">
        <img src="https://img.shields.io/npm/dm/@auth/express?label=downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://npm.im/@auth/express">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
   </p>
</p>

## Overview

This is the official Express Auth example for [Auth.js](https://express.authjs.dev).

## Getting started

You can instantly deploy this example to [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=express-auth-example) by clicking the following button.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https://github.com/nextauthjs/express-auth-example&project-name=express-auth-example&repository-name=express-auth-example)

## Environment Variables

Once deployed, kindly ensure you set all [required environment variables](https://authjs.dev/getting-started/deployment#environment-variables) in the `Environment` section of your hosting service.

## Node.js Compatibility

The recommended version of Node.js to use in this example is Node.js v20.0.0.

If you are using a version of Node.js lower than this (for example the minimum supported node version v18.0.0), you may need to enable Web Crypto API via the `--experimental-webcrypto` flag in the `start` and `dev` scripts of your `package.json` file.

Instead of using the experimental flag, you may use the following polyfill:

```ts
// polyfill.cjs
globalThis.crypto ??= require("crypto").webcrypto
```

And then import it within a top-level file in the application:

```ts
// server.ts
import "./polyfill.cjs"
```

================
File: apps/examples/express/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */

================
File: apps/examples/express/tsconfig.json
================
{
  "compilerOptions": {
    "module": "NodeNext",
    "esModuleInterop": true,
    "target": "esnext",
    "noImplicitAny": true,
    "moduleResolution": "NodeNext",
    "sourceMap": true,
    "outDir": "dist",
    "baseUrl": ".",
    "skipLibCheck": true,
    "strict": true,
    "typeRoots": ["types/", "node_modules/@types"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: apps/examples/express/vercel.json
================
{
  "$schema": "https://openapi.vercel.sh/vercel.json",
  "rewrites": [{ "source": "/(.*)", "destination": "/api" }]
}

================
File: apps/examples/nextjs/app/[...proxy]/route.tsx
================
import { auth } from "@/auth"
import { NextRequest } from "next/server"
// Review if we need this, and why
function stripContentEncoding(result: Response)
async function handler(request: NextRequest)

================
File: apps/examples/nextjs/app/api/protected/route.ts
================
import { auth } from "auth"

================
File: apps/examples/nextjs/app/api-example/page.tsx
================
import CustomLink from "@/components/custom-link"
import { useEffect, useState } from "react"
⋮----
<CustomLink href="https://nextjs.authjs.dev#auth">

================
File: apps/examples/nextjs/app/auth/[...nextauth]/route.ts
================
import { handlers } from "auth"

================
File: apps/examples/nextjs/app/client-example/page.tsx
================
import { auth } from "auth"
import ClientExample from "@/components/client-example"
import { SessionProvider } from "next-auth/react"
export default async function ClientPage()
⋮----
// TODO: Look into https://react.dev/reference/react/experimental_taintObjectReference
// filter out sensitive data before passing to client.

================
File: apps/examples/nextjs/app/middleware-example/page.tsx
================
import CustomLink from "@/components/custom-link"

================
File: apps/examples/nextjs/app/policy/page.tsx
================
export default function PolicyPage()

================
File: apps/examples/nextjs/app/server-example/page.tsx
================
import CustomLink from "@/components/custom-link"
import SessionData from "@/components/session-data"
import { auth } from "auth"

================
File: apps/examples/nextjs/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
⋮----
:root {
⋮----
* {
⋮----
@apply border-border;
⋮----
body {

================
File: apps/examples/nextjs/app/layout.tsx
================
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import Footer from "@/components/footer"
import Header from "@/components/header"
⋮----
export default function RootLayout(

================
File: apps/examples/nextjs/app/page.tsx
================
import CustomLink from "@/components/custom-link"
import { auth } from "auth"

================
File: apps/examples/nextjs/components/ui/avatar.tsx
================
import { cn } from "@/lib/utils"

================
File: apps/examples/nextjs/components/ui/button.tsx
================
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
⋮----
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

================
File: apps/examples/nextjs/components/ui/dropdown-menu.tsx
================
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"
⋮----
className=

================
File: apps/examples/nextjs/components/ui/input.tsx
================
import { cn } from "@/lib/utils"
export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}
⋮----
className=

================
File: apps/examples/nextjs/components/ui/navigation-menu.tsx
================
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"
⋮----
className=

================
File: apps/examples/nextjs/components/auth-components.tsx
================
import { signIn, signOut } from "auth"
import { Button } from "./ui/button"
⋮----
action=

================
File: apps/examples/nextjs/components/client-example.tsx
================
import { useSession } from "next-auth/react"
import { Button } from "./ui/button"
import { Input } from "./ui/input"
import { useState } from "react"
import SessionData from "./session-data"
import CustomLink from "./custom-link"
const UpdateForm = () =>
⋮----
setName(e.target.value)
⋮----
export default function ClientExample()
⋮----
const makeRequestWithToken = async () =>

================
File: apps/examples/nextjs/components/custom-link.tsx
================
import { cn } from "@/lib/utils"
import { ExternalLink } from "lucide-react"
import Link from "next/link"
interface CustomLinkProps extends React.LinkHTMLAttributes<HTMLAnchorElement> {
  href: string
}
const CustomLink = ({
  href,
  children,
  className,
  ...rest
}: CustomLinkProps) =>
⋮----
className=

================
File: apps/examples/nextjs/components/footer.tsx
================
import CustomLink from "./custom-link"
import packageJSON from "next-auth/package.json"
export default function Footer()

================
File: apps/examples/nextjs/components/header.tsx
================
import { MainNav } from "./main-nav"
import UserButton from "./user-button"
export default function Header()

================
File: apps/examples/nextjs/components/main-nav.tsx
================
import Image from "next/image"
import { cn } from "@/lib/utils"
import CustomLink from "./custom-link"
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "./ui/navigation-menu"
import React from "react"
import { Button } from "./ui/button"
export function MainNav()
⋮----
className=

================
File: apps/examples/nextjs/components/session-data.tsx
================
import type { Session } from "next-auth"

================
File: apps/examples/nextjs/components/user-button.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar"
import { Button } from "./ui/button"
import { auth } from "auth"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu"
import { SignIn, SignOut } from "./auth-components"
export default async function UserButton()
⋮----
`https://api.dicebear.com/9.x/thumbs/svg?seed=${Math.floor(Math.random() * 100000) + 1}&randomizeIds=true`

================
File: apps/examples/nextjs/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[])

================
File: apps/examples/nextjs/.env.local.example
================
AUTH_SECRET= # `npx auth secret` or `openssl rand -hex 32`

AUTH_AUTH0_ID=
AUTH_AUTH0_SECRET=
AUTH_AUTH0_ISSUER=

AUTH_FACEBOOK_ID=
AUTH_FACEBOOK_SECRET=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

AUTH_GOOGLE_ID=
AUTH_GOOGLE_SECRET=

AUTH_TWITTER_ID=
AUTH_TWITTER_SECRET=

# THIRD_PARTY_API_EXAMPLE_BACKEND= # Read more at https://authjs.dev/guides/integrating-third-party-backends

# AUTH_TRUST_HOST=1 # Read more at https://authjs.dev/getting-started/deployment#auth_trust_host

================
File: apps/examples/nextjs/.gitignore
================
.DS_Store

node_modules/
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.yarn-integrity
.npm

.eslintcache

*.tsbuildinfo
next-env.d.ts

.next
.vercel
.env*.local

================
File: apps/examples/nextjs/auth.ts
================
import NextAuth from "next-auth"
⋮----
import Apple from "next-auth/providers/apple"
// import Atlassian from "next-auth/providers/atlassian"
import Auth0 from "next-auth/providers/auth0"
import AzureB2C from "next-auth/providers/azure-ad-b2c"
import BankIDNorway from "next-auth/providers/bankid-no"
import BoxyHQSAML from "next-auth/providers/boxyhq-saml"
import Cognito from "next-auth/providers/cognito"
import Coinbase from "next-auth/providers/coinbase"
import Discord from "next-auth/providers/discord"
import Dropbox from "next-auth/providers/dropbox"
import Facebook from "next-auth/providers/facebook"
import GitHub from "next-auth/providers/github"
import GitLab from "next-auth/providers/gitlab"
import Google from "next-auth/providers/google"
import Hubspot from "next-auth/providers/hubspot"
import Keycloak from "next-auth/providers/keycloak"
import LinkedIn from "next-auth/providers/linkedin"
import MicrosoftEntraId from "next-auth/providers/microsoft-entra-id"
import Netlify from "next-auth/providers/netlify"
import Okta from "next-auth/providers/okta"
import Passage from "next-auth/providers/passage"
import Passkey from "next-auth/providers/passkey"
import Pinterest from "next-auth/providers/pinterest"
import Reddit from "next-auth/providers/reddit"
import Slack from "next-auth/providers/slack"
import Salesforce from "next-auth/providers/salesforce"
import Spotify from "next-auth/providers/spotify"
import Twitch from "next-auth/providers/twitch"
import Twitter from "next-auth/providers/twitter"
import Vipps from "next-auth/providers/vipps"
import WorkOS from "next-auth/providers/workos"
import Zoom from "next-auth/providers/zoom"
import { createStorage } from "unstorage"
import memoryDriver from "unstorage/drivers/memory"
import vercelKVDriver from "unstorage/drivers/vercel-kv"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
⋮----
// Atlassian,
⋮----
authorized(
jwt(
async session(
⋮----
interface Session {
    accessToken?: string
  }
⋮----
interface JWT {
    accessToken?: string
  }

================
File: apps/examples/nextjs/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: apps/examples/nextjs/docker-compose.yml
================
services:
  authjs-docker-test:
    build: .
    environment:
      - TEST_KEYCLOAK_USERNAME
      - TEST_KEYCLOAK_PASSWORD
      - AUTH_KEYCLOAK_ID
      - AUTH_KEYCLOAK_SECRET
      - AUTH_KEYCLOAK_ISSUER
      - AUTH_SECRET="MohY0/2zSQw/psWEnejC2ka3Al0oifvY4YjOkUaFfnI="
      - AUTH_URL=http://localhost:3000/auth
    ports:
      - "3000:3000"

================
File: apps/examples/nextjs/Dockerfile
================
# syntax=docker/dockerfile:1
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY package.json pnpm-lock.yaml* ./
RUN corepack enable pnpm && pnpm i --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN corepack enable pnpm && pnpm build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD ["node", "server.js"]

================
File: apps/examples/nextjs/middleware.ts
================
// Or like this if you need to do something here.
// export default auth((req) => {
//   console.log(req.auth) //  { session: { user: { ... } } }
// })
// Read more: https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher

================
File: apps/examples/nextjs/next.config.js
================
/** @type {import("next").NextConfig} */

================
File: apps/examples/nextjs/package.json
================
{
  "private": true,
  "description": "An example project for NextAuth.js with Next.js",
  "repository": "https://github.com/nextauthjs/next-auth-example.git",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "homepage": "https://next-auth-example.vercel.app",
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start"
  },
  "author": "Iain Collins <me@iaincollins.com>",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>",
    "Nico Domino <yo@ndo.dev>",
    "Lluis Agusti <hi@llu.lu>",
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "dependencies": {
    "@auth/unstorage-adapter": "^2.0.0",
    "@radix-ui/react-avatar": "^1.0.3",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-dropdown-menu": "^2.0.5",
    "@radix-ui/react-navigation-menu": "^1.1.3",
    "@radix-ui/react-slot": "^1.0.2",
    "@simplewebauthn/server": "^9.0.3",
    "@vercel/kv": "^1.0.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.274.0",
    "next": "latest",
    "next-auth": "beta",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7",
    "unstorage": "^1.10.1"
  },
  "devDependencies": {
    "@types/node": "^20.12.8",
    "@types/react": "^18.2.23",
    "@types/react-dom": "^18.2.8",
    "autoprefixer": "^10.4.15",
    "postcss": "^8.4.29",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.2.2"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}

================
File: apps/examples/nextjs/postcss.config.js
================


================
File: apps/examples/nextjs/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/examples/nextjs). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center">NextAuth.js Example App</h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/next-auth">
        <img alt="npm" src="https://img.shields.io/npm/v/next-auth?color=green&label=next-auth">
      </a>
      <a href="https://bundlephobia.com/result?p=next-auth-example">
        <img src="https://img.shields.io/bundlephobia/minzip/next-auth?label=next-auth" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/next-auth">
        <img src="https://img.shields.io/npm/dm/next-auth?label=next-auth%20downloads" alt="Downloads" />
      </a>
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/npm-TypeScript-blue" alt="TypeScript" />
      </a>
   </p>
</p>

## Overview

NextAuth.js is a complete open source authentication solution.

This is an example application that shows how `next-auth` is applied to a basic Next.js app.

The deployed version can be found at [`next-auth-example.vercel.app`](https://next-auth-example.vercel.app)

### About NextAuth.js

NextAuth.js is an easy to implement, full-stack (client/server) open source authentication library originally designed for [Next.js](https://nextjs.org) and [Serverless](https://vercel.com). Our goal is to [support even more frameworks](https://github.com/nextauthjs/next-auth/issues/2294) in the future.

Go to [next-auth.js.org](https://authjs.dev) for more information and documentation.

> _NextAuth.js is not officially associated with Vercel or Next.js._

## Getting Started

### 1. Clone the repository and install dependencies

```
git clone https://github.com/nextauthjs/next-auth-example.git
cd next-auth-example
pnpm install
```

### 2. Configure your local environment

Copy the .env.local.example file in this directory to .env.local (which will be ignored by Git):

```
cp .env.local.example .env.local
```

Add details for one or more providers (e.g. Google, Twitter, GitHub, Email, etc).

#### Database

A database is needed to persist user accounts and to support email sign in. However, you can still use NextAuth.js for authentication without a database by using OAuth for authentication. If you do not specify a database, [JSON Web Tokens](https://jwt.io/introduction) will be enabled by default.

You **can** skip configuring a database and come back to it later if you want.

For more information about setting up a database, please check out the following links:

- Docs: [authjs.dev/reference/core/adapters](https://authjs.dev/reference/core/adapters)

### 3. Configure Authentication Providers

1. Review and update options in `auth.ts` as needed.

2. When setting up OAuth, in the developer admin page for each of your OAuth services, you should configure the callback URL to use a callback path of `{server}/api/auth/callback/{provider}`.

e.g. For Google OAuth you would use: `http://localhost:3000/api/auth/callback/google`

A list of configured providers and their callback URLs is available from the endpoint `api/auth/providers`. You can find more information at https://authjs.dev/getting-started/providers/oauth-tutorial

1. You can also choose to specify an SMTP server for passwordless sign in via email.

### 4. Start the application

To run your site locally, use:

```
pnpm run dev
```

To run it in production mode, use:

```
pnpm run build
pnpm run start
```

### 5. Preparing for Production

Follow the [Deployment documentation](https://authjs.dev/getting-started/deployment)

## Acknowledgements

<a href="https://vercel.com?utm_source=nextauthjs&utm_campaign=oss">
<img width="170px" src="https://raw.githubusercontent.com/nextauthjs/next-auth/main/docs/public/img/etc/powered-by-vercel.svg" alt="Powered By Vercel" />
</a>
<p align="left">Thanks to Vercel sponsoring this project by allowing it to be deployed for free for the entire NextAuth.js Team</p>

## License

ISC

================
File: apps/examples/nextjs/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */

================
File: apps/examples/nextjs/test-docker.sh
================
#!/usr/bin/env bash
# Easier to read `docker compose up` output
# export BUILDKIT_PROGRESS=plain
args=("-f" "docker-compose.yml")
if [[ -z "${CI}" ]]; then
  args+=("--env-file" ".env")
fi
args+=("up" "--detach" "--build")
echo "Running: docker compose ${args[*]}"
if ! docker compose "${args[@]}"; then
  echo "Failed to start container"
  exit 1
fi
echo "waiting 10 seconds for container to start..."
sleep 10
# Used to control which env vars to load in the playwright process
export TEST_DOCKER=1
# Always stop container, but exit with 1 when tests are failing
if playwright test -c ../../../packages/utils/playwright.config.ts; then
  docker compose down
else
  docker compose down && exit 1
fi

================
File: apps/examples/nextjs/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "auth": ["./auth"]
    }
  },
  "include": [
    "process.d.ts",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}

================
File: apps/examples/nextjs-pages/app/api/auth/[...nextauth]/route.ts
================
// import { handlers } from "../../../auth"
// const { GET, POST } = handlers
//
// const handler = async (req, res) => {
//   const { method, headers, query, body } = req
//   const webRequest = {
//     ...req,
//     headers: new Headers(req.headers),
//     url: new URL(`http://${req.headers["x-forwarded-host"]}${req.url}`),
//   }
//
//   switch (method) {
//     case "GET":
//       res.send(GET(webRequest))
//       break
//     case "POST":
//       res.send(POST(webRequest))
//       break
//   }
// }
//
// export default handler
import { handlers } from "auth"

================
File: apps/examples/nextjs-pages/components/ui/avatar.tsx
================
import { cn } from "@/lib/utils"

================
File: apps/examples/nextjs-pages/components/ui/button.tsx
================
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
⋮----
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

================
File: apps/examples/nextjs-pages/components/ui/dropdown-menu.tsx
================
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"
⋮----
className=

================
File: apps/examples/nextjs-pages/components/ui/input.tsx
================
import { cn } from "@/lib/utils"
export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}
⋮----
className=

================
File: apps/examples/nextjs-pages/components/ui/navigation-menu.tsx
================
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"
⋮----
className=

================
File: apps/examples/nextjs-pages/components/auth-components.tsx
================
import { signIn, signOut } from "next-auth/react"
import { Button } from "./ui/button"

================
File: apps/examples/nextjs-pages/components/client-example.tsx
================
import { useSession } from "next-auth/react"
import { Button } from "./ui/button"
import { Input } from "./ui/input"
import { useState } from "react"
import SessionData from "./session-data"
import CustomLink from "./custom-link"
const UpdateForm = () =>
⋮----
setName(e.target.value)
⋮----
export default function ClientExample()

================
File: apps/examples/nextjs-pages/components/custom-link.tsx
================
import { cn } from "@/lib/utils"
import { ExternalLink } from "lucide-react"
import Link from "next/link"
interface CustomLinkProps extends React.LinkHTMLAttributes<HTMLAnchorElement> {
  href: string
}
const CustomLink = ({
  href,
  children,
  className,
  ...rest
}: CustomLinkProps) =>
⋮----
className=

================
File: apps/examples/nextjs-pages/components/footer.tsx
================
import CustomLink from "./custom-link"
export default function Footer()

================
File: apps/examples/nextjs-pages/components/header.tsx
================
import { MainNav } from "./main-nav"
import UserButton from "./user-button"
export default function Header()

================
File: apps/examples/nextjs-pages/components/main-nav.tsx
================
import Image from "next/image"
import { cn } from "@/lib/utils"
import CustomLink from "./custom-link"
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "./ui/navigation-menu"
import React from "react"
export function MainNav()
⋮----
className=

================
File: apps/examples/nextjs-pages/components/session-data.tsx
================
import type { Session } from "next-auth"

================
File: apps/examples/nextjs-pages/components/user-button.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar"
import { Button } from "./ui/button"
import { useSession } from "next-auth/react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu"
import { SignIn, SignOut } from "./auth-components"

================
File: apps/examples/nextjs-pages/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[])

================
File: apps/examples/nextjs-pages/pages/api/protected.ts
================
// import { auth } from "../../auth"
// import { getSession } from "next-auth/react"
import { NextApiRequest, NextApiResponse } from "next"
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
)
⋮----
// const session = await auth(req, res)
// const session = await getSession(req, res)
⋮----
// TODO: Test while working on other methods

================
File: apps/examples/nextjs-pages/pages/api-example/index.tsx
================
import CustomLink from "@/components/custom-link"
import { useEffect, useState } from "react"
⋮----
<CustomLink href="https://nextjs.authjs.dev#auth">

================
File: apps/examples/nextjs-pages/pages/client-example/index.tsx
================
import { useSession } from "next-auth/react"
import ClientExample from "@/components/client-example"
import { SessionProvider } from "next-auth/react"
export default function ClientPage()
⋮----
// TODO: Look into https://react.dev/reference/react/experimental_taintObjectReference
// filter out sensitive data before passing to client.

================
File: apps/examples/nextjs-pages/pages/middleware-example/index.tsx
================
import CustomLink from "@/components/custom-link"

================
File: apps/examples/nextjs-pages/pages/policy/index.tsx
================
export default function PolicyPage()

================
File: apps/examples/nextjs-pages/pages/server-example/index.tsx
================
import CustomLink from "@/components/custom-link"
import SessionData from "@/components/session-data"
// import { auth } from "../../auth"
// import { getSession } from "next-auth/react"
import type { Session } from "next-auth"
import type { GetServerSidePropsContext } from "next"
import type { InferGetServerSidePropsType, GetServerSideProps } from "next"
⋮----
// const session = await getSession()
⋮----
// TODO: Test while working on other methods

================
File: apps/examples/nextjs-pages/pages/_app.tsx
================
import { cn } from "@/lib/utils"
import Footer from "@/components/footer"
import Header from "@/components/header"
import { Inter } from "next/font/google"
import { SessionProvider } from "next-auth/react"
import type { AppProps } from "next/app"
⋮----
export default function MyApp({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps)

================
File: apps/examples/nextjs-pages/pages/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
⋮----
:root {
.dark {
⋮----
* {
⋮----
@apply border-border;
⋮----
body {

================
File: apps/examples/nextjs-pages/pages/index.tsx
================
import CustomLink from "@/components/custom-link"
export default function Index()

================
File: apps/examples/nextjs-pages/.env.local.example
================
AUTH_SECRET= # Linux: `openssl rand -hex 32` or go to https://generate-secret.vercel.app/32

AUTH_AUTH0_ID=
AUTH_AUTH0_SECRET=
AUTH_AUTH0_ISSUER=

AUTH_FACEBOOK_ID=
AUTH_FACEBOOK_SECRET=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

AUTH_GOOGLE_ID=
AUTH_GOOGLE_SECRET=

AUTH_TWITTER_ID=
AUTH_TWITTER_SECRET=

================
File: apps/examples/nextjs-pages/.gitignore
================
.DS_Store

node_modules/
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.yarn-integrity
.npm

.eslintcache

*.tsbuildinfo
next-env.d.ts

.next
.vercel
.env*.local

================
File: apps/examples/nextjs-pages/auth.ts
================
import NextAuth from "next-auth"
// import Apple from "next-auth/providers/apple"
// import Auth0 from "next-auth/providers/auth0"
// import Authentik from "next-auth/providers/authentik"
// import AzureAD from "next-auth/providers/azure-ad"
// import AzureB2C from "next-auth/providers/azure-ad-b2c"
// import Battlenet from "next-auth/providers/battlenet"
// import Box from "next-auth/providers/box"
// import BoxyHQSAML from "next-auth/providers/boxyhq-saml"
// import Bungie from "next-auth/providers/bungie"
// import Cognito from "next-auth/providers/cognito"
// import Coinbase from "next-auth/providers/coinbase"
// import Discord from "next-auth/providers/discord"
// import Dropbox from "next-auth/providers/dropbox"
// import DuendeIDS6 from "next-auth/providers/duende-identity-server6"
// import Eveonline from "next-auth/providers/eveonline"
// import Facebook from "next-auth/providers/facebook"
// import Faceit from "next-auth/providers/faceit"
// import FortyTwoSchool from "next-auth/providers/42-school"
// import Foursquare from "next-auth/providers/foursquare"
// import Freshbooks from "next-auth/providers/freshbooks"
// import Fusionauth from "next-auth/providers/fusionauth"
import GitHub from "next-auth/providers/github"
// import GitLab from "next-auth/providers/gitlab"
// import Google from "next-auth/providers/google"
// import Hubspot from "next-auth/providers/hubspot"
// import Instagram from "next-auth/providers/instagram"
// import Kakao from "next-auth/providers/kakao"
// import Keycloak from "next-auth/providers/keycloak"
// import Line from "next-auth/providers/line"
// import LinkedIn from "next-auth/providers/linkedin"
// import Mailchimp from "next-auth/providers/mailchimp"
// import Mailru from "next-auth/providers/mailru"
// import Medium from "next-auth/providers/medium"
// import Naver from "next-auth/providers/naver"
// import Netlify from "next-auth/providers/netlify"
// import Okta from "next-auth/providers/okta"
// import Onelogin from "next-auth/providers/onelogin"
// import Osso from "next-auth/providers/osso"
// import Osu from "next-auth/providers/osu"
// import Passage from "next-auth/providers/passage"
// import Patreon from "next-auth/providers/patreon"
// import Pinterest from "next-auth/providers/pinterest"
// import Pipedrive from "next-auth/providers/pipedrive"
// import Reddit from "next-auth/providers/reddit"
// import Salesforce from "next-auth/providers/salesforce"
// import Slack from "next-auth/providers/slack"
// import Spotify from "next-auth/providers/spotify"
// import Strava from "next-auth/providers/strava"
// import Todoist from "next-auth/providers/todoist"
// import Trakt from "next-auth/providers/trakt"
// import Twitch from "next-auth/providers/twitch"
// import Twitter from "next-auth/providers/twitter"
// import UnitedEffects from "next-auth/providers/united-effects"
// import Vk from "next-auth/providers/vk"
// import Wikimedia from "next-auth/providers/wikimedia"
// import WordPress from "next-auth/providers/wordpress"
// import WorkOS from "next-auth/providers/workos"
// import Yandex from "next-auth/providers/yandex"
// import Zitadel from "next-auth/providers/zitadel"
// import Zoho from "next-auth/providers/zoho"
// import Zoom from "next-auth/providers/zoom"
import type { NextAuthConfig } from "next-auth"
⋮----
// Apple,
// Auth0,
// Authentik,
// AzureAD,
// AzureB2C,
// Battlenet,
// Box,
// BoxyHQSAML,
// Bungie,
// Cognito,
// Coinbase,
// Discord,
// Dropbox,
// DuendeIDS6,
// Eveonline,
// Facebook,
// Faceit,
// FortyTwoSchool,
// Foursquare,
// Freshbooks,
// Fusionauth,
⋮----
// GitLab,
// Google,
// Hubspot,
// Instagram,
// Kakao,
// Keycloak,
// Line,
// LinkedIn,
// Mailchimp,
// Mailru,
// Medium,
// Naver,
// Netlify,
// Okta,
// Onelogin,
// Osso,
// Osu,
// Passage,
// Patreon,
// Pinterest,
// Pipedrive,
// Reddit,
// Salesforce,
// Slack,
// Spotify,
// Strava,
// Todoist,
// Trakt,
// Twitch,
// Twitter,
// UnitedEffects,
// Vk,
// Wikimedia,
// WordPress,
// WorkOS,
// Yandex,
// Zitadel,
// Zoho,
// Zoom,
⋮----
authorized(
jwt(

================
File: apps/examples/nextjs-pages/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: apps/examples/nextjs-pages/middleware.ts
================
// Read more: https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher

================
File: apps/examples/nextjs-pages/next.config.js
================
/** @type {import("next").NextConfig} */

================
File: apps/examples/nextjs-pages/package.json
================
{
  "name": "next-auth-pages-example",
  "private": true,
  "description": "An example project for NextAuth.js with Next.js Pages",
  "repository": "https://github.com/nextauthjs/next-auth-pages-example.git",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "homepage": "https://next-auth-pages-example.vercel.app",
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start"
  },
  "author": "Iain Collins <me@iaincollins.com>",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>",
    "Nico Domino <yo@ndo.dev>",
    "Lluis Agusti <hi@llu.lu>",
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "dependencies": {
    "@radix-ui/react-avatar": "^1.0.3",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-dropdown-menu": "^2.0.5",
    "@radix-ui/react-navigation-menu": "^1.1.3",
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.274.0",
    "next": "latest",
    "next-auth": "beta",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^18",
    "@types/react": "^18.2.23",
    "@types/react-dom": "^18.2.8",
    "autoprefixer": "^10.4.15",
    "postcss": "^8.4.29",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.2.2"
  }
}

================
File: apps/examples/nextjs-pages/postcss.config.js
================


================
File: apps/examples/nextjs-pages/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/examples/nextjs). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center">NextAuth.js Example App</h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/next-auth">
        <img alt="npm" src="https://img.shields.io/npm/v/next-auth?color=green&label=next-auth">
      </a>
      <a href="https://bundlephobia.com/result?p=next-auth-example">
        <img src="https://img.shields.io/bundlephobia/minzip/next-auth?label=next-auth" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/next-auth">
        <img src="https://img.shields.io/npm/dm/next-auth?label=next-auth%20downloads" alt="Downloads" />
      </a>
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/npm-TypeScript-blue" alt="TypeScript" />
      </a>
   </p>
</p>

## Overview

NextAuth.js is a complete open source authentication solution.

This is an example application that shows how `next-auth` is applied to a basic Next.js app.

The deployed version can be found at [`next-auth-example.vercel.app`](https://next-auth-example.vercel.app)

### About NextAuth.js

NextAuth.js is an easy to implement, full-stack (client/server) open source authentication library originally designed for [Next.js](https://nextjs.org) and [Serverless](https://vercel.com). Our goal is to [support even more frameworks](https://github.com/nextauthjs/next-auth/issues/2294) in the future.

Go to [next-auth.js.org](https://authjs.dev) for more information and documentation.

> _NextAuth.js is not officially associated with Vercel or Next.js._

## Getting Started

### 1. Clone the repository and install dependencies

```
git clone https://github.com/nextauthjs/next-auth-example.git
cd next-auth-example
npm install
```

### 2. Configure your local environment

Copy the .env.local.example file in this directory to .env.local (which will be ignored by Git):

```
cp .env.local.example .env.local
```

Add details for one or more providers (e.g. Google, Twitter, GitHub, Email, etc).

#### Database

A database is needed to persist user accounts and to support email sign in. However, you can still use NextAuth.js for authentication without a database by using OAuth for authentication. If you do not specify a database, [JSON Web Tokens](https://jwt.io/introduction) will be enabled by default.

You **can** skip configuring a database and come back to it later if you want.

For more information about setting up a database, please check out the following links:

- Docs: [authjs.dev/reference/core/adapters](https://authjs.dev/reference/core/adapters)

### 3. Configure Authentication Providers

1. Review and update options in `auth.ts` as needed.

2. When setting up OAuth, in the developer admin page for each of your OAuth services, you should configure the callback URL to use a callback path of `{server}/api/auth/callback/{provider}`.

e.g. For Google OAuth you would use: `http://localhost:3000/api/auth/callback/google`

A list of configured providers and their callback URLs is available from the endpoint `api/auth/providers`. You can find more information at https://authjs.dev/getting-started/providers/oauth-tutorial

1. You can also choose to specify an SMTP server for passwordless sign in via email.

### 4. Start the application

To run your site locally, use:

```
npm run dev
```

To run it in production mode, use:

```
npm run build
npm run start
```

### 5. Preparing for Production

Follow the [Deployment documentation](https://authjs.dev/getting-started/deployment)

## Acknowledgements

<a href="https://vercel.com?utm_source=nextauthjs&utm_campaign=oss">
<img width="170px" src="https://raw.githubusercontent.com/nextauthjs/next-auth/main/docs/public/img/etc/powered-by-vercel.svg" alt="Powered By Vercel" />
</a>
<p align="left">Thanks to Vercel sponsoring this project by allowing it to be deployed for free for the entire NextAuth.js Team</p>

## License

ISC

================
File: apps/examples/nextjs-pages/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */

================
File: apps/examples/nextjs-pages/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "auth": ["./auth"]
    }
  },
  "include": [
    "process.d.ts",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}

================
File: apps/examples/qwik/.vscode/launch.json
================
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Launch Chrome",
      "request": "launch",
      "type": "chrome",
      "url": "http://localhost:5173",
      "webRoot": "${workspaceFolder}"
    },
    {
      "type": "node",
      "name": "dev.debug",
      "request": "launch",
      "skipFiles": ["<node_internals>/**"],
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/vite/bin/vite.js",
      "args": ["--mode", "ssr", "--force"]
    }
  ]
}

================
File: apps/examples/qwik/.vscode/qwik-city.code-snippets
================
{
  "onRequest": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "qonRequest",
    "description": "onRequest function for a route index",
    "body": [
      "export const onRequest: RequestHandler = (request) => {",
      "  $0",
      "};",
    ],
  },
  "loader$": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "qloader$",
    "description": "loader$()",
    "body": ["export const $1 = routeLoader$(() => {", "  $0", "});"],
  },
  "action$": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "qaction$",
    "description": "action$()",
    "body": ["export const $1 = routeAction$((data) => {", "  $0", "});"],
  },
  "Full Page": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "qpage",
    "description": "Simple page component",
    "body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
      "export default component$(() => {",
      "  $0",
      "});",
    ],
  },
}

================
File: apps/examples/qwik/.vscode/qwik.code-snippets
================
{
  "Qwik component (simple)": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "qcomponent$",
    "description": "Simple Qwik component",
    "body": [
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} = component$(() => {",
      "  return <${2:div}>$4</$2>",
      "});",
    ],
  },
  "Qwik component (props)": {
    "scope": "typescriptreact",
    "prefix": "qcomponent$ + props",
    "description": "Qwik component w/ props",
    "body": [
      "export interface ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props {",
      "  $2",
      "}",
      "",
      "export const $1 = component$<$1Props>((props) => {",
      "  const ${2:count} = useSignal(0);",
      "  return (",
      "    <${3:div} on${4:Click}$={(ev) => {$5}}>",
      "      $6",
      "    </${3}>",
      "  );",
      "});",
    ],
  },
  "Qwik signal": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "quseSignal",
    "description": "useSignal() declaration",
    "body": ["const ${1:foo} = useSignal($2);", "$0"],
  },
  "Qwik store": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "quseStore",
    "description": "useStore() declaration",
    "body": ["const ${1:state} = useStore({", "  $2", "});", "$0"],
  },
  "$ hook": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "q$",
    "description": "$() function hook",
    "body": ["$(() => {", "  $0", "});", ""],
  },
  "useVisibleTask": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "quseVisibleTask",
    "description": "useVisibleTask$() function hook",
    "body": ["useVisibleTask$(({ track }) => {", "  $0", "});", ""],
  },
  "useTask": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "quseTask$",
    "description": "useTask$() function hook",
    "body": [
      "useTask$(({ track }) => {",
      "  track(() => $1);",
      "  $0",
      "});",
      "",
    ],
  },
  "useResource": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "quseResource$",
    "description": "useResource$() declaration",
    "body": [
      "const $1 = useResource$(({ track, cleanup }) => {",
      "  $0",
      "});",
      "",
    ],
  },
}

================
File: apps/examples/qwik/adapters/vercel-edge/vite.config.ts
================
import { vercelEdgeAdapter } from "@builder.io/qwik-city/adapters/vercel-edge/vite";
import { extendConfig } from "@builder.io/qwik-city/vite";
import baseConfig from "../../vite.config";

================
File: apps/examples/qwik/public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 500 500"><g clip-path="url(#a)"><circle cx="250" cy="250" r="250" fill="#fff"/><path fill="#18B6F6" d="m367.87 418.45-61.17-61.18-.94.13v-.67L175.7 227.53l32.05-31.13L188.9 87.73 99.56 199.09c-15.22 15.42-18.03 40.51-7.08 59.03l55.83 93.11a46.82 46.82 0 0 0 40.73 22.81l27.65-.27 151.18 44.68Z"/><path fill="#AC7EF4" d="m401.25 196.94-12.29-22.81-6.41-11.67-2.54-4.56-.26.26-33.66-58.63a47.07 47.07 0 0 0-41.27-23.75l-29.51.8-88.01.28a47.07 47.07 0 0 0-40.33 23.34L93.4 207l95.76-119.54L314.7 226.19l-22.3 22.67 13.35 108.54.13-.26v.26h-.26l.26.27 10.42 10.2 50.62 49.78c2.13 2 5.6-.4 4.13-2.96l-31.25-61.85 54.5-101.3 1.73-2c.67-.81 1.33-1.62 1.87-2.42a46.8 46.8 0 0 0 3.34-50.18Z"/><path fill="#fff" d="M315.1 225.65 189.18 87.6l17.9 108.14L175 227l130.5 130.27-11.75-108.14 21.37-23.48Z"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h500v500H0z"/></clipPath></defs></svg>

================
File: apps/examples/qwik/public/manifest.json
================
{
  "$schema": "https://json.schemastore.org/web-manifest-combined.json",
  "name": "qwik-project-name",
  "short_name": "Welcome to Qwik",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#fff",
  "description": "A Qwik project app."
}

================
File: apps/examples/qwik/src/components/avatar/avatar.tsx
================
import { component$ } from "@builder.io/qwik";
type Props = {
  src: string;
  alt: string;
};

================
File: apps/examples/qwik/src/components/header/header.tsx
================
import { component$ } from "@builder.io/qwik";
import { Link } from "@builder.io/qwik-city";
import { useSession, useSignIn, useSignOut } from "~/routes/plugin@auth";
import { QwikIcon } from "../icones/qwik";
import { Avatar } from "../avatar/avatar";

================
File: apps/examples/qwik/src/components/icones/qwik.tsx
================
import { type QwikIntrinsicElements } from "@builder.io/qwik";

================
File: apps/examples/qwik/src/components/router-head/router-head.tsx
================
import { component$ } from "@builder.io/qwik";
import { useDocumentHead, useLocation } from "@builder.io/qwik-city";
/**
 * The RouterHead component is placed inside of the document `<head>` element.
 */

================
File: apps/examples/qwik/src/routes/protected/index.tsx
================
import { component$ } from "@builder.io/qwik";
import { RequestHandler } from "@builder.io/qwik-city";
export const onRequest: RequestHandler = (event) =>
⋮----
<a target="_blank" href="https://authjs.dev/">

================
File: apps/examples/qwik/src/routes/index.tsx
================
import { component$ } from "@builder.io/qwik";
import { useSession } from "./plugin@auth";
⋮----
<a target="_blank" href="https://authjs.dev/">
⋮----
<a target="_blank" href="https://qwik.dev/">

================
File: apps/examples/qwik/src/routes/layout.tsx
================
import { component$, Slot } from "@builder.io/qwik";
import type { DocumentHead, RequestHandler } from "@builder.io/qwik-city";
import { Header } from "~/components/header/header";
export const onGet: RequestHandler = async (
⋮----
// Control caching for this request for best performance and to reduce hosting costs:
// https://qwik.dev/docs/caching/
⋮----
// Always serve a cached response by default, up to a week stale
⋮----
// Max once every 5 seconds, revalidate on the server to get a fresh version of this page

================
File: apps/examples/qwik/src/routes/plugin@auth.ts
================
import { QwikAuth$ } from "@auth/qwik";
import GitHub from "@auth/qwik/providers/github";

================
File: apps/examples/qwik/src/routes/service-worker.ts
================
/*
 * WHAT IS THIS FILE?
 *
 * The service-worker.ts file is used to have state of the art prefetching.
 * https://qwik.dev/qwikcity/prefetching/overview/
 *
 * Qwik uses a service worker to speed up your site and reduce latency, ie, not used in the traditional way of offline.
 * You can also use this file to add more functionality that runs in the service worker.
 */
import { setupServiceWorker } from "@builder.io/qwik-city/service-worker";

================
File: apps/examples/qwik/src/entry.dev.tsx
================
/*
 * WHAT IS THIS FILE?
 *
 * Development entry point using only client-side modules:
 * - Do not use this mode in production!
 * - No SSR
 * - No portion of the application is pre-rendered on the server.
 * - All of the application is running eagerly in the browser.
 * - More code is transferred to the browser than in SSR mode.
 * - Optimizer/Serialization/Deserialization code is not exercised!
 */
import { render, type RenderOptions } from "@builder.io/qwik";
import Root from "./root";

================
File: apps/examples/qwik/src/entry.preview.tsx
================
/*
 * WHAT IS THIS FILE?
 *
 * It's the bundle entry point for `npm run preview`.
 * That is, serving your app built in production mode.
 *
 * Feel free to modify this file, but don't remove it!
 *
 * Learn more about Vite's preview command:
 * - https://vitejs.dev/config/preview-options.html#preview-options
 *
 */
import { createQwikCity } from "@builder.io/qwik-city/middleware/node";
import qwikCityPlan from "@qwik-city-plan";
// make sure qwikCityPlan is imported before entry
import render from "./entry.ssr";
/**
 * The default export is the QwikCity adapter used by Vite preview.
 */

================
File: apps/examples/qwik/src/entry.ssr.tsx
================
/**
 * WHAT IS THIS FILE?
 *
 * SSR entry point, in all cases the application is rendered outside the browser, this
 * entry point will be the common one.
 *
 * - Server (express, cloudflare...)
 * - npm run start
 * - npm run preview
 * - npm run build
 *
 */
import {
  renderToStream,
  type RenderToStreamOptions,
} from "@builder.io/qwik/server";
import { manifest } from "@qwik-client-manifest";
import Root from "./root";
⋮----
// Use container attributes to set attributes on the html tag.

================
File: apps/examples/qwik/src/entry.vercel-edge.tsx
================
/*
 * WHAT IS THIS FILE?
 *
 * It's the entry point for Vercel Edge when building for production.
 *
 * Learn more about the Vercel Edge integration here:
 * - https://qwik.dev/docs/deployments/vercel-edge/
 *
 */
import {
  createQwikCity,
  type PlatformVercel,
} from "@builder.io/qwik-city/middleware/vercel-edge";
import qwikCityPlan from "@qwik-city-plan";
import { manifest } from "@qwik-client-manifest";
import render from "./entry.ssr";
⋮----
interface QwikCityPlatform extends PlatformVercel {}

================
File: apps/examples/qwik/src/global.css
================
/**
 * Tailwind CSS imports
 * View the full documentation at https://tailwindcss.com
 */
@tailwind base;
@tailwind components;
@tailwind utilities;
html,

================
File: apps/examples/qwik/src/root.tsx
================
import { component$ } from "@builder.io/qwik";
import {
  QwikCityProvider,
  RouterOutlet,
  ServiceWorkerRegister,
} from "@builder.io/qwik-city";
import { RouterHead } from "./components/router-head/router-head";
⋮----
/**
   * The root of a QwikCity site always start with the <QwikCityProvider> component,
   * immediately followed by the document's <head> and <body>.
   *
   * Don't remove the `<head>` and `<body>` elements.
   */

================
File: apps/examples/qwik/.env.example
================
AUTH_SECRET=

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

================
File: apps/examples/qwik/.eslintignore
================
**/*.log
**/.DS_Store
*.
.vscode/settings.json
.history
.yarn
bazel-*
bazel-bin
bazel-out
bazel-qwik
bazel-testlogs
dist
dist-dev
lib
lib-types
etc
external
node_modules
temp
tsc-out
tsdoc-metadata.json
target
output
rollup.config.js
build
.cache
.vscode
.rollup.cache
dist
tsconfig.tsbuildinfo
vite.config.ts
*.spec.tsx
*.spec.ts
.netlify
pnpm-lock.yaml
package-lock.json
yarn.lock
server

================
File: apps/examples/qwik/.eslintrc.cjs
================


================
File: apps/examples/qwik/.gitignore
================
# Build
/dist
/lib
/lib-types
/server

# Development
node_modules
*.local

# Cache
.cache
.mf
.rollup.cache
tsconfig.tsbuildinfo

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Editor
.vscode/*
!.vscode/launch.json
!.vscode/*.code-snippets

.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Yarn
.yarn/*
!.yarn/releases

# Vercel
.vercel

================
File: apps/examples/qwik/.prettierignore
================
**/*.log
**/.DS_Store
*.
.vscode/settings.json
.history
.yarn
bazel-*
bazel-bin
bazel-out
bazel-qwik
bazel-testlogs
dist
dist-dev
lib
lib-types
etc
external
node_modules
temp
tsc-out
tsdoc-metadata.json
target
output
rollup.config.js
build
.cache
.vscode
.rollup.cache
tsconfig.tsbuildinfo
vite.config.ts
*.spec.tsx
*.spec.ts
.netlify
pnpm-lock.yaml
package-lock.json
yarn.lock
server

================
File: apps/examples/qwik/.prettierrc.js
================


================
File: apps/examples/qwik/package.json
================
{
  "name": "qwik-example-app",
  "description": "An example project for Auth.js with Qwik",
  "engines": {
    "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  },
  "engines-annotation": "Mostly required by sharp which needs a Node-API v9 compatible runtime",
  "private": true,
  "trustedDependencies": [
    "sharp"
  ],
  "trustedDependencies-annotation": "Needed for bun to allow running install scripts",
  "type": "module",
  "scripts": {
    "build": "qwik build",
    "build.client": "vite build",
    "build.preview": "vite build --ssr src/entry.preview.tsx",
    "build.server": "vite build -c adapters/vercel-edge/vite.config.ts",
    "build.types": "tsc --incremental --noEmit",
    "deploy": "vercel deploy",
    "dev": "vite --mode ssr",
    "dev.debug": "node --inspect-brk ./node_modules/vite/bin/vite.js --mode ssr --force",
    "fmt": "prettier --write .",
    "fmt.check": "prettier --check .",
    "lint": "eslint \"src/**/*.ts*\"",
    "preview": "qwik build preview && vite preview --open",
    "start": "vite --open --mode ssr",
    "qwik": "qwik"
  },
  "devDependencies": {
    "@auth/qwik": "latest",
    "@builder.io/qwik": "^1.5.7",
    "@builder.io/qwik-city": "^1.5.7",
    "@types/eslint": "^8.56.10",
    "@types/node": "^20.12.7",
    "@typescript-eslint/eslint-plugin": "^7.7.1",
    "@typescript-eslint/parser": "^7.7.1",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.57.0",
    "eslint-plugin-qwik": "^1.5.7",
    "postcss": "^8.4.31",
    "prettier": "^3.2.5",
    "prettier-plugin-tailwindcss": "^0.5.4",
    "tailwindcss": "3.3.3",
    "typescript": "5.4.5",
    "undici": "*",
    "vercel": "^29.1.1",
    "vite": "^5.4.12",
    "vite-tsconfig-paths": "^4.2.1"
  }
}

================
File: apps/examples/qwik/postcss.config.cjs
================


================
File: apps/examples/qwik/qwik.env.d.ts
================
// This file can be used to add references for global types like `vite/client`.
// Add global `vite/client` types. For more info, see: https://vitejs.dev/guide/features#client-types
/// <reference types="vite/client" />

================
File: apps/examples/qwik/README.md
================
# Qwik City App ⚡️

- [Qwik Docs](https://qwik.dev/)
- [Discord](https://qwik.dev/chat)
- [Qwik GitHub](https://github.com/QwikDev/qwik)
- [@QwikDev](https://twitter.com/QwikDev)
- [Vite](https://vitejs.dev/)

---

## Project Structure

This project is using Qwik with [QwikCity](https://qwik.dev/qwikcity/overview/). QwikCity is just an extra set of tools on top of Qwik to make it easier to build a full site, including directory-based routing, layouts, and more.

Inside your project, you'll see the following directory structure:

```
├── public/
│   └── ...
└── src/
    ├── components/
    │   └── ...
    └── routes/
        └── ...
```

- `src/routes`: Provides the directory-based routing, which can include a hierarchy of `layout.tsx` layout files, and an `index.tsx` file as the page. Additionally, `index.ts` files are endpoints. Please see the [routing docs](https://qwik.dev/qwikcity/routing/overview/) for more info.

- `src/components`: Recommended directory for components.

- `public`: Any static assets, like images, can be placed in the public directory. Please see the [Vite public directory](https://vitejs.dev/guide/assets.html#the-public-directory) for more info.

## Add Integrations and deployment

Use the `pnpm qwik add` command to add additional integrations. Some examples of integrations includes: Cloudflare, Netlify or Express Server, and the [Static Site Generator (SSG)](https://qwik.dev/qwikcity/guides/static-site-generation/).

```shell
pnpm qwik add # or `pnpm qwik add`
```

## Development

Development mode uses [Vite's development server](https://vitejs.dev/). The `dev` command will server-side render (SSR) the output during development.

```shell
npm start # or `pnpm start`
```

> Note: during dev mode, Vite may request a significant number of `.js` files. This does not represent a Qwik production build.

## Preview

The preview command will create a production build of the client modules, a production build of `src/entry.preview.tsx`, and run a local server. The preview server is only for convenience to preview a production build locally and should not be used as a production server.

```shell
pnpm preview # or `pnpm preview`
```

## Production

The production build will generate client and server modules by running both client and server build commands. The build command will use TypeScript to run a type check on the source code.

```shell
pnpm build # or `pnpm build`
```

================
File: apps/examples/qwik/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */

================
File: apps/examples/qwik/tsconfig.json
================
{
  "compilerOptions": {
    "allowJs": true,
    "target": "ES2017",
    "module": "ES2022",
    "lib": ["es2022", "DOM", "WebWorker", "DOM.Iterable"],
    "jsx": "react-jsx",
    "jsxImportSource": "@builder.io/qwik",
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "moduleResolution": "Bundler",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "incremental": true,
    "isolatedModules": true,
    "outDir": "tmp",
    "noEmit": true,
    "paths": {
      "~/*": ["./src/*"]
    }
  },
  "files": ["./.eslintrc.cjs"],
  "include": ["src", "./*.d.ts", "./*.config.ts"]
}

================
File: apps/examples/qwik/vercel.json
================
{
  "headers": [
    {
      "source": "/(.*)?service-worker.js",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=0, must-revalidate"
        }
      ]
    },
    {
      "source": "/build/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, s-maxage=31536000, immutable"
        }
      ]
    }
  ]
}

================
File: apps/examples/qwik/vite.config.ts
================
/**
 * This is the base config for vite.
 * When building, the adapter config is used which loads this file and extends it.
 */
import { defineConfig, type UserConfig } from "vite";
import { qwikVite } from "@builder.io/qwik/optimizer";
import { qwikCity } from "@builder.io/qwik-city/vite";
import tsconfigPaths from "vite-tsconfig-paths";
import pkg from "./package.json";
type PkgDep = Record<string, string>;
⋮----
/**
 * Note that Vite normally starts from `index.html` but the qwikCity plugin makes start at `src/entry.ssr.tsx` instead.
 */
⋮----
// This tells Vite which dependencies to pre-build in dev mode.
⋮----
// Put problematic deps that break bundling here, mostly those with binaries.
// For example ['better-sqlite3'] if you use that in server functions.
⋮----
/**
     * This is an advanced setting. It improves the bundling of your server code. To use it, make sure you understand when your consumed packages are dependencies or dev depencies. (otherwise things will break in production)
     */
// ssr:
//   command === "build" && mode === "production"
//     ? {
//         // All dev dependencies should be bundled in the server build
//         noExternal: Object.keys(devDependencies),
//         // Anything marked as a dependency will not be bundled
//         // These should only be production binary deps (including deps of deps), CLI deps, and their module graph
//         // If a dep-of-dep needs to be external, add it here
//         // For example, if something uses `bcrypt` but you don't have it as a dep, you can write
//         // external: [...Object.keys(dependencies), 'bcrypt']
//         external: Object.keys(dependencies),
//       }
//     : undefined,
⋮----
// Don't cache the server response in dev mode
⋮----
// Do cache the server response in preview (non-adapter production build)
⋮----
// *** utils ***
/**
 * Function to identify duplicate dependencies and throw an error
 * @param {Object} devDependencies - List of development dependencies
 * @param {Object} dependencies - List of production dependencies
 */
function errorOnDuplicatesPkgDeps(
  devDependencies: PkgDep,
  dependencies: PkgDep,
)
⋮----
// Create an array 'duplicateDeps' by filtering devDependencies.
// If a dependency also exists in dependencies, it is considered a duplicate.
⋮----
// include any known qwik packages
⋮----
// any errors for missing "qwik-city-plan"
// [PLUGIN_ERROR]: Invalid module "@qwik-city-plan" is not a valid package
⋮----
// Format the error message with the duplicates list.
// The `join` function is used to represent the elements of the 'duplicateDeps' array as a comma-separated string.
⋮----
// Throw an error with the constructed message.

================
File: apps/examples/solid-start/src/components/NavBar/index.ts
================


================
File: apps/examples/solid-start/src/components/NavBar/NavBar.tsx
================
import { Show, type Component } from "solid-js"
import { createServerData$ } from "solid-start/server"
import { authOpts } from "~/routes/api/auth/[...solidauth]"
import { signIn, signOut } from "@auth/solid-start/client"
import { getSession } from "@auth/solid-start"
import { A } from "solid-start"
interface INavBarProps {}
⋮----
return createServerData$(
async (_,

================
File: apps/examples/solid-start/src/components/Protected/index.ts
================


================
File: apps/examples/solid-start/src/components/Protected/Protected.tsx
================
import { getSession, type Session } from "@auth/solid-start"
import { Component, Show } from "solid-js"
import { useRouteData } from "solid-start"
import { createServerData$, redirect } from "solid-start/server"
import { authOpts } from "~/routes/api/auth/[...solidauth]"
const Protected = (Comp: IProtectedComponent) =>
⋮----
const routeData = () =>
⋮----
<Show when=
⋮----
type IProtectedComponent = Component<Session>

================
File: apps/examples/solid-start/src/components/index.ts
================


================
File: apps/examples/solid-start/src/env/client.ts
================
import type { ZodFormattedError } from "zod"
import { clientScheme } from "./schema"
export const formatErrors = (
  errors: ZodFormattedError<Map<string, string>, string>
)

================
File: apps/examples/solid-start/src/env/schema.ts
================
import { z } from "zod"

================
File: apps/examples/solid-start/src/env/server.ts
================
import { serverScheme } from "./schema"
import type { ZodFormattedError } from "zod"
export const formatErrors = (
  errors: ZodFormattedError<Map<string, string>, string>
)

================
File: apps/examples/solid-start/src/routes/api/auth/[...solidauth].ts
================
import { SolidAuth, type SolidAuthConfig } from "@auth/solid-start"
import GitHub from "@auth/solid-start/providers/github"
import { serverEnv } from "~/env/server"

================
File: apps/examples/solid-start/src/routes/index.tsx
================
import { type ParentComponent } from "solid-js"
import { A, Title, useRouteData } from "solid-start"
import { createServerData$ } from "solid-start/server"
import { authOpts } from "./api/auth/[...solidauth]"
import { getSession } from "@auth/solid-start"
export const routeData = () =>

================
File: apps/examples/solid-start/src/routes/protected.tsx
================
import { Protected } from "~/components"

================
File: apps/examples/solid-start/src/entry-client.tsx
================
import { mount, StartClient } from "solid-start/entry-client"

================
File: apps/examples/solid-start/src/entry-server.tsx
================
import {
  StartServer,
  createHandler,
  renderAsync,
} from "solid-start/entry-server"

================
File: apps/examples/solid-start/src/root.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: apps/examples/solid-start/src/root.tsx
================
// @refresh reload
⋮----
import { Suspense } from "solid-js"
import {
  Body,
  ErrorBoundary,
  FileRoutes,
  Head,
  Html,
  Meta,
  Routes,
  Scripts,
  Title,
} from "solid-start"
import { NavBar } from "./components"
export default function Root()

================
File: apps/examples/solid-start/.env.example
================
GITHUB_ID=
GITHUB_SECRET=
AUTH_SECRET=

================
File: apps/examples/solid-start/.gitignore
================
dist
.solid
.output
.vercel
.netlify
netlify

# dependencies
/node_modules

# IDEs and editors
/.idea
.project
.classpath
*.launch
.settings/

# Temp
gitignore

# System Files
.DS_Store
Thumbs.db

.env

.vercel

================
File: apps/examples/solid-start/package.json
================
{
  "name": "solid-start-example-app",
  "scripts": {
    "dev": "solid-start dev",
    "build": "solid-start build",
    "start": "solid-start start",
    "lint": "eslint --fix \"**/*.{ts,tsx,js,jsx}\""
  },
  "type": "module",
  "devDependencies": {
    "autoprefixer": "^10.4.13",
    "postcss": "^8.4.19",
    "solid-start-node": "^0.2.9",
    "solid-start-vercel": "^0.2.9",
    "tailwindcss": "^3.2.4",
    "typescript": "5.2.2",
    "vite": "^4.5.6"
  },
  "dependencies": {
    "@auth/solid-start": "latest",
    "@solidjs/meta": "^0.28.0",
    "@solidjs/router": "^0.6.0",
    "solid-js": "^1.5.7",
    "solid-start": "^0.2.9",
    "zod": "^3.19.1"
  },
  "engines": {
    "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  }
}

================
File: apps/examples/solid-start/postcss.config.cjs
================


================
File: apps/examples/solid-start/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/examples/solid-start). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank">
   <img height="64" src="https://authjs.dev/img/logo-sm.png" />
   </a>
   <a href="https://start.solidjs.com" target="_blank">
   <img height="64" src="https://raw.githubusercontent.com/nextauthjs/next-auth/main/docs/public/img/etc/solidstart.svg" />
   </a>
   <h3 align="center"><b>SolidStart Auth</b> - Example App</h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/@auth/solid-start">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/solid-start?color=green&label=@auth/solid-start&style=flat-square">
      </a>
      <a href="https://bundlephobia.com/result?p=@auth/solid-start">
        <img src="https://img.shields.io/bundlephobia/minzip/@auth/solid-start?label=size&style=flat-square" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/@auth/solid-start">
        <img src="https://img.shields.io/npm/dm/@auth/solid-start?label=downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://npm.im/@auth/solid-start">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
   </p>
</p>

## Overview

This is the official SolidStart Auth example for [Auth.js](https://authjs.dev).

## Getting started

You can follow the guide below, or click the following button to deploy this example to [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=solid-start-auth-example).

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https://github.com/nextauthjs/solid-start-auth-example&project-name=solid-start-auth-example&repository-name=solid-start-auth-example)

### Installing

```sh
pnpm add -D solid-start-vercel
```

```sh
npm i -D solid-start-vercel
```

```sh
yarn add -D solid-start-vercel
```

### Adding to Vite config

```ts
import solid from "solid-start/vite"
import dotenv from "dotenv"
import { defineConfig } from "vite"
// @ts-expect-error no typing
import vercel from "solid-start-vercel"

export default defineConfig(() => {
  dotenv.config()
  return {
    plugins: [solid({ ssr: true, adapter: vercel({ edge: false }) })],
  }
})
```

### Environment Variables

- `ENABLE_VC_BUILD`=`1` .

### Finishing up

Create a GitHub repo and push the code to it, then deploy it to Vercel.

## Acknowledgements

<a href="https://vercel.com?utm_source=nextauthjs&utm_campaign=oss">
<img width="170px" src="https://raw.githubusercontent.com/nextauthjs/next-auth/main/docs/public/img/etc/powered-by-vercel.svg" alt="Powered By Vercel" />
</a>
<p align="left">Thanks to Vercel sponsoring this project by allowing it to be deployed for free for the entire Auth.js Team</p>

================
File: apps/examples/solid-start/tailwind.config.cjs
================
/** @type {import('tailwindcss').Config} */

================
File: apps/examples/solid-start/tsconfig.json
================
{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "strict": true,
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "node",
    "jsxImportSource": "solid-js",
    "jsx": "preserve",
    "types": ["vite/client"],
    "baseUrl": "./",
    "paths": {
      "~/*": ["./src/*"]
    }
  }
}

================
File: apps/examples/solid-start/vite.config.ts
================
import solid from "solid-start/vite"
import { defineConfig } from "vite"
// @ts-expect-error no typings
import vercel from "solid-start-vercel"

================
File: apps/examples/sveltekit/src/components/external-icon.svelte
================
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="16"
  height="16"
  viewBox="0 0 24 24"
  fill="none"
  stroke="currentColor"
  stroke-width="2"
  stroke-linecap="round"
  stroke-linejoin="round"
  class="inline-block ml-0.5 w-4 h-4"
  ><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"
  ></path><polyline points="15 3 21 3 21 9"></polyline><line
    x1="10"
    x2="21"
    y1="14"
    y2="3"
  ></line></svg
>

================
File: apps/examples/sveltekit/src/components/footer.svelte
================
<script lang="ts">
  import packageJSON from "@auth/sveltekit/package.json"
  import ExternalIcon from "./external-icon.svelte"
</script>
<footer>
  <div>
    <a href="https://sveltekit.authjs.dev">Documentation <ExternalIcon /></a>
    <a href="https://www.npmjs.com/package/next-auth"> NPM <ExternalIcon /> </a>
    <a
      href="https://github.com/nextauthjs/next-auth/tree/main/apps/examples/sveltekit"
    >
      Source on GitHub <ExternalIcon />
    </a>
    <a class="no-underline" href="/policy">Policy</a>
  </div>
  <div>
    <img src="https://authjs.dev/img/logo-sm.png" alt="Auth.js Logo" />
    <a href="https://www.npmjs.com/package/@auth/sveltekit">
      @auth/sveltekit@{packageJSON.version}
      <ExternalIcon />
    </a>
  </div>
</footer>
<style>
  footer {
    display: flex;
    width: 100%;
    justify-content: space-between;
    align-items: center;
    padding-inline: 1.25rem;
    margin-block: 2rem;
  }
  footer > div {
    gap: 1rem;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
  }
  footer a {
    color: #333;
    text-underline-offset: 4px;
    font-weight: 500;
    display: flex;
    align-items: flex-end;
    gap: 0.25rem;
  }
  footer img {
    width: 24px;
    height: 24px;
  }
  .no-underline {
    text-decoration: none;
  }
</style>

================
File: apps/examples/sveltekit/src/components/header.svelte
================
<script lang="ts">
  import { page } from "$app/stores"
  import { SignIn, SignOut } from "@auth/sveltekit/components"
</script>
<header>
  <div class="signedInStatus">
    <div class="nojs-show loaded">
      <img
        alt="User avatar"
        src={$page.data?.session?.user?.image ??
          `https://api.dicebear.com/9.x/thumbs/svg?seed=${Math.floor(Math.random() * 100000) + 1}&randomizeIds=true`}
        class="avatar"
      />
      {#if $page.data.session}
        <span class="signedInText">
          {$page.data.session.user?.email ?? $page.data.session.user?.name}
        </span>
        <SignOut>
          <div slot="submitButton" class="buttonPrimary">Sign out</div>
        </SignOut>
      {:else}
        <span class="notSignedInText">You are not signed in</span>
        <SignIn>
          <div slot="submitButton" class="buttonPrimary">Sign in</div>
        </SignIn>
      {/if}
    </div>
  </div>
  <nav>
    <ul class="navItems">
      <li class="navItem"><a href="/">Home</a></li>
      <li class="navItem"><a href="/protected">Protected</a></li>
    </ul>
  </nav>
</header>
<style>
  .nojs-show {
    opacity: 1;
    top: 0;
  }
  .signedInStatus {
    display: block;
    min-height: 4rem;
  }
  .loaded {
    position: relative;
    top: 0;
    opacity: 1;
    overflow: hidden;
    display: flex;
    align-items: center;
    border-radius: 0 0 0.6rem 0.6rem;
    padding: 0.6rem 1rem;
    margin: 0;
    background-color: rgba(0, 0, 0, 0.05);
    transition: all 0.2s ease-in;
  }
  .signedInText,
  .notSignedInText {
    justify-content: end;
    padding-left: 1rem;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    display: inherit;
    line-height: 1.3rem;
    flex: 1;
  }
  .signedInText {
    padding-top: 0rem;
    left: 4.6rem;
  }
  .avatar {
    border-radius: 2rem;
    float: left;
    height: 2.8rem;
    width: 2.8rem;
    background-color: white;
    background-size: cover;
    background-repeat: no-repeat;
  }
  .buttonPrimary {
    font-weight: 500;
    border-radius: 0.3rem;
    cursor: pointer;
    font-size: 1rem;
    line-height: 1.4rem;
    position: relative;
    justify-self: end;
    background-color: #346df1;
    color: #fff;
    text-decoration: none;
    padding: 0.7rem 1.4rem;
  }
  .buttonPrimary:hover {
    box-shadow: inset 0 0 5rem rgba(0, 0, 0, 0.2);
  }
  .navItems {
    margin-bottom: 2rem;
    padding: 0;
    list-style: none;
  }
  .navItem {
    display: inline-block;
    margin-right: 1rem;
  }
  :global(form button) {
    border: none !important;
  }
</style>

================
File: apps/examples/sveltekit/src/routes/protected/+page.svelte
================
<script lang="ts">
  import { page } from "$app/stores"
</script>
{#if $page.data.session}
  <h1>Protected page</h1>
  <p>
    This is a protected content. You can access this content because you are
    signed in.
  </p>
  <p>Session expiry: {$page.data.session?.expires}</p>
{:else}
  <h1>Access Denied</h1>
{/if}

================
File: apps/examples/sveltekit/src/routes/signin/+page.server.ts
================
import { signIn } from "../../auth"
import type { Actions } from "./$types"

================
File: apps/examples/sveltekit/src/routes/signout/+page.server.ts
================
import { signOut } from "../../auth"
import type { Actions } from "./$types"

================
File: apps/examples/sveltekit/src/routes/+layout.server.ts
================
import type { LayoutServerLoad } from "./$types"
export const load: LayoutServerLoad = async (event) =>

================
File: apps/examples/sveltekit/src/routes/+layout.svelte
================
<script lang="ts">
  import Header from "$components/header.svelte"
  import Footer from "$components/footer.svelte"
</script>
<div class="container">
  <Header />
  <slot />
  <Footer />
</div>
<style>
  :global(body) {
    font-family:
      ui-sans-serif,
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      "Helvetica Neue",
      Arial,
      "Noto Sans",
      sans-serif,
      "Apple Color Emoji",
      "Segoe UI Emoji",
      "Segoe UI Symbol",
      "Noto Color Emoji";
    padding: 0 1rem 0rem 1rem;
    max-width: 768px;
    margin: 0 auto;
    background: #fff;
    color: #333;
  }
  :global(li),
  :global(p) {
    line-height: 1.5rem;
  }
  :global(a) {
    font-weight: 500;
  }
  :global(hr) {
    border: 1px solid #ddd;
  }
  :global(iframe) {
    background: #ccc;
    border: 1px solid #ccc;
    height: 10rem;
    width: 100%;
    border-radius: 0.5rem;
    filter: invert(1);
  }
  .container {
    height: 100dvh;
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: stretch;
  }
</style>

================
File: apps/examples/sveltekit/src/routes/+page.svelte
================
<main>
  <h1>SvelteKit Auth Example</h1>
  <p>
    This is an example site to demonstrate how to use <a
      href="https://kit.svelte.dev/">SvelteKit</a
    >
    with <a href="https://sveltekit.authjs.dev">SvelteKit Auth</a> for authentication.
  </p>
</main>
<style>
  main {
    flex: 1;
  }
</style>

================
File: apps/examples/sveltekit/src/app.d.ts
================
/// <reference types="@auth/sveltekit" />

================
File: apps/examples/sveltekit/src/app.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%sveltekit.assets%/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    %sveltekit.head%
  </head>
  <body>
    <div>%sveltekit.body%</div>
  </body>
</html>

================
File: apps/examples/sveltekit/src/auth.ts
================
import { SvelteKitAuth } from "@auth/sveltekit"
import Apple from "@auth/sveltekit/providers/apple"
import Auth0 from "@auth/sveltekit/providers/auth0"
import AzureB2C from "@auth/sveltekit/providers/azure-ad-b2c"
import BoxyHQSAML from "@auth/sveltekit/providers/boxyhq-saml"
import Cognito from "@auth/sveltekit/providers/cognito"
import Coinbase from "@auth/sveltekit/providers/coinbase"
import Discord from "@auth/sveltekit/providers/discord"
import Dropbox from "@auth/sveltekit/providers/dropbox"
import Facebook from "@auth/sveltekit/providers/facebook"
import GitHub from "@auth/sveltekit/providers/github"
import GitLab from "@auth/sveltekit/providers/gitlab"
import Google from "@auth/sveltekit/providers/google"
import Hubspot from "@auth/sveltekit/providers/hubspot"
import Keycloak from "@auth/sveltekit/providers/keycloak"
import LinkedIn from "@auth/sveltekit/providers/linkedin"
import Netlify from "@auth/sveltekit/providers/netlify"
import Okta from "@auth/sveltekit/providers/okta"
import Passage from "@auth/sveltekit/providers/passage"
import Pinterest from "@auth/sveltekit/providers/pinterest"
import Reddit from "@auth/sveltekit/providers/reddit"
import Slack from "@auth/sveltekit/providers/slack"
import Spotify from "@auth/sveltekit/providers/spotify"
import Twitch from "@auth/sveltekit/providers/twitch"
import Twitter from "@auth/sveltekit/providers/twitter"
import WorkOS from "@auth/sveltekit/providers/workos"
import Zoom from "@auth/sveltekit/providers/zoom"
import { env } from "$env/dynamic/private"

================
File: apps/examples/sveltekit/src/hooks.server.ts
================


================
File: apps/examples/sveltekit/.env.example
================
# Providers for example app
AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=
AUTH_LINKEDIN_ID=
AUTH_LINKEDIN_SECRET=
AUTH_GOOGLE_ID=
AUTH_GOOGLE_SECRET=
AUTH_FACEBOOK_ID=
AUTH_FACEBOOK_SECRET=
AUTH_TWITTER_ID=
AUTH_TWITTER_SECRET=
AUTH_AUTH0_ID=
AUTH_AUTH0_SECRET=
AUTH_AUTH0_ISSUER=
AUTH_DISCORD_ID=
AUTH_DISCORD_SECRET=
AUTH_TWITCH_ID=
AUTH_TWITCH_SECRET=
AUTH_PINTEREST_ID=
AUTH_PINTEREST_SECRET=

# On UNIX systems you can use `openssl rand -hex 32` or 
# https://generate-secret.vercel.app/32 to generate a secret.
AUTH_SECRET=

================
File: apps/examples/sveltekit/.eslintignore
================
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: apps/examples/sveltekit/.eslintrc.cjs
================


================
File: apps/examples/sveltekit/.gitignore
================
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example
.vercel
.output
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: apps/examples/sveltekit/.prettierignore
================
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: apps/examples/sveltekit/.prettierrc
================
{
  "semi": false,
  "plugins": ["prettier-plugin-svelte"],
  "overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
}

================
File: apps/examples/sveltekit/package.json
================
{
  "private": true,
  "description": "An example project for Auth.js with SvelteKit",
  "repository": "https://github.com/nextauthjs/sveltekit-auth-example",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "homepage": "https://sveltekit-auth-example.vercel.app",
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch"
  },
  "devDependencies": {
    "@sveltejs/adapter-auto": "3.2.0",
    "@sveltejs/kit": "2.8.3",
    "@sveltejs/vite-plugin-svelte": "^3.1.0",
    "svelte": "4.2.19",
    "svelte-check": "3.6.9",
    "typescript": "5.4.5",
    "vite": "5.2.14"
  },
  "dependencies": {
    "@auth/sveltekit": "latest"
  },
  "type": "module"
}

================
File: apps/examples/sveltekit/README.md
================
> The example repository is maintained from a [monorepo](https://github.com/nextauthjs/next-auth/tree/main/apps/examples/sveltekit). Pull Requests should be opened against [`nextauthjs/next-auth`](https://github.com/nextauthjs/next-auth).

<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank">
   <img height="64" src="https://authjs.dev/img/logo-sm.png" />
   </a>
   <a href="https://kit.svelte.dev" target="_blank">
   <img height="64" src="https://upload.wikimedia.org/wikipedia/commons/1/1b/Svelte_Logo.svg" />
   </a>
   <h3 align="center"><b>SvelteKit Auth</b> - Example App</h3>
   <p align="center">
   Open Source. Full Stack. Own Your Data.
   </p>
   <p align="center" style="align: center;">
      <a href="https://npm.im/@auth/sveltekit">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/sveltekit?color=green&label=@auth/sveltekit&style=flat-square">
      </a>
      <a href="https://bundlephobia.com/result?p=@auth/sveltekit">
        <img src="https://img.shields.io/bundlephobia/minzip/@auth/sveltekit?label=size&style=flat-square" alt="Bundle Size"/>
      </a>
      <a href="https://www.npmtrends.com/@auth/sveltekit">
        <img src="https://img.shields.io/npm/dm/@auth/sveltekit?label=downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://npm.im/@auth/sveltekit">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
   </p>
</p>

## Overview

This is the official SvelteKit Auth example for [Auth.js](https://sveltekit.authjs.dev).

## Getting started

You can instantly deploy this example to [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=sveltekit-auth-example) by clicking the following button.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https://github.com/nextauthjs/sveltekit-auth-example&project-name=sveltekit-auth-example&repository-name=sveltekit-auth-example)

================
File: apps/examples/sveltekit/svelte.config.js
================
/** @type {import('@sveltejs/kit').Config} */
⋮----
// Consult https://kit.svelte.dev/docs/integrations#preprocessors
// for more information about preprocessors
preprocess: vitePreprocess(),
⋮----
adapter: adapter(),

================
File: apps/examples/sveltekit/tsconfig.json
================
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true
  }
  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
}

================
File: apps/examples/sveltekit/vite.config.js
================
export default defineConfig({
⋮----
plugins: [sveltekit()],

================
File: apps/playgrounds/README.md
================
<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center">Auth.js library</a></h3>
   <h4 align="center">Authentication for the Web.</h4>
   <p align="center" style="align: center;">
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
      <a href="https://npm.im/@auth/core">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/core?color=green&label=@auth/core&style=flat-square">
      </a>
      <a href="https://www.npmtrends.com/@auth/core">
        <img src="https://img.shields.io/npm/dm/@auth/core?label=%20downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://github.com/nextauthjs/next-auth/stargazers">
        <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
      </a>
   </p>
</p>

The playgrounds have been moved to [nextauthjs/playgrounds](https://github.com/nextauthjs/playgrounds).

================
File: apps/proxy/api/callback/[auth].ts
================


================
File: apps/proxy/api/[auth].ts
================
import { Auth, setEnvDefaults, type AuthConfig } from "@auth/core"
import Apple from "@auth/core/providers/apple"
import Auth0 from "@auth/core/providers/auth0"
import AzureB2C from "@auth/core/providers/azure-ad-b2c"
import BankId from "@auth/core/providers/bankid-no"
import BoxyHQSAML from "@auth/core/providers/boxyhq-saml"
import Cognito from "@auth/core/providers/cognito"
import Coinbase from "@auth/core/providers/coinbase"
import Discord from "@auth/core/providers/discord"
import Dropbox from "@auth/core/providers/dropbox"
import Facebook from "@auth/core/providers/facebook"
import GitHub from "@auth/core/providers/github"
import GitLab from "@auth/core/providers/gitlab"
import Google from "@auth/core/providers/google"
import Hubspot from "@auth/core/providers/hubspot"
import Keycloak from "@auth/core/providers/keycloak"
import LinkedIn from "@auth/core/providers/linkedin"
import MicrosoftEntraId from "@auth/core/providers/microsoft-entra-id"
import Netlify from "@auth/core/providers/netlify"
import Okta from "@auth/core/providers/okta"
import Passage from "@auth/core/providers/passage"
import Pinterest from "@auth/core/providers/pinterest"
import Reddit from "@auth/core/providers/reddit"
import Salesforce from "@auth/core/providers/salesforce"
import Slack from "@auth/core/providers/slack"
import Spotify from "@auth/core/providers/spotify"
import Twitch from "@auth/core/providers/twitch"
import Twitter from "@auth/core/providers/twitter"
import Vipps from "@auth/core/providers/vipps"
import WorkOS from "@auth/core/providers/workos"
import Zoom from "@auth/core/providers/zoom"
⋮----
profile(profile: any)
⋮----
export default function handler(req: Request)

================
File: apps/proxy/.env.example
================
VERCEL="1"
# https://vercel.com/changelog/corepack-experimental-is-now-available
ENABLE_EXPERIMENTAL_COREPACK="1"

# https://authjs.dev/getting-started/deployment#securing-a-preview-deployment
AUTH_SECRET= # openssl rand -base64 64
AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=

================
File: apps/proxy/.gitignore
================
# dependencies
/node_modules

# misc
.DS_Store
*.pem

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo

================
File: apps/proxy/package.json
================
{
  "name": "proxy",
  "description": "Proxy for Auth.js hosted examples",
  "private": true,
  "type": "module",
  "packageManager": "pnpm@9.10.0",
  "dependencies": {
    "@auth/core": "latest"
  }
}

================
File: apps/proxy/README.md
================
TODO

================
File: apps/proxy/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "skipLibCheck": true
  },
  "include": ["**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: docs/.vscode/settings.json
================
{
  "cSpell.words": ["Passwordless"]
}

================
File: docs/app/api/cron/route.ts
================
import { createClient } from "@vercel/kv"
import { NextResponse, NextRequest } from "next/server"
export async function GET(req: NextRequest)
⋮----
// Check Authorization
⋮----
// Get Vercel KV client
⋮----
// Drop all WebAuthn authenticators
⋮----
// Verify

================
File: docs/app/api/og/route.tsx
================
import { ImageResponse } from "next/og"
import type { NextRequest } from "next/server"
⋮----
export async function GET(request: NextRequest)
⋮----
// New colors: "linear-gradient(to right bottom, rgb(255, 68, 0), rgb(187, 68, 204))",
⋮----
// New colors - '#44BBCC', '#BB44CC', '#FF4400'

================
File: docs/components/Accordion/index.tsx
================
// From Fumadocs: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/src/components/accordion.tsx
⋮----
import type {
  AccordionMultipleProps,
  AccordionSingleProps,
} from "@radix-ui/react-accordion"
import { Check, Link, CaretRight } from "@/icons"
import {
  forwardRef,
  type ComponentPropsWithoutRef,
  useState,
  useEffect,
} from "react"
import { useCopyButton } from "@/utils/useCopyButton"
import cx from "classnames"
⋮----
// If type is undefined
⋮----
// Use `id` instead if presents
⋮----
className=

================
File: docs/components/Blur/index.tsx
================
function Blur()

================
File: docs/components/Code/index.tsx
================
import { useSearchParams } from "next/navigation"
import { useRouter } from "next/router"
import { useThemeConfig } from "nextra-theme-docs"
import { Tabs } from "nextra/components"
import React, { Children, useEffect, MouseEvent } from "react"
interface ChildrenProps {
  children: React.ReactNode
}
⋮----
// Code.Solid = SolidCode;
⋮----
// [SolidCode.name]: "SolidStart",
⋮----
// [SolidCode.name]: "SolidStart",
⋮----
const findFrameworkKey = (
  text: string,
  frameworks: Record<string, string>
): string | null =>
const getIndexFrameworkFromUrl = (
  url: string,
  frameworks: Record<string, string>
): number | null =>
const getIndexFrameworkFromStorage = (
  frameworks: Record<string, string>,
  isAllFrameworks: boolean
): number | null =>
const updateFrameworkStorage = (
  frameworkURI: string,
  frameworks: Record<string, string>,
  isAllFrameworks: boolean
): void =>
⋮----
// Update other storage if framework exists in other object
⋮----
// see https://github.com/shuding/nextra/blob/7ae958f02922e608151411042f658480b75164a6/packages/nextra/src/client/components/tabs/index.client.tsx#L106
⋮----
// @ts-expect-error: Hacky dynamic child wrangling
⋮----
const updateFrameworkInUrl = (frameworkURI: string): void =>
const handleClickFramework = (event: MouseEvent<HTMLDivElement>) =>
⋮----
// Focus and scroll to maintain position when code blocks above are expanded
⋮----
items=
⋮----
// @ts-expect-error: Hacky dynamic child wrangling
⋮----
// @ts-expect-error: Hacky dynamic child wrangling
⋮----
function SvelteCode(
// function SolidCode({ children }: ChildrenProps) {
//   return <Tabs.Tab>{children}</Tabs.Tab>;
// }
function ExpressCode(
function QwikCode(

================
File: docs/components/DocSearch/index.tsx
================
import dynamic from "next/dynamic"

================
File: docs/components/DocSearch/wrapper.tsx
================
import { DocSearch } from "@docsearch/react"
import { useTheme } from "nextra-theme-docs"
import { useEffect } from "react"
⋮----
function App()
⋮----
// hack to get DocSearch to use dark mode colors if applicable

================
File: docs/components/Footer/index.tsx
================
import { useEffect } from "react"
import { useRouter } from "next/router"
import cx from "classnames"
function kFormatter(num: number)
⋮----
// CarbonAds hydration error workaround hack
⋮----
href="https://github.com/nextauthjs/next-auth"

================
File: docs/components/FrameworkLink/index.tsx
================
import { Link } from "@/components/Link"
import { Flask } from "@/icons/Flask"
import { ArrowSquareOut } from "@/icons/ArrowSquareOut"
import { GithubLogo } from "@/icons/GithubLogo"
interface FrameworkLinkProps {
  id: string
  name: string
  demo: string
  repo: string
  isExperimental?: boolean
  isInvert?: boolean
}

================
File: docs/components/Guides/index.tsx
================
import {
  ShieldStar,
  CaretRight,
  Link as LinkIcon,
  ArrowRight,
  Browser,
  GithubLogo,
} from "@/icons"
import Link from "next/link"
import Image from "next/image"
export function Guides()
⋮----
href={`https://github.com/nextauthjs/${f.repo}`}

================
File: docs/components/Icons/ArrowRight.tsx
================
type Props = {
  className?: string
}
export function ArrowRight(

================
File: docs/components/Icons/ArrowSquareOut.tsx
================
type Props = {
  className?: string
}
export function ArrowSquareOut(

================
File: docs/components/Icons/Browser.tsx
================
type Props = {
  className?: string
}
export function Browser(

================
File: docs/components/Icons/CaretRight.tsx
================
type Props = {
  className?: string
}
export function CaretRight(

================
File: docs/components/Icons/ChatCircleText.tsx
================
type Props = {
  className?: string
}
export function ChatCircleText(

================
File: docs/components/Icons/Check.tsx
================
type Props = {
  className?: string
}
export function Check(

================
File: docs/components/Icons/Flask.tsx
================
type Props = {
  className?: string
}
export function Flask(

================
File: docs/components/Icons/GitBranch.tsx
================
type Props = {
  className?: string
}
export function GitBranch(

================
File: docs/components/Icons/GithubLogo.tsx
================
type Props = {
  className?: string
}
export function GithubLogo(

================
File: docs/components/Icons/index.tsx
================
// Downloaded and copied from: https://phosphoricons.com/

================
File: docs/components/Icons/Link.tsx
================
type Props = {
  className?: string
}
export function Link(

================
File: docs/components/Icons/Plus.tsx
================
type Props = {
  className?: string
}
export function Plus(

================
File: docs/components/Icons/SealWarning.tsx
================
type Props = {
  className?: string
}
export function SealWarning(

================
File: docs/components/Icons/ShieldStar.tsx
================
type Props = {
  className?: string
}
export function ShieldStar(

================
File: docs/components/Icons/Sparkle.tsx
================
type Props = {
  className?: string
}
export function Sparkle(

================
File: docs/components/InkeepSearch/index.tsx
================
import { useState, useCallback } from "react"
import { InkeepCustomTrigger, InkeepCustomTriggerProps } from "@inkeep/widgets"
import useInkeepSettings from "@/utils/useInkeepSettings"
import { Sparkle } from "@/icons"
export function InkeepTrigger()

================
File: docs/components/Link/index.tsx
================
import { ChildrenProps } from "../../utils/types"
export function Link({
  children,
  ...rest
}: ChildrenProps &

================
File: docs/components/ListDisclosure/index.tsx
================
import { useListDisclosure } from "./useListDisclosure"
import cx from "classnames"
interface Props {
  children: React.ReactElement[]
  limit: number
  className?: string
}
export function ListDisclosure(
⋮----
className=

================
File: docs/components/ListDisclosure/useListDisclosure.ts
================
import { useState } from "react"
export function useListDisclosure(initialLimit: number)
⋮----
function handleDisplayMore()
function handleCollapseAll()

================
File: docs/components/LogosMarquee/index.tsx
================
import { useEffect, useState } from "react"
import dynamic from "next/dynamic"
import manifest from "@/data/manifest.json"
⋮----
const clamp = (min: number, num: number, max: number)
function changeScale()
function changeLogoCount()
export const LogosMarquee = () =>
⋮----
// Window resize handling
function handleEvent()

================
File: docs/components/LogosMarquee/logo.tsx
================
import { motion } from "framer-motion"
⋮----
function randomFloat(min: number, max: number): number
⋮----
// @ts-expect-error

================
File: docs/components/OAuthProviderInstructions/content/components/SetupCode.tsx
================
import { Code } from "@/components/Code"
import { Pre, Code as NXCode } from "nextra/components"
import { TSIcon } from "./TSIcon"
interface Props {
  providerSymbol: string
  providerId: string
  highlight: (code: string) => string
}

================
File: docs/components/OAuthProviderInstructions/content/components/SignInCode.tsx
================
import { Code } from "@/components/Code"
import { Pre } from "nextra/components"
import { TSIcon } from "./TSIcon"
interface Props {
  providerName: string
  providerId: string
  highlight: (code: string) => string
}

================
File: docs/components/OAuthProviderInstructions/content/components/StepTitle.tsx
================
interface Props {
  children: React.ReactNode
  count: number
}
export function StepTitle(

================
File: docs/components/OAuthProviderInstructions/content/components/TSIcon.tsx
================
export function TSIcon()

================
File: docs/components/OAuthProviderInstructions/content/index.tsx
================
import { useEffect, useState } from "react"
import { type Highlighter, createHighlighter } from "shiki"
import cx from "classnames"
import { Callout, Pre, Code as NXCode } from "nextra/components"
import { StepTitle } from "./components/StepTitle"
import { SetupCode } from "./components/SetupCode"
import { SignInCode } from "./components/SignInCode"
import { Link } from "@/components/Link"
import { Code } from "@/components/Code"
import manifest from "@/data/manifest.json"
interface Props {
  providerId: string
  disabled?: boolean
}
export function OAuthInstructions(
⋮----
const highlight = (code: string): string =>
⋮----
className=
⋮----
{/* Step 1 */}
⋮----
{/* Step 2 */}
⋮----
{/* Step 3 */}
⋮----
{/* Step 4 */}
⋮----
{/* Step 5 */}

================
File: docs/components/OAuthProviderInstructions/index.tsx
================


================
File: docs/components/OAuthProviderInstructions/OAuthProviderSelect.tsx
================
import {
  Combobox,
  ComboboxItem,
  ComboboxPopover,
  ComboboxProvider,
} from "@ariakit/react"
import dynamic from "next/dynamic"
import { Link } from "@/components/Link"
import manifest from "@/data/manifest.json"
import {
  PreviewProviders,
  type Provider,
} from "@/components/SearchBarProviders/PreviewProviders"
import { useSelectCombobox } from "@/hooks/use-select-combobox"

================
File: docs/components/RichTabs/index.tsx
================
import { List, Trigger, Root, Content } from "@radix-ui/react-tabs"
import type {
  TabsListProps,
  TabsTriggerProps,
  TabsContentProps,
  TabsProps,
} from "@radix-ui/react-tabs"
import cx from "classnames"
import { useRichTabs } from "./useRichTabs"
import { useState } from "react"
⋮----
className=

================
File: docs/components/RichTabs/useRichTabs.ts
================
import { useSearchParams, useRouter, usePathname } from "next/navigation"
interface Args {
  onTabChange: ((value: string) => void) | undefined
  defaultValue: string
  value: string
  persist?: boolean
  tabKey?: string
  setValue?: any
}
export function useRichTabs({
  onTabChange,
  tabKey = "tab",
  persist = true,
  value,
  setValue,
}: Args)
⋮----
// Handle searchParams
⋮----
// TODO: Handle localStorage saved value
// if (!searchParamsTab && typeof window !== "undefined") {
//   const storedTab = window.localStorage.getItem(`authjs.${tabKey}`)
//   if (storedTab && storedTab !== value) {
//     setValue(storedTab)
//   }
// }
//
function handleValueChanged(value: string)

================
File: docs/components/Screenshot/index.tsx
================
import cx from "classnames"
import Image from "next/image"
⋮----
className=

================
File: docs/components/SearchBarProviders/PreviewProviders.tsx
================
export interface Provider {
  id: string
  name: string
}
export interface PreviewProvidersProps {
  className?: string
  providers: Provider[]
  onSelected: (provider: Provider) => void
}
export function PreviewProviders({
  className,
  providers,
  onSelected,
}: PreviewProvidersProps)

================
File: docs/hooks/use-select-combobox.ts
================
import { ChangeEvent, useState } from "react"
interface SelectComboboxValue {
  id: string
  name: string
}
interface SelectComboboxProps {
  defaultValue?: SelectComboboxValue
  items: SelectComboboxValue[]
}
export const useSelectCombobox = ({
  defaultValue = { id: "", name: "" },
  items,
}: SelectComboboxProps) =>
⋮----
const handleSelect = (value: SelectComboboxValue) =>
const handleChange = (event: ChangeEvent<HTMLInputElement>) =>

================
File: docs/pages/concepts/_meta.js
================


================
File: docs/pages/concepts/database-models.mdx
================
import { Callout } from "nextra/components"

# Database models

Auth.js can be used with any database. Models tell you what structures Auth.js expects from your database. Models will vary slightly depending on which adapter you use, but in general, will have a similar structure to the graph below. Each model can be extended with additional fields.

<Callout type="info">
  Auth.js uses `camelCase` for its database rows while respecting the
  conventional `snake_case` formatting for OAuth-related values. If the mixed
  casing is an issue for you, most adapters have a dedicated documentation
  section on how to force a casing convention.
</Callout>

```mermaid
erDiagram
    User ||--|{ Account : ""
    User {
      string id
      string name
      string email
      timestamp emailVerified
      string image
    }
    User ||--|{ Session : ""
    Session {
      string id
      timestamp expires
      string sessionToken
      string userId
    }
    Account {
      string id
      string userId
      string type
      string provider
      string providerAccountId
      string refresh_token
      string access_token
      int expires_at
      string token_type
      string scope
      string id_token
      string session_state
    }
    User ||--|{ VerificationToken : ""
    VerificationToken {
      string identifier
      string token
      timestamp expires
    }
```

---

### User

The User model is for information such as the user's name and email address. Email address is optional, but if one is specified for a `User`, then it must be unique.

<Callout>
  User creation in the database is automatic and happens when the user is logged
  in for the first time with an authentication provider (either OAuth, magic
  links or plain credentials).
</Callout>

**OAuth sign in**

If the first sign-in is via the [OAuth Provider](/getting-started/authentication/oauth), the default data
saved is `id`, `name`, `email` and `image`. You can add more profile data by returning extra
fields in your [OAuth provider](/guides/configuring-oauth-providers#use-your-own-provider)'s [`profile()`](/reference/core/providers#profile) callback.

**Magic links sign in**

If the first sign-in is via the [Email Provider](/getting-started/authentication/email), then the saved user will have `id`, `email`, `emailVerified`, where `emailVerified` is the timestamp of when the user was created.

### Account

The Account model is for information about accounts associated with a `User`. A single `User` can have multiple `Account`(s), but each `Account` can only have one `User`.

<Callout>
  Account creation in the database is automatic and happens when the user is
  logged in for the first time with an authentication provider (either OAuth,
  magic links or plain credentials) or the
  [`Adapter.linkAccount`](/reference/core/adapters#linkaccount) method is
  invoked.
</Callout>

The default data saved is `access_token`, `expires_at`, `refresh_token`, `id_token`, `token_type`,
`scope` and `session_state`. You can save other fields or remove the ones you don't need by
returning them in the [OAuth provider](/guides/configuring-oauth-providers#use-your-own-provider)'s [`account()`](/reference/core/providers#account) callback.

Linking `Accounts`(s) to `User`(s) happen automatically, only when they have the same e-mail address, and the user is currently signed in. Check the [FAQ](/concepts#security) for more information on why this is a requirement.

You can manually unlink accounts if your adapter implements the
`unlinkAccount` method. Make sure to take all the necessary security steps to
avoid data loss.

### Session

Even if you are using a database, you can still use **JWT** for session handling for fast access, in which case, this model can be opted out in your database.

- [Learn more about session strategies](/concepts/session-strategies) and their trade-offs.

The Session model is used for database sessions and it can store arbitrary data for an active user session. A single `User` can have multiple `Session`(s), each `Session` can only have one `User`.

When a Session is read, its `expires` field is checked to see if the session is still valid. If it has expired, the session is deleted from the database. You can also do this clean-up periodically in the background to avoid Auth.js
extra delete call to the database during an active session retrieval. This
might result in a slight performance increase.

### VerificationToken

The `VerificationToken` model is used to store tokens for email-based **magic-link** sign in.

A single `User` can have multiple open `VerificationToken`s active (e.g. sign in with different devices).

<Callout>
  Due to users forgetting or failures during the sign-in flow, you might end up
  with unwanted rows in your database. You might want to periodically clean
  these up to avoid filling up your database with unnecessary data.
</Callout>

It has been designed so that it can be extended for other verification purposes in the future (e.g. 2FA / magic codes, etc... ).

Auth.js makes sure that every token is usable only once, and by default has a short lifetime (1 day, can be configured by `maxAge`). If your user did not manage to finish the sign-in flow in time, they will have to start the sign-in process again.

================
File: docs/pages/concepts/index.mdx
================
import { Accordion, Accordions } from "@/components/Accordion"

# About Auth.js

### Is Auth.js commercial software?

Auth.js is an open-source project built by individual contributors.

It is not commercial software and is not associated with a commercial organization.

### Compatibility

<Accordions>
<Accordion title="What databases does Auth.js support?">

You can use Auth.js with many flavors of MySQL, MariaDB, PostgreSQL, MongoDB and SQLite. See our [using a database adapter guide](/getting-started/database). There are adapters for most popular database types available.

You can use also Auth.js with any database using a custom database adapter, or by using a custom credentials authentication provider - e.g. to support signing in with a username and password stored in an existing database.

You do not need a database to use Auth.js, however. You can use Auth.js with JWT-based sessions, which do not require a database.

</Accordion>

<Accordion title="What authentication services does Auth.js support?">

Auth.js includes built-in support for 4 high-level authentication types - OAuth / OICD, Email magic-links, WebAuthn / Passkeys and username/password credentials. Check out our [authentication page](/getting-started/authentication) for more information.

</Accordion>

<Accordion title="Does Auth.js support signing in with a username and password?">

Auth.js is designed to avoid the need to store passwords and user accounts.

However, if you'd still like to use username/password based login, then you can use our [Credentials provider](/getting-started/authentication/credentials) to allow signing in with a username and password.

_If you use a custom credentials provider user accounts will not be persisted in a database by Auth.js (even if one is configured). The option to use JSON Web Tokens for session tokens (which allow sign-in without using a session database) must be enabled to use a custom credentials provider._

</Accordion>

<Accordion title="Can I use Auth.js with a website that does not use Next.js?">

Auth.js was initially designed for use with Next.js and Serverless, however, over time we've evolved into a framework-agnostic authentication solution. If you're curious, take a look at [our history page](/contributors#history). We currently have framework packages available for Next.js (`next-auth`), SvelteKit (`@auth/sveltekit`), SolidStart (`@auth/solid`), Express (`@auth/express`) and more in the pipeline.

</Accordion>

<Accordion title="Can I use Auth.js with React Native?">

Auth.js is designed as a secure, confidential client and implements a server-side authentication flow.

It is not intended to be used in native applications on desktop or mobile applications, which typically implement public clients (e.g. with client/secrets embedded in the application).

</Accordion>

<Accordion title="Is Auth.js supporting TypeScript?">

Yes! Check out the [TypeScript docs](/getting-started/typescript)

</Accordion>

<Accordion title="Is Auth.js compatible with Next.js 12 Middleware?">

[Next.js middleware](https://nextjs.org/docs/middleware) is supported and is recommended as of version 5. An example middleware setup can be found [here](/getting-started/session-management/protecting#nextjs-middleware).

</Accordion>
</Accordions>

### Session strategies

Check out the [Session strategies page](/concepts/session-strategies) to learn more.

### Security

Parts of this section have been moved to their own [page](/security).

<Accordions>
<Accordion title="How do I get Refresh Tokens and Access Tokens for an OAuth account?">

Auth.js provides a solution for authentication, session management and user account creation.

Auth.js records Refresh Tokens and Access Tokens on sign-in (if supplied by the provider) and it will pass them, along with the User ID, Provider and Provider Account ID, to either:

1. A database - if a database connection string is provided
2. The JSON Web Token callback - if JWT sessions are enabled (e.g. if no database is specified)

You can then look them up from the database or persist them to the JSON Web Token.

Note: Auth.js does not currently handle Access Token rotation for OAuth providers for you, however, you can check out [this tutorial](/guides/refresh-token-rotation) if you want to implement it.

</Accordion>
<Accordion title="When I sign in with another account with the same email address, why are accounts not linked automatically?">

Automatic account linking on sign-in is not secure between arbitrary providers - except for allowing users to sign in via email addresses as a fallback (as they must verify their email address as part of the flow).

When an email address is associated with an OAuth account it does not necessarily mean that it has been verified as belonging to the account holder — how email address verification is handled is not part of the OAuth specification and varies between providers (e.g. some do not verify first, some do verify first, others return metadata indicating the verification status).

With automatic account linking on sign-in, this can be exploited by bad parties to hijack accounts by creating an OAuth account associated with the email address of another user.

For this reason, it is not secure to automatically link accounts between arbitrary providers on sign-in, which is why this feature is generally not provided by an authentication service and is not provided by Auth.js.

Automatic account linking is seen on some sites, sometimes insecurely. It can be technically possible to do automatic account linking securely if you trust all the providers involved to ensure they have securely verified the email address associated with the account, but requires placing trust (and transferring the risk) to those providers to handle the process securely.

Examples of scenarios where this is secure include an OAuth provider you control (e.g. that only authorizes users internal to your organization) or a provider you explicitly trust to have verified the users' email address.

Automatic account linking is not a planned feature of Auth.js, however, there is scope to improve the user experience of account linking and of handling this flow, securely. Typically this involves providing a fallback option to sign in via email, which is already possible (and recommended), but the current implementation of this flow could be improved.

Providing support for secure account linking and unlinking of additional providers - which can only be done if a user is already signed in - was originally a feature in v1.x but has not been present since v2.0, and is planned to return in a future release.

</Accordion>
</Accordions>

### Feature Requests

<Accordions>
<Accordion title="Why doesn't Auth.js support [a particular feature]?">

Auth.js is an open-source project built by individual contributors who are volunteers writing code and providing support in their spare time.

If you would like Auth.js to support a particular feature, the best way to help make it happen is to raise a feature request describing the feature and offer to work with other contributors to develop and test it.

If you are not able to develop a feature yourself, you can offer to sponsor someone to work on it.

</Accordion>
<Accordion title="I disagree with a design decision, how can I change your mind?">

Product design decisions on Auth.js are made by core team members.

You can raise suggestions as feature requests for enhancement.

Requests that provide the detail requested in the template and follow the format requested may be more likely to be supported, as additional detail prompted in the templates often provides important context.

Ultimately if your request is not accepted or is not actively in development, you are always free to fork the project under the terms of the ISC License.

</Accordion>
</Accordions>

================
File: docs/pages/concepts/oauth.mdx
================
---
title: Auth.js | OAuth
---

import { Callout } from "nextra/components"
import { Screenshot } from "@/components/Screenshot"

# OAuth

<Callout>
  Auth.js is designed to work with any OAuth service, it supports **OAuth 2.0**
  and **OpenID Connect** and has built-in support for most popular sign-in
  services.
</Callout>

Authentication Providers in **Auth.js** are predefined [OAuth](https://oauth.net/2/) configurations that allow your users to sign in with pre-existing logins at their favorite services. You can use any of our predefined providers, or write your own custom OAuth configuration. For customizing or writing your own OAuth provider, see our [configuring OAuth providers](/guides/configuring-oauth-providers) guide.

At a high level, the OAuth **Authorization Code** flow we support generally has 6 parts:

1. The application requests authorization to access service resources from the user
2. If the user authorized the request, the application receives an authorization grant
3. The application requests an access token from the authorization server (API) by presenting authentication of its own identity, and the authorization grant
4. If the application identity is authenticated and the authorization grant is valid, the authorization server (API) issues an access token to the application. Authorization is complete.
5. The application requests the resource from the resource server (API) and presents the access token for authentication
6. If the access token is valid, the resource server (API) serves the resource to the application

## Diagrams

Below are two diagrams visually illustrating the same basic flow as described above, the OAuth Authorization Code flow. First is a sequence diagram.

```mermaid
sequenceDiagram
    participant Browser
    participant App Server
    participant Auth Server (GitHub)
    Note left of Browser: User clicks on "Sign in"
    Browser->>App Server: GET<br/>"api/auth/signin"
    App Server->>App Server: Computes the available<br/>sign in providers<br/>from the "providers" option
    App Server->>Browser: Redirects to Sign in page
    Note left of Browser: Sign in options<br/>are shown the user<br/>(GitHub, Twitter, etc...)
    Note left of Browser: User clicks on<br/>"Sign in with GitHub"
    Browser->>App Server: POST<br/>"api/auth/signin/github"
    App Server->>App Server: Computes sign in<br/>options for GitHub<br/>(scopes, callback URL, etc...)
    App Server->>Auth Server (GitHub): GET<br/>"github.com/login/oauth/authorize"
    Note left of Auth Server (GitHub): Sign in options<br> are supplied as<br/>query params<br/>(clientId, <br/>scope, etc...)
    Auth Server (GitHub)->>Browser: Shows sign in page<br/>in GitHub.com<br/>to the user
    Note left of Browser: User inserts their<br/>credentials in GitHub
    Browser->>Auth Server (GitHub): GitHub validates the inserted credentials
    Auth Server (GitHub)->>Auth Server (GitHub): Generates one time access code<br/>and calls callback<br>URL defined in<br/>App settings
    Auth Server (GitHub)->>App Server: GET<br/>"api/auth/github/callback?code=123"
    App Server->>App Server: Grabs code<br/>to exchange it for<br/>access token
    App Server->>Auth Server (GitHub): POST<br/>"github.com/login/oauth/access_token"<br/>{code: 123}
    Auth Server (GitHub)->>Auth Server (GitHub): Verifies code is<br/>valid and generates<br/>access token
    Auth Server (GitHub)->>App Server: { access_token: 16C7x... }
    App Server->>App Server: Generates session token<br/>and stores session
    App Server->>Browser: You're now logged in!
```

Next is a swim lane diagram which comes from a great article, [Setting up OAuth with Auth.js and SvelteKit](https://mainmatter.com/blog/2023/11/23/setting-up-oauth-with-auth-js-and-sveltekit/) by [Andrey Mikhaylov](https://lolma.us) of [mainmatter.com](https://mainmatter.com).

import OAuthDiagram from "../../public/img/concepts/oauth-diagram.webp"

<Screenshot src={OAuthDiagram} alt="OAuth Flow Diagram" />

## Further Reading

To learn more, check out the following blog posts:

- Aaron Parecki's blog post [OAuth2 Simplified](https://aaronparecki.com/oauth-2-simplified/)
- Postman's blog post [OAuth 2.0: Implicit Flow is Dead, Try PKCE Instead](https://blog.postman.com/pkce-oauth-how-to/)
- Setting up OAuth with Auth.js and SvelteKit [blog post](https://mainmatter.com/blog/2023/11/23/setting-up-oauth-with-auth-js-and-sveltekit/)

================
File: docs/pages/concepts/session-strategies.mdx
================
import { Callout } from "nextra/components"

# Session strategies

When a user visits your application, you want them to not have to log in every single time. After logging in once, your application should save some data about the user and allow them to pick up where they left off the next time they visit. This is called a session. **Auth.js supports 2 main session strategies**, the JWT-based session and Database session.

<Callout>
  Both session strategies have advantages and disadvantages, which you have to
  evaluate based on the requirements of your application.
</Callout>

You can configure the session strategy using the [`session.strategy`](/reference/core#strategy) option in the main Auth.js config file.

## JWT Session

Auth.js can create sessions using [JSON Web Tokens (JWT)](https://datatracker.ietf.org/doc/html/rfc7519). This is the default session strategy for Auth.js unless a database provider is configured. When a user signs in, a JWT is created [in a `HttpOnly` cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#block_access_to_your_cookies). Making the cookie `HttpOnly` prevents JavaScript from accessing it client-side (via `document.cookie`, for example), which makes it harder for attackers to steal the value. In addition, the JWT is encrypted with a secret key only known to the server. So, even if an attacker were to steal the JWT from the cookie, they could not decrypt it. Combined with a short expiration time, this makes JWTs a secure way to create sessions.

When a user signs out, Auth.js deletes the JWT from the cookies, destroying the session.

### Advantages

- JWTs as a session do not require a database to store sessions; this can be faster, cheaper, and easier to scale.
- This strategy requires fewer resources as you don't need to manage an extra database/service.
- You may then use the created token to pass information between services and APIs on the same domain without having to contact a database to verify the included information.
- You can use JWT to securely store information without exposing it to third-party JavaScript running on your site.

### Disadvantages

- Expiring a JSON Web Token before its encoded expiry is not possible - doing so requires maintaining a server-side blocklist of invalidated tokens (at least until they truly expire) and checking every token against the list every time a token is presented. Auth.js **will** destroy the cookie, but if the user has the JWT saved elsewhere, it will be valid (the server will accept it) until it expires. (Shorter session expiry times are used when using JSON Web Tokens as session tokens to allow sessions to be invalidated sooner and simplify this problem.)
- Auth.js enables advanced features to mitigate the downsides of using shorter session expiry times on the user experience, including automatic session token rotation, optionally sending keep-alive messages (session polling) to prevent short-lived sessions from expiring if there is a window or tab open, background re-validation, and automatic tab/window syncing that keeps sessions in sync across windows any time session state changes or a window or tab gains or loses focus.
- As with database session tokens, JSON Web Tokens are limited in the amount of data you can store in them. There is typically a limit of around 4096 bytes per cookie, though the exact limit varies between browsers. The more data you try to store in a token and the more other cookies you set, the closer you will come to this limit. Auth.js implements session cookie chunking so that cookies over the 4kb limit will get split and reassembled upon parsing. However, since this data needs to be transmitted on every request, you need to be aware of how much data you want to transfer using this technique.
- Even if appropriately configured, information stored in an encrypted JWT should not be assumed to be impossible to decrypt at some point - e.g., due to the discovery of a defect or advances in technology. Data stored in an encrypted JSON Web Token (JWE) _may_ be compromised at some point. The recommendation is to generate a [secret](/reference/core#secret) with high entropy.

## Database session

Alternatively to a JWT session strategy, Auth.js also supports database sessions. In this case, instead of saving a JWT with user data after signing in, Auth.js will create a session in your database. A session ID is then saved in a `HttpOnly` cookie. This is similar to the JWT session strategy, but instead of saving the user data in the cookie, it only stores an obscure value pointing to the session in the database. So whenever you try to access the user session, you will query the database for the data.

When a user signs out, the session is deleted from the database, and the session ID is deleted from the cookies.

### Advantages

- Database sessions can be at any time modified server-side, so you can implement features that might be more difficult - but not impossible - using the JWT strategy, etc.: "sign out everywhere", or limiting concurrent logins
- Auth.js has no opinion on the type of database you are using; we have a big list of [official
  database adapters](/getting-started/database), but you can [implement your
  own](/guides/creating-a-database-adapter) as well

### Disadvantages

- Database sessions need a roundtrip to your database, so they might be slower at scale unless your connections/databases are accommodated for it
- Many database adapters are not yet compatible with the Edge, which would allow faster and cheaper session retrieval
- Setting up a database takes more effort and requires extra services to manage compared to the stateless JWT strategy

================
File: docs/pages/data/manifest.json
================
{
  "frameworks": [
    {
      "id": "Next.js",
      "name": "Auth.js",
      "url": "next-auth-example"
    },
    {
      "id": "sveltekit",
      "name": "SvelteKit Auth",
      "url": "sveltekit-auth-example"
    },
    {
      "id": "solidstart",
      "name": "SolidStart Auth",
      "url": "auth-solid"
    }
  ],
  "adapters": {
    "prisma": "Prisma",
    "drizzle": "Drizzle ORM",
    "neon": "Neon",
    "supabase": "Supabase",
    "firebase": "Firebase",
    "typeorm": "TypeORM",
    "kysely": "Kysely",
    "upstash-redis": "Upstash Redis",
    "azure-tables": "Azure Tables Storage",
    "d1": "D1",
    "dgraph": "Dgraph",
    "dynamodb": "DynamoDB",
    "edgedb": "EdgeDB",
    "fauna": "Fauna",
    "hasura": "Hasura",
    "mikro-orm": "Mikro ORM",
    "mongodb": "MongoDB",
    "neo4j": "Neo4j",
    "pg": "pg",
    "pouchdb": "PouchDB",
    "sequelize": "Sequelize",
    "surrealdb": "SurrealDB",
    "unstorage": "Unstorage",
    "xata": "Xata"
  },
  "providersOAuth": {
    "github": "GitHub",
    "google": "Google",
    "twitter": "Twitter",
    "apple": "Apple",
    "discord": "Discord",
    "auth0": "Auth0",
    "facebook": "Facebook",
    "keycloak": "Keycloak",
    "42-school": "42 School",
    "asgardeo": "Asgardeo",
    "atlassian": "Atlassian",
    "authentik": "Authentik",
    "azure-ad-b2c": "Azure Active Directory B2C",
    "azure-ad": "Azure Active Directory",
    "azure-devops": "Azure DevOps",
    "battlenet": "Battle.net",
    "beyondidentity": "Beyond Identity",
    "bitbucket": "Bitbucket",
    "box": "Box",
    "boxyhq-saml": "BoxyHQ SAML",
    "bungie": "Bungie",
    "click-up": "ClickUp",
    "cognito": "Cognito",
    "coinbase": "Coinbase",
    "descope": "Descope",
    "dribbble": "Dribbble",
    "dropbox": "Dropbox",
    "duende-identityserver-6": "DuendeIdentityServer6",
    "eveonline": "EVE Online",
    "faceit": "FACEIT",
    "figma": "Figma",
    "foursquare": "Foursquare",
    "freshbooks": "Freshbooks",
    "fusionauth": "FusionAuth",
    "gitlab": "GitLab",
    "hubspot": "HubSpot",
    "huggingface": "Hugging Face",
    "identity-server4": "IdentityServer4",
    "instagram": "Instagram",
    "kakao": "Kakao",
    "kinde": "Kinde",
    "line": "LINE",
    "linkedin": "LinkedIn",
    "logto": "Logto",
    "mailchimp": "Mailchimp",
    "mailru": "Mail.ru",
    "mastodon": "Mastodon",
    "mattermost": "Mattermost",
    "medium": "Medium",
    "naver": "Naver",
    "netlify": "Netlify",
    "notion": "Notion",
    "okta": "Okta",
    "onelogin": "OneLogin",
    "osso": "Osso",
    "osu": "Osu!",
    "passage": "Passage",
    "patreon": "Patreon",
    "pinterest": "Pinterest",
    "pipedrive": "Pipedrive",
    "reddit": "Reddit",
    "salesforce": "Salesforce",
    "slack": "Slack",
    "spotify": "Spotify",
    "strava": "Strava",
    "tiktok": "TikTok",
    "todoist": "Todoist",
    "trakt": "Trakt",
    "twitch": "Twitch",
    "united-effects": "United Effects",
    "vk": "VK",
    "webex": "Webex",
    "wikimedia": "Wikimedia",
    "wordpress": "WordPress.com",
    "workos": "WorkOS",
    "yandex": "Yandex",
    "zitadel": "ZITADEL",
    "zoho": "Zoho",
    "zoom": "Zoom"
  },
  "providersEmail": {
    "forwardemail": "Forward Email",
    "resend": "Resend",
    "sendgrid": "Sendgrid",
    "nodemailer": "Nodemailer"
  },
  "requiresIssuer": [
    "asgardeo",
    "auth0",
    "authentik",
    "azure-ad-b2c",
    "battlenet",
    "beyondidentity",
    "boxyhq-saml",
    "cognito",
    "descope",
    "duende-identityserver-6",
    "fusionauth",
    "identity-server4",
    "keycloak",
    "kinde",
    "logto",
    "mastodon",
    "mattermost",
    "nextcloud",
    "okta",
    "ory-hydra",
    "osso",
    "passage",
    "ping-id"
  ]
}

================
File: docs/pages/getting-started/adapters/_meta.js
================


================
File: docs/pages/getting-started/adapters/azure-tables.mdx
================
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/adapters/azure-tables.svg"
  width="64"
  height="64"
/>

# Azure Table Storage Adapter

## Resources

- [Azure Tables documentation](https://azure.microsoft.com/en-us/products/storage/tables)

## Setup

### Installation

```bash npm2yarn
npm install @auth/azure-tables-adapter
```

### Environment Variables

```
AUTH_AZURE_ACCOUNT=storageaccountname
AUTH_AZURE_ACCESS_KEY=longRandomKey
AUTH_AZURE_TABLES_ENDPOINT=https://$AZURE_ACCOUNT.table.core.windows.net
```

### Configuration

1. Create a table for authentication data, `auth` in the example below.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth, { type AuthConfig } from "next-auth"
import { TableStorageAdapter } from "@auth/azure-tables-adapter"
import { AzureNamedKeyCredential, TableClient } from "@azure/data-tables"

const credential = new AzureNamedKeyCredential(
  process.env.AUTH_AZURE_ACCOUNT,
  process.env.AUTH_AZURE_ACCESS_KEY
)
const authClient = new TableClient(
  process.env.AUTH_AZURE_TABLES_ENDPOINT,
  "auth",
  credential
)

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: TableStorageAdapter(authClient),
} satisfies AuthConfig)
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { TableStorageAdapter } from "@auth/azure-tables-adapter"
import { AzureNamedKeyCredential, TableClient } from "@azure/data-tables"

const credential = new AzureNamedKeyCredential(
  import.meta.env.AUTH_AZURE_ACCOUNT,
  import.meta.env.AUTH_AZURE_ACCESS_KEY
)
const authClient = new TableClient(
  import.meta.env.AUTH_AZURE_TABLES_ENDPOINT,
  "auth",
  credential
)

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: TableStorageAdapter(authClient),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth, { type AuthConfig } from "@auth/sveltekit"
import { TableStorageAdapter } from "@auth/azure-tables-adapter"
import { AzureNamedKeyCredential, TableClient } from "@azure/data-tables"

const credential = new AzureNamedKeyCredential(
  process.env.AUTH_AZURE_ACCOUNT,
  process.env.AUTH_AZURE_ACCESS_KEY
)
const authClient = new TableClient(
  process.env.AUTH_AZURE_TABLES_ENDPOINT,
  "auth",
  credential
)

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: TableStorageAdapter(authClient),
} satisfies AuthConfig)
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import express from "express"
import Google from "@auth/express/providers/google"
import ExpressAuth, { type AuthConfig } from "@auth/express"
import { TableStorageAdapter } from "@auth/azure-tables-adapter"
import { AzureNamedKeyCredential, TableClient } from "@azure/data-tables"

const app = express()

const credential = new AzureNamedKeyCredential(
  process.env.AUTH_AZURE_ACCOUNT,
  process.env.AUTH_AZURE_ACCESS_KEY
)
const authClient = new TableClient(
  process.env.AUTH_AZURE_TABLES_ENDPOINT,
  "auth",
  credential
)

// If app is served through a proxy, trust the proxy to allow HTTPS protocol to be detected
app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [Google],
    adapter: TableStorageAdapter(authClient),
  })
)
```

</Code.Express>
</Code>

================
File: docs/pages/getting-started/adapters/d1.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/d1.svg" width="64" height="64" />

# Cloudflare D1 Adapter

## Resources

- [Cloudflare D1 documentation](https://developers.cloudflare.com/d1/)

## Setup

### Installation

```bash npm2yarn
npm install next-auth @auth/d1-adapter
```

### Environment Variables

Environment variables in Cloudflare's platform are set either via a [`wrangler.toml`](https://developers.cloudflare.com/workers/wrangler/configuration/#environment-variables) configuration file, or in the [admin dashboard](https://dash.cloudflare.com/?to=/:account/pages/view/:pages-project/settings/environment-variables).

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { D1Adapter } from "@auth/d1-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: D1Adapter(env.db),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { D1Adapter } from "@auth/d1-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: D1Adapter(env.db),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { D1Adapter } from "@auth/d1-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: D1Adapter(env.db),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { D1Adapter } from "@auth/d1-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: D1Adapter(env.db),
  })
)
```

</Code.Express>
</Code>

### Migrations

Somewhere in the initialization of your application you need to run the `up(env.db)` function to create the tables in D1.
It will create 4 tables if they don't already exist:
`accounts`, `sessions`, `users`, `verification_tokens`.

The table prefix `""` is not configurable at this time.

You can use something like the following to attempt the migration once each time your worker starts up. Running migrations more than once will not erase your existing tables.

```javascript
import { up } from "@auth/d1-adapter"

let migrated = false
async function migrationHandle({ event, resolve }) {
  if (!migrated) {
    try {
      await up(event.platform.env.db)
      migrated = true
    } catch (e) {
      console.log(e.cause.message, e.message)
    }
  }
  return resolve(event)
}
```

- You can also initialize your tables manually. Look in [migrations.ts](https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-d1/src/migrations.ts) for the relevant SQL as well as an example of the `up()` function from above.
- Paste and execute the SQL from within your D1 database's console in the [Cloudflare dashboard](https://dash.cloudflare.com/?to=/:account/workers/d1).

================
File: docs/pages/getting-started/adapters/dgraph.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/dgraph.svg" width="64" height="64" />

# Dgraph Adapter

## Resources

- [Dgraph documentation](https://dgraph.io/docs)

## Setup

### Installation

```bash npm2yarn
npm install @auth/dgraph-adapter
```

### Environment Variables

```sh
AUTH_DGRAPH_GRAPHQL_ENDPOINT=http://localhost:8080/graphql
AUTH_DGRAPH_GRAPHQL_KEY=abc123
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { DgraphAdapter } from "@auth/dgraph-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: DgraphAdapter({
    endpoint: process.env.AUTH_DGRAPH_GRAPHQL_ENDPOINT,
    authToken: process.env.AUTH_DGRAPH_GRAPHQL_KEY,
    // you can omit the following properties if you are running an unsecure schema
    authHeader: process.env.AUTH_HEADER, // default: "Authorization",
    jwtSecret: process.env.AUTH_SECRET,
  }),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { DgraphAdapter } from "@auth/dgraph-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: DgraphAdapter({
      endpoint: import.meta.env.DGRAPH_GRAPHQL_ENDPOINT,
      authToken: import.meta.env.DGRAPH_GRAPHQL_KEY,
      // you can omit the following properties if you are running an unsecure schema
      authHeader: import.meta.env.AUTH_HEADER, // default: "Authorization",
      jwtSecret: import.meta.env.SECRET,
    }),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { DgraphAdapter } from "@auth/dgraph-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: DgraphAdapter({
    endpoint: process.env.DGRAPH_GRAPHQL_ENDPOINT,
    authToken: process.env.DGRAPH_GRAPHQL_KEY,
    // you can omit the following properties if you are running an unsecure schema
    authHeader: process.env.AUTH_HEADER, // default: "Authorization",
    jwtSecret: process.env.SECRET,
  }),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { DgraphAdapter } from "@auth/dgraph-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: DgraphAdapter({
      endpoint: process.env.DGRAPH_GRAPHQL_ENDPOINT,
      authToken: process.env.DGRAPH_GRAPHQL_KEY,
      // you can omit the following properties if you are running an unsecure schema
      authHeader: process.env.AUTH_HEADER, // default: "Authorization",
      jwtSecret: process.env.SECRET,
    }),
  })
)
```

</Code.Express>
</Code>

### Unsecure Schema

The quickest way to use Dgraph is by applying the unsecure schema to your [local](https://dgraph.io/docs/graphql/admin/#modifying-a-schema) Dgraph instance or if using Dgraph [cloud](https://dgraph.io/docs/cloud/cloud-quick-start/#the-schema) you can paste the schema in the codebox to update.

<Callout type="warning">
  This approach is not secure or for production use, and does not require a
  `jwtSecret`.
</Callout>

> This schema is adapted for use in Dgraph and based upon our main [schema](https://authjs.dev/reference/core/adapters)

#### Example

```graphql
type Account {
  id: ID
  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}
type Session {
  id: ID
  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}
type User {
  id: ID
  name: String
  email: String @search(by: [hash])
  emailVerified: DateTime
  image: String
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
}

type VerificationToken {
  id: ID
  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}
```

### Secure schema

For production deployments you will want to restrict the access to the types used
by next-auth. The main form of access control used in Dgraph is via `@auth` directive alongside types in the schema.

#### Example

```graphql
type Account
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    query: { rule: "{$nextAuth: { eq: true } }" }
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
  id: ID
  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}
type Session
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    query: { rule: "{$nextAuth: { eq: true } }" }
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
  id: ID
  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}
type User
  @auth(
    query: {
      or: [
        {
          rule: """
          query ($userId: String!) {queryUser(filter: { id: { eq: $userId } } ) {id}}
          """
        }
        { rule: "{$nextAuth: { eq: true } }" }
      ]
    }
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    update: {
      or: [
        {
          rule: """
          query ($userId: String!) {queryUser(filter: { id: { eq: $userId } } ) {id}}
          """
        }
        { rule: "{$nextAuth: { eq: true } }" }
      ]
    }
  ) {
  id: ID
  name: String
  email: String @search(by: [hash])
  emailVerified: DateTime
  image: String
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
}

type VerificationToken
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    query: { rule: "{$nextAuth: { eq: true } }" }
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
  id: ID
  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}

# Dgraph.Authorization {"VerificationKey":"<YOUR JWT SECRET HERE>","Header":"<YOUR AUTH HEADER HERE>","Namespace":"<YOUR CUSTOM NAMESPACE HERE>","Algo":"HS256"}
```

### Dgraph.Authorization

In order to secure your graphql backend define the `Dgraph.Authorization` object at the
bottom of your schema and provide `authHeader` and `jwtSecret` values to the DgraphClient.

```js
# Dgraph.Authorization {"VerificationKey":"<YOUR JWT SECRET HERE>","Header":"<YOUR AUTH HEADER HERE>","Namespace":"YOUR CUSTOM NAMESPACE HERE","Algo":"HS256"}
```

### VerificationKey and jwtSecret

This is the key used to sign the JWT. Ex. `process.env.SECRET` or `process.env.APP_SECRET`.

### Header and authHeader

The `Header` tells Dgraph where to lookup a JWT within the headers of the incoming requests made to the dgraph server.
You have to configure it at the bottom of your schema file. This header is the same as the `authHeader` property you
provide when you instantiate the `DgraphClient`.

### The nextAuth secret

The `$nextAuth` secret is securely generated using the `jwtSecret` and injected by the DgraphAdapter in order to allow interacting with the JWT DgraphClient for anonymous user requests made within the system `ie. login, register`. This allows
secure interactions to be made with all the auth types required by next-auth. You have to specify it for each auth rule of
each type defined in your secure schema.

```js
type VerificationRequest
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" },
    add: { rule: "{$nextAuth: { eq: true } }" },
    query: { rule: "{$nextAuth: { eq: true } }" },
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
}
```

### JWT session and `@auth` directive

Dgraph only works with HS256 or RS256 algorithms. If you want to use session jwt to securely interact with your dgraph
database you must customize next-auth `encode` and `decode` functions, as the default algorithm is HS512. You can
further customize the jwt with roles if you want to implement [`RBAC logic`](https://dgraph.io/docs/graphql/authorization/directive/#role-based-access-control).

```js filename="./auth.js"
import NextAuth from "next-auth"
import * as jwt from "jsonwebtoken"

export const { handlers, auth, signIn, signOut } = NextAuth({
  session: {
    strategy: "jwt",
  },
  jwt: {
    secret: process.env.SECRET,
    encode: async ({ secret, token }) => {
      return jwt.sign({ ...token, userId: token.id }, secret, {
        algorithm: "HS256",
        expiresIn: 30 * 24 * 60 * 60, // 30 days
      })
    },
    decode: async ({ secret, token }) => {
      return jwt.verify(token, secret, { algorithms: ["HS256"] })
    },
  },
})
```

Once your `Dgraph.Authorization` is defined in your schema and the JWT settings are set, this will allow you to define [`@auth rules`](https://dgraph.io/docs/graphql/authorization/authorization-overview/) for every part of your schema.

================
File: docs/pages/getting-started/adapters/drizzle.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"
import { Accordion, Accordions } from "@/components/Accordion"

<a href="https://orm.drizzle.team">
  <img align="right" src="/img/adapters/drizzle.svg" width="64" height="64" />
</a>

# Drizzle ORM Adapter

## Resources

- [Drizzle ORM documentation](https://orm.drizzle.team/docs/overview)

## Setup

### Installation

```bash npm2yarn
npm install drizzle-orm @auth/drizzle-adapter
npm install drizzle-kit --save-dev
```

### Environment Variables

```sh
AUTH_DRIZZLE_URL=postgres://postgres:postgres@127.0.0.1:5432/db
```

### Configuration

To use this adapter, you must have setup Drizzle ORM and Drizzle Kit in your project. Drizzle provides a simple [quick start guide](https://orm.drizzle.team/kit-docs/quick). For more details, follow the Drizzle documentation for your respective database ([PostgreSQL](https://orm.drizzle.team/docs/get-started-postgresql), [MySQL](https://orm.drizzle.team/docs/get-started-mysql) or [SQLite](https://orm.drizzle.team/docs/get-started-sqlite)). In summary, that setup should look something like this.

1. Create your schema file, based off of one of the ones below.
2. Install a supported database driver to your project, like `@libsql/client`, `mysql2` or `postgres`.
3. Create a `drizzle.config.ts` [file](https://orm.drizzle.team/kit-docs/conf).
4. Generate the initial migration from your schema file with a command like, `drizzle-kit generate`.
5. Apply migrations by using `migrate()` function or push changes directly to your database with a command like, `drizzle-kit push`.
6. If your schemas differ from the default ones, pass them as the second parameter to the adapter.

#### Schemas

<Accordions>
<Accordion title="PostgreSQL">
If you want to modify the schema or add additional fields, you can use the following schema as a starting point:

```ts filename="schema.ts"
import {
  boolean,
  timestamp,
  pgTable,
  text,
  primaryKey,
  integer,
} from "drizzle-orm/pg-core"
import postgres from "postgres"
import { drizzle } from "drizzle-orm/postgres-js"
import type { AdapterAccountType } from "next-auth/adapters"

const connectionString = "postgres://postgres:postgres@localhost:5432/drizzle"
const pool = postgres(connectionString, { max: 1 })

export const db = drizzle(pool)

export const users = pgTable("user", {
  id: text("id")
    .primaryKey()
    .$defaultFn(() => crypto.randomUUID()),
  name: text("name"),
  email: text("email").unique(),
  emailVerified: timestamp("emailVerified", { mode: "date" }),
  image: text("image"),
})

export const accounts = pgTable(
  "account",
  {
    userId: text("userId")
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    type: text("type").$type<AdapterAccountType>().notNull(),
    provider: text("provider").notNull(),
    providerAccountId: text("providerAccountId").notNull(),
    refresh_token: text("refresh_token"),
    access_token: text("access_token"),
    expires_at: integer("expires_at"),
    token_type: text("token_type"),
    scope: text("scope"),
    id_token: text("id_token"),
    session_state: text("session_state"),
  },
  (account) => [
    {
      compoundKey: primaryKey({
        columns: [account.provider, account.providerAccountId],
      }),
    },
  ]
)

export const sessions = pgTable("session", {
  sessionToken: text("sessionToken").primaryKey(),
  userId: text("userId")
    .notNull()
    .references(() => users.id, { onDelete: "cascade" }),
  expires: timestamp("expires", { mode: "date" }).notNull(),
})

export const verificationTokens = pgTable(
  "verificationToken",
  {
    identifier: text("identifier").notNull(),
    token: text("token").notNull(),
    expires: timestamp("expires", { mode: "date" }).notNull(),
  },
  (verificationToken) => [
    {
      compositePk: primaryKey({
        columns: [verificationToken.identifier, verificationToken.token],
      }),
    },
  ]
)

export const authenticators = pgTable(
  "authenticator",
  {
    credentialID: text("credentialID").notNull().unique(),
    userId: text("userId")
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    providerAccountId: text("providerAccountId").notNull(),
    credentialPublicKey: text("credentialPublicKey").notNull(),
    counter: integer("counter").notNull(),
    credentialDeviceType: text("credentialDeviceType").notNull(),
    credentialBackedUp: boolean("credentialBackedUp").notNull(),
    transports: text("transports"),
  },
  (authenticator) => [
    {
      compositePK: primaryKey({
        columns: [authenticator.userId, authenticator.credentialID],
      }),
    },
  ]
)
```

</Accordion>
<Accordion title="MySQL">
If you want to modify the schema or add additional fields, you can use the following schema as a starting point:

```ts filename="schema.ts"
import {
  boolean,
  int,
  timestamp,
  mysqlTable,
  primaryKey,
  varchar,
} from "drizzle-orm/mysql-core"
import mysql from "mysql2/promise"
import { drizzle } from "drizzle-orm/mysql2"
import type { AdapterAccountType } from "next-auth/adapters"

export const connection = await mysql.createConnection({
  host: "host",
  user: "user",
  password: "password",
  database: "database",
})

export const db = drizzle(connection)

export const users = mysqlTable("user", {
  id: varchar("id", { length: 255 })
    .primaryKey()
    .$defaultFn(() => crypto.randomUUID()),
  name: varchar("name", { length: 255 }),
  email: varchar("email", { length: 255 }).unique(),
  emailVerified: timestamp("emailVerified", {
    mode: "date",
    fsp: 3,
  }),
  image: varchar("image", { length: 255 }),
})

export const accounts = mysqlTable(
  "account",
  {
    userId: varchar("userId", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    type: varchar("type", { length: 255 })
      .$type<AdapterAccountType>()
      .notNull(),
    provider: varchar("provider", { length: 255 }).notNull(),
    providerAccountId: varchar("providerAccountId", { length: 255 }).notNull(),
    refresh_token: varchar("refresh_token", { length: 255 }),
    access_token: varchar("access_token", { length: 255 }),
    expires_at: int("expires_at"),
    token_type: varchar("token_type", { length: 255 }),
    scope: varchar("scope", { length: 255 }),
    id_token: varchar("id_token", { length: 2048 }),
    session_state: varchar("session_state", { length: 255 }),
  },
  (account) => ({
    compoundKey: primaryKey({
      columns: [account.provider, account.providerAccountId],
    }),
  })
)

export const sessions = mysqlTable("session", {
  sessionToken: varchar("sessionToken", { length: 255 }).primaryKey(),
  userId: varchar("userId", { length: 255 })
    .notNull()
    .references(() => users.id, { onDelete: "cascade" }),
  expires: timestamp("expires", { mode: "date" }).notNull(),
})

export const verificationTokens = mysqlTable(
  "verificationToken",
  {
    identifier: varchar("identifier", { length: 255 }).notNull(),
    token: varchar("token", { length: 255 }).notNull(),
    expires: timestamp("expires", { mode: "date" }).notNull(),
  },
  (verificationToken) => ({
    compositePk: primaryKey({
      columns: [verificationToken.identifier, verificationToken.token],
    }),
  })
)

export const authenticators = mysqlTable(
  "authenticator",
  {
    credentialID: varchar("credentialID", { length: 255 }).notNull().unique(),
    userId: varchar("userId", { length: 255 })
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    providerAccountId: varchar("providerAccountId", { length: 255 }).notNull(),
    credentialPublicKey: varchar("credentialPublicKey", {
      length: 255,
    }).notNull(),
    counter: int("counter").notNull(),
    credentialDeviceType: varchar("credentialDeviceType", {
      length: 255,
    }).notNull(),
    credentialBackedUp: boolean("credentialBackedUp").notNull(),
    transports: varchar("transports", { length: 255 }),
  },
  (authenticator) => ({
    compositePk: primaryKey({
      columns: [authenticator.userId, authenticator.credentialID],
    }),
  })
)
```

</Accordion>
<Accordion title="SQLite">
If you want to modify the schema or add additional fields, you can use the following schema as a starting point:

```ts filename="schema.ts"
import { integer, sqliteTable, text, primaryKey } from "drizzle-orm/sqlite-core"
import { createClient } from "@libsql/client"
import { drizzle } from "drizzle-orm/libsql"
import type { AdapterAccountType } from "next-auth/adapters"

const client = createClient({
  url: "DATABASE_URL",
  authToken: "DATABASE_AUTH_TOKEN",
})
export const db = drizzle(client)

export const users = sqliteTable("user", {
  id: text("id")
    .primaryKey()
    .$defaultFn(() => crypto.randomUUID()),
  name: text("name"),
  email: text("email").unique(),
  emailVerified: integer("emailVerified", { mode: "timestamp_ms" }),
  image: text("image"),
})

export const accounts = sqliteTable(
  "account",
  {
    userId: text("userId")
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    type: text("type").$type<AdapterAccountType>().notNull(),
    provider: text("provider").notNull(),
    providerAccountId: text("providerAccountId").notNull(),
    refresh_token: text("refresh_token"),
    access_token: text("access_token"),
    expires_at: integer("expires_at"),
    token_type: text("token_type"),
    scope: text("scope"),
    id_token: text("id_token"),
    session_state: text("session_state"),
  },
  (account) => ({
    compoundKey: primaryKey({
      columns: [account.provider, account.providerAccountId],
    }),
  })
)

export const sessions = sqliteTable("session", {
  sessionToken: text("sessionToken").primaryKey(),
  userId: text("userId")
    .notNull()
    .references(() => users.id, { onDelete: "cascade" }),
  expires: integer("expires", { mode: "timestamp_ms" }).notNull(),
})

export const verificationTokens = sqliteTable(
  "verificationToken",
  {
    identifier: text("identifier").notNull(),
    token: text("token").notNull(),
    expires: integer("expires", { mode: "timestamp_ms" }).notNull(),
  },
  (verificationToken) => ({
    compositePk: primaryKey({
      columns: [verificationToken.identifier, verificationToken.token],
    }),
  })
)

export const authenticators = sqliteTable(
  "authenticator",
  {
    credentialID: text("credentialID").notNull().unique(),
    userId: text("userId")
      .notNull()
      .references(() => users.id, { onDelete: "cascade" }),
    providerAccountId: text("providerAccountId").notNull(),
    credentialPublicKey: text("credentialPublicKey").notNull(),
    counter: integer("counter").notNull(),
    credentialDeviceType: text("credentialDeviceType").notNull(),
    credentialBackedUp: integer("credentialBackedUp", {
      mode: "boolean",
    }).notNull(),
    transports: text("transports"),
  },
  (authenticator) => ({
    compositePK: primaryKey({
      columns: [authenticator.userId, authenticator.credentialID],
    }),
  })
)
```

</Accordion>
</Accordions>

### Adapter Setup

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { DrizzleAdapter } from "@auth/drizzle-adapter"
import { db } from "./schema.ts"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: DrizzleAdapter(db),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { DrizzleAdapter } from "@auth/drizzle-adapter"
import { db } from "./schema.ts"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: DrizzleAdapter(db),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { DrizzleAdapter } from "@auth/drizzle-adapter"
import { db } from "./schema.ts"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: DrizzleAdapter(db),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { DrizzleAdapter } from "@auth/drizzle-adapter"
import { db } from "./schema.ts"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: DrizzleAdapter(db),
  })
)
```

</Code.Express>
</Code>

#### Passing your own Schemas

If you want to use your own tables, you can pass them as a second argument to `DrizzleAdapter`.

- The `sessionsTable` is optional and only required if you're using the database session strategy.
- The `verificationTokensTable` is optional and only required if you're using a Magic Link provider.

```ts filename="auth.ts"
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"
import { DrizzleAdapter } from "@auth/drizzle-adapter"
import { db, accounts, sessions, users, verificationTokens } from "./schema"

export const { handlers, auth } = NextAuth({
  adapter: DrizzleAdapter(db, {
    usersTable: users,
    accountsTable: accounts,
    sessionsTable: sessions,
    verificationTokensTable: verificationTokens,
  }),
  providers: [Google],
})
```

### Migrating your database

With your schema now described in your code, you'll need to migrate your database to your schema. An example `migrate.ts` file looks like this. For more information, check out Drizzle's migration [quick start guide](https://orm.drizzle.team/docs/migrations).

```ts filename="migrate.ts"
import "dotenv/config"
import { migrate } from "drizzle-orm/mysql2/migrator"
import { db, connection } from "./db"

// This will run migrations on the database, skipping the ones already applied
await migrate(db, { migrationsFolder: "./drizzle" })

// Don't forget to close the connection, otherwise the script will hang
await connection.end()
```

Full documentation on how to manage migrations with Drizzle can be found at the Drizzle Kit [Migrations page](https://orm.drizzle.team/kit-docs/overview#running-migrations).

================
File: docs/pages/getting-started/adapters/dynamodb.mdx
================
---
title: DynamoDB
---

import { Callout } from "nextra/components"
import { Code } from "@/components/Code"
import { Accordion, Accordions } from "@/components/Accordion"

<img align="right" src="/img/adapters/dynamodb.svg" width="64" height="64" />

# DynamoDB Adapter

## Resources

- [DynamoDB documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html)

## Setup

### Installation

```bash npm2yarn
npm install @auth/dynamodb-adapter @aws-sdk/lib-dynamodb @aws-sdk/client-dynamodb
```

### Environment Variables

```sh
AUTH_DYNAMODB_ID=accessKey
AUTH_DYNAMODB_SECRET=secretKey
AUTH_DYNAMODB_REGION=eu-west-1
```

### Configuration

You need to pass `DynamoDBDocument` client from the modular [`aws-sdk`](https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/dynamodb-example-dynamodb-utilities.html) v3 to the adapter.
The default table name is `next-auth`, but you can customise that by passing `{ tableName: 'your-table-name' }` as the second parameter in the adapter.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { DynamoDB, DynamoDBClientConfig } from "@aws-sdk/client-dynamodb"
import { DynamoDBDocument } from "@aws-sdk/lib-dynamodb"
import { DynamoDBAdapter } from "@auth/dynamodb-adapter"

const config: DynamoDBClientConfig = {
  credentials: {
    accessKeyId: process.env.AUTH_DYNAMODB_ID,
    secretAccessKey: process.env.AUTH_DYNAMODB_SECRET,
  },
  region: process.env.AUTH_DYNAMODB_REGION,
}

const client = DynamoDBDocument.from(new DynamoDB(config), {
  marshallOptions: {
    convertEmptyValues: true,
    removeUndefinedValues: true,
    convertClassInstanceToMap: true,
  },
})

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: []
  adapter: DynamoDBAdapter(client),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { DynamoDB, DynamoDBClientConfig } from "@aws-sdk/client-dynamodb"
import { DynamoDBDocument } from "@aws-sdk/lib-dynamodb"
import { DynamoDBAdapter } from "@auth/dynamodb-adapter"

const config: DynamoDBClientConfig = {
  credentials: {
    accessKeyId: import.meta.env.AUTH_DYNAMODB_ID,
    secretAccessKey: import.meta.env.AUTH_DYNAMODB_SECRET,
  },
  region: import.meta.env.AUTH_DYNAMODB_REGION,
}

const client = DynamoDBDocument.from(new DynamoDB(config), {
  marshallOptions: {
    convertEmptyValues: true,
    removeUndefinedValues: true,
    convertClassInstanceToMap: true,
  },
})

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: DynamoDBAdapter(client),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { DynamoDB, DynamoDBClientConfig } from "@aws-sdk/client-dynamodb"
import { DynamoDBDocument } from "@aws-sdk/lib-dynamodb"
import { DynamoDBAdapter } from "@auth/dynamodb-adapter"

const config: DynamoDBClientConfig = {
  credentials: {
    accessKeyId: process.env.AUTH_DYNAMODB_ID,
    secretAccessKey: process.env.AUTH_DYNAMODB_SECRET,
  },
  region: process.env.AUTH_DYNAMODB_REGION,
}

const client = DynamoDBDocument.from(new DynamoDB(config), {
  marshallOptions: {
    convertEmptyValues: true,
    removeUndefinedValues: true,
    convertClassInstanceToMap: true,
  },
})

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: []
  adapter: DynamoDBAdapter(client),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { DynamoDB, DynamoDBClientConfig } from "@aws-sdk/client-dynamodb"
import { DynamoDBDocument } from "@aws-sdk/lib-dynamodb"
import { DynamoDBAdapter } from "@auth/dynamodb-adapter"

const app = express()

const config: DynamoDBClientConfig = {
  credentials: {
    accessKeyId: process.env.AUTH_DYNAMODB_ID,
    secretAccessKey: process.env.AUTH_DYNAMODB_SECRET,
  },
  region: process.env.AUTH_DYNAMODB_REGION,
}

const client = DynamoDBDocument.from(new DynamoDB(config), {
  marshallOptions: {
    convertEmptyValues: true,
    removeUndefinedValues: true,
    convertClassInstanceToMap: true,
  },
})

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: DynamoDBAdapter(client),
  })
)
```

</Code.Express>
</Code>

### AWS Credentials

<Callout type="info">
  Always follow the **principle of least privilege** when giving access to AWS
  services/resources -> identities should only be permitted to perform the
  smallest set of actions necessary to fulfill a specific task.
</Callout>

1. Open the [AWS console](https://console.aws.amazon.com/) and go to "IAM", then "Users".
2. Create a new user. The purpose of this user is to give programmatic access to DynamoDB.
3. Create an Access Key and then copy Key ID and Secret to your `.env`/`.env.local` file.
4. Select "Add Permission" and "Create Inline Policy".
5. Copy the JSON below into the JSON input and replace `region`, `account_id` and `table_name` with your values.

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "DynamoDBAccess",
      "Effect": "Allow",
      "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:Describe*",
        "dynamodb:List*",
        "dynamodb:PutItem",
        "dynamodb:DeleteItem",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:Query",
        "dynamodb:UpdateItem"
      ],
      "Resource": [
        "arn:aws:dynamodb:{region}:{account_id}:table/{table_name}",
        "arn:aws:dynamodb:{region}:{account_id}:table/{table_name}/index/GSI1"
      ]
    }
  ]
}
```

## Advanced usage

### IaC Templates

Below are some infrastructure-as-code templates for popular providers to help you spin up DynamoDB.

<Accordions>
<Accordion title="CDK">

```js filename="stack.js"
new dynamodb.Table(this, `NextAuthTable`, {
  tableName: "next-auth",
  partitionKey: { name: "pk", type: dynamodb.AttributeType.STRING },
  sortKey: { name: "sk", type: dynamodb.AttributeType.STRING },
  timeToLiveAttribute: "expires",
}).addGlobalSecondaryIndex({
  indexName: "GSI1",
  partitionKey: { name: "GSI1PK", type: dynamodb.AttributeType.STRING },
  sortKey: { name: "GSI1SK", type: dynamodb.AttributeType.STRING },
})
```

</Accordion>
<Accordion title="Cloud Formation">

```yaml filename="cloudformation.yaml"
NextAuthTable:
  Type: "AWS::DynamoDB::Table"
  Properties:
    TableName: next-auth
    AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
    KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
    GlobalSecondaryIndexes:
      - IndexName: GSI1
        Projection:
          ProjectionType: ALL
        KeySchema:
          - AttributeName: GSI1PK
            KeyType: HASH
          - AttributeName: GSI1SK
            KeyType: RANGE
    TimeToLiveSpecification:
      AttributeName: expires
      Enabled: true
```

</Accordion>
<Accordion title="Terraform">

```hcl filename="dynamodb.tf"
resource "aws_dynamodb_table" "authjs" {
  name         = "auth-js"
  billing_mode = "PAY_PER_REQUEST" # Alternatively, ON_DEMAND, see https://aws.amazon.com/dynamodb/pricing/
  hash_key     = "pk"
  range_key    = "sk"

  attribute {
    name = "pk"
    type = "S"
  }

  attribute {
    name = "sk"
    type = "S"
  }

  attribute {
    name = "GSI1PK"
    type = "S"
  }

  attribute {
    name = "GSI1SK"
    type = "S"
  }

  global_secondary_index {
    hash_key        = "GSI1PK"
    name            = "GSI1"
    projection_type = "ALL"
    range_key       = "GSI1SK"
  }

  ttl {
    attribute_name = "expires"
    enabled        = true
  }
}
```

</Accordion>
</Accordions>

### Default schema

The table respects the single table design pattern. This has many advantages:

- Only one table to manage, monitor and provision.
- Querying relations is faster than with multi-table schemas (for eg. retrieving all sessions for a user).
- Only one table needs to be replicated if you want to go multi-region.

![DynamoDB Table](https://i.imgur.com/hGZtWDq.png)

By default, the adapter expects a table with a partition key `pk` and a sort key `sk`, as well as a global secondary index named `GSI1` with `GSI1PK` as partition key and `GSI1SK` as sorting key. To automatically delete sessions and verification requests after they expire using [dynamodb TTL](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html) you should [enable the TTL](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/time-to-live-ttl-how-to.html) with attribute name `expires`. You can set whatever you want as the table name and the billing method. You can find the full schema in the table structure section below.

### Using a custom schema

You can configure your custom table schema by passing the `options` key to the adapter constructor:

```js filename="./auth.js"
const adapter = DynamoDBAdapter(client, {
  tableName: "custom-table-name",
  partitionKey: "custom-pk",
  sortKey: "custom-sk",
  indexName: "custom-index-name",
  indexPartitionKey: "custom-index-pk",
  indexSortKey: "custom-index-sk",
})
```

================
File: docs/pages/getting-started/adapters/edgedb.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/edgedb.svg" height="64" width="64" />

# EdgeDB Adapter

## Resources

- [EdgeDB documentation](https://www.edgedb.com/docs/)

## Setup

### Installation

```bash npm2yarn
npm install edgedb @auth/edgedb-adapter
npm install @edgedb/generate --save-dev
```

Ensure you have the EdgeDB CLI installed. Follow the instructions below, or read the [EdgeDB quickstart](https://www.edgedb.com/docs/intro/quickstart) to install the EdgeDB CLI and initialize a project

### Environment Variables

```sh
AUTH_EDGEDB_DSN="edgedb://edgedb:p4ssw0rd@10.0.0.1"
```

### Configuration

<Code>
<Code.Next>

```js filename="./auth.ts"
import NextAuth from "next-auth"
import { EdgeDBAdapter } from "@auth/edgedb-adapter"
import { createClient } from "edgedb"

const client = createClient({ dsn: process.env.AUTH_EDGEDB_DSN })

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: EdgeDBAdapter(client),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { EdgeDBAdapter } from "@auth/edgedb-adapter"
import { createClient } from "edgedb"

const client = createClient({ dsn: import.meta.env.AUTH_EDGEDB_DSN })

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: EdgeDBAdapter(client),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```js filename="./auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { EdgeDBAdapter } from "@auth/edgedb-adapter"
import { createClient } from "edgedb"

const client = createClient({ dsn: process.env.AUTH_EDGEDB_DSN })

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: EdgeDBAdapter(client),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { EdgeDBAdapter } from "@auth/edgedb-adapter"
import { createClient } from "edgedb"

const app = express()

const client = createClient({ dsn: process.env.AUTH_EDGEDB_DSN })

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: EdgeDBAdapter(client),
  })
)
```

</Code.Express>
</Code>

### EdgeDB CLI

#### Linux or macOS

```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh
```

#### Windows

```powershell
iwr https://ps1.edgedb.com -useb | iex
```

Check that the CLI is available with the `edgedb --version` command. If you get a `Command not found` error, you may need to open a new terminal window before the `edgedb` command is available.

Once the CLI is installed, initialize a project from the application’s root directory. You’ll be presented with a series of prompts.

```bash
edgedb project init
```

This process will spin up an EdgeDB instance and [“link”](https://www.edgedb.com/docs/cli/edgedb_instance/edgedb_instance_link#edgedb-instance-link) it with your current directory. As long as you’re inside that directory, CLI commands and client libraries will be able to connect to the linked instance automatically, without additional configuration.

### Schema

Replace the contents of the auto-generated file in `dbschema/default.esdl` with the following:

```js filename="default.esdl"
module default {
    type User {
        property name -> str;
        required property email -> str {
            constraint exclusive;
        }
        property emailVerified -> datetime;
        property image -> str;
        multi link accounts := .<user[is Account];
        multi link sessions := .<user[is Session];
        property createdAt -> datetime {
            default := datetime_current();
        };
    }

    type Account {
       required property userId := .user.id;
       required property type -> str;
       required property provider -> str;
       required property providerAccountId -> str {
        constraint exclusive;
       };
       property refresh_token -> str;
       property access_token -> str;
       property expires_at -> int64;
       property token_type -> str;
       property scope -> str;
       property id_token -> str;
       property session_state -> str;
       required link user -> User {
            on target delete delete source;
       };
       property createdAt -> datetime {
            default := datetime_current();
        };

       constraint exclusive on ((.provider, .providerAccountId))
    }

    type Session {
        required property sessionToken -> str {
            constraint exclusive;
        }
        required property userId := .user.id;
        required property expires -> datetime;
        required link user -> User {
            on target delete delete source;
        };
        property createdAt -> datetime {
            default := datetime_current();
        };
    }

    type VerificationToken {
        required property identifier -> str;
        required property token -> str {
            constraint exclusive;
        }
        required property expires -> datetime;
        property createdAt -> datetime {
            default := datetime_current();
        };

        constraint exclusive on ((.identifier, .token))
    }
}

# Disable the application of access policies within access policies
# themselves. This behavior will become the default in EdgeDB 3.0.
# See: https://www.edgedb.com/docs/reference/ddl/access_policies#nonrecursive
using future nonrecursive_access_policies;
```

### Migration

1. Create a migration

```
edgedb migration create
```

2. Apply the migration

```
edgedb migrate
```

To learn more about [EdgeDB migrations](https://www.edgedb.com/docs/intro/migrations#generate-a-migration) check out the [Migrations docs](https://www.edgedb.com/docs/intro/migrations).

### Generate

```npm2yarn
npx @edgedb/generate edgeql-js
```

This will generate the [query builder](https://www.edgedb.com/docs/clients/js/querybuilder) so that you can write fully typed EdgeQL queries with TypeScript in a code-first way.

```ts
const query = e.select(e.User, () => ({
  id: true,
  email: true,
  emailVerified: true,
  name: true,
  image: true,
  filter_single: { email: "johndoe@example.com" },
}))

return await query.run(client)
```

## Deploying

### Deploy EdgeDB

First deploy an EdgeDB instance on your preferred cloud provider:

- [AWS](https://www.edgedb.com/docs/guides/deployment/aws_aurora_ecs)
- [Google Cloud](https://www.edgedb.com/docs/guides/deployment/gcp)
- [Azure](https://www.edgedb.com/docs/guides/deployment/azure_flexibleserver)
- [DigitalOcean](https://www.edgedb.com/docs/guides/deployment/digitalocean)
- [Fly.io](https://www.edgedb.com/docs/guides/deployment/fly_io)
- [Docker](https://www.edgedb.com/docs/guides/deployment/docker) (cloud-agnostic)

### Find your instance’s DSN

The DSN is also known as a connection string. It will have the format `edgedb://username:password@hostname:port`. The exact instructions for this depend on which cloud provider you're deploying to.

### Set an environment variable

```env filename=".env"
AUTH_EDGEDB_DSN=edgedb://johndoe:supersecure@myhost.com:420
```

### Apply migrations

Use the DSN to apply migrations against your remote instance.

```bash
edgedb migrate --dsn <your-instance-dsn>
```

### Set up a `prebuild` script

Add the following `prebuild` script to your `package.json`. When your hosting provider initializes the build, it will trigger this script which will generate the query builder. The `npx @edgedb/generate edgeql-js` command will read the value of the `EDGEDB_DSN` environment variable, connect to the database, and generate the query builder before your hosting provider starts building the project.

```diff filename="package.json"
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
+  "prebuild": "npx @edgedb/generate edgeql-js"
},
```

================
File: docs/pages/getting-started/adapters/fauna.mdx
================
import { Accordion, Accordions } from "@/components/Accordion"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/fauna.svg" height="64" width="64" />

# Fauna Adapter

## Resources

- [Fauna documentation](https://docs.fauna.com/fauna/current/)

## Setup

### Installation

```bash npm2yarn
npm install @auth/fauna-adapter fauna
```

### Environment Variables

```sh
AUTH_FAUNA_CLIENT=http://localhost:8443
AUTH_FAUNA_SECRET=abc123
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { Client } from "fauna"
import { FaunaAdapter } from "@auth/fauna-adapter"

const client = new Client({
  secret: process.env.AUTH_FAUNA_SECRET,
  endpoint: new URL(process.env.AUTH_FAUNA_CLIENT)
})

export { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: FaunaAdapter(client)
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { Client } from "fauna"
import { FaunaAdapter } from "@auth/fauna-adapter"

const client = new Client({
  secret: import.meta.env.AUTH_FAUNA_SECRET,
  endpoint: new URL(import.meta.env.AUTH_FAUNA_CLIENT),
})

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: FaunaAdapter(client),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { Client } from "fauna"
import { FaunaAdapter } from "@auth/fauna-adapter"

const client = new Client({
  secret: process.env.AUTH_FAUNA_SECRET,
  endpoint: new URL(process.env.AUTH_FAUNA_CLIENT)
})

export { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: FaunaAdapter(client)
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { Client } from "fauna"
import { FaunaAdapter } from "@auth/fauna-adapter"

const app = express()

const client = new Client({
  secret: process.env.AUTH_FAUNA_SECRET,
  endpoint: new URL(process.env.AUTH_FAUNA_CLIENT),
})

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: FaunaAdapter(client),
  })
)
```

</Code.Express>
</Code>

### Migrating to v2

In `@auth/adapter-fauna@2.0.0`, we've renamed the collections to use an uppercase naming pattern in accordance with the Fauna best practices. If you're migrating from v1, you'll need to rename your collections to match the new naming scheme. Additionally, we've renamed the indexes to match the new method-like index names (i.e. `account_by_user_id` to `Account.byUserId`). For more information on migrating your Fauna schema, see their migration guide [here](https://docs.fauna.com/fauna/current/migration)

<Accordions>
  <Accordion title="Migration Example">

```ts filename="authjs-adapter-fauna-v2-migration.fql"
Collection.byName("accounts")!.update({
  name: "Account"
  indexes: {
    byUserId: {
        terms: [{ field: "userId" }]
    },
    byProviderAndProviderAccountId: {
        terms: [{ field: "provider" }, { field: "providerAccountId" }]
    },
    account_by_provider_and_provider_account_id: null,
    accounts_by_user_id: null
  }
})
Collection.byName("sessions")!.update({
  name: "Session",
  indexes: {
    bySessionToken: {
        terms: [{ field: "sessionToken" }]
    },
    byUserId: {
        terms: [{ field: "userId" }]
    },
    session_by_session_token: null,
    sessions_by_user_id: null
  }
})
Collection.byName("users")!.update({
  name: "User",
  indexes: {
    byEmail: {
        terms: [{ field: "email" }]
    },
    user_by_email: null
  }
})
Collection.byName("verification_tokens")!.update({
  name: "VerificationToken",
  indexes: {
    byIdentifierAndToken: {
        terms: [{ field: "identifier" }, { field: "token" }]
    },
    verification_token_by_identifier_and_token: null
  }
})
```

  </Accordion>
</Accordions>

#### Schema

Run the following commands inside of the `Shell` tab in the Fauna dashboard to setup the appropriate collections and indexes.

```ts filename="authjs-fauna-adapter-schema.fql"
Collection.create({
  name: "Account",
  indexes: {
    byUserId: {
      terms: [
        { field: "userId" }
      ]
    },
    byProviderAndProviderAccountId: {
      terms [
        { field: "provider" },
        { field: "providerAccountId" }
      ]
    },
  }
})
Collection.create({
  name: "Session",
  constraints: [
    {
      unique: ["sessionToken"],
      status: "active",
    }
  ],
  indexes: {
    bySessionToken: {
      terms: [
        { field: "sessionToken" }
      ]
    },
    byUserId: {
      terms [
        { field: "userId" }
      ]
    },
  }
})
Collection.create({
  name: "User",
  constraints: [
    {
      unique: ["email"],
      status: "active",
    }
  ],
  indexes: {
    byEmail: {
      terms [
        { field: "email" }
      ]
    },
  }
})
Collection.create({
  name: "VerificationToken",
  indexes: {
    byIdentifierAndToken: {
      terms [
        { field: "identifier" },
        { field: "token" }
      ]
    },
  }
})
```

#### Custom Collection Names

If you want to use custom collection names, you can pass them as an option to the adapter, like this:

```js
FaunaAdapter(client, {
  collectionNames: {
    user: "CustomUser",
    account: "CustomAccount",
    session: "CustomSession",
    verificationToken: "CustomVerificationToken",
  },
})
```

Make sure the collection names you pass to the provider match the collection names of your Fauna database.

================
File: docs/pages/getting-started/adapters/firebase.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/firebase.svg" height="64" width="64" />

# Firebase Adapter

> Using the [Firebase Admin SDK](https://firebase.google.com/docs/admin/setup) and [Firestore](https://firebase.google.com/docs/firestore).

## Resources

- [Firebase Admin documentation](https://firebase.google.com/docs/admin/setup)

## Setup

### Installation

```bash npm2yarn
npm install @auth/firebase-adapter firebase-admin
```

### Environment variables

```sh
// Auth via Service Account File
GOOGLE_APPLICATION_CREDENTIALS

// Auth via key values
AUTH_FIREBASE_PROJECT_ID
AUTH_FIREBASE_CLIENT_EMAIL
AUTH_FIREBASE_PRIVATE_KEY
```

### Configuration

<Code>
<Code.Next>

```ts filename="auth.ts"
import NextAuth from "next-auth"
import { FirestoreAdapter } from "@auth/firebase-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: FirestoreAdapter(),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { FirestoreAdapter } from "@auth/firebase-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: FirestoreAdapter(),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { FirestoreAdapter } from "@auth/firebase-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: FirestoreAdapter(),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { FirestoreAdapter } from "@auth/firebase-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: FirestoreAdapter(),
  })
)
```

</Code.Express>
</Code>

### Authentication

#### Service Account File

First, create a Firebase project and generate a service account key. Visit: `https://console.firebase.google.com/u/0/project/{project-id}/settings/serviceaccounts/adminsdk` (replace `{project-id}` with your project's id)

1. Download the service account key and save it in your project. (Make sure to add the file to your `.gitignore`!)
2. Add [`GOOGLE_APPLICATION_CREDENTIALS`](https://cloud.google.com/docs/authentication/application-default-credentials#GAC) to your environment variables and point it to the service account key file.
3. The adapter will automatically pick up the environment variable and use it to authenticate with the Firebase Admin SDK. You do not need to pass any additional authentication options to the adapter.

### Service Account Values

1. Download the service account key to a temporary location (Don't commit this file!).
2. Add the following environment variables to your project  
   a. `AUTH_FIREBASE_PROJECT_ID`  
   b. `AUTH_FIREBASE_CLIENT_EMAIL`  
   c. `AUTH_FIREBASE_PRIVATE_KEY`

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { FirestoreAdapter } from "@auth/firebase-adapter"
import { cert } from "firebase-admin/app"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: FirestoreAdapter({
    credential: cert({
      projectId: process.env.AUTH_FIREBASE_PROJECT_ID,
      clientEmail: process.env.AUTH_FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.AUTH_FIREBASE_PRIVATE_KEY,
    }),
  }),
})
```

### Using an existing Firestore instance

If you already have a Firestore instance, you can pass that to the adapter directly instead.

<Callout>
  When passing an instance and in a serverless environment, remember to handle
  duplicate app initialization.
</Callout>

<Callout type="info">
  You can use the `initFirestore` utility to initialize the app and get an
  instance safely.
</Callout>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { FirestoreAdapter } from "@auth/firebase-adapter"
import { firestore } from "lib/firestore"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: FirestoreAdapter(firestore),
})
```

Utility function that helps making sure that there is no duplicate app initialization issues in serverless environments.
If no parameter is passed, it will use the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to initialize a Firestore instance.

```ts filename="lib/firestore.ts"
import { initFirestore } from "@auth/firebase-adapter"
import { cert } from "firebase-admin/app"

export const firestore = initFirestore({
  credential: cert({
    projectId: process.env.FIREBASE_PROJECT_ID,
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    privateKey: process.env.FIREBASE_PRIVATE_KEY,
  }),
})
```

================
File: docs/pages/getting-started/adapters/hasura.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/hasura.svg" width="64" height="64" />

# Hasura Adapter

## Resources

- [Hasura documentation](https://hasura.io/docs)

## Setup

### Installation

```bash npm2yarn
npm install @auth/hasura-adapter
```

### Environment variables

```sh
AUTH_HASURA_GRAPHQL=http://localhost:8000/graphql
AUTH_HASURA_SECRET=abc123
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { HasuraAdapter } from "@auth/hasura-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: HasuraAdapter({
    endpoint: process.env.AUTH_HASURA_GRAPHQL,
    adminSecret: process.env.AUTH_HASURA_SECRET,
  }),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { HasuraAdapter } from "@auth/hasura-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: HasuraAdapter({
      endpoint: import.meta.env.AUTH_HASURA_GRAPHQL,
      adminSecret: import.meta.env.AUTH_HASURA_SECRET,
    }),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { HasuraAdapter } from "@auth/hasura-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: HasuraAdapter({
    endpoint: process.env.AUTH_HASURA_GRAPHQL,
    adminSecret: process.env.AUTH_HASURA_SECRET,
  }),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { HasuraAdapter } from "@auth/hasura-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: HasuraAdapter({
      endpoint: process.env.AUTH_HASURA_GRAPHQL,
      adminSecret: process.env.AUTH_HASURA_SECRET,
    }),
  })
)
```

</Code.Express>
</Code>

### Migrations

1. Create the Auth.js schema in your database using SQL.

```sql
CREATE TABLE accounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type text NOT NULL,
    provider text NOT NULL,
    "providerAccountId" text NOT NULL,
    refresh_token text,
    access_token text,
    expires_at integer,
    token_type text,
    scope text,
    id_token text,
    session_state text,
    "userId" uuid NOT NULL
);

CREATE TABLE sessions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    "sessionToken" text NOT NULL,
    "userId" uuid NOT NULL,
    expires timestamptz NOT NULL
);

CREATE TABLE users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text,
    email text NOT NULL,
    "emailVerified" timestamptz,
    image text
);

CREATE TABLE verification_tokens (
    token text NOT NULL,
    identifier text NOT NULL,
    expires timestamptz NOT NULL
);

CREATE TABLE provider_type (
    value text NOT NULL
);

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);

ALTER TABLE ONLY sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY ("sessionToken");

ALTER TABLE ONLY users
    ADD CONSTRAINT users_email_key UNIQUE (email);

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);

ALTER TABLE ONLY verification_tokens
    ADD CONSTRAINT verification_tokens_pkey PRIMARY KEY (token);

ALTER TABLE ONLY provider_type
    ADD CONSTRAINT provider_type_pkey PRIMARY KEY (value);

ALTER TABLE ONLY accounts
    ADD CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId") REFERENCES public.users(id) ON UPDATE RESTRICT ON DELETE CASCADE;

ALTER TABLE ONLY sessions
    ADD CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId") REFERENCES public.users(id) ON UPDATE RESTRICT ON DELETE CASCADE;

INSERT INTO provider_type (value) VALUES ('credentials'), ('email'), ('oauth'), ('oidc');

ALTER TABLE ONLY accounts
    ADD CONSTRAINT "accounts_type_fkey" FOREIGN KEY ("type") REFERENCES public.provider_type(value) ON UPDATE RESTRICT ON DELETE RESTRICT;
```

<Callout>
  Tips: [Track all the tables and relationships in
  Hasura](https://hasura.io/docs/latest/schema/postgres/using-existing-database/#step-1-track-tablesviews)
</Callout>

================
File: docs/pages/getting-started/adapters/kysely.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/kysely.svg" width="64" height="64" />

# Kysely Adapter

## Resources

- [Kysely documentation](https://kysely.dev/docs/intro)

## Setup

### Installation

```bash npm2yarn
npm install kysely @auth/kysely-adapter
```

### Environment Variables

```sh
DATABASE_HOST=
DATABASE_NAME=
DATABASE_USER=
DATABASE_PASSWORD=
```

### Configuration

This adapter supports the same first party dialects that Kysely (as of v0.24.2) supports: PostgreSQL, MySQL, and SQLite. The examples below use PostgreSQL with the [pg](https://www.npmjs.com/package/pg) client.

```bash npm2yarn
npm install pg
npm install --save-dev @types/pg
```

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { KyselyAdapter } from "@auth/kysely-adapter"
import { db } from "../../../db"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: KyselyAdapter(db),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { KyselyAdapter } from "@auth/kysely-adapter"
import { db } from "../../../db"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: KyselyAdapter(db),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { KyselyAdapter } from "@auth/kysely-adapter"
import { db } from "../../../db"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: KyselyAdapter(db),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { KyselyAdapter } from "@auth/kysely-adapter"
import { db } from "../../../db"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: KyselyAdapter(db),
  })
)
```

</Code.Express>
</Code>

Kysely's constructor requires a database interface that contains an entry with an interface for each of your tables. You can define these types manually, or use `kysely-codegen` / `prisma-kysely` to automatically generate them. Check out the default [models](/guides/creating-a-database-adapter) required by Auth.js.

```ts filename="db.ts"
import { PostgresDialect } from "kysely"
import { Pool } from "pg"

// This adapter exports a wrapper of the original `Kysely` class called `KyselyAuth`,
// that can be used to provide additional type-safety.
// While using it isn't required, it is recommended as it will verify
// that the database interface has all the fields that Auth.js expects.
import { KyselyAuth } from "@auth/kysely-adapter"

import type { GeneratedAlways } from "kysely"

interface Database {
  User: {
    id: GeneratedAlways<string>
    name: string | null
    email: string
    emailVerified: Date | null
    image: string | null
  }
  Account: {
    id: GeneratedAlways<string>
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }
  Session: {
    id: GeneratedAlways<string>
    userId: string
    sessionToken: string
    expires: Date
  }
  VerificationToken: {
    identifier: string
    token: string
    expires: Date
  }
}

export const db = new KyselyAuth<Database>({
  dialect: new PostgresDialect({
    pool: new Pool({
      host: process.env.DATABASE_HOST,
      database: process.env.DATABASE_NAME,
      user: process.env.DATABASE_USER,
      password: process.env.DATABASE_PASSWORD,
    }),
  }),
})
```

<Callout>
An alternative to manually defining types is generating them from the database schema using [kysely-codegen](https://github.com/RobinBlomberg/kysely-codegen), or from Prisma schemas using [prisma-kysely](https://github.com/valtyr/prisma-kysely). When using generated types with `KyselyAuth`, import `Codegen` and pass it as the second generic arg:

```ts
import type { Codegen } from "@auth/kysely-adapter"
new KyselyAuth<Database, Codegen>()
```

</Callout>

### Schema

```ts filename="db/migrations/001_create_db.ts"
import { Kysely, sql } from "kysely"

export async function up(db: Kysely<any>): Promise<void> {
  await db.schema
    .createTable("User")
    .addColumn("id", "uuid", (col) =>
      col.primaryKey().defaultTo(sql`gen_random_uuid()`)
    )
    .addColumn("name", "text")
    .addColumn("email", "text", (col) => col.unique().notNull())
    .addColumn("emailVerified", "timestamptz")
    .addColumn("image", "text")
    .execute()

  await db.schema
    .createTable("Account")
    .addColumn("id", "uuid", (col) =>
      col.primaryKey().defaultTo(sql`gen_random_uuid()`)
    )
    .addColumn("userId", "uuid", (col) =>
      col.references("User.id").onDelete("cascade").notNull()
    )
    .addColumn("type", "text", (col) => col.notNull())
    .addColumn("provider", "text", (col) => col.notNull())
    .addColumn("providerAccountId", "text", (col) => col.notNull())
    .addColumn("refresh_token", "text")
    .addColumn("access_token", "text")
    .addColumn("expires_at", "bigint")
    .addColumn("token_type", "text")
    .addColumn("scope", "text")
    .addColumn("id_token", "text")
    .addColumn("session_state", "text")
    .execute()

  await db.schema
    .createTable("Session")
    .addColumn("id", "uuid", (col) =>
      col.primaryKey().defaultTo(sql`gen_random_uuid()`)
    )
    .addColumn("userId", "uuid", (col) =>
      col.references("User.id").onDelete("cascade").notNull()
    )
    .addColumn("sessionToken", "text", (col) => col.notNull().unique())
    .addColumn("expires", "timestamptz", (col) => col.notNull())
    .execute()

  await db.schema
    .createTable("VerificationToken")
    .addColumn("identifier", "text", (col) => col.notNull())
    .addColumn("token", "text", (col) => col.notNull().unique())
    .addColumn("expires", "timestamptz", (col) => col.notNull())
    .execute()

  await db.schema
    .createIndex("Account_userId_index")
    .on("Account")
    .column("userId")
    .execute()

  await db.schema
    .createIndex("Session_userId_index")
    .on("Session")
    .column("userId")
    .execute()
}

export async function down(db: Kysely<any>): Promise<void> {
  await db.schema.dropTable("Account").ifExists().execute()
  await db.schema.dropTable("Session").ifExists().execute()
  await db.schema.dropTable("User").ifExists().execute()
  await db.schema.dropTable("VerificationToken").ifExists().execute()
}
```

> This schema is adapted for use in Kysely and is based upon our main [schema](/reference/core/adapters#models).

For more information about creating and running migrations with Kysely, refer to the [Kysely migrations documentation](https://kysely.dev/docs/migrations).

### Naming conventions

If mixed snake_case and camelCase column names is an issue for you and/or your underlying database system, we recommend using Kysely's `CamelCasePlugin` ([see the documentation here](https://kysely-org.github.io/kysely-apidoc/classes/CamelCasePlugin.html)) feature to change the field names. This won't affect NextAuth.js, but will allow you to have consistent casing when using Kysely.

================
File: docs/pages/getting-started/adapters/mikro-orm.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/mikro-orm.svg" width="64" height="64" />

# MikroORM Adapter

## Resources

- [MikroORM documentation](https://mikro-orm.io/docs/installation)

## Setup

### Installation

```bash npm2yarn
npm install @mikro-orm/core @auth/mikro-orm-adapter
```

### Environment Variables

```sh
DATABASE_CONNECTION_STRING=./db.sqlite
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { MikroOrmAdapter } from "@auth/mikro-orm-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: MikroOrmAdapter({
    // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver
    dbName: process.env.DATABASE_CONNECTION_STRING,
    type: "sqlite",
    debug: true,
  }),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { MikroOrmAdapter } from "@auth/mikro-orm-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: MikroOrmAdapter({
      // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver
      dbName: import.meta.env.DATABASE_CONNECTION_STRING,
      type: "sqlite",
      debug: true,
    }),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { MikroOrmAdapter } from "@auth/mikro-orm-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: MikroOrmAdapter({
    // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver
    dbName: process.env.DATABASE_CONNECTION_STRING,
    type: "sqlite",
    debug: true,
  }),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { MikroOrmAdapter } from "@auth/mikro-orm-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: MikroOrmAdapter({
      // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver
      dbName: process.env.DATABASE_CONNECTION_STRING,
      type: "sqlite",
      debug: true,
    }),
  })
)
```

</Code.Express>
</Code>

### Advanced usage

#### Passing custom entities

The MikroORM adapter ships with its own set of entities. If you'd like to extend them, you can optionally pass them to the adapter.

> This schema is adapted for use in MikroORM and based upon our main [schema](https://authjs.dev/reference/core/adapters#models)

```ts filename="./auth.ts"
import config from "config/mikro-orm.ts"
import {
  Cascade,
  Collection,
  Entity,
  OneToMany,
  PrimaryKey,
  Property,
  Unique,
} from "@mikro-orm/core"
import { defaultEntities } from "@auth/mikro-orm-adapter"

const type { Account, Session } = defaultEntities

@Entity()
export class User implements defaultEntities.User {
  @PrimaryKey()
  id: string = randomUUID()

  @Property({ nullable: true })
  name?: string

  @Property({ nullable: true })
  @Unique()
  email?: string

  @Property({ type: "Date", nullable: true })
  emailVerified: Date | null = null

  @Property({ nullable: true })
  image?: string

  @OneToMany({
    entity: () => Session,
    mappedBy: (session) => session.user,
    hidden: true,
    orphanRemoval: true,
    cascade: [Cascade.ALL],
  })
  sessions = new Collection<Session>(this)

  @OneToMany({
    entity: () => Account,
    mappedBy: (account) => account.user,
    hidden: true,
    orphanRemoval: true,
    cascade: [Cascade.ALL],
  })
  accounts = new Collection<Account>(this)

  @Enum({ hidden: true })
  role = "ADMIN"
}

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: MikroOrmAdapter(config, { entities: { User } }),
})
```

#### Including default entities

You may want to include the defaultEntities in your MikroORM configuration to include them in Migrations etc.

To achieve that include them in your "entities" array:

```typescript filename="config/mikro-orm.ts"
import { Options } from "@mikro-orm/core"
import { defaultEntities } from "@auth/mikro-orm-adapter"

const config: Options = {
  entities: [VeryImportantEntity, ...Object.values(defaultEntities)],
}

export default config
```

================
File: docs/pages/getting-started/adapters/mongodb.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/mongodb.svg" width="48" height="48" />

# MongoDB Adapter

## Resources

- [MongoDB documentation](https://docs.mongodb.com/)

## Setup

### Installation

```bash npm2yarn
npm install @auth/mongodb-adapter mongodb
```

### Environment Variables

```sh
MONGODB_URI=
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { MongoDBAdapter } from "@auth/mongodb-adapter"
import client from "./lib/db"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: MongoDBAdapter(client),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { MongoDBAdapter } from "@auth/mongodb-adapter"
import client from "./lib/db"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: MongoDBAdapter(client),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { MongoDBAdapter } from "@auth/mongodb-adapter"
import client from "./lib/db"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: MongoDBAdapter(client),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { MongoDBAdapter } from "@auth/mongodb-adapter"
import client from "./lib/db"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: MongoDBAdapter(client),
  })
)
```

</Code.Express>
</Code>

The MongoDB adapter does not handle connections automatically, so you will have to make sure that you pass the Adapter a `MongoClient` that is connected already.

### Add the MongoDB client

```ts filename="lib/db.ts"
// This approach is taken from https://github.com/vercel/next.js/tree/canary/examples/with-mongodb
import { MongoClient, ServerApiVersion } from "mongodb"

if (!process.env.MONGODB_URI) {
  throw new Error('Invalid/Missing environment variable: "MONGODB_URI"')
}

const uri = process.env.MONGODB_URI
const options = {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
}

let client: MongoClient

if (process.env.NODE_ENV === "development") {
  // In development mode, use a global variable so that the value
  // is preserved across module reloads caused by HMR (Hot Module Replacement).
  let globalWithMongo = global as typeof globalThis & {
    _mongoClient?: MongoClient
  }

  if (!globalWithMongo._mongoClient) {
    globalWithMongo._mongoClient = new MongoClient(uri, options)
  }
  client = globalWithMongo._mongoClient
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options)
}

// Export a module-scoped MongoClient. By doing this in a
// separate module, the client can be shared across functions.
export default client
```

================
File: docs/pages/getting-started/adapters/neo4j.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/neo4j.svg" height="64" width="128" />

# Neo4j Adapter

## Resources

- [Neo4j documentation](https://neo4j.com/docs/)

## Setup

### Installation

```bash npm2yarn
npm install @auth/neo4j-adapter neo4j-driver
```

### Environment Variables

```sh
NEO4J_URI=bolt://localhost
NEO4J_USERNAME=neo4j
NEO4J_PASSWORD=abc
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import neo4j from "neo4j-driver"
import { Neo4jAdapter } from "@auth/neo4j-adapter"

const driver = neo4j.driver(
  process.env.NEO4J_URI,
  neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD)
)

const neo4jSession = driver.session()

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: Neo4jAdapter(neo4jSession),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import neo4j from "neo4j-driver"
import { Neo4jAdapter } from "@auth/neo4j-adapter"

const driver = neo4j.driver(
  import.meta.env.NEO4J_URI,
  neo4j.auth.basic(
    import.meta.env.NEO4J_USERNAME,
    import.meta.env.NEO4J_PASSWORD
  )
)

const neo4jSession = driver.session()

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: Neo4jAdapter(neo4jSession),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import neo4j from "neo4j-driver"
import { Neo4jAdapter } from "@auth/neo4j-adapter"

const driver = neo4j.driver(
  process.env.NEO4J_URI,
  neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD)
)

const neo4jSession = driver.session()

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: Neo4jAdapter(neo4jSession),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import neo4j from "neo4j-driver"
import { Neo4jAdapter } from "@auth/neo4j-adapter"

const app = express()

const driver = neo4j.driver(
  process.env.NEO4J_URI,
  neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD)
)

const neo4jSession = driver.session()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: Neo4jAdapter(neo4jSession),
  })
)
```

</Code.Express>
</Code>

### Schema

#### Node labels

The following node labels are used.

- User
- Account
- Session
- VerificationToken

#### Relationships

The following relationships and relationship labels are used.

- `(:User)-[:HAS_ACCOUNT]->(:Account)`
- `(:User)-[:HAS_SESSION]->(:Session)`

#### Properties

This schema is adapted for use in Neo4j and is based upon our main [models](https://authjs.dev/reference/core/adapters#models). Please check there for the node properties. Relationships have no properties.

#### Indexes

Optimum indexes will vary on your edition of Neo4j i.e. community or enterprise, and in case you have your own additional data on the nodes. Below are basic suggested indexes.

1. For **both** Community Edition & Enterprise Edition create constraints and indexes

```sql
CREATE CONSTRAINT user_id_constraint IF NOT EXISTS
ON (u:User) ASSERT u.id IS UNIQUE;

CREATE INDEX user_id_index IF NOT EXISTS
FOR (u:User) ON (u.id);

CREATE INDEX user_email_index IF NOT EXISTS
FOR (u:User) ON (u.email);

CREATE CONSTRAINT session_session_token_constraint IF NOT EXISTS
ON (s:Session) ASSERT s.sessionToken IS UNIQUE;

CREATE INDEX session_session_token_index IF NOT EXISTS
FOR (s:Session) ON (s.sessionToken);
```

2a. For Community Edition **only** create single-property indexes

```sql
CREATE INDEX account_provider_index IF NOT EXISTS
FOR (a:Account) ON (a.provider);

CREATE INDEX account_provider_account_id_index IF NOT EXISTS
FOR (a:Account) ON (a.providerAccountId);

CREATE INDEX verification_token_identifier_index IF NOT EXISTS
FOR (v:VerificationToken) ON (v.identifier);

CREATE INDEX verification_token_token_index IF NOT EXISTS
FOR (v:VerificationToken) ON (v.token);
```

2b. For Enterprise Edition **only** create composite node key constraints and indexes

```sql
CREATE CONSTRAINT account_provider_composite_constraint IF NOT EXISTS
ON (a:Account) ASSERT (a.provider, a.providerAccountId) IS NODE KEY;

CREATE INDEX account_provider_composite_index IF NOT EXISTS
FOR (a:Account) ON (a.provider, a.providerAccountId);

CREATE CONSTRAINT verification_token_composite_constraint IF NOT EXISTS
ON (v:VerificationToken) ASSERT (v.identifier, v.token) IS NODE KEY;

CREATE INDEX verification_token_composite_index IF NOT EXISTS
FOR (v:VerificationToken) ON (v.identifier, v.token);
```

================
File: docs/pages/getting-started/adapters/neon.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/neon.svg" height="64" width="64" />

# Neon Adapter

## Resources

- [Neon documentation](https://neon.tech/docs/)

## Setup

### Installation

```bash npm2yarn
npm install @auth/neon-adapter @neondatabase/serverless
```

### Environment Variables

```sh
DATABASE_URL=
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import NeonAdapter from "@auth/neon-adapter"
import { Pool } from "@neondatabase/serverless"

// *DO NOT* create a `Pool` here, outside the request handler.

export const { handlers, auth, signIn, signOut } = NextAuth(() => {
  // Create a `Pool` inside the request handler.
  const pool = new Pool({ connectionString: process.env.DATABASE_URL })
  return {
    adapter: NeonAdapter(pool),
    providers: [],
  }
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import NeonAdapter from "@auth/neon-adapter"
import { Pool } from "@neondatabase/serverless"

// *DO NOT* create a `Pool` here, outside the request handler.

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => {
    // Create a `Pool` inside the request handler.
    const pool = new Pool({ connectionString: process.env.DATABASE_URL })
    return {
      adapter: NeonAdapter(pool),
      providers: [],
    }
  }
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import NeonAdapter from "@auth/neon-adapter"
import { Pool } from "@neondatabase/serverless"

// *DO NOT* create a `Pool` here, outside the request handler.

export const { handle, signIn, signOut } = SvelteKitAuth(() => {
  // Create a `Pool` inside the request handler.
  const pool = new Pool({ connectionString: process.env.DATABASE_URL })
  return {
    adapter: NeonAdapter(pool),
    providers: [],
  }
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import NeonAdapter from "@auth/neon-adapter"
import { Pool } from "@neondatabase/serverless"

const pool = new Pool({ connectionString: process.env.DATABASE_URL })

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: NeonAdapter(pool),
  })
)
```

</Code.Express>
</Code>

### Schema

The SQL schema for the tables used by this adapter is as follows. Learn more about the models at our
doc page on [Database Models](/guides/creating-a-database-adapter).

```sql
CREATE TABLE verification_token
(
  identifier TEXT NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  token TEXT NOT NULL,

  PRIMARY KEY (identifier, token)
);

CREATE TABLE accounts
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  type VARCHAR(255) NOT NULL,
  provider VARCHAR(255) NOT NULL,
  "providerAccountId" VARCHAR(255) NOT NULL,
  refresh_token TEXT,
  access_token TEXT,
  expires_at BIGINT,
  id_token TEXT,
  scope TEXT,
  session_state TEXT,
  token_type TEXT,

  PRIMARY KEY (id)
);

CREATE TABLE sessions
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  "sessionToken" VARCHAR(255) NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE users
(
  id SERIAL,
  name VARCHAR(255),
  email VARCHAR(255),
  "emailVerified" TIMESTAMPTZ,
  image TEXT,

  PRIMARY KEY (id)
);

```

================
File: docs/pages/getting-started/adapters/pg.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/pg.svg" height="64" width="64" />

# PostgreSQL Adapter

## Resources

- [Pg documentation](https://www.postgresql.org/docs/)

## Setup

### Installation

```bash npm2yarn
npm install @auth/pg-adapter pg
```

### Environment Variables

```sh
DATABASE_HOST=
DATABASE_NAME=
DATABASE_USER=
DATABASE_PASSWORD=
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "pg"

const pool = new Pool({
  host: process.env.DATABASE_HOST,
  user: process.env.DATABASE_USER,
  password: process.env.DATABASE_PASSWORD,
  database: process.env.DATABASE_NAME,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
})

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: PostgresAdapter(pool),
  providers: [],
})
```

If you are using [Neon](https://neon.tech)'s PostgreSQL like [Vercel Postgres](https://vercel.com/docs/storage/vercel-postgres), you can use `@neondatabase/serverless` to work with edge runtime.

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "@neondatabase/serverless"

// *DO NOT* create a `Pool` here, outside the request handler.
// Neon's Postgres cannot keep a pool alive between requests.

export const { handlers, auth, signIn, signOut } = NextAuth(() => {
  // Create a `Pool` inside the request handler.
  const pool = new Pool({ connectionString: process.env.DATABASE_URL })
  return {
    adapter: PostgresAdapter(pool),
    providers: [],
  }
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "pg"

const pool = new Pool({
  host: import.meta.env.DATABASE_HOST,
  user: import.meta.env.DATABASE_USER,
  password: import.meta.env.DATABASE_PASSWORD,
  database: import.meta.env.DATABASE_NAME,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
})

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: PostgresAdapter(pool),
  })
)
```

If you are using [Neon](https://neon.tech)'s PostgreSQL like [Vercel Postgres](https://vercel.com/docs/storage/vercel-postgres), you can use `@neondatabase/serverless` to work with edge runtime.

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "@neondatabase/serverless"

// *DO NOT* create a `Pool` here, outside the request handler.
// Neon's Postgres cannot keep a pool alive between requests.

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => {
    // Create a `Pool` inside the request handler.
    const pool = new Pool({ connectionString: import.meta.env.DATABASE_URL })
    return {
      providers: [],
      adapter: PostgresAdapter(pool),
    }
  }
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "pg"

const pool = new Pool({
  host: process.env.DATABASE_HOST,
  user: process.env.DATABASE_USER,
  password: process.env.DATABASE_PASSWORD,
  database: process.env.DATABASE_NAME,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
})

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: PostgresAdapter(pool),
  providers: [],
})
```

If you are using [Neon](https://neon.tech)'s PostgreSQL like [Vercel Postgres](https://vercel.com/docs/storage/vercel-postgres), you can use `@neondatabase/serverless` to work with edge runtime.

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "@neondatabase/serverless"

// *DO NOT* create a `Pool` here, outside the request handler.
// Neon's Postgres cannot keep a pool alive between requests.

export const { handle, signIn, signOut } = SvelteKitAuth(() => {
  // Create a `Pool` inside the request handler.
  const pool = new Pool({ connectionString: process.env.DATABASE_URL })
  return {
    adapter: PostgresAdapter(pool),
    providers: [],
  }
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import PostgresAdapter from "@auth/pg-adapter"
import { Pool } from "pg"

const pool = new Pool({
  host: process.env.DATABASE_HOST,
  user: process.env.DATABASE_USER,
  password: process.env.DATABASE_PASSWORD,
  database: process.env.DATABASE_NAME,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
})

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: PostgresAdapter(pool),
  })
)
```

</Code.Express>
</Code>

### Schema

The SQL schema for the tables used by this adapter is as follows. Learn more about the models at our
doc page on [Database Models](/guides/creating-a-database-adapter).

```sql
CREATE TABLE verification_token
(
  identifier TEXT NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  token TEXT NOT NULL,

  PRIMARY KEY (identifier, token)
);

CREATE TABLE accounts
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  type VARCHAR(255) NOT NULL,
  provider VARCHAR(255) NOT NULL,
  "providerAccountId" VARCHAR(255) NOT NULL,
  refresh_token TEXT,
  access_token TEXT,
  expires_at BIGINT,
  id_token TEXT,
  scope TEXT,
  session_state TEXT,
  token_type TEXT,

  PRIMARY KEY (id)
);

CREATE TABLE sessions
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  "sessionToken" VARCHAR(255) NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE users
(
  id SERIAL,
  name VARCHAR(255),
  email VARCHAR(255),
  "emailVerified" TIMESTAMPTZ,
  image TEXT,

  PRIMARY KEY (id)
);

```

================
File: docs/pages/getting-started/adapters/pouchdb.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/pouchdb.svg" width="64" height="64" />

# PouchDB Adapter

## Resources

- [PouchDB documentation](https://pouchdb.com/api.html)

## Setup

### Installation

```bash npm2yarn
npm install pouchdb pouchdb-find @auth/pouchdb-adapter
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { PouchDBAdapter } from "@auth/pouchdb-adapter"
import PouchDB from "pouchdb"

// Setup your PouchDB instance and database
PouchDB.plugin(require("pouchdb-adapter-leveldb")) // Or any other adapter
  .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin

const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: PouchDBAdapter(pouchdb),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { PouchDBAdapter } from "@auth/pouchdb-adapter"
import PouchDB from "pouchdb"

// Setup your PouchDB instance and database
PouchDB.plugin(require("pouchdb-adapter-leveldb")) // Or any other adapter
  .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin

const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: PouchDBAdapter(pouchdb),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { PouchDBAdapter } from "@auth/pouchdb-adapter"
import PouchDB from "pouchdb"

// Setup your PouchDB instance and database
PouchDB.plugin(require("pouchdb-adapter-leveldb")) // Or any other adapter
  .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin

const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: PouchDBAdapter(pouchdb),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { PouchDBAdapter } from "@auth/pouchdb-adapter"
import PouchDB from "pouchdb"

// Setup your PouchDB instance and database
PouchDB.plugin(require("pouchdb-adapter-leveldb")) // Or any other adapter
  .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin

const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: PouchDBAdapter(pouchdb),
  })
)
```

</Code.Express>
</Code>

<Callout>
  Depending on your architecture you can use PouchDB's http adapter to reach any
  database compliant with the CouchDB protocol (CouchDB, Cloudant, etc.) or use
  any other PouchDB compatible adapter (leveldb, in-memory, etc.)
</Callout>

<Callout type="info">
  Your PouchDB instance MUST provide the `pouchdb-find` plugin since it is used
  internally by the adapter to build and manage indexes
</Callout>

### Advanced usage

#### Memory-First Caching Strategy

If you need to boost your authentication layer performance, you may use PouchDB's powerful sync features and various adapters, to build a memory-first caching strategy.

Use an in-memory PouchDB as your main authentication database, and synchronize it with any other persisted PouchDB. You may do a one way, one-off replication at startup from the persisted PouchDB into the in-memory PouchDB, then two-way, continuous sync.

This will most likely not increase performance much in a serverless environment due to various reasons such as concurrency, function startup time increases, etc.

For more details, please see https://pouchdb.com/api.html#sync

================
File: docs/pages/getting-started/adapters/prisma.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"
import { Accordion, Accordions } from "@/components/Accordion"

<img align="right" src="/img/adapters/prisma.svg" width="64" height="64" />

# Prisma Adapter

## Resources

- [Prisma documentation](https://www.prisma.io/docs)

## Setup

### Installation

```bash npm2yarn
npm install @prisma/client @auth/prisma-adapter
npm install prisma --save-dev
```

### Environment Variables

Prisma needs to set up the environment variable to establish a connection with your database and retrieve data. Prisma requires the `DATABASE_URL` environment variable to create the connection. For more information, read the [docs](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql).

```sh
DATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
```

### Configuration

To improve performance using `Prisma ORM`, we can set up the Prisma instance to ensure only one instance is created throughout the project and then import it from any file as needed. This approach avoids recreating instances of PrismaClient every time it is used. Finally, we can import the Prisma instance from the `auth.ts` file configuration.

```ts filename="prisma.ts"
import { PrismaClient } from "@prisma/client"

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient }

export const prisma = globalForPrisma.prisma || new PrismaClient()

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma
```

<Callout type="warning">
  We recommend using version `@prisma/client@5.12.0` or above if using
  middleware or any other edge runtime(s). See [edge
  compatibility](#edge-compatibility) below for more information.
</Callout>

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { prisma } from "@/prisma"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: PrismaAdapter(prisma),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { prisma } from "@/prisma"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: PrismaAdapter(prisma),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { prisma } from "@/prisma"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: PrismaAdapter(prisma),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { prisma } from "@/prisma"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: PrismaAdapter(prisma),
  })
)
```

</Code.Express>
</Code>

### Edge Compatibility

Prisma has shipped edge runtime support for their client in version `5.12.0`. You can read more about it on their [edge documentation](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/overview). This requires specific database drivers and therefore is only compatible with certain database types / hosting providers. Check their [list of supported drivers](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/overview#which-database-drivers-are-edge-compatible) before getting started. You can check out an example Auth.js application with `next-auth` and Prisma on the edge [here](https://github.com/ndom91/authjs-prisma-edge-example).

For more about edge compatibility in general, check out our [edge compatibility guide](/guides/edge-compatibility).

The original database edge-runtime workaround, to split your `auth.ts` configuration into two, will be kept below.

#### Old Edge Workaround

At the moment, Prisma is still working on being fully compatible with edge runtimes like Vercel's. See the issue being tracked [here](https://github.com/prisma/prisma/issues/20560), and Prisma's announcement about early edge support in the `5.9.1` [changelog](https://github.com/prisma/prisma/releases/tag/5.9.0). There are two options to deal with this issue:

- Use the Prisma's [Accelerate](https://pris.ly/d/accelerate) feature
- Follow our [Edge Compatibility](/guides/edge-compatibility) page as the workaround. This uses the `jwt` session strategy and separates the `auth.ts` configuration into two files.

Using Prisma with the `jwt` session strategy and `@prisma/client@5.9.1` or above doesn't require any additional modifications, other than ensuring you don't do any database queries in your middleware.

Since `@prisma/client@5.9.1`, Prisma no longer throws about being incompatible with the edge runtime at instantiation, but at query time. Therefore, it is possible to import it in files being used in your middleware as long as you do not execute any queries in your middleware.

### Schema

You need to use at least Prisma `2.26.0`. Create a schema file at `prisma/schema.prisma` with the following models.

<Accordions>
<Accordion title="PostgreSQL">

```prisma filename="prisma/schema-postgres.prisma"
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
```

</Accordion>
<Accordion title="MySQL">

```prisma filename="prisma/schema-mysql.prisma"
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
```

<Callout>
  When using the MySQL connector for Prisma, the [Prisma `String`
  type](https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string)
  gets mapped to `varchar(191)` which may not be long enough to store fields
  such as `id_token` in the `Account` model. This can be avoided by explicitly
  using the `Text` type with `@db.Text` as shown for some fields in the example
  above.
</Callout>

</Accordion>
<Accordion title="SQLite">

```prisma filename="prisma/schema-sqlite.prisma"
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
```

</Accordion>
<Accordion title="MongoDB">

```prisma filename="prisma/schema-mongodb.prisma"
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
```

Prisma supports MongoDB, and so does Auth.js. Following the instructions of the [Prisma documentation](https://www.prisma.io/docs/concepts/database-connectors/mongodb) on the MongoDB connector, things to look out for include the following.

1. Make sure that the id fields are mapped correctly

```prisma
id  String  @id @default(auto()) @map("_id") @db.ObjectId
```

2. Use the native database type attributes like `@db.String` and for Id fields, `@db.ObjectId`.

```prisma
user_id            String   @db.ObjectId
refresh_token      String?  @db.String
access_token       String?  @db.String
id_token           String?  @db.String
```

This has all been applied in the above example schema already.

</Accordion>
</Accordions>

### Apply Schema

This will create an SQL migration file and execute it:

```bash npm2yarn
npm exec prisma migrate dev
```

Note that you will need to specify your database connection string in the environment variable `DATABASE_URL`. You can do this by setting it in a `.env` file at the root of your project.

### Generate Prisma Client

`prisma migrate dev` will also generate the Prisma client, but if you need to generate it again manually you can run the following command.

```bash npm2yarn
npm exec prisma generate
```

### Development Workflow

When you're working on your application and making changes to your database schema, you'll need to
run the migrate command again every time you make changes to the schema in order for Prisma to (1) generate a migration file and apply it to the underlying database and (2) regenerate the Prisma client in your project with the latest types and model methods.

```bash npm2yarn
npm exec prisma migrate dev
```

### Naming Conventions

If mixed `snake_case` and `camelCase` column names is an issue for you and/or your underlying database system, we recommend using Prisma's [`@map()` feature](https://www.prisma.io/docs/concepts/components/prisma-schema/names-in-underlying-database) to change the field names. This won't affect Auth.js, but will allow you to customize the column names to whichever naming convention you prefer.

For example, moving to `snake_case` and plural table names.

```prisma filename="schema.prisma"
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
```

================
File: docs/pages/getting-started/adapters/sequelize.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/sequelize.svg" height="64" width="64" />

# Sequelize Adapter

## Resources

- [Sequelize documentation](https://sequelize.org/docs/v6/getting-started/)
- [Connecting to a Database](https://sequelize.org/master/manual/getting-started.html#connecting-to-a-database)

## Setup

### Installation

```bash npm2yarn
npm install @auth/sequelize-adapter sequelize
```

### Environment Variables

```sh
DATABASE_URL=postgres://postgres:adminadmin@0.0.0.0:5432/db
```

### Configuration

<Callout type="warning">
  You'll also have to manually install [the driver for your
  database](https://sequelize.org/master/manual/getting-started.html) of choice.
</Callout>

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import SequelizeAdapter from "@auth/sequelize-adapter"
import { Sequelize } from "sequelize"

const sequelize = new Sequelize(process.env.DATABASE_URL)

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: SequelizeAdapter(sequelize),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import SequelizeAdapter from "@auth/sequelize-adapter"
import { Sequelize } from "sequelize"

const sequelize = new Sequelize(import.meta.env.DATABASE_URL)

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: SequelizeAdapter(sequelize),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import SequelizeAdapter from "@auth/sequelize-adapter"
import { Sequelize } from "sequelize"

const sequelize = new Sequelize(process.env.DATABASE_URL)

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: SequelizeAdapter(sequelize),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import SequelizeAdapter from "@auth/sequelize-adapter"
import { Sequelize } from "sequelize"

const sequelize = new Sequelize(process.env.DATABASE_URL)

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: SequelizeAdapter(sequelize),
  })
)
```

</Code.Express>
</Code>

### Schema

By default, the sequelize adapter will not create tables in your database. In production, best practice is to create the [required tables](/concepts/database-models) in your database via [migrations](https://sequelize.org/master/manual/migrations.html). In development, you are able to call [`sequelize.sync()`](https://sequelize.org/master/manual/model-basics.html#model-synchronization) to have sequelize create the necessary tables, foreign keys and indexes:

> This schema is adapted for use in Sequelize and based upon our main
> [schema](/concepts/database-models)

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import SequelizeAdapter from "@auth/sequelize-adapter"
import Sequelize from "sequelize"

const sequelize = new Sequelize("sqlite::memory:")
const adapter = SequelizeAdapter(sequelize)

// Calling sync() is not recommended in production
sequelize.sync()

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter,
})
```

## Advanced usage

### Using custom models

Sequelize models are option to customization like so:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import SequelizeAdapter, { models } from "@auth/sequelize-adapter"
import Sequelize, { DataTypes } from "sequelize"

const sequelize = new Sequelize("sqlite::memory:")

export const { handlers, auth, signIn, signOut } = NextAuth({
  // https://authjs.dev/reference/providers/
  providers: [],
  adapter: SequelizeAdapter(sequelize, {
    models: {
      User: sequelize.define("user", {
        ...models.User,
        phoneNumber: DataTypes.STRING,
      }),
    },
  }),
})
```

================
File: docs/pages/getting-started/adapters/supabase.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/supabase.svg" width="64" height="64" />

# Supabase Adapter

## Resources

- [Supabase documentation](https://supabase.com/docs)

## Setup

### Installation

```bash npm2yarn
npm install @supabase/supabase-js @auth/supabase-adapter
```

### Environment Variables

```sh
SUPABASE_URL
SUPABASE_SERVICE_ROLE_KEY
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { SupabaseAdapter } from "@auth/supabase-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: SupabaseAdapter({
    url: process.env.SUPABASE_URL,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY,
  }),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { SupabaseAdapter } from "@auth/supabase-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: SupabaseAdapter({
      url: import.meta.env.SUPABASE_URL,
      secret: import.meta.env.SUPABASE_SERVICE_ROLE_KEY,
    }),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { SupabaseAdapter } from "@auth/supabase-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: SupabaseAdapter({
    url: process.env.SUPABASE_URL,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY,
  }),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { SupabaseAdapter } from "@auth/supabase-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: SupabaseAdapter({
      url: process.env.SUPABASE_URL,
      secret: process.env.SUPABASE_SERVICE_ROLE_KEY,
    }),
  })
)
```

</Code.Express>
</Code>

<Callout>
This adapter is developed by the community and not officially maintained or supported by Supabase. It uses the Supabase Database to store user and session data in a separate `next_auth` schema. It is a standalone Auth server that does not interface with Supabase Auth and therefore provides a different feature set.

If you're looking for an officially maintained Auth server with additional features like [built-in email server](https://supabase.com/docs/guides/auth/auth-email#configure-email-settings?utm_source=authjs-docs&medium=referral&campaign=authjs), [phone auth](https://supabase.com/docs/guides/auth/auth-twilio?utm_source=authjs-docs&medium=referral&campaign=authjs), and [Multi Factor Authentication (MFA / 2FA)](https://supabase.com/contact/mfa?utm_source=authjs-docs&medium=referral&campaign=authjs), please use [Supabase Auth](https://supabase.com/auth) with the [Auth Helpers for Next.js](https://supabase.com/docs/guides/auth/auth-helpers/nextjs?utm_source=authjs-docs&medium=referral&campaign=authjs).

</Callout>

### Schema

Setup your database as described in our main [schema](https://authjs.dev/reference/core/adapters#models), by copying the SQL schema below in the Supabase [SQL Editor](https://app.supabase.com/project/_/sql).

Alternatively you can select the NextAuth Quickstart card on the [SQL Editor page](https://app.supabase.com/project/_/sql), or [create a migration with the Supabase CLI](https://supabase.com/docs/guides/cli/local-development#database-migrations?utm_source=authjs-docs&medium=referral&campaign=authjs).

```sql
--
-- Name: next_auth; Type: SCHEMA;
--
CREATE SCHEMA next_auth;

GRANT USAGE ON SCHEMA next_auth TO service_role;
GRANT ALL ON SCHEMA next_auth TO postgres;

--
-- Create users table
--
CREATE TABLE IF NOT EXISTS next_auth.users
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name text,
    email text,
    "emailVerified" timestamp with time zone,
    image text,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT email_unique UNIQUE (email)
);

GRANT ALL ON TABLE next_auth.users TO postgres;
GRANT ALL ON TABLE next_auth.users TO service_role;

--- uid() function to be used in RLS policies
CREATE FUNCTION next_auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select
  	coalesce(
		nullif(current_setting('request.jwt.claim.sub', true), ''),
		(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
	)::uuid
$$;

--
-- Create sessions table
--
CREATE TABLE IF NOT EXISTS  next_auth.sessions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expires timestamp with time zone NOT NULL,
    "sessionToken" text NOT NULL,
    "userId" uuid,
    CONSTRAINT sessions_pkey PRIMARY KEY (id),
    CONSTRAINT sessionToken_unique UNIQUE ("sessionToken"),
    CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId")
        REFERENCES  next_auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

GRANT ALL ON TABLE next_auth.sessions TO postgres;
GRANT ALL ON TABLE next_auth.sessions TO service_role;

--
-- Create accounts table
--
CREATE TABLE IF NOT EXISTS  next_auth.accounts
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    type text NOT NULL,
    provider text NOT NULL,
    "providerAccountId" text NOT NULL,
    refresh_token text,
    access_token text,
    expires_at bigint,
    token_type text,
    scope text,
    id_token text,
    session_state text,
    oauth_token_secret text,
    oauth_token text,
    "userId" uuid,
    CONSTRAINT accounts_pkey PRIMARY KEY (id),
    CONSTRAINT provider_unique UNIQUE (provider, "providerAccountId"),
    CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId")
        REFERENCES  next_auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

GRANT ALL ON TABLE next_auth.accounts TO postgres;
GRANT ALL ON TABLE next_auth.accounts TO service_role;

--
-- Create verification_tokens table
--
CREATE TABLE IF NOT EXISTS  next_auth.verification_tokens
(
    identifier text,
    token text,
    expires timestamp with time zone NOT NULL,
    CONSTRAINT verification_tokens_pkey PRIMARY KEY (token),
    CONSTRAINT token_unique UNIQUE (token),
    CONSTRAINT token_identifier_unique UNIQUE (token, identifier)
);

GRANT ALL ON TABLE next_auth.verification_tokens TO postgres;
GRANT ALL ON TABLE next_auth.verification_tokens TO service_role;
```

### Expose the NextAuth schema in Supabase

Expose the `next_auth` schema via the Serverless API in the [API settings](https://app.supabase.com/project/_/settings/api) by adding `next_auth` to the "Exposed schemas" list.

When developing locally add `next_auth` to the `schemas` array in the `config.toml` file in the `supabase` folder that was generated by the [Supabase CLI](https://supabase.com/docs/guides/cli/local-development#initialize-your-project?utm_source=authjs-docs&medium=referral&campaign=authjs).

## Advanced usage

### Enabling Row Level Security (RLS)

Postgres provides a powerful feature called [Row Level Security (RLS)](https://supabase.com/docs/guides/auth/row-level-security?utm_source=authjs-docs&medium=referral&campaign=authjs) to limit access to data.

This works by sending a signed JWT to your [Supabase Serverless API](https://supabase.com/docs/guides/api?utm_source=authjs-docs&medium=referral&campaign=authjs). There is two steps to make this work with NextAuth:

#### Generate the Supabase `access_token` JWT in the session callback

To sign the JWT use the `jsonwebtoken` package:

```bash npm2yarn
npm install jsonwebtoken
```

Using the [session callback](/reference/core/types#session) create the Supabase `access_token` and append it to the `session` object.

To sign the JWT use the Supabase JWT secret which can be found in the [API settings](https://app.supabase.com/project/_/settings/api)

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { SupabaseAdapter } from "@auth/supabase-adapter"
import jwt from "jsonwebtoken"

// For more information on each option (and a full list of options) go to
// https://authjs.dev/reference/core/types#authconfig
export const { handlers, auth, signIn, signOut } = NextAuth({
  // https://authjs.dev/getting-started/authentication/oauth
  providers: [],
  adapter: SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY,
  }),
  callbacks: {
    async session({ session, user }) {
      const signingSecret = process.env.SUPABASE_JWT_SECRET
      if (signingSecret) {
        const payload = {
          aud: "authenticated",
          exp: Math.floor(new Date(session.expires).getTime() / 1000),
          sub: user.id,
          email: user.email,
          role: "authenticated",
        }
        session.supabaseAccessToken = jwt.sign(payload, signingSecret)
      }
      return session
    },
  },
})
```

#### Inject the Supabase `access_token` JWT into the client

For example, given the following public schema:

```sql
-- Note: This table contains user data. Users should only be able to view and update their own data.
create table users (
  -- UUID from next_auth.users
  id uuid not null primary key,
  name text,
  email text,
  image text,
  constraint "users_id_fkey" foreign key ("id")
        references  next_auth.users (id) match simple
        on update no action
        on delete cascade -- if a user is deleted in NextAuth they will also be deleted in our public table.
);
alter table users enable row level security;
create policy "Can view own user data." on users for select using (next_auth.uid() = id);
create policy "Can update own user data." on users for update using (next_auth.uid() = id);

-- This trigger automatically creates a user entry when a new user signs up via NextAuth.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, name, email, image)
  values (new.id, new.name, new.email, new.image);
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on next_auth.users
  for each row execute procedure public.handle_new_user();
```

The `supabaseAccessToken` is now available on the `session` object and can be passed to the supabase-js client. This works in any environment: client-side, server-side (API routes, SSR), as well as in middleware edge functions!

```js
// Use `useSession()` or `unstable_getServerSession()` to get the NextAuth session.

const { supabaseAccessToken } = session

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  {
    global: {
      headers: {
        Authorization: `Bearer ${supabaseAccessToken}`,
      },
    },
  }
)
// Now you can query with RLS enabled.
const { data, error } = await supabase.from("users").select("*")
```

### TypeScript

You can pass types that were generated with the Supabase CLI to the Supabase Client to get enhanced type safety and auto-completion.

Creating a new supabase client object:

```ts
import { createClient } from "@supabase/supabase-js"
import { Database } from "../database.types"

const supabase = createClient<Database>()
```

#### Extend the session type with the `supabaseAccessToken`

In order to extend the `session` object with the `supabaseAccessToken` we need to extend the `session` interface in a `types/next-auth.d.ts` file:

```ts filename="types/next-auth.d.ts"
import NextAuth, { type DefaultSession } from "next-auth"

declare module "next-auth" {
  // Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
  interface Session {
    // A JWT which can be used as Authorization header with supabase-js for RLS.
    supabaseAccessToken?: string
    user: {
      // The user's postal address
      address: string
    } & DefaultSession["user"]
  }
}
```

================
File: docs/pages/getting-started/adapters/surrealdb.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/surrealdb.svg" height="64" width="64" />

# SurrealDB Adapter

## Resources

- [SurrealDB documentation](https://www.surrealdb.com/docs)

## Setup

### Installation

```bash npm2yarn
npm install @auth/surrealdb-adapter surrealdb.js
```

### Environment Variables

```sh
AUTH_SURREALDB_CONNECTION
AUTH_SURREALDB_USERNAME
AUTH_SURREALDB_PASSWORD
AUTH_SURREALDB_NS
AUTH_SURREALDB_DB
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { SurrealDBAdapter } from "@auth/surrealdb-adapter"
import clientPromise from "./lib/surrealdb"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [],
  adapter: SurrealDBAdapter(clientPromise),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { SurrealDBAdapter } from "@auth/surrealdb-adapter"
import clientPromise from "./lib/surrealdb"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: SurrealDBAdapter(clientPromise),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { SurrealDBAdapter } from "@auth/surrealdb-adapter"
import clientPromise from "./lib/surrealdb"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [],
  adapter: SurrealDBAdapter(clientPromise),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { SurrealDBAdapter } from "@auth/surrealdb-adapter"
import clientPromise from "./lib/surrealdb"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: SurrealDBAdapter(clientPromise),
  })
)
```

</Code.Express>
</Code>

The SurrealDB adapter does not handle connections automatically, so you will have to make sure that you pass the Adapter a `SurrealDBClient` that is connected already. Below you can see an example how to do this.

### Authorization

#### Option 1 – Using RPC:

```ts filename="./lib/surrealdb.ts"
import { Surreal } from "surrealdb.js"

const connectionString = process.env.AUTH_SURREALDB_CONNECTION
const username = process.env.AUTH_SURREALDB_USERNAME
const password = process.env.AUTH_SURREALDB_PASSWORD
const namespace = process.env.AUTH_SURREALDB_NAMESPACE
const database = process.env.AUTH_SURREALDB_DATABASE
if (!connectionString || !username || !password || !namespace || !database) {
  throw new Error(
    "SurrealDB connection string, username, password, namespace, and database are required"
  )
}

const clientPromise = new Promise<Surreal>(async (resolve, reject) => {
  const db = new Surreal()
  try {
    await db.connect(`${connectionString}/rpc`, {
      namespace,
      database,
      auth: {
        username,
        password,
      },
    })
    resolve(db)
  } catch (e) {
    reject(e)
  }
})

// Export a module-scoped Promise<Surreal>. By doing this in a
// separate module, the client can be shared across functions.
export default clientPromise
```

#### Option 2 – Using HTTP:

Useful in serverless environments like Vercel.

```ts filename="./lib/surrealdb.ts"
import { ExperimentalSurrealHTTP } from "surrealdb.js"

const connectionString = process.env.AUTH_SURREALDB_CONNECTION
const username = process.env.AUTH_SURREALDB_USERNAME
const password = process.env.AUTH_SURREALDB_PASSWORD
const namespace = process.env.AUTH_SURREALDB_NAMESPACE
const database = process.env.AUTH_SURREALDB_DATABASE
if (!connectionString || !username || !password || !namespace || !database) {
  throw new Error(
    "SurrealDB connection string, username, password, namespace, and database are required"
  )
}

const clientPromise = new Promise<ExperimentalSurrealHTTP<typeof fetch>>(
  async (resolve, reject) => {
    try {
      const db = new ExperimentalSurrealHTTP(connectionString, {
        fetch,
        namespace,
        database,
        auth: {
          username,
          password,
        },
      })
      resolve(db)
    } catch (e) {
      reject(e)
    }
  }
)

// Export a module-scoped Promise<Surreal>. By doing this in a
// separate module, the client can be shared across functions.
export default clientPromise
```

================
File: docs/pages/getting-started/adapters/typeorm.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/typeorm.svg" height="64" width="64" />

# TypeORM Adapter

## Resources

- [TypeORM documentation](https://typeorm.io)

## Setup

### Installation

```bash npm2yarn
npm install @auth/typeorm-adapter typeorm
```

### Environment Variables

```sh
AUTH_TYPEORM_CONNECTION=postgres://postgres:adminadmin@0.0.0.0:5432/db
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { TypeORMAdapter } from "@auth/typeorm-adapter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: TypeORMAdapter(process.env.AUTH_TYPEORM_CONNECTION),
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { TypeORMAdapter } from "@auth/typeorm-adapter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: TypeORMAdapter(import.meta.env.AUTH_TYPEORM_CONNECTION),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { TypeORMAdapter } from "@auth/typeorm-adapter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: TypeORMAdapter(process.env.AUTH_TYPEORM_CONNECTION),
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { TypeORMAdapter } from "@auth/typeorm-adapter"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: TypeORMAdapter(process.env.AUTH_TYPEORM_CONNECTION),
  })
)
```

</Code.Express>
</Code>

`TypeORMAdapter` takes either a connection string, or a [`ConnectionOptions`](https://github.com/typeorm/typeorm/blob/master/docs/connection-options.md) object as its first parameter.

### Advanced usage

#### Custom models

The TypeORM adapter uses [`Entity` classes](https://github.com/typeorm/typeorm/blob/master/docs/entities.md) to define the shape of your data.

You can override the default entities and add additional fields with a custom entities file.

1. Create a file containing your modified entities:

```ts filename="lib/entities.ts" {38-39}
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  OneToMany,
  ValueTransformer,
} from "typeorm"

const transformer: Record<"date" | "bigint", ValueTransformer> = {
  date: {
    from: (date: string | null) => date && new Date(parseInt(date, 10)),
    to: (date?: Date) => date?.valueOf().toString(),
  },
  bigint: {
    from: (bigInt: string | null) => bigInt && parseInt(bigInt, 10),
    to: (bigInt?: number) => bigInt?.toString(),
  },
}

@Entity({ name: "users" })
export class UserEntity {
  @PrimaryGeneratedColumn("uuid")
  id!: string

  @Column({ type: "varchar", nullable: true })
  name!: string | null

  @Column({ type: "varchar", nullable: true, unique: true })
  email!: string | null

  @Column({ type: "varchar", nullable: true, transformer: transformer.date })
  emailVerified!: string | null

  @Column({ type: "varchar", nullable: true })
  image!: string | null

+ @Column({ type: "varchar", nullable: true })
+ role!: string | null

  @OneToMany(() => SessionEntity, (session) => session.userId)
  sessions!: SessionEntity[]

  @OneToMany(() => AccountEntity, (account) => account.userId)
  accounts!: AccountEntity[]
}

@Entity({ name: "accounts" })
export class AccountEntity {
  @PrimaryGeneratedColumn("uuid")
  id!: string

  @Column({ type: "uuid" })
  userId!: string

  @Column()
  type!: string

  @Column()
  provider!: string

  @Column()
  providerAccountId!: string

  @Column({ type: "varchar", nullable: true })
  refresh_token!: string | null

  @Column({ type: "varchar", nullable: true })
  access_token!: string | null

  @Column({
    nullable: true,
    type: "bigint",
    transformer: transformer.bigint,
  })
  expires_at!: number | null

  @Column({ type: "varchar", nullable: true })
  token_type!: string | null

  @Column({ type: "varchar", nullable: true })
  scope!: string | null

  @Column({ type: "varchar", nullable: true })
  id_token!: string | null

  @Column({ type: "varchar", nullable: true })
  session_state!: string | null

  @Column({ type: "varchar", nullable: true })
  oauth_token_secret!: string | null

  @Column({ type: "varchar", nullable: true })
  oauth_token!: string | null

  @ManyToOne(() => UserEntity, (user) => user.accounts, {
    createForeignKeyConstraints: true,
  })
  user!: UserEntity
}

@Entity({ name: "sessions" })
export class SessionEntity {
  @PrimaryGeneratedColumn("uuid")
  id!: string

  @Column({ unique: true })
  sessionToken!: string

  @Column({ type: "uuid" })
  userId!: string

  @Column({ transformer: transformer.date })
  expires!: string

  @ManyToOne(() => UserEntity, (user) => user.sessions)
  user!: UserEntity
}

@Entity({ name: "verification_tokens" })
export class VerificationTokenEntity {
  @PrimaryGeneratedColumn("uuid")
  id!: string

  @Column()
  token!: string

  @Column()
  identifier!: string

  @Column({ transformer: transformer.date })
  expires!: string
}
```

2. Pass them to `TypeORMAdapter`

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { TypeORMAdapter } from "@auth/typeorm-adapter"
import * as entities from "lib/entities"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: TypeORMAdapter("yourconnectionstring", { entities }),
})
```

<Callout type="info">
  The `synchronize: true` option in TypeORM will generate SQL that exactly
  matches the entities. This will automatically apply any changes it finds in
  the entity model. This is a useful option in development.
</Callout>

<Callout type="warning">
  `synchronize: true` should not be enabled against production databases as it
  may cause data loss if the configured schema does not match the expected
  schema! We recommend that you synchronize/migrate your production database at
  build-time.
</Callout>

#### Naming Conventions

If mixed snake_case and camelCase column names are an issue for you and/or your underlying database system, we recommend using TypeORM's naming strategy feature to change the target field names. There is a package called `typeorm-naming-strategies` which includes a `snake_case` strategy which will translate the fields from how Auth.js expects them, to snake_case in the actual database.

For example, you can add the naming convention option to the connection object in your NextAuth config.

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { TypeORMAdapter } from "@auth/typeorm-adapter"
import { SnakeNamingStrategy } from "typeorm-naming-strategies"
import { ConnectionOptions } from "typeorm"

const connection: ConnectionOptions = {
  type: "mysql",
  host: "localhost",
  port: 3306,
  username: "test",
  password: "test",
  database: "test",
  namingStrategy: new SnakeNamingStrategy(),
}

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: TypeORMAdapter(connection),
})
```

================
File: docs/pages/getting-started/adapters/unstorage.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/unstorage.svg" width="64" height="64" />

# Unstorage Adapter

## Resources

- [Unstorage documentation](https://unstorage.unjs.io/)

## Setup

### Installation

```bash npm2yarn
npm install unstorage @auth/unstorage-adapter
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
import { createStorage } from "unstorage"

const storage = createStorage()

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: UnstorageAdapter(storage),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
import { createStorage } from "unstorage"

const storage = createStorage()

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: UnstorageAdapter(storage),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
import { createStorage } from "unstorage"

const storage = createStorage()

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: UnstorageAdapter(storage),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
import { createStorage } from "unstorage"

const storage = createStorage()

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: UnstorageAdapter(storage),
  })
)
```

</Code.Express>
</Code>

### Advanced usage

#### Using multiple apps with a single storage

If you have multiple Auth.js connected apps using the same storage, you need different key prefixes for every app.

You can change the prefixes by passing an `options` object as the second argument to the adapter factory function.

The default values for this object are:

```ts
const defaultOptions = {
  baseKeyPrefix: "",
  accountKeyPrefix: "user:account:",
  accountByUserIdPrefix: "user:account:by-user-id:",
  emailKeyPrefix: "user:email:",
  sessionKeyPrefix: "user:session:",
  sessionByUserIdKeyPrefix: "user:session:by-user-id:",
  userKeyPrefix: "user:",
  verificationTokenKeyPrefix: "user:token:",
}
```

Usually changing the `baseKeyPrefix` should be enough for this scenario, but for more custom setups, you can also change the prefixes of every single key.

```ts
import NextAuth from "next-auth"
import { UnstorageAdapter } from "@auth/unstorage-adapter"
import { createStorage } from "unstorage"

const storage = createStorage()

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: UnstorageAdapter(storage, { baseKeyPrefix: "app2:" }),
})
```

#### Using `getItemRaw`/`setItemRaw` instead of `getItem`/`setItem`

If you are using storage that supports JSON, you can make it use `getItemRaw/setItemRaw` instead of `getItem/setItem`.

This is an experimental feature. Please check [unjs/unstorage#142](https://github.com/unjs/unstorage/issues/142) for more information.

You can enable this functionality by passing `useItemRaw: true` (default: false) in the `options` object as the second argument to the adapter factory function.

```ts
export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: UnstorageAdapter(storage, { useItemRaw: true }),
})
```

================
File: docs/pages/getting-started/adapters/upstash-redis.mdx
================
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/adapters/upstash-redis.svg"
  width="64"
  height="64"
/>

# Upstash Redis Adapter

## Resources

- [Upstash documentation](https://docs.upstash.com/redis)

## Setup

### Installation

```bash npm2yarn
npm install @upstash/redis @auth/upstash-redis-adapter
```

### Environment Variables

```sh
UPSTASH_REDIS_URL,
UPSTASH_REDIS_TOKEN
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { UpstashRedisAdapter } from "@auth/upstash-redis-adapter"
import { Redis } from "@upstash/redis"

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_URL!,
  token: process.env.UPSTASH_REDIS_TOKEN!,
})

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: UpstashRedisAdapter(redis),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { UpstashRedisAdapter } from "@auth/upstash-redis-adapter"
import { Redis } from "@upstash/redis"

const redis = new Redis({
  url: import.meta.env.UPSTASH_REDIS_URL!,
  token: import.meta.env.UPSTASH_REDIS_TOKEN!,
})

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: UpstashRedisAdapter(redis),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { UpstashRedisAdapter } from "@auth/upstash-redis-adapter"
import { Redis } from "@upstash/redis"

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_URL!,
  token: process.env.UPSTASH_REDIS_TOKEN!,
})

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: UpstashRedisAdapter(redis),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { UpstashRedisAdapter } from "@auth/upstash-redis-adapter"
import { Redis } from "@upstash/redis"

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_URL!,
  token: process.env.UPSTASH_REDIS_TOKEN!,
})

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: UpstashRedisAdapter(redis),
  })
)
```

</Code.Express>
</Code>

### Advanced usage

#### Using multiple apps with a single Upstash Redis instance

The Upstash free-tier allows for only one Redis instance. If you have multiple Auth.js connected apps using this instance, you need different key prefixes for every app.

You can change the prefixes by passing an `options` object as the second argument to the adapter factory function.

The default values for this object are:

```ts
const defaultOptions = {
  baseKeyPrefix: "",
  accountKeyPrefix: "user:account:",
  accountByUserIdPrefix: "user:account:by-user-id:",
  emailKeyPrefix: "user:email:",
  sessionKeyPrefix: "user:session:",
  sessionByUserIdKeyPrefix: "user:session:by-user-id:",
  userKeyPrefix: "user:",
  verificationTokenKeyPrefix: "user:token:",
}
```

Usually changing the `baseKeyPrefix` should be enough for this scenario, but for more custom setups, you can also change the prefixes of every single key.

```ts
export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: UpstashRedisAdapter(redis, { baseKeyPrefix: "app2:" }),
})
```

================
File: docs/pages/getting-started/adapters/xata.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/adapters/xata.svg" width="64" height="64" />

# Xata Adapter

## Resources

- [Xata documentation](https://xata.io/docs/overview)

## Setup

### Installation

```bash npm2yarn
npm install @auth/xata-adapter
```

```bash
# Install the Xata CLI globally if you don't already have it
npm install --location=global @xata.io/cli

# Login
xata auth login
```

### Configuration

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { XataAdapter } from "@auth/xata-adapter"
import { XataClient } from "../../../xata" // Or wherever you've chosen for the generated client

const client = new XataClient()

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: XataAdapter(client),
  providers: [],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { XataAdapter } from "@auth/xata-adapter"
import { XataClient } from "../../../xata" // Or wherever you've chosen for the generated client

const client = new XataClient()

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: XataAdapter(client),
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { XataAdapter } from "@auth/xata-adapter"
import { XataClient } from "../../../xata" // Or wherever you've chosen for the generated client

const client = new XataClient()

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: XataAdapter(client),
  providers: [],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { XataAdapter } from "@auth/xata-adapter"
import { XataClient } from "../../../xata" // Or wherever you've chosen for the generated client

const client = new XataClient()

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [],
    adapter: XataAdapter(client),
  })
)
```

</Code.Express>
</Code>

### Xata Setup

This adapter allows using Auth.js with Xata as a database to store users, sessions, and more. The preferred way to create a Xata project and use Xata databases is using the [Xata Command Line Interface (CLI)](https://docs.xata.io/cli/getting-started).

The CLI allows generating a `XataClient` that will help you work with Xata in a safe way, and that this adapter depends on.

When you're ready, let's create a new Xata project using our Auth.js schema that the Xata adapter can work with. To do that, copy and paste this schema file into your project's directory:

```json filename="schema.json"
{
  "tables": [
    {
      "name": "nextauth_users",
      "columns": [
        {
          "name": "email",
          "type": "email"
        },
        {
          "name": "emailVerified",
          "type": "datetime"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "image",
          "type": "string"
        }
      ]
    },
    {
      "name": "nextauth_accounts",
      "columns": [
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "nextauth_users"
          }
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "provider",
          "type": "string"
        },
        {
          "name": "providerAccountId",
          "type": "string"
        },
        {
          "name": "refresh_token",
          "type": "string"
        },
        {
          "name": "access_token",
          "type": "string"
        },
        {
          "name": "expires_at",
          "type": "int"
        },
        {
          "name": "token_type",
          "type": "string"
        },
        {
          "name": "scope",
          "type": "string"
        },
        {
          "name": "id_token",
          "type": "text"
        },
        {
          "name": "session_state",
          "type": "string"
        }
      ]
    },
    {
      "name": "nextauth_verificationTokens",
      "columns": [
        {
          "name": "identifier",
          "type": "string"
        },
        {
          "name": "token",
          "type": "string"
        },
        {
          "name": "expires",
          "type": "datetime"
        }
      ]
    },
    {
      "name": "nextauth_users_accounts",
      "columns": [
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "nextauth_users"
          }
        },
        {
          "name": "account",
          "type": "link",
          "link": {
            "table": "nextauth_accounts"
          }
        }
      ]
    },
    {
      "name": "nextauth_users_sessions",
      "columns": [
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "nextauth_users"
          }
        },
        {
          "name": "session",
          "type": "link",
          "link": {
            "table": "nextauth_sessions"
          }
        }
      ]
    },
    {
      "name": "nextauth_sessions",
      "columns": [
        {
          "name": "sessionToken",
          "type": "string"
        },
        {
          "name": "expires",
          "type": "datetime"
        },
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "nextauth_users"
          }
        }
      ]
    }
  ]
}
```

Now, run the following command:

```bash
xata init --schema=./path/to/your/schema.json
```

The CLI will walk you through a setup process where you choose a [workspace](https://xata.io/docs/api-reference/workspaces) (kind of like a GitHub org or a Vercel team) and an appropriate database. We recommend using a fresh database for this, as we'll augment it with tables that Auth.js needs.

================
File: docs/pages/getting-started/authentication/_meta.js
================


================
File: docs/pages/getting-started/authentication/credentials.mdx
================
---
title: Credentials
---

import { Steps, Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Credentials

To setup Auth.js with any external authentication mechanisms or use a traditional username/email and password flow, we can use the `Credentials` provider. This provider is designed to forward any credentials inserted into the login form (i.e. username/password, but not limited to) to your authentication service.

<Callout type="warning">
  The industry has come a long way since usernames and passwords
  as the go-to mechanism for authenticating and authorizing users to
  web applications. Therefore, if possible, we recommend a more modern and
  secure authentication mechanism such as any of the [OAuth
  providers](/getting-started/authentication/oauth), [Email Magic
  Links](/getting-started/authentication/email), or [WebAuthn
  (Passkeys)](/getting-started/authentication/webauthn) options instead.

However, we also want to be flexible and support anything
you deem appropriate for your application and use case,
so there are no plans to remove this provider.

</Callout>

<Callout>
  By default, the Credentials provider does not persist data in the database.
  However, you can still create and save any data in your database, you just
  have to provide the necessary logic, eg. to encrypt passwords, add
  rate-limiting, add password reset functionality, etc.
</Callout>

<Steps>

### Credentials Provider

To use the `Credentials Provider`, you’ll first need to import and configure it in your `Auth.js` setup. This provider allows you to implement custom login logic based on form input values.

Here’s how to set it up:

1. Import the provider.
2. Add it to the `providers` array in your `Auth.js` config.
3. Define the `credentials` and `authorize` fields.

#### `credentials`

The `credentials` object defines the input fields displayed on the default sign-in page. These inputs are automatically rendered on the route:

- `/api/auth/signin` (Next.js)
- `/auth/signin` (Other frameworks)

Each field accepts the following properties:

- `label`: Input label
- `type`: HTML input type (`text`, `password`, etc.)
- `placeholder`: Placeholder text

> These fields are also passed to the `authorize` function under the `credentials` argument.

For more details, see the [Built-in Pages guide](https://authjs.dev/guides/pages/built-in-pages).

```ts
Credentials({
  credentials: {
    email: {
      type: "email",
      label: "Email",
      placeholder: "johndoe@gmail.com",
    },
    password: {
      type: "password",
      label: "Password",
      placeholder: "*****",
    },
  },
})
```

#### `authorize`

The `authorize` function handles the custom login logic and determines whether the credentials provided are valid.

It receives the input values defined in `credentials`, and you must return either a user object or `null`. If `null` is returned, the login fails.

<Code>
<Code.Next>

```ts filename="./auth.ts" {2, 8}
import NextAuth from "next-auth"
import Credentials from "next-auth/providers/credentials"
// Your own logic for dealing with plaintext password strings; be careful!
import { saltAndHashPassword } from "@/utils/password"

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [
    Credentials({
      // You can specify which fields should be submitted, by adding keys to the `credentials` object.
      // e.g. domain, username, password, 2FA token, etc.
      credentials: {
        email: {},
        password: {},
      },
      authorize: async (credentials) => {
        let user = null

        // logic to salt and hash password
        const pwHash = saltAndHashPassword(credentials.password)

        // logic to verify if the user exists
        user = await getUserFromDb(credentials.email, pwHash)

        if (!user) {
          // No user found, so this is their first attempt to login
          // Optionally, this is also the place you could do a user registration
          throw new Error("Invalid credentials.")
        }

        // return user object with their profile data
        return user
      },
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Credentials from "@auth/qwik/providers/credentials"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Credentials({
        credentials: {
          email: { label: "Email" },
          password: { label: "Password", type: "password" },
        },
        async authorize(credentials) {
          const response = await getUserFromDb(credentials)
          if (!response.ok) return null
          return (await response.json()) ?? null
        },
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts" {2, 8}
import { SvelteKitAuth } from "@auth/sveltekit"
import Credentials from "@auth/sveltekit/providers/credentials"
// Your own logic for dealing with plaintext password strings; be careful!
import { saltAndHashPassword } from "@/utils/password"

export const { signIn, signOut, handle } = SvelteKitAuth({
  providers: [
    Credentials({
      // You can specify which fields should be submitted, by adding keys to the `credentials` object.
      // e.g. domain, username, password, 2FA token, etc.
      credentials: {
        email: {},
        password: {},
      },
      authorize: async (credentials) => {
        let user = null

        // logic to salt and hash password
        const pwHash = saltAndHashPassword(credentials.password)

        // logic to verify if user exists
        user = await getUserFromDb(credentials.email, pwHash)

        if (!user) {
          // No user found, so this is their first attempt to login
          // Optionally, this is also the place you could do a user registration
          throw new Error("Invalid credentials.")
        }

        // return JSON object with the user data
        return user
      },
    }),
  ],
})
```

Don't forget to re-export the `handle` in your `./src/hooks.server.ts` file.

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>

<Code.Express>

```ts filename="./src/routes/auth.route.ts" {2, 11}
import { ExpressAuth } from "@auth/express"
import Credentials from "@auth/express/providers/credentials"
import express from "express"
// Your own logic for dealing with plaintext password strings; be careful!
import { saltAndHashPassword } from "@/utils/password"

const app = express()
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      Credentials({
        // You can specify which fields should be submitted, by adding keys to the `credentials` object.
        // e.g. domain, username, password, 2FA token, etc.
        credentials: {
          email: {},
          password: {},
        },
        authorize: async (credentials) => {
          let user = null

          // logic to salt and hash password
          const pwHash = saltAndHashPassword(credentials.password)

          // logic to verify if the user exists
          user = await getUserFromDb(credentials.email, pwHash)

          if (!user) {
            // No user found, so this is their first attempt to login
            // Optionally, this is also the place you could do a user registration
            throw new Error("Invalid credentials.")
          }

          // return user object with the their profile data
          return user
        },
      }),
    ],
  })
)
```

</Code.Express>
</Code>

<Callout type="info">
  If you're using TypeScript, you can [augment the `User`
  interface](/getting-started/typescript#module-augmentation) to match the
  response of your `authorize` callback, so whenever you read the user in other
  callbacks (like the `jwt`) the type will match correctly.
</Callout>

### Signin Form

Finally, let's create a simple sign-in form.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx" {13, 17} /formData/
import { signIn } from "@/auth"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("credentials", formData)
      }}
    >
      <label>
        Email
        <input name="email" type="email" />
      </label>
      <label>
        Password
        <input name="password" type="password" />
      </label>
      <button>Sign In</button>
    </form>
  )
}
```

</Code.Next>
<Code.NextClient>

```tsx filename="./components/sign-in.tsx"
"use client"
import { signIn } from "next-auth/react"

export function SignIn() {
  const credentialsAction = (formData: FormData) => {
    signIn("credentials", formData)
  }

  return (
    <form action={credentialsAction}>
      <label htmlFor="credentials-email">
        Email
        <input type="email" id="credentials-email" name="email" />
      </label>
      <label htmlFor="credentials-password">
        Password
        <input type="password" id="credentials-password" name="password" />
      </label>
      <input type="submit" value="Sign In" />
    </form>
  )
}
```

</Code.NextClient>
<Code.Qwik>

```ts filename="/src/routes/index.tsx"
import { component$ } from "@builder.io/qwik"
import { Form } from "@builder.io/qwik-city"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <Form action={signInSig}>
      <label>
        Email
        <input name="email" type="email" />
      </label>
      <label>
        Password
        <input name="password" type="password" />
      </label>
      <button>Sign In</button>
    </Form>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```svelte filename="src/route/+page.svelte" /bind:value/ /signIn/
<script>
  import { signIn } from "../auth"
  import { page } from "$app/stores"

  let email = ""
  let password = ""
</script>

<div>
  <form>
    <label>
      Email
      <input name="email" type="email" bind:value={email} />
    </label>
    <label>
      Password
      <input name="password" type="password" bind:value={password} />
    </label>
    <button on:click={() => signIn("credentials", { email, password })}>
      Log in
    </button>
  </form>
</div>
```

</Code.Svelte>

<Code.Express>

```html filename="views/signin.html"
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sign In</title>
  </head>
  <body>
    <h1>Sign In</h1>
    <form action="/auth/signin" method="POST">
      <label for="email">Email:</label>
      <input type="email" name="email" id="email" required />
      <br />
      <label for="password">Password:</label>
      <input type="password" name="password" id="password" required />
      <br />
      <button type="submit">Sign In</button>
    </form>
  </body>
</html>
```

</Code.Express>

</Code>

</Steps>

## Validating credentials

Always validate the credentials server-side, i.e. by leveraging a schema validation library like [Zod](https://zod.dev).

```bash npm2yarn
npm install zod
```

Next, we'll set up the schema and parsing in our `auth.ts` configuration file, using the `authorize` callback on the `Credentials` provider.

<Code>
<Code.Next>

```ts filename="./lib/zod.ts"
import { object, string } from "zod"

export const signInSchema = object({
  email: string({ required_error: "Email is required" })
    .min(1, "Email is required")
    .email("Invalid email"),
  password: string({ required_error: "Password is required" })
    .min(1, "Password is required")
    .min(8, "Password must be more than 8 characters")
    .max(32, "Password must be less than 32 characters"),
})
```

```ts filename="./auth.ts" {22}
import NextAuth from "next-auth"
import { ZodError } from "zod"
import Credentials from "next-auth/providers/credentials"
import { signInSchema } from "./lib/zod"
// Your own logic for dealing with plaintext password strings; be careful!
import { saltAndHashPassword } from "@/utils/password"
import { getUserFromDb } from "@/utils/db"

export const { handlers, auth } = NextAuth({
  providers: [
    Credentials({
      // You can specify which fields should be submitted, by adding keys to the `credentials` object.
      // e.g. domain, username, password, 2FA token, etc.
      credentials: {
        email: {},
        password: {},
      },
      authorize: async (credentials) => {
        try {
          let user = null

          const { email, password } = await signInSchema.parseAsync(credentials)

          // logic to salt and hash password
          const pwHash = saltAndHashPassword(password)

          // logic to verify if the user exists
          user = await getUserFromDb(email, pwHash)

          if (!user) {
            throw new Error("Invalid credentials.")
          }

          // return JSON object with the user data
          return user
        } catch (error) {
          if (error instanceof ZodError) {
            // Return `null` to indicate that the credentials are invalid
            return null
          }
        }
      },
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="./lib/zod.ts"
import { object, string } from "zod"

export const signInSchema = object({
  email: string({ required_error: "Email is required" })
    .min(1, "Email is required")
    .email("Invalid email"),
  password: string({ required_error: "Password is required" })
    .min(1, "Password is required")
    .min(8, "Password must be more than 8 characters")
    .max(32, "Password must be less than 32 characters"),
})
```

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Credentials from "@auth/qwik/providers/credentials"
import { signInSchema } from "./lib/zod"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Credentials({
        credentials: {
          email: { label: "Email" },
          password: { label: "Password", type: "password" },
        },
        async authorize(credentials) {
          const { email, password } = await signInSchema.parseAsync(credentials)

          // Your logic here
        },
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./lib/zod.ts"
import { object, string } from "zod"

export const signInSchema = object({
  email: string({ required_error: "Email is required" })
    .min(1, "Email is required")
    .email("Invalid email"),
  password: string({ required_error: "Password is required" })
    .min(1, "Password is required")
    .min(8, "Password must be more than 8 characters")
    .max(32, "Password must be less than 32 characters"),
})
```

```ts filename="./auth.ts" {22-23}
import SvelteKitAuth from "@auth/sveltekit"
import { ZodError } from "zod"
import Credentials from "@auth/sveltekit/providers/credentials"
import { signInSchema } from "./lib/zod"
// Your own logic for dealing with plaintext password strings; be careful!
import { saltAndHashPassword } from "@/utils/password"
import { getUserFromDb } from "@/utils/db"

export const { handle } = SvelteKitAuth({
  providers: [
    Credentials({
      // You can specify which fields should be submitted, by adding keys to the `credentials` object.
      // e.g. domain, username, password, 2FA token, etc.
      credentials: {
        email: {},
        password: {},
      },
      authorize: async (credentials) => {
        try {
          let user = null

          const { email, password } =
            await createUserSchema.parseAsync(credentials)

          // logic to salt and hash password
          const pwHash = saltAndHashPassword(password)

          // logic to verify if the user exists
          user = await getUserFromDb(email, pwHash)

          if (!user) {
            throw new Error("Invalid credentials.")
          }

          // return JSON object with the user data
          return user
        } catch (error) {
          if (error instanceof ZodError) {
            // Return `null` to indicate that the credentials are invalid
            return null
          }
        }
      },
    }),
  ],
})
```

</Code.Svelte>
</Code>

<Callout>

When authorize returns null, Auth.js handles the error in one of two ways:

Using built-in pages:

- The user is redirected to the login page with the query string: `?error=CredentialsSignin&code=credentials`. You can customize the code using the [credentials provider options](https://authjs.dev/reference/core/providers/credentials#returns).
- Using form actions or custom error handling (e.g., in Remix, SvelteKit): The error is thrown as credentialssignin and must be caught manually in your server action. See more in the [Auth.js error reference](https://authjs.dev/reference/core/errors#credentialssignin).

</Callout>

================
File: docs/pages/getting-started/authentication/email.mdx
================
---
title: Email Providers
---

import { useState } from "react"
import { RichTabs } from "@/components/RichTabs"

import { Callout, Steps, Tabs } from "nextra/components"
import { Code } from "@/components/Code"
import { Link } from "@/components/Link"
import { Screenshot } from "@/components/Screenshot"
import MagicLink from "../../../public/img/magic-links/start.webp"

# Email Provider

This login mechanism starts by the user providing their email address at the login form. Then a **Verification Token** is sent to the provided email address. The user then has 24 hours to click the link in the email body to "consume" that token and register their account, otherwise the verification token will expire and they will have to request a new one.

<Callout>
  An Email Provider can be used with both [JSON Web Tokens](https://jwt.io/) and
  [database](/concepts/session-strategies#database-session) session, whichever
  you choose, you **must still configure a database** so that Auth.js can save
  the verification tokens and look them up when the user attempts to login. It
  is not possible to enable an email provider without using a database.
</Callout>

### Providers

<div className="flex flex-col w-full gap-6 items-start">
  <RichTabs
    orientation="horizontal"
    tabKey="Resend"
    defaultValue="resend"
    className="w-full flex flex-col"
  >
    <RichTabs.List className="grid grid-cols-[repeat(auto-fit,140px)] justify-center gap-4">
      <RichTabs.Trigger
        value="forwardemail"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16 dark:bg-[currentColor]" src={`/img/providers/forwardemail.svg`} />
        <div className="text-sm text-center line-clamp-1">Forward Email</div>
      </RichTabs.Trigger>
      <RichTabs.Trigger
        value="resend"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16 dark:bg-[currentColor]" src={`/img/providers/resend.svg`} />
        <div className="text-sm text-center">Resend</div>
      </RichTabs.Trigger>
      <RichTabs.Trigger
        value="sendgrid"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16" src={`/img/providers/sendgrid.svg`} />
        <div className="text-sm text-center">Sendgrid</div>
      </RichTabs.Trigger>
      <RichTabs.Trigger
        value="nodemailer"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16" src={`/img/providers/nodemailer.svg`} />
        <div className="text-sm text-center">Nodemailer</div>
      </RichTabs.Trigger>
      <RichTabs.Trigger
        value="postmark"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16" src={`/img/providers/postmark.svg`} />
        <div className="text-sm text-center">Postmark</div>
      </RichTabs.Trigger>
            <RichTabs.Trigger
        value="loops"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16" src={`/img/providers/loops.svg`} />
        <div className="text-sm text-center">Loops</div>
      </RichTabs.Trigger>
      <RichTabs.Trigger
        value="mailgun"
        orientation="vertical"
        className="!border border-neutral-200 dark:border-neutral-700 aria-selected:!bg-neutral-100 aria-selected:dark:!bg-neutral-950 dark:!bg-neutral-900 !bg-white !h-auto !w-auto !gap-2 !justify-start p-6 px-8 rounded-md outline-none transition-all duration-300 hover:bg-neutral-200 !font-normal"
      >
        <img className="size-16" src={`/img/providers/mailgun.svg`} />
        <div className="text-sm text-center">Mailgun</div>
      </RichTabs.Trigger>
    </RichTabs.List>
  <RichTabs.Content
    orientation="vertical"
    value="forwardemail"
    className="h-full !border-0 !w-full"
    tabIndex={-1}
  >

### Forward Email Setup

<Steps>

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for passwordless login to work as verification tokens need to be stored.

### Setup Environment Variables

Auth.js will automatically pick up these if formatted like the example above.
You can [also use a different name for the environment variables](/guides/environment-variables#oauth-variables) if needed, but then you’ll need to pass them to the provider manually.

```bash filename=".env"
AUTH_FORWARDEMAIL_KEY=abc123
```

### Setup Provider

Let’s enable `ForwardEmail` as a sign in option in our Auth.js configuration. You’ll have to import the `ForwardEmail` provider from the package and pass it to the providers array we setup earlier in the Auth.js config file:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import ForwardEmail from "next-auth/providers/forwardemail"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [ForwardEmail],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import ForwardEmail from "@auth/qwik/providers/forwardemail"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [ForwardEmail],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import ForwardEmail from "@auth/sveltekit/providers/forwardemail"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [ForwardEmail],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

### Add Signin Button

Next, we can add a signin button somewhere in your application like the Navbar. This will send an email to the user containing the magic link to sign in.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("forwardemail", formData)
      }}
    >
      <input type="text" name="email" placeholder="Email" />
      <button type="submit">Signin with Forward Email</button>
    </form>
  )
}
```

</Code.Next>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <button
      onClick$={() => signInSig.submit({ redirectTo: "/" })}
    >
      SignIn
    </button>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```html filename="src/routes/+page.svelte"
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <SignIn provider="forwardemail" />
  </nav>
</div>
```

</Code.Svelte>
</Code>

### Signin

Start your application, once the user enters their Email and clicks on the signin button, they'll be redirected to a page that asks them to check their email. When they click on the link in their email, they will be signed in.

</Steps>

<Callout type="info">
  Check our [Customising magic links
  emails](/getting-started/providers/forwardemail#customization) to learn how to
  change the look and feel of the emails the user receives to sign in.
</Callout>

For more information on this provider go to the [Forward Email docs page](/getting-started/providers/forwardemail).

</RichTabs.Content>

<RichTabs.Content
  orientation="vertical"
  value="resend"
  className="h-full !border-0 !w-full"
  tabIndex={-1}
>

### Resend Setup

<Steps>

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for passwordless login to work as verification tokens need to be stored.

### Setup Environment Variables

Auth.js will automatically pick up these if formatted like the example above.
You can [also use a different name for the environment variables](/guides/environment-variables#oauth-variables) if needed, but then you’ll need to pass them to the provider manually.

```bash filename=".env"
AUTH_RESEND_KEY=abc123
```

### Setup Provider

Let’s enable `Resend` as a sign in option in our Auth.js configuration. You’ll have to import the `Resend` provider from the package and pass it to the providers array we setup earlier in the Auth.js config file:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Resend],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Resend from "@auth/qwik/providers/resend"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Resend],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Resend from "@auth/sveltekit/providers/resend"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Resend],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

### Add Signin Button

Next, we can add a signin button somewhere in your application like the Navbar. This will send an email to the user containing the magic link to sign in.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("resend", formData)
      }}
    >
      <input type="text" name="email" placeholder="Email" />
      <button type="submit">Signin with Resend</button>
    </form>
  )
}
```

</Code.Next>
<Code.NextClient>

```tsx filename="./components/sign-in.tsx"
"use client"
import { signIn } from "next-auth/react"

export function SignIn() {
  const resendAction = (formData: FormData) => {
    signIn("resend", formData)
  }

  return (
    <form action={resendAction}>
      <label htmlFor="email-resend">
        Email
        <input type="email" id="email-resend" name="email" />
      </label>
      <input type="submit" value="Signin with Resend" />
    </form>
  )
}
```

</Code.NextClient>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <button
      onClick$={() => signInSig.submit({ redirectTo: "/" })}
    >
      SignIn
    </button>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```html filename="src/routes/+page.svelte"
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <SignIn provider="resend" />
  </nav>
</div>
```

</Code.Svelte>
</Code>

### Signin

Start your application, once the user enters their Email and clicks on the signin button, they'll be redirected to a page that asks them to check their email. When they click on the link in their email, they will be signed in.

</Steps>

<Callout type="info">
  Check our [Customising magic links
  emails](/getting-started/providers/resend#customization) to learn how to
  change the look and feel of the emails the user receives to sign in.
</Callout>

For more information on this provider go to the [Resend docs page](/getting-started/providers/resend).

</RichTabs.Content>

<RichTabs.Content
  orientation="vertical"
  value="sendgrid"
  className="h-full !border-0 !w-full"
  tabIndex={-1}
>

### Sendgrid Setup

<Steps>

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for passwordless login to work as verification tokens need to be stored.

### Setup Environment Variables

Auth.js will automatically pick up these if formatted like the example above.
You can [also use a different name for the environment variables](/guides/environment-variables#oauth-variables) if needed, but then you’ll need to pass them to the provider manually.

```bash filename=".env"
AUTH_SENDGRID_KEY=abc123
```

### Setup Provider

Let’s enable `Sendgrid` as a sign in option in our Auth.js configuration. You’ll have to import the `Sendgrid` provider from the package and pass it to the providers array we setup earlier in the Auth.js config file:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Sendgrid from "next-auth/providers/sendgrid"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Sendgrid],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Sendgrid from "@auth/qwik/providers/sendgrid"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Sendgrid],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Sendgrid from "@auth/sveltekit/providers/sendgrid"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Sendgrid],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

### Add Signin Button

Next, we can add a signin button somewhere in your application like the Navbar. This will send an email to the user containing the magic link to sign in.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("sendgrid", formData)
      }}
    >
      <input type="text" name="email" placeholder="Email" />
      <button type="submit">Signin with Sendgrid</button>
    </form>
  )
}
```

</Code.Next>
<Code.NextClient>

```tsx filename="./components/sign-in.tsx"
"use client"
import { signIn } from "next-auth/react"

export function SignIn() {
  const sendgridAction = (formData: FormData) => {
    signIn("sendgrid", formData)
  }

  return (
    <form action={sendgridAction}>
      <label htmlFor="email-sendgrid">
        Email
        <input type="email" id="email-sendgrid" name="email" />
      </label>
      <input type="submit" value="Signin with Sendgrid" />
    </form>
  )
}
```

</Code.NextClient>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <button
      onClick$={() => signInSig.submit({ redirectTo: "/" })}
    >
      SignIn
    </button>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```html filename="src/routes/+page.svelte"
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <SignIn provider="sendgrid" />
  </nav>
</div>
```

</Code.Svelte>
</Code>

### Signin

Start your application, once the user enters their Email and clicks on the signin button, they'll be redirected to a page that asks them to check their email. When they click on the link in their email, they will be signed in.

</Steps>

<Callout type="info">
  Check our [Customising magic links
  emails](/getting-started/providers/sendgrid#customization) to learn how to
  change the look and feel of the emails the user receives to sign in.
</Callout>

For more information on this provider go to the [Sendgrid docs page](/getting-started/providers/sendgrid).

</RichTabs.Content>

<RichTabs.Content
  orientation="vertical"
  value="nodemailer"
  className="h-full !border-0 !w-full"
  tabIndex={-1}
>

### Nodemailer Setup

<Steps>

### Install `nodemailer`

Auth.js does not include `nodemailer` as a dependency, so you'll need to install it yourself if you want to use the Nodemailer provider.

```sh npm2yarn
npm install nodemailer
```

You will need access to an SMTP server, ideally from one of [the services known to work with nodemailer](https://community.nodemailer.com/2-0-0-beta/setup-smtp/well-known-services/). Alternatively, Nodemailer does support [other transport mechanisms](https://nodemailer.com/transports/).

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for magic link login to work as verification tokens need to be stored.

### SMTP Transport Configuration

There are two ways to configure the SMTP server connection: using a connection string or a configuration object.

<Tabs items={['Connection string', 'Configuration object']}>
  <Tabs.Tab>

```bash filename=".env"
EMAIL_SERVER=smtp://username:password@smtp.example.com:587
EMAIL_FROM=noreply@example.com
```

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Nodemailer({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Nodemailer from "@auth/qwik/providers/nodemailer"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Nodemailer({
        server: import.meta.env.EMAIL_SERVER,
        from: import.meta.env.EMAIL_FROM,
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Nodemailer from "@auth/sveltekit/providers/nodemailer"
import { env } from "$env/dynamic/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Nodemailer({
      server: env.EMAIL_SERVER,
      from: env.EMAIL_FROM,
    }),
  ],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

  </Tabs.Tab>
  <Tabs.Tab>

```bash filename=".env"
EMAIL_SERVER_USER=username
EMAIL_SERVER_PASSWORD=password
EMAIL_SERVER_HOST=smtp.example.com
EMAIL_SERVER_PORT=587
EMAIL_FROM=noreply@example.com
```

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Nodemailer({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: process.env.EMAIL_FROM,
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Nodemailer from "@auth/qwik/providers/nodemailer"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Nodemailer({
        server: {
          host: import.meta.env.EMAIL_SERVER_HOST,
          port: import.meta.env.EMAIL_SERVER_PORT,
          auth: {
            user: import.meta.env.EMAIL_SERVER_USER,
            pass: import.meta.env.EMAIL_SERVER_PASSWORD,
          },
        },
        from: import.meta.env.EMAIL_FROM,
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Nodemailer from "@auth/sveltekit/providers/nodemailer"
import { env } from "$env/dynamic/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Nodemailer({
      server: {
        host: env.EMAIL_SERVER_HOST,
        port: env.EMAIL_SERVER_PORT,
        auth: {
          user: env.EMAIL_SERVER_USER,
          pass: env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: env.EMAIL_FROM,
    }),
  ],
})
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

  </Tabs.Tab>
</Tabs>

### Signin Button

Next, we can add a sign in button somewhere in your application like the Navbar. This will forward the user on to the Auth.js default signin page.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async () => {
        "use server"
        await signIn()
      }}
    >
      <button type="submit">Sign In</button>
    </form>
  )
}
```

</Code.Next>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <button
      onClick$={() => signInSig.submit({ redirectTo: "/" })}
    >
      SignIn
    </button>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```ts filename="src/routes/+page.svelte"
<script lang="ts">
  import { signIn } from '@auth/sveltekit/client'
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <button on:click={signIn}>Signin</button>
  </nav>
</div>
```

</Code.Svelte>
</Code>

### Signin

Start your application, click on the sign in button we just added, and you should see Auth.js built-in sign in page with the option to sign in with your email:

<Screenshot src={MagicLink} alt="Screenshot of sign in page" />

Insert your email and click "Sign in with Email". You should receive an email from Auth.js, click on it and should be redirected to your application, landing already authenticated.

</Steps>

For more information on this provider go to the [Nodemailer docs page](/getting-started/providers/nodemailer).

</RichTabs.Content>
<RichTabs.Content
  orientation="vertical"
  value="postmark"
  className="h-full !border-0 !w-full"
  tabIndex={-1}
>

### Postmark Setup

<Steps>

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for passwordless login to work as verification tokens need to be stored.

### Setup Environment Variables

Auth.js will automatically pick up these if formatted like the example above.
You can [also use a different name for the environment variables](/guides/environment-variables#oauth-variables) if needed, but then you’ll need to pass them to the provider manually.

```bash filename=".env"
AUTH_POSTMARK_KEY=abc123
```

### Setup Provider

Let’s enable `Postmark` as a sign in option in our Auth.js configuration. You’ll have to import the `Postmark` provider from the package and pass it to the providers array we setup earlier in the Auth.js config file:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Postmark from "next-auth/providers/postmark"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Postmark],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Postmark from "@auth/qwik/providers/postmark"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Postmark],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Postmark from "@auth/sveltekit/providers/postmark"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Postmark],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

### Add Signin Button

Next, we can add a signin button somewhere in your application like the Navbar. This will send an email to the user containing the magic link to sign in.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("postmark", formData)
      }}
    >
      <input type="text" name="email" placeholder="Email" />
      <button type="submit">Signin with Postmark</button>
    </form>
  )
}
```

</Code.Next>
<Code.NextClient>

```tsx filename="./components/sign-in.tsx"
"use client"
import { signIn } from "next-auth/react"

export function SignIn() {
  const postmarkAction = (formData: FormData) => {
    signIn("postmark", formData)
  }

  return (
    <form action={postmarkAction}>
      <label htmlFor="email-postmark">
        Email
        <input type="email" id="email-postmark" name="email" />
      </label>
      <input type="submit" value="Signin with Postmark" />
    </form>
  )
}
```

</Code.NextClient>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <button
      onClick$={() => signInSig.submit({ redirectTo: "/" })}
    >
      SignIn
    </button>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```html filename="src/routes/+page.svelte"
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <SignIn provider="postmark" />
  </nav>
</div>
```

</Code.Svelte>
</Code>

### Signin

Start your application, once the user enters their Email and clicks on the signin button, they'll be redirected to a page that asks them to check their email. When they click on the link in their email, they will be signed in.

</Steps>

<Callout type="info">
  Check our [Customising magic links
  emails](/getting-started/providers/postmark#customization) to learn how to
  change the look and feel of the emails the user receives to sign in.
</Callout>

For more information on this provider go to the [Postmark docs page](/getting-started/providers/postmark).

</RichTabs.Content>
<RichTabs.Content
orientation="vertical"
value="loops"
className="h-full !border-0 !w-full"
tabIndex={-1}>

### Loops Setup

<Steps>

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for passwordless login to work as verification tokens need to be stored.

### Create your Transactional Email Template on Loops

Loops have provided a super handy [guide](https://loops.so/docs/transactional/guide) to help you get started with creating your transactional email template.
This provider only passes one data varaiable into the template, `url` which is the magic link to sign in. This is case sensitive, so make sure you use `url` in your template. <br/>
On the last page of Template creation, you'll need to copy the `TRANSACTIONAL ID`. If you skipped this step, don't worry, you can get this at any from the Template edit page.

### Create an API Key on Loops

You'll need to create an API key to authenticate with Loops. This key should be kept secret and not shared with anyone.
You can Generate a key by going to the [API Settings Page](https://app.loops.so/settings?page=api) and clicking Generate.
You should name the key something that makes sense to you, like "Auth.js".

### Setup Environment Variables

To implement Loops, you need to set up the following environment variables. You should have these from the previous steps.

```bash filename=".env"
AUTH_LOOPS_KEY=abc123
AUTH_LOOPS_TRANSACTIONAL_ID=def456
```

### Setup Provider

Let's enable `Loops` as a sign-in option for our Auth.js configuration. You'll have to import the `Loops` provider from the package and pass it to the providers array we set up earlier in the Auth.js config file:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Loops from "next-auth/providers/loops"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Loops({
      apiKey: process.env.AUTH_LOOPS_KEY,
      transactionalId: process.env.AUTH_LOOPS_TRANSACTIONAL_ID,
    }),
  ],
})
```

</Code.Next>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Loops from "@auth/sveltekit/providers/loops"
import {
  AUTH_LOOPS_KEY,
  AUTH_LOOPS_TRANSACTIONAL_ID,
} from "$env/static/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Loops({
      apiKey: AUTH_LOOPS_KEY,
      transactionalId: AUTH_LOOPS_TRANSACTIONAL_ID,
    }),
  ],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

### Add Signin Button

Next, we add a signin button somewhere in your application like the Navbar. This will send an email to the user containing the magic link to sign in.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("loops", formData)
      }}
    >
      <input type="text" name="email" placeholder="Email" />
      <button type="submit">Sign in with Loops</button>
    </form>
  )
}
```

</Code.Next>
<Code.Svelte>

```ts filename="src/routes/+page.svelte"

<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <SignIn provider="loops"/>
  </nav>
</div>

```

</Code.Svelte>
</Code>

### Signin

Start your application, click on the signin button we just added, and you should see Auth.js built-in sign in page with the option to sign in with your email.
A user can enter their email, click "Sign in with Loops", and receive their beautifully formatted signin email.
Clicking on the link in the email will redirect the user to your application, landing already authenticated!

</Steps>
</RichTabs.Content>
<RichTabs.Content
  orientation="vertical"
  value="mailgun"
  className="h-full !border-0 !w-full"
  tabIndex={-1}
>

### Mailgun Setup

<Steps>

### Database Adapter

Please make sure you've [setup a database adapter](/getting-started/database), as mentioned earlier,
a database is required for passwordless login to work as verification tokens need to be stored.

### Setup Environment Variables

Auth.js will automatically pick up these if formatted like the example above.
You can [also use a different name for the environment variables](/guides/environment-variables#oauth-variables) if needed, but then you’ll need to pass them to the provider manually.

```bash filename=".env"
AUTH_MAILGUN_KEY=abc123
```

### Setup Provider

Let’s enable `Mailgun` as a sign in option in our Auth.js configuration.
You’ll have to import the `Mailgun` provider from the package and pass it to the providers array we setup earlier in the Auth.js config file:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Mailgun from "next-auth/providers/mailgun"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Mailgun],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Mailgun from "@auth/qwik/providers/mailgun"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Mailgun],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Mailgun from "@auth/sveltekit/providers/mailgun"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Mailgun],
})
```

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

### Add Signin Button

Next, we can add a signin button somewhere in your application like the Navbar. This will send an email to the user containing the magic link to sign in.

<Code>
<Code.Next>

```tsx filename="./components/sign-in.tsx"
import { signIn } from "../../auth.ts"

export function SignIn() {
  return (
    <form
      action={async (formData) => {
        "use server"
        await signIn("mailgun", formData)
      }}
    >
      <input type="text" name="email" placeholder="Email" />
      <button type="submit">Signin with Mailgun</button>
    </form>
  )
}
```

</Code.Next>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <button
      onClick$={() => signInSig.submit({ redirectTo: "/" })}
    >
      SignIn
    </button>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```html filename="src/routes/+page.svelte"
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <SignIn provider="mailgun" />
  </nav>
</div>
```

</Code.Svelte>
</Code>

### Signin

Start your application, once the user enters their Email and clicks on the signin button, they'll be redirected to a page that asks them to check their email. When they click on the link in their email, they will be signed in.

</Steps>

<Callout type="info">
  Check our [Customising magic links
  emails](/getting-started/providers/mailgun#customization) to learn how to
  change the look and feel of the emails the user receives to sign in.
</Callout>

For more information on this provider go to the [Mailgun docs page](/getting-started/providers/mailgun).

</RichTabs.Content>
</RichTabs>
</div>

================
File: docs/pages/getting-started/authentication/oauth.mdx
================
---
title: OAuth Providers
---

import { OAuthProviderSelect } from "@/components/OAuthProviderInstructions"

# OAuth

Auth.js comes with over 80 providers preconfigured. We constantly test ~20 of the most popular ones, by having them enabled and actively used in our [example application](https://next-auth-example.vercel.app). You can choose a provider below to get a walk-through, or find your provider of choice in the sidebar for further details.

<OAuthProviderSelect />

================
File: docs/pages/getting-started/authentication/webauthn.mdx
================
---
title: WebAuthn
---

import { Steps, Callout } from "nextra/components"

# WebAuthn (Passkeys)

<Callout type="warning">
  The WebAuthn / Passkeys provider is experimental and not recommended for
  production use.
</Callout>

The WebAuthn provider requires changes to all of the framework integration as well
as any database adapter that plans to support it. Therefore, the WebAuthn provider
is currently only supported in the following framework integration and database adapters.
Support for more frameworks and adapters are coming soon.

- `next-auth@5.0.0-beta.8` or above
- `@auth/prisma-adapter@1.3.0` or above
- `node@20.0.0` or above

<Steps>

### Install peer dependencies

```bash npm2yarn
npm install @simplewebauthn/server@9.0.3 @simplewebauthn/browser@9.0.1
```

The `@simplewebauthn/browser` peer dependency **is only required for custom signin pages**. If you're using the Auth.js default pages, you can skip installing that peer dependency.

### Apply the required schema Migrations

This is the raw SQL migration for PostgreSQL, for more details including example migrations for other databases, check out the updated Prisma schemas at the [`@auth/prisma-adapter` docs](/getting-started/adapters/prisma).

In short, the Passkeys provider requires an additional table called `Authenticator`.

```sql filename="./migration/add-webauthn-authenticator-table.sql"
-- CreateTable
CREATE TABLE "Authenticator" (
    "credentialID" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "credentialPublicKey" TEXT NOT NULL,
    "counter" INTEGER NOT NULL,
    "credentialDeviceType" TEXT NOT NULL,
    "credentialBackedUp" BOOLEAN NOT NULL,
    "transports" TEXT,
    PRIMARY KEY ("userId", "credentialID"),
    CONSTRAINT "Authenticator_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);


-- CreateIndex
CREATE UNIQUE INDEX "Authenticator_credentialID_key" ON "Authenticator"("credentialID");
```

### Update Auth.js Configuration

Add the `Passkeys` provider to your configuration. Also make sure you're using a compatible database adapter.

```ts filename="./auth.ts"
import Passkey from "next-auth/providers/passkey"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export default {
  adapter: PrismaAdapter(prisma),
  providers: [Passkey],
  experimental: { enableWebAuthn: true },
}
```

If you're using the built-in Auth.js pages, then you are good to go! Navigating to your `/signin` route should include a "Signin with Passkeys" button.

### Custom Pages

If you're using a custom signin page, you can leverage the `next-auth` `signIn` function to initiate WebAuthn registration and login flows with the following code.

<Callout>
  When using the WebAuthn `signIn` function, you'll also need the
  `@simplewebauth/browser` peer dependency installed.
</Callout>

```ts filename="app/login/page.tsx"
"use client"

import { useSession } from "next-auth/react"
import { signIn } from "next-auth/webauthn"

export default function Login() {
  const { data: session, update, status } = useSession()

  return (
    <div>
      {status === "authenticated" ? (
        <button onClick={() => signIn("passkey", { action: "register" })}>
          Register new Passkey
        </button>
      ) : status === "unauthenticated" ? (
        <button onClick={() => signIn("passkey")}>Sign in with Passkey</button>
      ) : null}
    </div>
  )
}
```

</Steps>

================
File: docs/pages/getting-started/providers/42-school.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/42-school.svg" height="64" width="64" />

# 42School Provider

## Resources

- [42School OAuth documentation](https://api.intra.42.fr/apidoc/guides/web_application_flow)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/42-school
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/42-school
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/42-school
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_42_SCHOOL_ID
AUTH_42_SCHOOL_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import 42School from "next-auth/providers/42-school"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [42School],
})
```

  </Code.Next>
  <Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import 42School from "@auth/qwik/providers/42-school"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [42School],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import 42School from "@auth/sveltekit/providers/42-school"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [42School],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import 42School from "@auth/express/providers/42-school"

app.use("/auth/*",
  ExpressAuth({ providers: [ 42School ] })
)
```

  </Code.Express>
</Code>

## Notes

- 42 returns a field on `Account` called `created_at` which is a number, this is different from the default schema's datatype for this field. Check out the [42 School docs](https://api.intra.42.fr/apidoc/guides/getting_started#make-basic-requests) for more info. Make sure to add or edit this field in your database schema in case if you are using an [database adapter](/getting-started/database).

================
File: docs/pages/getting-started/providers/apple.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/apple.svg" width="64" height="65" />

# Apple Provider

## Resources

- Sign in with Apple [Overview](https://developer.apple.com/sign-in-with-apple/get-started/)
- Sign in with Apple [REST API](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api)
- [How to retrieve](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple#3383773) the user's information from Apple ID servers

> **_NOTE:_** Apple currently does not support [RedirectProxyUrl](https://github.com/nextauthjs/next-auth/blob/3ec06842682a31e53fceabca701a362abda1e7dd/packages/core/src/lib/utils/providers.ts#L48) usage.

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/apple
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/apple
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/apple
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_APPLE_ID
AUTH_APPLE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Apple from "next-auth/providers/apple"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Apple],
})
```

  </Code.Next>
  <Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Apple from "@auth/qwik/providers/apple"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Apple],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Apple from "@auth/sveltekit/providers/apple"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Apple],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Apple from "@auth/express/providers/apple"

app.use("/auth/*", ExpressAuth({ providers: [Apple] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/asgardeo.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/asgardeo.svg" width="64" height="64" />

# Asgardeo Provider

## Resources

- [Asgardeo - Authentication Guide](https://wso2.com/asgardeo/docs/guides/authentication)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/asgardeo
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/asgardeo
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/asgardeo
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_ASGARDEO_ID
AUTH_ASGARDEO_SECRET
AUTH_ASGARDEO_ISSUER
```

### Configuration

Follow these steps:

1. Log into the [Asgardeo console](https://console.asgardeo.io)
2. Next, go to "Application" tab (more info [here](https://wso2.com/asgardeo/docs/guides/applications/register-oidc-web-app/))
3. Register a standard based, Open ID connect, application
4. Add the **callback URLs**: `http://localhost:3000/api/auth/callback/asgardeo` (development) and `https://{YOUR_DOMAIN}.com/api/auth/callback/asgardeo` (production)
5. After registering the application, go to "Protocol" tab.
6. Check `code` as the grant type.
7. Add "Authorized redirect URLs" & "Allowed origins fields"
8. Make Email, First Name, Photo URL user attributes mandatory from the console.

Then, add the ClientID, ClientSecret, and Issuer values to your environment variables.

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Asgardeo from "next-auth/providers/asgardeo"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Asgardeo],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Asgardeo from "@auth/qwik/providers/asgardeo"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Asgardeo],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Asgardeo from "@auth/sveltekit/providers/asgardeo"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Asgardeo],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Asgardeo from "@auth/express/providers/asgardeo"

app.use("/auth/*", ExpressAuth({ providers: [Asgardeo] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/auth0.mdx
================
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/auth0.svg" width="64" height="64" />

# Auth0 Provider

## Resources

- [Auth0 documentation](https://auth0.com/docs/authenticate)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/auth0
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/auth0
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/auth0
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_AUTH0_ID
AUTH_AUTH0_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Auth0 from "next-auth/providers/auth0"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Auth0],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Auth0 from "@auth/qwik/providers/auth0"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Auth0],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Auth0 from "@auth/sveltekit/providers/auth0"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Auth0],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Auth0 from "@auth/express/providers/auth0"

app.use("/auth/*", ExpressAuth({ providers: [Auth0] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/authentik.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/authentik.svg" height="64" width="64" />

# Authentik Provider

## Resources

- [Authentik OAuth documentation](https://goauthentik.io/docs/providers/oauth2)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/authentik
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/authentik
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/authentik
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_AUTHENTIK_ID
AUTH_AUTHENTIK_SECRET
AUTH_AUTHENTIK_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth";
import Authentik from "next-auth/providers/authentik";

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Authentik({
    clientId: AUTH_AUTHENTIK_CLIENT_ID
    clientSecret: AUTH_AUTHENTIK_CLIENT_SECRET
    issuer: AUTH_AUTHENTIK_ISSUER
  })]
});
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Authentik from "@auth/qwik/providers/authentik";

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Authentik({
        clientId: import.meta.env.AUTH_AUTHENTIK_CLIENT_ID
        clientSecret: import.meta.env.AUTH_AUTHENTIK_CLIENT_SECRET
        issuer: import.meta.env.AUTH_AUTHENTIK_ISSUER
      })
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";
import Authentik from "@auth/sveltekit/providers/authentik";

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Authentik({
    clientId: AUTH_AUTHENTIK_CLIENT_ID
    clientSecret: AUTH_AUTHENTIK_CLIENT_SECRET
    issuer: AUTH_AUTHENTIK_ISSUER
  })]
});
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express";
import Authentik from "@auth/express/providers/authentik";

app.use("/auth/*", ExpressAuth({
  providers: [Authentik({
    clientId: AUTH_AUTHENTIK_CLIENT_ID
    clientSecret: AUTH_AUTHENTIK_CLIENT_SECRET
    issuer: AUTH_AUTHENTIK_ISSUER
  })]
}));
```

  </Code.Express>
</Code>

<Callout>
  issuer should include the slug without a trailing slash – e.g.,
  https://my-authentik-domain.com/application/o/My_Slug
</Callout>

================
File: docs/pages/getting-started/providers/azure-ad-b2c.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/azure.svg" height="64" width="64" />

# Azure AD B2C Provider

## Resources

- [Azure Active Directory B2C documentation](https://learn.microsoft.com/en-us/azure/active-directory-b2c)
- [What is Azure AD B2C](https://learn.microsoft.com/en-us/azure/active-directory-b2c/overview)
- [Azure AD B2C Tenant](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-tenant)
- [App Registration](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-register-applications)
- [User Flow](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-user-flows)

## Setup

### Environment Variables

```
AUTH_AZURE_AD_B2C_ID
AUTH_AZURE_AD_B2C_SECRET
AUTH_AZURE_AD_B2C_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth";
import AzureADB2C from "next-auth/providers/azure-ad-b2c";

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [AzureADB2C({
    clientId: AUTH_AZURE_AD_B2C_CLIENT_ID
    clientSecret: AUTH_AZURE_AD_B2C_CLIENT_SECRET
    issuer: AUTH_AZURE_AD_B2C_ISSUER
  })]
});
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import AzureADB2C from "@auth/qwik/providers/azure-ad-b2c";

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      AzureADB2C({
        clientId: import.meta.env.AUTH_AZURE_AD_CLIENT_ID
        clientSecret: import.meta.env.AUTH_AZURE_AD_CLIENT_SECRET
        issuer: import.meta.env.AUTH_AZURE_AD_ISSUER
      })
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";
import AzureADB2C from "@auth/sveltekit/providers/azure-ad-b2c";

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [AzureADB2C({
    clientId: AUTH_AZURE_AD_CLIENT_ID
    clientSecret: AUTH_AZURE_AD_CLIENT_SECRET
    issuer: AUTH_AZURE_AD_ISSUER
  })]
});
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express";
import AzureADB2C from "@auth/express/providers/azure-ad-b2c";

app.use("/auth/*", ExpressAuth({
  providers: [AzureADB2C({
    clientId: AUTH_AZURE_AD_CLIENT_ID
    clientSecret: AUTH_AZURE_AD_CLIENT_SECRET
    issuer: AUTH_AZURE_AD_ISSUER
  })]
}));
```

  </Code.Express>
</Code>

### Tenant Setup

Basic configuration sets up Azure AD B2C to return an ID Token. This should be done as a prerequisite prior to running through the Advanced configuration. In the Tenant Setup, make sure to set the following during "User attributes and token claims".

- Collect attribute:
  - Email Address
  - Display Name
  - Given Name
  - Surname
- Return claim:
  - Email Addresses
  - Display Name
  - Given Name
  - Surname
  - Identity Provider
  - Identity Provider Access Token
  - User's Object ID

================
File: docs/pages/getting-started/providers/azure-ad.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/azure.svg" height="64" width="64" />

# Azure AD Provider

<Callout type="warning">
  Deprecated - Microsoft has rebranded this product [Microsoft Entra
  ID](/getting-started/providers/microsoft-entra-id) and all support work will
  be going into that IdP. We recommend you migrate to using that provider as
  well.
</Callout>

## Resources

- [AzureAD OAuth documentation](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow/)
- [AzureAD OAuth apps](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/azure-ad
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/azure-ad
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/azure-ad
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_AZURE_AD_ID
AUTH_AZURE_AD_SECRET
AUTH_AZURE_AD_TENANT_ID
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import AzureAd from "next-auth/providers/azure-ad"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [AzureAd],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import AzureAd from "@auth/qwik/providers/azure-ad"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [AzureAd],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import AzureAd from "@auth/sveltekit/providers/azure-ad"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [AzureAd],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import AzureAd from "@auth/express/providers/azure-ad"

app.use("/auth/*", ExpressAuth({ providers: [AzureAd] }))
```

  </Code.Express>
</Code>

#### To allow specific Active Directory users access:

- In https://portal.azure.com/ search for "Azure Active Directory", and select your organization.
- Next, go to "App Registration" in the left menu, and create a new one.
- Pay close attention to "Who can use this application or access this API?"
  - This allows you to scope access to specific types of user accounts
  - Only your tenant, all azure tenants, or all azure tenants and personal Microsoft accounts (Skype, Xbox, Outlook.com, etc.)
- When asked for a redirection URL, use `https://yourapplication.com/api/auth/callback/azure-ad` or for development `http://localhost:3000/api/auth/callback/azure-ad`.
- After your App Registration is created, under "Client Credential" create your Client secret.
- Click on "API Permissions" and click "Grant admin consent for..." to allow User.Read access to your tenant.
- Now copy your:
  - Application (client) ID
  - Directory (tenant) ID
  - Client secret (value)

In `.env.local` create the following entries:

```
AUTH_AZURE_AD_CLIENT_ID=<copy Application (client) ID here>
AUTH_AZURE_AD_CLIENT_SECRET=<copy generated client secret value here>
AUTH_AZURE_AD_TENANT_ID=<copy the tenant id here>
```

That will default the tenant to use the `common` authorization endpoint. [For more details see here](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols#endpoints).

If you want your application to receive authorization requests from not only the tenants but also all Microsoft users just add "common" in AUTH_AZURE_AD_TENANT_ID, this will "skip" tenants authorization.

```
AUTH_AZURE_AD_TENANT_ID=common
```

<Callout type="info">
  Azure AD returns the profile picture in an ArrayBuffer, instead of just a URL
  to the image, so our provider converts it to a base64 encoded image string and
  returns that instead. See:
  https://docs.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0#examples.
  The default image size is 48x48 to avoid [running out of
  space](https://next-auth.js.org/faq#:~:text=What%20are%20the%20disadvantages%20of%20JSON%20Web%20Tokens%3F)
  in case the session is saved as a JWT.
</Callout>

In `pages/api/auth/[...nextauth].js` find or add the `AzureAD` entries:

```js
import AzureADProvider from "next-auth/providers/azure-ad"

providers: [
  AzureADProvider({
    clientId: process.env.AZURE_AD_CLIENT_ID,
    clientSecret: process.env.AZURE_AD_CLIENT_SECRET,
    tenantId: process.env.AZURE_AD_TENANT_ID,
  }),
]
```

================
File: docs/pages/getting-started/providers/azure-devops.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/azure-devops.svg"
  height="64"
  width="64"
/>

# Azure DevOps Provider

<Callout type="warning">
  Deprecated - While still available, Microsoft is [no longer
  supporting](https://learn.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops#available-oauth-models)
  Azure DevOps OAuth and recommends using [Microsoft Entra
  ID](/getting-started/providers/microsoft-entra-id) instead.
</Callout>

## Resources

- [Azure DevOps Apps documentation](https://aex.dev.azure.com)
- [Microsoft documentation](https://docs.microsoft.com/en-us) · [Azure DevOps](https://docs.microsoft.com/en-us/azure/devops/) · [Authorize access to REST APIs with OAuth 2.0](https://docs.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops])

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/azure-devops
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/azure-devops
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/azure-devops
```

  </Code.Svelte>
</Code>

### Environment variables

In `.env.local` create the following entries:

```
AZURE_DEVOPS_APP_ID=<copy App ID value here>
AZURE_DEVOPS_CLIENT_SECRET=<copy generated client secret value here>
```

### Register application

[`https://app.vsaex.visualstudio.com/app/register`](https://app.vsaex.visualstudio.com/app/register)

Provide the required details:

1. Company name
2. Application name
3. Application website
4. Authorization callback URL
   - `https://example.com/api/auth/callback/azure-devops` for production
   - `https://localhost/api/auth/callback/azure-devops` for development
5. Authorized scopes
   - Required minimum is `User profile (read)`

Click ‘Create Application’

<Callout type="warning">
- You are required to use HTTPS even for the localhost

- You will have to delete and create a new application to change the scopes later

</Callout>

The following data is relevant for the next step:

- App ID
- Client Secret (after clicking the ‘Show’ button, ignore App Secret entry above it)
- Authorized Scopes

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import AzureDevOps from "next-auth/providers/azure-devops"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    AzureDevOps({
      clientId: AUTH_AZURE_DEVOPS_APP_ID,
      clientSecret: AUTH_AZURE_DEVOPS_CLIENT_SECRET,
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import AzureDevOps from "@auth/qwik/providers/azure-devops"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      AzureDevOps({
        clientId: import.meta.env.AUTH_AZURE_DEVOPS_APP_ID,
        clientSecret: import.meta.env.AUTH_AZURE_DEVOPS_CLIENT_SECRET,
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import AzureDevOps from "@auth/sveltekit/providers/azure-devops"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    AzureDevOps({
      clientId: AUTH_AZURE_DEVOPS_APP_ID,
      clientSecret: AUTH_AZURE_DEVOPS_CLIENT_SECRET,
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import AzureDevOps from "@auth/express/providers/azure-devops"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      AzureDevOps({
        clientId: AUTH_AZURE_DEVOPS_APP_ID,
        clientSecret: AUTH_AZURE_DEVOPS_CLIENT_SECRET,
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

### Refresh token rotation

Use the [main guide](/guides/refresh-token-rotation) as your starting point with the following considerations:

```ts filename="./auth.ts"
export const { signIn, signOut, auth } = NextAuth({
  callbacks: {
    async jwt({ token, user, account }) {
      // The token has an absolute expiration time
      const accessTokenExpires = account.expires_at * 1000
    },
  },
})

async function refreshAccessToken(token) {
  const response = await fetch(
    "https://app.vssps.visualstudio.com/oauth2/token",
    {
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      method: "POST",
      body: new URLSearchParams({
        client_assertion_type:
          "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        client_assertion: AZURE_DEVOPS_CLIENT_SECRET,
        grant_type: "refresh_token",
        assertion: token.refreshToken,
        redirect_uri:
          process.env.NEXTAUTH_URL + "/api/auth/callback/azure-devops",
      }),
    }
  )

  // The refreshed token comes with a relative expiration time
  const accessTokenExpires = Date.now() + newToken.expires_in * 1000
}
```

================
File: docs/pages/getting-started/providers/bankid-no.mdx
================
---
title: BankID Norge
---

import { Code } from "@/components/Code"

<img align="right" src="/img/providers/bankid-no.svg" width="64" height="64" />

# BankID Norway Provider

[BankID Norge](https://bankid.no) is a widespread login method in Norway, used by banks, government agencies, and other organizations. This provider allows users to sign in with BankID Norway.

## Resources

- [BankID Norway documentation](https://confluence.bankidnorge.no/confluence/pdoidcl)
- [BankID Testing](https://developer.bankid.no/bankid-with-biometrics/testing)
- [BankID Public Testing discovery endpoint](https://auth.current.bankid.no/auth/realms/current/.well-known/openid-configuration)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/bankid-no
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/bankid-no
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/bankid-no
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_BANKID_NO_ID
AUTH_BANKID_NO_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import BankIDNorway from "next-auth/providers/bankid-no"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [BankIDNorway],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import BankIDNorway from "@auth/qwik/providers/bankid-no"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [BankIDNorway],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import BankIDNorway from "@auth/sveltekit/providers/bankid-no"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [BankIDNorway],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import BankIDNorway from "@auth/express/providers/bankid-no"

app.use("/auth/*", ExpressAuth({ providers: [BankIDNorway] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/battlenet.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/battlenet.svg" height="64" width="64" />

# Battle.net Provider

## Resources

- [BattleNet OAuth documentation](https://develop.battle.net/documentation/guides/using-oauth)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/battlenet
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/battlenet
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/battlenet
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_BATTLENET_ID
AUTH_BATTLENET_SECRET
AUTH_BATTLENET_ISSUER
```

issuer must be one of these values, based on the available regions:

```
type BattleNetIssuer =
| "https://www.battlenet.com.cn/oauth"
| "https://us.battle.net/oauth"
| "https://eu.battle.net/oauth"
| "https://kr.battle.net/oauth"
| "https://tw.battle.net/oauth"
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth";
import BattleNet from "next-auth/providers/battlenet";

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [BattleNet({
    clientId: AUTH_BATTLENET_CLIENT_ID
    clientSecret: AUTH_BATTLENET_CLIENT_SECRET
    issuer: AUTH_BATTLENET_ISSUER
  })]
});
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import BattleNet from "@auth/qwik/providers/battlenet";

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [BattleNet({
      clientId: import.meta.env.AUTH_BATTLENET_CLIENT_ID
      clientSecret: import.meta.env.AUTH_BATTLENET_CLIENT_SECRET
      issuer: import.meta.env.AUTH_BATTLENET_ISSUER
    })]
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";
import BattleNet from "@auth/sveltekit/providers/battlenet";

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [BattleNet({
    clientId: AUTH_BATTLENET_CLIENT_ID
    clientSecret: AUTH_BATTLENET_CLIENT_SECRET
    issuer: AUTH_BATTLENET_ISSUER
  })]
});
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express";
import BattleNet from "@auth/express/providers/battlenet";

app.use("/auth/*", ExpressAuth({
  providers: [BattleNet({
    clientId: AUTH_BATTLENET_CLIENT_ID
    clientSecret: AUTH_BATTLENET_CLIENT_SECRET
    issuer: AUTH_BATTLENET_ISSUER
  })]
}));
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/beyondidentity.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/beyondidentity.svg"
  height="64"
  width="64"
/>

# Beyond Identity Provider

## Resources

- [Beyond Identity Developer documentation](https://developer.beyondidentity.com/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/beyondidentity
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/beyondidentity
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/beyondidentity
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_BEYOND_IDENTITY_ID
AUTH_BEYOND_IDENTITY_SECRET
AUTH_BEYOND_IDENTITY_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import BeyondIdentity from "next-auth/providers/beyondidentity"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [BeyondIdentity],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import BeyondIdentity from "@auth/qwik/providers/beyondidentity"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [BeyondIdentity],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import BeyondIdentity from "@auth/sveltekit/providers/beyondidentity"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [BeyondIdentity],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import BeyondIdentity from "@auth/express/providers/beyondidentity"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [BeyondIdentity],
  })
)
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/bitbucket.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/bitbucket.svg" height="64" width="64" />

# Bitbucket Provider

## Resources

- [Using OAuth on Bitbucket Cloud](https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/)
- [Bitbucket REST API Authentication](https://developer.atlassian.com/cloud/bitbucket/rest/intro/#authentication)
- [Bitbucket REST API Users](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-users/#api-group-users)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/bitbucket
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/bitbucket
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/bitbucket
```

  </Code.Svelte>
</Code>

### Environment Variables

<Code>
  <Code.Next>

```bash filename=".env.local"
AUTH_BITBUCKET_ID
AUTH_BITBUCKET_SECRET
```

  </Code.Next>
  <Code.Qwik>

```bash filename=".env"
AUTH_BITBUCKET_ID
AUTH_BITBUCKET_SECRET
```

  </Code.Qwik>
  <Code.Svelte>

```bash filename=".env"
AUTH_BITBUCKET_ID
AUTH_BITBUCKET_SECRET
```

  </Code.Svelte>

    <Code.Express>

```bash filename=".env"
AUTH_BITBUCKET_ID
AUTH_BITBUCKET_SECRET
```

  </Code.Express>
</Code>

### Configuration

<Code>
  <Code.Next>

```ts filename="@/auth.ts"
import NextAuth from "next-auth"
import Bitbucket from "next-auth/providers/bitbucket"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Bitbucket],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Bitbucket from "@auth/qwik/providers/bitbucket"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Bitbucket],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Bitbucket from "@auth/sveltekit/providers/bitbucket"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Bitbucket],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Bitbucket from "@auth/express/providers/bitbucket"

app.use("/auth/*", ExpressAuth({ providers: [Bitbucket] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/box.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/box.svg" height="64" width="64" />

# Box Provider

## Resources

- [Box developers documentation](https://developer.box.com/reference/)
- [Box OAuth documentation](https://developer.box.com/guides/sso-identities-and-app-users/connect-okta-to-app-users/configure-box/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/box
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/box
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/box
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_BOX_CLIENT_ID
AUTH_BOX_CLIENT_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Box from "next-auth/providers/box"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Box],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Box from "@auth/qwik/providers/box"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Box],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Box from "@auth/sveltekit/providers/box"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Box],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Box from "@auth/express/providers/box"

app.use("/auth/*", ExpressAuth({ providers: [Box] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/boxyhq-saml.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/boxyhq-saml.svg"
  height="64"
  width="64"
/>

# BoxyHQ SAML Provider

## Resources

- [BoxyHQ OAuth documentation](https://boxyhq.com/docs/jackson/overview)

## Setup

Add BoxyHQ SAML login to your page.

BoxyHQ SAML is an open source service that handles the SAML SSO login flow as an OAuth 2.0 flow, abstracting away all the complexities of the SAML protocol. Enable Enterprise single-sign-on in your app with ease.

You can deploy BoxyHQ SAML as a separate service or embed it into your app using our NPM library. [Check out the documentation for more details](https://boxyhq.com/docs/jackson/deploy)

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/boxyhq-saml
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/boxhq-saml
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/boxhq-saml
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_BOXYHQ_SAML_ID
AUTH_BOXYHQ_SAML_SECRET
AUTH_BOXYHQ_SAML_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import BoxyHQ from "next-auth/providers/boxyhq-saml"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    BoxyHQ({
      authorization: { params: { scope: "" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid
      clientId: AUTH_BOXYHQ_SAML_ID,
      clientSecret: AUTH_BOXYHQ_SAML_SECRET,
      issuer: AUTH_BOXYHQ_SAML_ISSUER,
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import BoxyHQ from "@auth/qwik/providers/boxyhq-saml"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      BoxyHQ({
        authorization: { params: { scope: "" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid
        clientId: import.meta.env.AUTH_BOXYHQ_SAML_ID,
        clientSecret: import.meta.env.AUTH_BOXYHQ_SAML_SECRET,
        issuer: import.meta.env.AUTH_BOXYHQ_SAML_ISSUER,
      }),  
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import BoxyHQ from "@auth/sveltekit/providers/boxyhq-saml"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    BoxyHQ({
      authorization: { params: { scope: "" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid
      clientId: AUTH_BOXYHQ_SAML_ID,
      clientSecret: AUTH_BOXYHQ_SAML_SECRET,
      issuer: AUTH_BOXYHQ_SAML_ISSUER,
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import BoxyHQ from "@auth/express/providers/boxyhq-saml"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      BoxyHQ({
        authorization: { params: { scope: "" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid
        clientId: AUTH_BOXYHQ_SAML_ID,
        clientSecret: AUTH_BOXYHQ_SAML_SECRET,
        issuer: AUTH_BOXYHQ_SAML_ISSUER,
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

### SAML

SAML login requires a configuration for every tenant of yours. One common method is to use the domain for an email address to figure out which tenant they belong to. You can also use a unique tenant ID (string) from your backend for this, typically some kind of account or organization ID.

Check out the [documentation](https://boxyhq.com/docs/jackson/saml-flow#2-saml-config-api) for more details.

On the client side you'll need to pass additional parameters `tenant` and `product` to the `signIn` function. This will allow BoxyHQL SAML to figure out the right SAML configuration and take your user to the right SAML Identity Provider to sign them in.

```ts
import { signIn } from "next-auth/react";

// Map your users's email to a tenant and product
const tenant = email.split("@")[1];
const product = 'my_awesome_product';

<Button
  onClick={async (event) => {
    event.preventDefault();

    signIn("boxyhq-saml", {}, { tenant, product });
  }}
>
```

================
File: docs/pages/getting-started/providers/bungie.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/bungie.svg" height="64" width="128" />

# Bungie Provider

## Resources

- [Bungie OAuth documentation](https://github.com/Bungie-net/api/wiki/OAuth-Documentation)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/bungie
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/bungie
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/bungie
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_BUNGIE_ID
AUTH_BUNGIE_SECRET
AUTH_BUNGIE_API_KEY
```

### Configuration

Navigate to https://www.bungie.net/en/Application and fill in the required details:

- Application name
- Application Status
- Website
- OAuth Client Type
  - Confidential
- Redirect URL
  - https://localhost:3000/api/auth/callback/bungie
- Scope
  - `Access items like your Bungie.net notifications, memberships, and recent Bungie.Net forum activity.`
- Origin Header

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth";
import Bungie from "next-auth/providers/boxyhq-saml";

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Bungie({
      clientId: AUTH_BUNGIE_ID
      clientSecret: AUTH_BUNGIE_SECRET
      headers: { "X-API-Key": AUTH_BUNGIE_API_KEY }
    }),
  ],
});
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Bungie from "@auth/qwik/providers/boxyhq-saml";

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Bungie({
        clientId: import.meta.env.AUTH_BUNGIE_ID
        clientSecret: import.meta.env.AUTH_BUNGIE_SECRET
        headers: { "X-API-Key": import.meta.env.AUTH_BUNGIE_API_KEY }
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";
import Bungie from "@auth/sveltekit/providers/boxyhq-saml";

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Bungie({
      clientId: AUTH_BUNGIE_ID
      clientSecret: AUTH_BUNGIE_SECRET
      headers: { "X-API-Key": AUTH_BUNGIE_API_KEY }
    }),
  ],
});
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express";
import Bungie from "@auth/express/providers/boxyhq-saml";

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      Bungie({
        clientId: AUTH_BUNGIE_ID
        clientSecret: AUTH_BUNGIE_SECRET
        headers: { "X-API-Key": AUTH_BUNGIE_API_KEY }
      }),
    ],
  })
);
```

  </Code.Express>
</Code>

### Notes

- Bungie requires all clients to be using **https**.
- Bungie does not allow the hostname `localhost`, so for local development, you must use `127.0.0.1` for example

================
File: docs/pages/getting-started/providers/click-up.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/clickup.svg" height="64" width="64" />

# Click-Up Provider

## Resources

- [ClickUp documentation: Authorizing OAuth Apps](https://clickup.com/api/developer-portal/authentication#oauth-flow)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/clickup
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/clickup
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/clickup
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_CLICKUP_ID
AUTH_CLICKUP_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import ClickUp from "next-auth/providers/click-up"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [ClickUp],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import ClickUp from "@auth/qwik/providers/click-up"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [ClickUp],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import ClickUp from "@auth/sveltekit/providers/click-up"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [ClickUp],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import ClickUp from "@auth/express/providers/click-up"

app.use("/auth/*", ExpressAuth({ providers: [ClickUp] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/cognito.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/cognito.svg" height="64" width="64" />

# Cognito Provider

## Resources

- [Cognito Portal](https://console.aws.amazon.com/cognito/v2/home)
- [Cognito OAuth documentation](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html)
- [Cognito Hosted Domain](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/cognito
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/cognito
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/cognito
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_COGNITO_ID
AUTH_COGNITO_SECRET
AUTH_COGNITO_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Cognito from "next-auth/providers/cognito"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Cognito],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Cognito from "@auth/qwik/providers/cognito"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Cognito],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Cognito from "@auth/sveltekit/providers/cognito"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Cognito],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Cognito from "@auth/express/providers/cognito"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [Cognito],
  })
)
```

  </Code.Express>
</Code>

### Notes

You need to select your AWS region to go the the Cognito dashboard.

<Callout type="info">
  The issuer is a URL, that looks like this: `https://cognito-idp.{region}
  .amazonaws.com/{PoolId}`, where `PoolId` is from General Settings in Cognito,
  not to be confused with the App Client ID.
</Callout>

<Callout type="info">
  Before you can set these settings, you must set up an Amazon Cognito hosted
  domain. The setting can be found in `App Client/Edit Hosted UI`.
</Callout>

<Callout type="warning">
  Make sure you select all the appropriate client settings or the OAuth flow
  will not work.
</Callout>

================
File: docs/pages/getting-started/providers/coinbase.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/coinbase.svg" height="64" width="128" />

# Coinbase Provider

## Resources

- [Coinbase OAuth documentation](https://developers.coinbase.com/api/v2)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/coinbase
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/coinbase
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/coinbase
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_COINBASE_ID
AUTH_COINBASE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Coinbase from "next-auth/providers/coinbase"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Coinbase],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Coinbase from "@auth/qwik/providers/coinbase"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Coinbase],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Coinbase from "@auth/sveltekit/providers/coinbase"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Coinbase],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Coinbase from "@auth/express/providers/coinbase"

app.use("/auth/*", ExpressAuth({ providers: [Coinbase] }))
```

  </Code.Express>
</Code>

### Notes

- This Provider template has a 2 hour access token to it. A refresh token is also returned.

================
File: docs/pages/getting-started/providers/credentials.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Credentials Provider

The Credentials provider allows you to handle signing in with arbitrary credentials, such as a username and password, domain, two factor authentication or hardware device (e.g. YubiKey U2F / FIDO).

It is intended to support use cases where you have an existing system you need to authenticate users against, and therefore users authenticated in this manner are not persisted in the database.

## Resources

- [Client-side Input Validation Example](/getting-started/authentication/credentials#verifying-data-with-zod)

## Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Credentials from "next-auth/providers/credentials"

export const { signIn, signOut, auth } = NextAuth({
  providers: [
    Credentials({
      credentials: {
        username: { label: "Username" },
        password: { label: "Password", type: "password" },
      },
      async authorize({ request }) {
        const response = await fetch(request)
        if (!response.ok) return null
        return (await response.json()) ?? null
      },
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Credentials from "@auth/qwik/providers/credentials"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Credentials({
        credentials: {
          username: { label: "Username" },
          password: { label: "Password", type: "password" },
        },
        async authorize({ request }) {
          const response = await fetch(request)
          if (!response.ok) return null
          return (await response.json()) ?? null
        },
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Credentials from "@auth/sveltekit/providers/credentials"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Credentials({
      credentials: {
        username: { label: "Username" },
        password: { label: "Password", type: "password" },
      },
      async authorize({ request }) {
        const response = await fetch(request)
        if (!response.ok) return null
        return (await response.json()) ?? null
      },
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express";
import Credentials from "@auth/express/providers/credentials";

app.use("/auth/*", ExpressAuth({
  providers: [
    Credentials({
      credentials: {
        username: { label: "Username" },
        password: { label: "Password", type: "password" },
      },
      async authorize({ request }) {
        const response = await fetch(request);
        if (!response.ok) return null;
        return (await response.json()) ?? null;
      },
    }),
  ],
});
```

  </Code.Express>
</Code>

### Custom Error Messages

You can throw a custom error in the `authorize` function to return a custom error message to the user.

```ts filename="@/auth.ts" /InvalidLoginError/
import NextAuth, { CredentialsSignin } from "next-auth"
import Credentials from "next-auth/providers/credentials"

class InvalidLoginError extends CredentialsSignin {
  code = "Invalid identifier or password"
}

export const { handlers, auth } = NextAuth({
  providers: [
    Credentials({
      credentials: {
        username: { label: "Username" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        throw new InvalidLoginError()
      },
    }),
  ],
})
```

You will then receive that custom error code in the query parameters of the signin page your user returns to after a failed login attempt, for example `https://app.company.com/auth/signin?error=CredentialsSignin&code=Invalid+identifier+or+password`.

<Callout type="warning">
OAuth providers spend significant amounts of money, time, and engineering effort to build:

- abuse detection (bot-protection, rate-limiting)
- password management (password reset, credential stuffing, rotation)
- data security (encryption/salting, strength validation)

and much more for authentication solutions. It is likely that your application would benefit from leveraging these battle-tested solutions rather than try to rebuild them from scratch.

If you'd still like to build password-based authentication for your application despite these risks, Auth.js gives you full control to do so.

</Callout>

================
File: docs/pages/getting-started/providers/descope.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/descope.svg" width="64" height="64" />

# Descope Provider

## Resources

- [Descope OIDC](https://docs.descope.com/manage/idpapplications/oidc/)
- [Descope Flows](https://docs.descope.com/customize/flows)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/descope
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/descope
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/descope
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_DESCOPE_ID
AUTH_DESCOPE_SECRET
AUTH_DESCOPE_ISSUER
```

### Configuration

Follow these steps:

1. Log into the [Descope console](https://app.descope.com)
2. Follow the [OIDC instructions](https://docs.descope.com/manage/idpapplications/oidc/)

Add the required environment variables from above to your `.env.local` file.

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Descope from "next-auth/providers/descope"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Descope],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Descope from "@auth/qwik/providers/descope"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Descope],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Descope from "@auth/sveltekit/providers/descope"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Descope],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Descope from "@auth/express/providers/descope"

app.use("/auth/*", ExpressAuth({ providers: [Descope] }))
```

  </Code.Express>
</Code>

### Using Descope Widgets

If you wish to use Descope [Widgets](https://docs.descope.com/widgets) with NextAuth.js, you will have to wrap your NextAuth.js components with our Next.js SDK and `<AuthProvider>`.

For more information on this, please look at our documentation [here](https://docs.descope.com/getting-started/nextauth/app-router#nextauth-and-widgets).

================
File: docs/pages/getting-started/providers/discord.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/discord.svg" height="64" width="64" />

# Discord Provider

## Resources

- [Discord OAuth documentation](https://discord.com/developers/docs/topics/oauth2)
- [Discord OAuth apps](https://discord.com/developers/applications)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/discord
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/discord
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/discord
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_DISCORD_ID
AUTH_DISCORD_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Discord from "next-auth/providers/discord"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Discord],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Discord from "@auth/qwik/providers/discord"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Discord],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Discord from "@auth/sveltekit/providers/discord"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Discord],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Discord from "@auth/express/providers/discord"

app.use("/auth/*", ExpressAuth({ providers: [Discord] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/dribbble.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/dribbble.svg" height="64" width="64" />

# Dribbble Provider

## Resources

- [Dribbble API](https://developer.dribbble.com)
- [Dribbble OAuth](https://developer.dribbble.com/v2/oauth/)
- [Dribbble Applications](https://dribbble.com/account/applications/new)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/dribbble
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/dribbble
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/dribbble
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_DRIBBBLE_ID
AUTH_DRIBBBLE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Dribbble from "next-auth/providers/dribbble"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Dribbble],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Dribbble from "@auth/qwik/providers/dribbble"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Dribbble],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Dribbble from "@auth/sveltekit/providers/dribbble"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Dribbble],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Dribbble from "@auth/express/providers/dribbble"

app.use("/auth/*", ExpressAuth({ providers: [Dribbble] }))
```

  </Code.Express>
</Code>

### Notes

- You can optionally set the scope to `public upload` for more advanced scenarios. If omitted, the default `public` scope will be used for authentication purposes.

================
File: docs/pages/getting-started/providers/dropbox.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/dropbox.svg" height="64" width="64" />

# Dropbox Provider

## Resources

- [Dropbox OAuth documentation](https://developers.dropbox.com/oauth-guide)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/dropbox
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/dropbox
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/dropbox
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_DROPBOX_ID
AUTH_DROPBOX_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Dropbox from "next-auth/providers/dropbox"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Dropbox],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Dropbox from "@auth/qwik/providers/dropbox"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Dropbox],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Dropbox from "@auth/sveltekit/providers/dropbox"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Dropbox],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Dropbox from "@auth/express/providers/dropbox"

app.use("/auth/*", ExpressAuth({ providers: [Dropbox] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/duende-identity-server6.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/duende-identityserver6.svg"
  height="64"
  width="64"
/>

# Duende Identity Server Provider

## Resources

- [DuendeIdentityServer6 documentation](https://docs.duendesoftware.com/identityserver/v6)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/duende-identity-service
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/duende-identity-service
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/duende-identity-service
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_DUENDE_IDENTITY_SERVER6_ID
AUTH_DUENDE_IDENTITY_SERVER6_SECRET
AUTH_DUENDE_IDENTITY_SERVER6_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import DuendeIdentityServer6 from "next-auth/providers/duende-identity-server6"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [DuendeIdentityServer6],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import DuendeIdentityServer6 from "@auth/qwik/providers/duende-identity-server6"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [DuendeIdentityServer6],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import DuendeIdentityServer6 from "@auth/sveltekit/providers/duende-identity-server6"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [DuendeIdentityServer6],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import DuendeIdentityServer6 from "@auth/express/providers/duende-identity-server6"

app.use("/auth/*", ExpressAuth({ providers: [DuendeIdentityServer6] }))
```

  </Code.Express>
</Code>

### Demo IdentityServer

The configuration below is for the demo server at https://demo.duendesoftware.com/

If you want to try it out, you can copy and paste the configuration below.

You can sign in to the demo service with either `bob`/`bob` or `alice`/`alice`.

```js filename=pages/api/auth/[...nextauth].js
import DuendeIDS6Provider from "next-auth/providers/duende-identity-server6"
providers: [
  DuendeIDS6Provider({
    clientId: "interactive.confidential",
    clientSecret: "secret",
    issuer: "https://demo.duendesoftware.com",
  }),
]
```

================
File: docs/pages/getting-started/providers/eveonline.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/eveonline.svg" height="64" width="128" />

# EVEOnline Provider

## Resources

- [EveOnline OAuth documentation](https://developers.eveonline.com/blog/article/sso-to-authenticated-calls)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/eveonline
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/eveonline
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/eveonline
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_EVEONLINE_ID
AUTH_EVEONLINE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import EveOnline from "next-auth/providers/eve-online"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [EveOnline],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import EveOnline from "@auth/qwik/providers/eve-online"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [EveOnline],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import EveOnline from "@auth/sveltekit/providers/eve-online"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [EveOnline],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import EveOnline from "@auth/express/providers/eve-online"

app.use("/auth/*", ExpressAuth({ providers: [EveOnline] }))
```

  </Code.Express>
</Code>

### Notes

- When creating your application, make sure to select `Authentication & API Access` as the connection type. Also ensure that the `publicData` scope is selected.

- If using JWT for the session, you can add the `CharacterID` to the JWT and session. For example:

```ts
const AuthConfig = {
  callbacks: {
    jwt({ token, profile }) {
      if (profile) {
        token.characterId = profile.CharacterID
      }
      return token
    },
    session({ session, token }) {
      session.user.characterId = token.characterId
      return session
    },
  },
}
```

================
File: docs/pages/getting-started/providers/facebook.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/facebook.svg" height="64" width="64" />

# Facebook Provider

## Resources

- [Facebook OAuth documentation](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/)
- [Facebook Developer Apps](https://developers.facebook.com/apps/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/facebook
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/facebook
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/facebook
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_FACEBOOK_ID
AUTH_FACEBOOK_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Facebook from "next-auth/providers/facebook"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Facebook],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Facebook from "@auth/qwik/providers/facebook"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Facebook],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Facebook from "@auth/sveltekit/providers/facebook"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Facebook],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Facebook from "@auth/express/providers/facebook"

app.use("/auth/*", ExpressAuth({ providers: [Facebook] }))
```

  </Code.Express>
</Code>

### Notes

- Production applications cannot use localhost URLs to sign in with Facebook. You need to use a dedicated development application in Facebook to use localhost callback URLs.
- Email address may not be returned for accounts created on mobile.
- `clientId` is your Facebook App ID, `clientSecret` is your Facebook App Secret.

================
File: docs/pages/getting-started/providers/faceit.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/faceit.svg" height="64" width="64" />

# Faceit Provider

## Resources

- [FACEIT OAuth documentation](https://cdn.faceit.com/third_party/docs/FACEIT_Connect_3.0.pdf)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/faceit
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/faceit
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/faceit
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_FACEIT_ID
AUTH_FACEIT_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import FaceIt from "next-auth/providers/faceit"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [FaceIt],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import FaceIt from "@auth/qwik/providers/faceit"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [FaceIt],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import FaceIt from "@auth/sveltekit/providers/faceit"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [FaceIt],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import FaceIt from "@auth/express/providers/faceit"

app.use("/auth/*", ExpressAuth({ providers: [FaceIt] }))
```

  </Code.Express>
</Code>

### Notes

- Grant type: `Authorization Code`
- Scopes required to get basic infos like email, nickname, guid and avatar: `openid, email, profile`

================
File: docs/pages/getting-started/providers/figma.mdx
================
import { Code } from "@/components/Code"
import { Callout } from "nextra/components"

<img align="right" src="/img/providers/figma.svg" height="64" width="64" />

# Figma Provider

## Resources

- [Using OAuth 2 on Figma](https://www.figma.com/developers/api#oauth2)
- [User Type](https://www.figma.com/developers/api#users-types)
- [Scopes](https://www.figma.com/developers/api#authentication-scopes)
- [Migrate](https://www.figma.com/developers/api#oauth_migration_guide)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/figma
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/figma
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/figma
```

  </Code.Svelte>
</Code>

### Environment Variables

<Code>
  <Code.Next>

```bash filename=".env.local"
AUTH_FIGMA_ID
AUTH_FIGMA_SECRET
```

  </Code.Next>
  <Code.Qwik>

```bash filename=".env"
AUTH_FIGMA_ID
AUTH_FIGMA_SECRET
```

  </Code.Qwik>
  <Code.Svelte>

```bash filename=".env"
AUTH_FIGMA_ID
AUTH_FIGMA_SECRET
```

  </Code.Svelte>
  <Code.Express>

```bash filename=".env"
AUTH_FIGMA_ID
AUTH_FIGMA_SECRET
```

  </Code.Express>
</Code>

### Configuration

<Code>
  <Code.Next>

```ts filename="@/auth.ts"
import NextAuth from "next-auth"
import Figma from "next-auth/providers/figma"
export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Figma],
})
```

  </Code.Next>
  <Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Figma from "@auth/qwik/providers/figma"
export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Figma],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Figma from "@auth/sveltekit/providers/figma"
export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Figma],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Figma from "@auth/express/providers/figma"
app.use("/auth/*", ExpressAuth({ providers: [Figma] }))
```

  </Code.Express>
</Code>

<Callout type="warning">
  The URL must be accessed via the user's browser and not an embedded webview
  inside your application. Webview access to the Figma OAuth flow is not
  supported and may stop working for some or all users without an API version
  update.
</Callout>

================
File: docs/pages/getting-started/providers/forwardemail.mdx
================
import { Callout, Tabs } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/forwardemail.svg"
  className="dark:bg-[currentColor]"
  height="64"
  width="96"
/>

# Forward Email Provider

## Overview

The Forward Email provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Forward Email provider can be used in conjunction with (or instead of) one or more OAuth providers.

### How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Forward Email provider can be used with both BasicAuth and database
  managed sessions, however **you must configure a database** to use it. It is
  not possible to enable email sign in without using a database.
</Callout>

## Configuration

1. First, you'll need to [add your domain](https://forwardemail.net/my-account/domains) to your Forward Email account. This is required by Forward Email and this domain of the address you use in the `from` provider option.

2. Next, you will have to generate an API key in the [My Account &rarr; Security](https://forwardemail.net/my-account/security). You can save this API key as the `AUTH_FORWARDEMAIL_KEY` environment variable.

```sh
AUTH_FORWARDEMAIL_KEY=abc
```

If you name your environment variable `AUTH_FORWARDEMAIL_KEY`, the provider will pick it up automatically and your Auth.js configuration object can be simpler. If you'd like to rename it to something else, however, you'll have to manually pass it into the provider in your Auth.js configuration.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import ForwardEmail from "next-auth/providers/forwardemail"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    ForwardEmail({
      // If your environment variable is named differently than default
      apiKey: AUTH_FORWARDEMAIL_KEY,
      from: "no-reply@company.com"
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import ForwardEmail from "@auth/qwik/providers/forwardemail"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      ForwardEmail({
        // If your environment variable is named differently than default
        apiKey: import.meta.env.AUTH_FORWARDEMAIL_KEY,
        from: "no-reply@company.com",
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import ForwardEmail from "@auth/sveltekit/providers/forwardemail"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    ForwardEmail({
      // If your environment variable is named differently than default
      apiKey: env.AUTH_FORWARDEMAIL_KEY,
      from: "no-reply@company.com",
    }),
  ],
})
```

</Code.Svelte>
</Code>

4. Do not forget to setup one of the [database adapters](https://authjs.dev/getting-started/database) for storing the Email verification token.

5. You can now start the sign-in process with an email address at `/api/auth/signin`.

A user account (i.e. an entry in the `Users` table) will not be created for the user until the first time they verify their email address. If an email address is already associated with an account, the user will be signed in to that account when they click the link in magic link email and use up the verification token.

## Customization

### Email Body

You can fully customize the sign in email that is sent by passing a custom function as the `sendVerificationRequest` option to `ForwardEmail()`.

```js {7} filename="./auth.ts"
import NextAuth from "next-auth"
import ForwardEmail from "next-auth/providers/forwardemail"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    ForwardEmail({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
      sendVerificationRequest({
        identifier: email,
        url,
        provider: { server, from },
      }) {
        // your function
      },
    }),
  ],
})
```

As an example, the following shows the source for our built-in `sendVerificationRequest()` method. Notice that we're rendering the HTML (`html()`) and making the network call (`fetch()`) to Forward Email to actually do the sending here in this method.

```ts filename="./lib/authSendRequest.ts" {4, 14}
export async function sendVerificationRequest(params) {
  const { identifier: to, provider, url, theme } = params
  const { host } = new URL(url)
  const res = await fetch("https://api.forwardemail.net/v1/emails", {
    method: "POST",
    headers: {
      Authorization: `Basic ${btoa(provider.apiKey + ":")}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      from: provider.from,
      to,
      subject: `Sign in to ${host}`,
      html: html({ url, host, theme }),
      text: text({ url, host }),
    }),
  })

  if (!res.ok)
    throw new Error("Forward Email error: " + JSON.stringify(await res.json()))
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: { url: string; host: string }) {
  return `Sign in to ${host}\n${url}\n\n`
}
```

<Callout type="info">
  If you want to generate great looking emails with React that are compatible
  with many email clients, check out [mjml](https://mjml.io) or
  [react-email](https://react.email)
</Callout>

### Verification Tokens

By default, we are generating a random verification token. You can define a `generateVerificationToken` method in your provider options if you want to override it:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import ForwardEmail from "next-auth/providers/forwardemail"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    ForwardEmail({
      async generateVerificationToken() {
        return crypto.randomUUID()
      },
    }),
  ],
})
```

### Normalizing Email Addresses

By default, Auth.js will normalize the email address. It treats the address as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, i.e. when looking up users by e-mail from databases.) and also removes any secondary email address that may have been passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `ForwardEmail` provider. The following example shows the default behavior:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import ForwardEmail from "next-auth/providers/forwardemail"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    ForwardEmail({
      normalizeIdentifier(identifier: string): string {
        // Get the first two elements only,
        // separated by `@` from user input.
        let [local, domain] = identifier.toLowerCase().trim().split("@")
        // The part before "@" can contain a ","
        // but we remove it on the domain part
        domain = domain.split(",")[0]
        return `${local}@${domain}`

        // You can also throw an error, which will redirect the user
        // to the sign-in page with error=EmailSignin in the URL
        // if (identifier.split("@").length > 2) {
        //   throw new Error("Only one email allowed")
        // }
      },
    }),
  ],
})
```

<Callout type="warning">
  Always make sure this returns a single e-mail address, even if multiple ones
  were passed in.
</Callout>

================
File: docs/pages/getting-started/providers/foursquare.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/foursquare.svg" height="64" width="64" />

# Foursquare Provider

## Resources

- [Foursquare OAuth documentation](https://docs.foursquare.com/developer/reference/personalization-apis-authentication#web-app-authentication)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/foursquare
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/foursquare
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/foursquare
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_FOURSQUARE__ID
AUTH_FOURSQUARE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import FourSquare from "next-auth/providers/foursquare"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [FourSquare],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import FourSquare from "@auth/qwik/providers/foursquare"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [FourSquare],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import FourSquare from "@auth/sveltekit/providers/foursquare"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [FourSquare],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import FourSquare from "@auth/express/providers/foursquare"

app.use("/auth/*", ExpressAuth({ providers: [FourSquare] }))
```

  </Code.Express>
</Code>

### Notes

- Foursquare requires an additional apiVersion parameter in YYYYMMDD format, which essentially states "I'm prepared for API changes up to this date".

================
File: docs/pages/getting-started/providers/freshbooks.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/freshbooks.svg" height="64" width="64" />

# Freshbooks Provider

## Resources

- [FreshBooks OAuth documentation](https://developer.freshbooks.com/docs/places-api/authentication/#web-applications)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/freshbooks
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/freshbooks
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/freshbooks
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_FRESHBOOKS_ID
AUTH_FRESHBOOKS_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import FreshBooks from "next-auth/providers/freshbooks"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [FreshBooks],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import FreshBooks from "@auth/qwik/providers/freshbooks"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [FreshBooks],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import FreshBooks from "@auth/sveltekit/providers/freshbooks"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [FreshBooks],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import FreshBooks from "@auth/express/providers/freshbooks"

app.use("/auth/*", ExpressAuth({ providers: [FreshBooks] }))
```

  </Code.Express>
</Code>

### Notes

- Freshbooks requires an additional apiVersion parameter in YYYYMMDD format, which essentially states "I'm prepared for API changes up to this date".

================
File: docs/pages/getting-started/providers/frontegg.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/frontegg.svg" width="64" height="64" />

# Frontegg Provider

## Resources

- [Frontegg documentation](https://docs.frontegg.com/docs/how-to-use-our-docs)

## Setup

### Callback URL

<Code>
  <Code.Next>

    ```bash
    https://example.com/api/auth/callback/frontegg
    ```

  </Code.Next>
  <Code.Svelte>

    ```bash
    https://example.com/auth/callback/frontegg
    ```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_FRONTEGG_ID
AUTH_FRONTEGG_SECRET
AUTH_FRONTEGG_ISSUER
```

### Configuration

Follow these steps:

Log into the [Frontegg portal](https://portal.frontegg.com)

Add the required environment variables to your `.env.local` file.

```
# Environments > Your environment > Env settings
AUTH_FRONTEGG_ID="<Client ID>"
# Environments > Your environment > Env settings
AUTH_FRONTEGG_SECRET="<API KEY>"
# Environments > Your environment > Env settings > Domains > Domain name
AUTH_FRONTEGG_ISSUER="<https://[YOUR_SUBDOMAIN].frontegg.com>"
```

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Frontegg from "next-auth/providers/frontegg"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Frontegg],
})
```

  </Code.Next>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Frontegg from "@auth/sveltekit/providers/frontegg"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Frontegg],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Frontegg from "@auth/express/providers/frontegg"

app.use("/auth/*", ExpressAuth({ providers: [Frontegg] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/fusionauth.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/fusionauth.svg" height="64" width="64" />

# Fusion Auth

## Resources

- [FusionAuth OAuth documentation](https://fusionauth.io/docs/v1/tech/oauth/)
- [FusionAuth 5-minute setup guide](https://fusionauth.io/docs/v1/tech/5-minute-setup-guide).

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/fusionauth
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/fusionauth
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/fusionauth
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_FUSIONAUTH_ID
AUTH_FUSIONAUTH_SECRET
AUTH_FUSIONAUTH_TENANT_ID
AUTH_FUSIONAUTH_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import FusionAuth from "next-auth/providers/fusionauth"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    FusionAuth({
      clientId: process.env.AUTH_FUSIONAUTH_ID,
      clientSecret: process.env.AUTH_FUSIONAUTH_SECRET,
      tenantId: process.env.AUTH_FUSIONAUTH_TENANT_ID,
      issuer: process.env.AUTH_FUSIONAUTH_ISSUER,
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import FusionAuth from "@auth/qwik/providers/fusionauth"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      FusionAuth({
        clientId: import.meta.env.AUTH_FUSIONAUTH_ID,
        clientSecret: import.meta.env.AUTH_FUSIONAUTH_SECRET,
        tenantId: import.meta.env.AUTH_FUSIONAUTH_TENANT_ID,
        issuer: import.meta.env.AUTH_FUSIONAUTH_ISSUER,
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import FusionAuth from "@auth/sveltekit/providers/fusionauth"
import {
  AUTH_FUSIONAUTH_ID,
  AUTH_FUSIONAUTH_SECRET,
  AUTH_FUSIONAUTH_TENANT_ID,
  AUTH_FUSIONAUTH_ISSUER,
} from "$env/static/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    FusionAuth({
      clientId: AUTH_FUSIONAUTH_ID,
      clientSecret: AUTH_FUSIONAUTH_SECRET,
      tenantId: AUTH_FUSIONAUTH_TENANT_ID,
      issuer: AUTH_FUSIONAUTH_ISSUER,
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import FusionAuth from "@auth/express/providers/fusionauth"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      FusionAuth({
        clientId: process.env.AUTH_FUSIONAUTH_ID,
        clientSecret: process.env.AUTH_FUSIONAUTH_SECRET,
        tenantId: process.env.AUTH_FUSIONAUTH_TENANT_ID,
        issuer: process.env.AUTH_FUSIONAUTH_ISSUER,
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

<Callout type="warning">
  If you're using multi-tenancy, you need to pass in the tenantId option to
  apply the proper theme.
</Callout>

### Notes

- An application can be created at `https://your-fusionauth-server-url/admin/application`

In the OAuth settings for your application, configure the following.

- Redirect URL
  - https://localhost:3000/api/auth/callback/fusionauth
- Enabled grants
  - Make sure _Authorization Code_ is enabled.

If using JSON Web Tokens, you need to make sure the signing algorithm is RS256, you can create an RS256 key pair by going to Settings, Key Master, generate RSA and choosing SHA-256 as algorithm. After that, go to the JWT settings of your application and select this key as Access Token signing key and Id Token signing key.

================
File: docs/pages/getting-started/providers/github.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/github.svg" height="64" width="64" />

# GitHub Provider

## Resources

- [GitHub - Creating an OAuth App](https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app)
- [GitHub - Authorizing OAuth Apps](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps)
- [GitHub - Configure your GitHub OAuth Apps](https://github.com/settings/developers)
- [Learn more about OAuth](https://authjs.dev/concepts/oauth)
- [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/github.ts)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/github
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/github
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/github
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_GITHUB_ID
AUTH_GITHUB_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [GitHub],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import GitHub from "@auth/qwik/providers/github"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [GitHub],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import GitHub from "@auth/sveltekit/providers/github"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [GitHub],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import GitHub from "@auth/express/providers/github"

app.use("/auth/*", ExpressAuth({ providers: [GitHub] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/gitlab.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/gitlab.svg" height="64" width="64" />

# GitLab Provider

## Resources

- [GitLab OAuth documentation](https://docs.gitlab.com/ee/api/oauth2.html)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/gitlab
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/gitlab
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/gitlab
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_GITLAB_ID
AUTH_GITLAB_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import GitLab from "next-auth/providers/gitlab"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [GitLab],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import GitLab from "@auth/qwik/providers/gitlab"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [GitLab],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import GitLab from "@auth/sveltekit/providers/gitlab"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [GitLab],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import GitLab from "@auth/express/providers/gitlab"

app.use("/auth/*", ExpressAuth({ providers: [GitLab] }))
```

  </Code.Express>
</Code>

### Notes

- Enable the `read_user` option in scope if you want to save the users email address on sign up.

================
File: docs/pages/getting-started/providers/google.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/google.svg" height="64" width="64" />

# Google Provider

## Resources

- [Google OAuth documentation](https://developers.google.com/identity/protocols/oauth2)
- [Google OAuth Configuration](https://console.developers.google.com/apis/credentials)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/google
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/google
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/google
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_GOOGLE_ID
AUTH_GOOGLE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="@/auth.ts"
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Google],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Google from "@auth/qwik/providers/google"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Google],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Google from "@auth/sveltekit/providers/google"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Google],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Google from "@auth/express/providers/google"

app.use("/auth/*", ExpressAuth({ providers: [Google] }))
```

  </Code.Express>
</Code>

## Notes

### Refresh Token

Google only provides Refresh Token to an application the first time a user signs in.

To force Google to re-issue a Refresh Token, the user needs to remove the application from their account and sign in again:
https://myaccount.google.com/permissions

Alternatively, you can also pass options in the `params` object of `authorization` which will force the Refresh Token to always be provided on sign in, however this will ask all users to confirm if they wish to grant your application access every time they sign in.

If you need access to the RefreshToken or AccessToken for a Google account and you are not using a database to persist user accounts, this may be something you need to do.

```ts filename="./auth.ts"
import Google from "next-auth/providers/google"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Google({
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code",
        },
      },
    }),
  ],
})
```

For more information on exchanging a code for an access token and refresh token see the [Google OAuth documentation](https://developers.google.com/identity/openid-connect/openid-connect#exchangecode).

### Email Verified

Google also returns a `email_verified` boolean property in the OAuth profile.

You can use this property to restrict access to people with verified accounts at a particular domain.

```ts filename="@/auth.ts"
export const { handlers, auth, signIn, signOut } = NextAuth({
  callbacks: {
    async signIn({ account, profile }) {
      if (account.provider === "google") {
        return profile.email_verified && profile.email.endsWith("@example.com")
      }
      return true // Do different verification for other providers that don't have `email_verified`
    },
  },
})
```

================
File: docs/pages/getting-started/providers/hubspot.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/hubspot.svg" height="64" width="64" />

# Hubspot Provider

## Resources

- [HubSpot OAuth documentation](https://developers.hubspot.com/docs/api/oauth-quickstart-guide)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/hubspot
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/hubspot
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/hubspot
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_HUBSPOT_ID
AUTH_HUBSPOT_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Hubspot from "next-auth/providers/hubspot"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Hubspot],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Hubspot from "@auth/qwik/providers/hubspot"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Hubspot],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Hubspot from "@auth/sveltekit/providers/hubspot"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Hubspot],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Hubspot from "@auth/express/providers/hubspot"

app.use("/auth/*", ExpressAuth({ providers: [Hubspot] }))
```

  </Code.Express>
</Code>

### Notes

- HubSpot returns a limited amount of information on the token holder (see [docs](https://legacydocs.hubspot.com/docs/methods/oauth2/get-access-token-information)).
- One other issue is that the name and profile photo cannot be fetched through API as discussed [here](https://community.hubspot.com/t5/APIs-Integrations/Profile-photo-is-not-retrieved-with-User-API/m-p/325521).

================
File: docs/pages/getting-started/providers/identity-server4.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/identity-server4.svg"
  height="64"
  width="64"
/>

# Identity Server Provider

<Callout>
  This provider has been deprecated and is superceded by [Duende
  IdentityServer6](/getting-started/providers/duende-identity-server6).
</Callout>

## Resources

- [IdentityServer4 OAuth documentation](https://identityserver4.readthedocs.io/en/latest/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/identity-server4
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/identity-server4
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/identity-server4
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_IDENTITY_SERVER4_ID
AUTH_IDENTITY_SERVER4_SECRET
AUTH_IDENTITY_SERVER4_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import IdentityServer4 from "next-auth/providers/identity-server4"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [IdentityServer4],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import IdentityServer4 from "@auth/qwik/providers/identity-server4"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [IdentityServer4],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import IdentityServer4 from "@auth/sveltekit/providers/identity-server4"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [IdentityServer4],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import IdentityServer4 from "@auth/express/providers/identity-server4"

app.use("/auth/*", ExpressAuth({ providers: [IdentityServer4] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/instagram.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/instagram.svg" height="64" width="64" />

# Instagram Provider

## Resources

- [Instagram OAuth documentation](https://developers.facebook.com/docs/instagram-basic-display-api/getting-started)
- [Instagram OAuth apps](https://developers.facebook.com/apps/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/instagram
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/instagram
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/instagram
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_INSTAGRAM_ID
AUTH_INSTAGRAM_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Instagram from "next-auth/providers/instagram"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Instagram],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Instagram from "@auth/qwik/providers/instagram"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Instagram],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Instagram from "@auth/sveltekit/providers/instagram"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Instagram],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Instagram from "@auth/express/providers/instagram"

app.use("/auth/*", ExpressAuth({ providers: [Instagram] }))
```

  </Code.Express>
</Code>

### Notes

- Email address is not returned by the Instagram API.
- Instagram requires a callback URL to be configured in your Facebook app and Facebook requires you to use **https** even for localhost. In order to do that, you either need to [add an SSL to your localhost](https://www.freecodecamp.org/news/how-to-get-https-working-on-your-local-development-environment-in-5-minutes-7af615770eec/) or use a proxy such as [ngrok](https://ngrok.com/docs).

================
File: docs/pages/getting-started/providers/kakao.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/kakao.svg" height="64" width="64" />

# Kakao Provider

## Resources

- [Kakao OAuth documentation](https://developers.kakao.com/product/kakaoLogin)
- [Kakao OAuth configuration](https://developers.kakao.com/docs/latest/en/kakaologin/common)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/kakao
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/kakao
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/kakao
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_KAKAO_ID
AUTH_KAKAO_SECRET
```

### Configuration

Create a provider and a Kakao application at https://developers.kakao.com/console/app. In the settings of the app under Kakao Login, activate web app, change consent items and configure callback URL.

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Kakao from "next-auth/providers/kakao"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Kakao],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Kakao from "@auth/qwik/providers/kakao"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Kakao],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Kakao from "@auth/sveltekit/providers/kakao"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Kakao],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Kakao from "@auth/express/providers/kakao"

app.use("/auth/*", ExpressAuth({ providers: [Kakao] }))
```

  </Code.Express>
</Code>

### Notes

- The "Authorized redirect URIs" used when creating the credentials must include your full domain and end in the callback path as shown above.

![스크린샷 2023-11-28 오후 9 27 41](https://github.com/nextauthjs/next-auth/assets/66895208/7d4c2df6-45a6-4937-bb10-4b47c987bff4)

- For production: `https://{YOUR_DOMAIN}/api/auth/callback/kakao`
- For development: `http://localhost:3000/api/auth/callback/kakao`

- Kakao's client key is in **Summary(It is written as 요약정보 in Korean.) tab's App Keys Field** (My Application > App Settings > Summary)

![스크린샷 2023-11-28 오후 9 47 17](https://github.com/nextauthjs/next-auth/assets/66895208/a87e5705-26b9-4f83-99d7-6df097a3632c)

- Kakao's clientSecret key is in **Security(It is written as 보안 in Korean.) tab's App Keys Field** (My Application > Product Settings > Kakao Login > Security)

![스크린샷 2023-11-28 오후 9 38 25](https://github.com/nextauthjs/next-auth/assets/66895208/6a763921-4f70-40f4-a3e1-9abc78276d45)

- Kakao dev console has a button at the top right to change from KR to ENG

================
File: docs/pages/getting-started/providers/keycloak.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/keycloak.svg" height="64" width="64" />

# Keycloak Provider

## Resources

- [Keycloak OIDC documentation](https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/keycloak
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/keycloak
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/keycloak
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_KEYCLOAK_ID
AUTH_KEYCLOAK_SECRET
AUTH_KEYCLOAK_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Keycloak from "next-auth/providers/keycloak"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Keycloak],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Keycloak from "@auth/qwik/providers/keycloak"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Keycloak],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Keycloak from "@auth/sveltekit/providers/keycloak"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Keycloak],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Keycloak from "@auth/express/providers/keycloak"

app.use("/auth/*", ExpressAuth({ providers: [Keycloak] }))
```

  </Code.Express>
</Code>

Enable the "Client Authentication" option to retrieve your client secret in the Credentials tab.

Prior to v20, create an `openid-connect` client in Keycloak with "confidential" as the "Access Type".

- Issuer should include the realm – e.g. `https://my-keycloak-domain.com/realms/My_Realm`

================
File: docs/pages/getting-started/providers/line.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/line.svg" height="64" width="64" />

# Line Provider

## Resources

- [LINE Login documentation](https://developers.line.biz/en/docs/line-login/integrate-line-login/)
- [LINE app console](https://developers.line.biz/console/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/line
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/line
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/line
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_LINE_ID
AUTH_LINE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Line from "next-auth/providers/line"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Line],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Line from "@auth/qwik/providers/line"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Line],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Line from "@auth/sveltekit/providers/line"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Line],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Line from "@auth/express/providers/line"

app.use("/auth/*", ExpressAuth({ providers: [Line] }))
```

  </Code.Express>
</Code>

Create a provider and a LINE login channel at https://developers.line.biz/console/. In the settings of the channel under LINE Login, activate web app and configure your callback URL as defined above.

### Notes

- To retrieve email address, you need to apply for Email address permission. Open [Line Developer Console](https://developers.line.biz/console/), go to your Login Channel. Scroll down bottom to find **OpenID Connect** -> **Email address permission**. Click **Apply** and follow the instruction.

================
File: docs/pages/getting-started/providers/linkedin.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/linkedin.svg" height="64" width="64" />

# LinkedIn Provider

## Resources

- [LinkedIn OAuth documentation](https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow)
- [LinkedIn app console](https://www.linkedin.com/developers/apps/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/linkedin
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/linkedin
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/linkedin
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_LINKEDIN_ID
AUTH_LINKEDIN_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import LinkedIn from "next-auth/providers/linkedin"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [LinkedIn],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import LinkedIn from "@auth/qwik/providers/linkedin"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [LinkedIn],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import LinkedIn from "@auth/sveltekit/providers/linkedin"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [LinkedIn],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import LinkedIn from "@auth/express/providers/linkedin"

app.use("/auth/*", ExpressAuth({ providers: [LinkedIn] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/logto.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/logto.svg" width="64" height="64" />

# Logto Provider

## Resources

- [Logto Auth.js quickstart](https://docs.logto.io/quick-starts/next-auth)
- [Integrate Logto in your application](https://docs.logto.io/integrate-logto/integrate-logto-into-your-application)

## Setup

### Callback URL

<Code>
  <Code.Next>

    ```bash
    https://example.com/api/auth/callback/logto
    ```

  </Code.Next>
  <Code.Svelte>

    ```bash
    https://example.com/auth/callback/logto
    ```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_LOGTO_ID
AUTH_LOGTO_SECRET
AUTH_LOGTO_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Logto from "next-auth/providers/logto"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Logto],
})
```

  </Code.Next>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Logto from "@auth/sveltekit/providers/logto"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Logto],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Logto from "@auth/express/providers/logto"

app.use("/auth/*", ExpressAuth({ providers: [Logto] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/loops.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/loops.svg" height="96" />

# Loops Provider

## Overview

The Loops provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Loops provider can be used in conjunction with (or instead of) one or more OAuth providers.

## How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Loops provider can be used with both JSON Web Token and database managed
  sessions, however **you must configure a database** to use it. It is not
  possible to enable email sign in without using a database.
</Callout>

## Configuration

### Add and Verify your Domain on Loops

First, you'll need to have completed the steps covered in the ['Start here'](https://loops.so/docs/start-here) Loops documentation.
The main thing required is to [set up your domain records](https://loops.so/docs/start-here#1-set-up-your-domain-records).

### Generate an API Key

Next, you will have to generate an API key in the [Loops Dashboard](https://loops.so/api-keys). You can save this API key as the `AUTH_LOOPS_KEY` environment variable.

```sh
AUTH_LOOPS_KEY=abc
```

### Create a Transactional Email Template on Loops

The easiest way to achieve this is using the [Loops email editor](https://loops.so/docs/creating-emails/editor) to create a transactional email template.
If you're new to Loops, you can find rich documentation [here](https://loops.so/docs/transactional/guide).

<br />
Copy the Transactional ID value from the last page of the template creation
process, and save this as the `AUTH_LOOPS_TRANSACTIONAL_ID` environment
variable. If you're following these steps, you should now have two environment
variables set up for Loops.

```sh
AUTH_LOOPS_KEY=abc
AUTH_LOOPS_TRANSACTIONAL_ID=def
```

<Callout type="warning">
  When creating your email template, make sure to include the `url` variable in
  the template. This is the URL that will sent to the user, allowing them to
  signin.
</Callout>

<Code>
<Code.Next>
### Configure AuthJS with the Loops Provider
```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Loops from "next-auth/providers/loops"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ..., // database adapter of your choosing
  providers: [
    Loops({
      apiKey: process.env.AUTH_LOOPS_KEY,
      transactionalId: process.env.AUTH_LOOPS_TRANSACTIONAL_ID,
    }),
  ],
})
```

</Code.Next>
<Code.Svelte>
### Configure AuthJS with the Loops Provider
```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Loops from "@auth/sveltekit/providers/loops"
import { AUTH_LOOPS_KEY, AUTH_LOOPS_TRANSACTIONAL_ID } from "@env/static/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ..., // database adapter of your choosing
  providers: [
    Loops({
      apiKey: AUTH_LOOPS_KEY,
      transactionalId: AUTH_LOOPS_TRANSACTIONAL_ID,
    }),
  ],
})
```

</Code.Svelte>
</Code>

================
File: docs/pages/getting-started/providers/mailchimp.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/mailchimp.svg" height="64" width="64" />

# Mailchip Provider

## Resources

- [Mailchimp OAuth documentation](https://admin.mailchimp.com/account/oauth2/client/)
- [Mailchimp documentation: Access user data](https://mailchimp.com/developer/marketing/guides/access-user-data-oauth-2/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/mailchimp
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/mailchimp
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/mailchimp
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_MAILCHIMP_ID
AUTH_MAILCHIMP_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import MailChimp from "next-auth/providers/mailchimp"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [MailChimp],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import MailChimp from "@auth/qwik/providers/mailchimp"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [MailChimp],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import MailChimp from "@auth/sveltekit/providers/mailchimp"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [MailChimp],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import MailChimp from "@auth/express/providers/mailchimp"

app.use("/auth/*", ExpressAuth({ providers: [MailChimp] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/mailgun.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/mailgun.svg" height="64" width="64" />

# Mailgun Provider

## Resources

- [Mailgun documentation](https://documentation.mailgun.com/docs/mailgun)

## Overview

The Mailgun provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Mailgun provider can be used in conjunction with (or instead of) one or more OAuth providers.

### How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Mailgun provider can be used with both JSON Web Token and database managed
  sessions, however **you must configure a database** to use it. It is not
  possible to enable email sign in without using a database.
</Callout>

## Configuration

1. First, you'll need to [add your domain](https://app.mailgun.com/mg/sending/domains) to your Mailgun account. This is required by Mailgun and this domain of the address you use in the `from` provider option.

2. Next, you will have to generate an API key in the [Mailgun Settings](https://app.mailgun.com/settings/api_security/api_keys). You can save this API key as the `AUTH_MAILGUN_KEY` environment variable.

```sh
AUTH_MAILGUN_KEY=abc
```

If you name your environment variable `AUTH_MAILGUN_KEY`, the provider will pick it up automatically and your Auth.js configuration object can be simpler. If you'd like to rename it to something else, however, you'll have to manually pass it into the provider in your Auth.js configuration.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Mailgun from "next-auth/providers/mailgun"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    Mailgun({
      // If your environment variable is named differently than default
      apiKey: import.meta.env.AUTH_MAILGUN_KEY,
      from: "no-reply@company.com"
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Mailgun from "@auth/qwik/providers/mailgun"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Mailgun({
        // If your environment variable is named differently than default
        apiKey: import.meta.env.AUTH_MAILGUN_KEY,
        from: "no-reply@company.com",
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Mailgun from "@auth/sveltekit/providers/mailgun"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    Mailgun({
      // If your environment variable is named differently than default
      apiKey: env.AUTH_MAILGUN_KEY,
      from: "no-reply@company.com",
    }),
  ],
})
```

</Code.Svelte>
</Code>

4. Do not forget to setup one of the [database adapters](https://authjs.dev/getting-started/database) for storing the Email verification token.

5. You can now start the sign-in process with an email address at `/api/auth/signin`.

A user account (i.e. an entry in the `Users` table) will not be created for the user until the first time they verify their email address. If an email address is already associated with an account, the user will be signed in to that account when they click the link in magic link email and use up the verification token.

## Customization

### Email Body

You can fully customize the sign in email that is sent by passing a custom function as the `sendVerificationRequest` option to `Mailgun()`.

```js {7} filename="./auth.ts"
import NextAuth from "next-auth"
import Mailgun from "next-auth/providers/mailgun"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Mailgun({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
      sendVerificationRequest({
        identifier: email,
        url,
        provider: { server, from },
      }) {
        // your function
      },
    }),
  ],
})
```

As an example, the following shows the source for our built-in `sendVerificationRequest()` method. Notice that we're rendering the HTML (`html()`) and making the network call (`fetch()`) to Mailgun to actually do the sending here in this method.

```ts filename="./lib/authSendRequest.ts" {13, 16}
export async function sendVerificationRequest(params) {
  const { identifier: to, provider, url, theme } = params
  const { host } = new URL(url)
  const domain = provider.from.split("@").at(1)

  if (!domain) throw new Error("malformed Mailgun domain")

  const form = new FormData()
  form.append("from", `${provider.name} <${provider.from}>`)
  form.append("to", to)
  form.append("subject", `Sign in to ${host}`)
  form.append("html", html({ host, url, theme }))
  form.append("text", text({ host, url }))

  const res = await fetch(`https://api.mailgun.net/v3/${domain}/messages`, {
    method: "POST",
    headers: {
      Authorization: `Basic ${btoa(`api:${provider.apiKey}`)}`,
    },
    body: form,
  })

  if (!res.ok) throw new Error("Mailgun error: " + (await res.text()))
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: { url: string; host: string }) {
  return `Sign in to ${host}\n${url}\n\n`
}
```

<Callout type="info">
  If you want to generate great looking emails with React that are compatible
  with many email clients, check out [mjml](https://mjml.io) or
  [react-email](https://react.email)
</Callout>

### Verification Tokens

By default, we are generating a random verification token. You can define a `generateVerificationToken` method in your provider options if you want to override it:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Mailgun from "next-auth/providers/mailgun"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Mailgun({
      async generateVerificationToken() {
        return crypto.randomUUID()
      },
    }),
  ],
})
```

### Normalizing Email Addresses

By default, Auth.js will normalize the email address. It treats the address as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, i.e. when looking up users by e-mail from databases.) and also removes any secondary email address that may have been passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `Mailgun` provider. The following example shows the default behavior:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Mailgun from "next-auth/providers/mailgun"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Mailgun({
      normalizeIdentifier(identifier: string): string {
        // Get the first two elements only,
        // separated by `@` from user input.
        let [local, domain] = identifier.toLowerCase().trim().split("@")
        // The part before "@" can contain a ","
        // but we remove it on the domain part
        domain = domain.split(",")[0]
        return `${local}@${domain}`

        // You can also throw an error, which will redirect the user
        // to the sign-in page with error=EmailSignin in the URL
        // if (identifier.split("@").length > 2) {
        //   throw new Error("Only one email allowed")
        // }
      },
    }),
  ],
})
```

<Callout type="warning">
  Always make sure this returns a single e-mail address, even if multiple ones
  were passed in.
</Callout>

================
File: docs/pages/getting-started/providers/mailru.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/mailru.svg" height="64" width="128" />

# Mailru Provider

## Resources

- [Mailru OAuth documentation](https://o2.mail.ru/docs)
- [Mailru app console](https://o2.mail.ru/app/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/mailru
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/mailru
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/mailru
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_MAILRU_ID
AUTH_MAILRU_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import MailRu from "next-auth/providers/mailru"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [MailRu],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import MailRu from "@auth/qwik/providers/mailru"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [MailRu],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import MailRu from "@auth/sveltekit/providers/mailru"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [MailRu],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import MailRu from "@auth/express/providers/mailru"

app.use("/auth/*", ExpressAuth({ providers: [MailRu] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/mastodon.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/mastodon.svg" height="64" width="64" />

# Mastodon Provider

## Resources

- [Mastodon OAuth documentation](https://docs.joinmastodon.org/client/token/)
- [Mastodon OAuth Configuration](https://mastodon.social/settings/applications)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/mastodon
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/mastodon
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/mastodon
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_MASTODON_ID
AUTH_MASTODON_SECRET
AUTH_MASTODON_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Mastodon from "next-auth/providers/mastodon"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Mastodon],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Mastodon from "@auth/qwik/providers/mastodon"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Mastodon],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Mastodon from "@auth/sveltekit/providers/mastodon"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Mastodon],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Mastodon from "@auth/express/providers/mastodon"

app.use("/auth/*", ExpressAuth({ providers: [Mastodon] }))
```

  </Code.Express>
</Code>

### Notes

- Due to the way Mastodon is architected, you have to define the `issuer` to be the instance URL against which you want to authenticate

================
File: docs/pages/getting-started/providers/mattermost.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/mattermost.svg" height="64" width="64" />

# Mattermost Provider

## Resources

- [Mattermost OAuth documentation](https://example.com)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/mattermost
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/mattermost
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/mattermost
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_MATTERMOST_ID
AUTH_MATTERMOST_SECRET
AUTH_MATTERMOST_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Mattermost from "next-auth/providers/mattermost"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Mattermost],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Mattermost from "@auth/qwik/providers/mattermost"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Mattermost],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Mattermost from "@auth/sveltekit/providers/mattermost"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Mattermost],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Mattermost from "@auth/express/providers/mattermost"

app.use("/auth/*", ExpressAuth({ providers: [Mattermost] }))
```

  </Code.Express>
</Code>

### Notes

- To create your Mattermost OAuth2 app visit `http://<your Mattermost instance url>/<your team>/integrations/oauth2-apps`
- The Mattermost provider requires the `issuer` option to be set. This is the base url of your Mattermost instance. e.g `https://my-cool-server.cloud.mattermost.com`

================
File: docs/pages/getting-started/providers/medium.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/medium.svg" height="64" width="64" />

# Medium Provider

## Resources

- [Medium OAuth documentation](https://example.com)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/medium
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/medium
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/medium
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_MEDIUM_ID
AUTH_MEDIUM_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Medium from "next-auth/providers/medium"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Medium],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Medium from "@auth/qwik/providers/medium"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Medium],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Medium from "@auth/sveltekit/providers/medium"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Medium],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Medium from "@auth/express/providers/medium"

app.use("/auth/*", ExpressAuth({ providers: [Medium] }))
```

  </Code.Express>
</Code>

### Notes

- Email address is not returned by the Medium API.

================
File: docs/pages/getting-started/providers/microsoft-entra-id.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/microsoft-entra-id.svg"
  height="64"
  width="64"
/>

# Microsoft Entra ID

<Callout>
  Microsoft has renamed **Azure AD** to **Microsoft Entra ID**, more information
  about the new name can be found
  [here](https://learn.microsoft.com/en-us/entra/fundamentals/new-name).
</Callout>

## Resources

- [Microsoft Entra OAuth documentation](https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow)
- [Microsoft Entra OAuth apps](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/microsoft-entra-id
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/microsoft-entra-id
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/microsoft-entra-id
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_MICROSOFT_ENTRA_ID_ID
AUTH_MICROSOFT_ENTRA_ID_SECRET
AUTH_MICROSOFT_ENTRA_ID_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import MicrosoftEntraID from "next-auth/providers/microsoft-entra-id"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    MicrosoftEntraID({
      clientId: process.env.AUTH_MICROSOFT_ENTRA_ID_ID,
      clientSecret: process.env.AUTH_MICROSOFT_ENTRA_ID_SECRET,
      issuer: process.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Entra from "@auth/qwik/providers/microsoft-entra-id"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Entra({
        clientId: import.meta.env.AUTH_MICROSOFT_ENTRA_ID_ID,
        clientSecret: import.meta.env.AUTH_MICROSOFT_ENTRA_ID_SECRET,
        issuer: import.meta.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Entra from "@auth/sveltekit/providers/microsoft-entra-id"
import { env } from "$env/dynamic/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Entra({
      clientId: env.AUTH_MICROSOFT_ENTRA_ID_ID,
      clientSecret: env.AUTH_MICROSOFT_ENTRA_ID_SECRET,
      issuer: process.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Entra from "@auth/express/providers/microsoft-entra-id"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      Entra({
        clientId: process.env.AUTH_MICROSOFT_ENTRA_ID_ID,
        clientSecret: process.env.AUTH_MICROSOFT_ENTRA_ID_SECRET,
        issuer: process.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

### Notes

1. Allow only Specific Active Directory Users

- In https://entra.microsoft.com/ select Identity from the left bar menu.
- Next, go to "App Registration" in the left menu, and create a new one.
- Pay close attention to "Who can use this application or access this API?"
  - This allows you to scope access to specific types of user accounts
  - Only your tenant, all Microsoft tenants, or all Microsoft tenants and public Microsoft accounts (Skype, Xbox, Outlook.com, etc.)
- When asked for a redirection URL, use `https://yourapplication.com/api/auth/callback/microsoft-entra-id` or for development `http://localhost:3000/api/auth/callback/microsoft-entra-id`.
- After your App Registration is created, under "Client Credential" create your Client secret.
- Now copy your:
  - Application (client) ID
  - Client secret (value)
  - Issuer

In `.env.local` create the following entries:

```
AUTH_MICROSOFT_ENTRA_ID_ID=<copy Application (client) ID here>
AUTH_MICROSOFT_ENTRA_ID_SECRET=<copy generated client secret value here>
AUTH_MICROSOFT_ENTRA_ID_ISSUER=https://login.microsoftonline.com/<copy the issuer here>/v2.0
```

That will default the tenant to use the `common` authorization endpoint. [For more details see here](https://learn.microsoft.com/en-us/entra/identity-platform/v2-protocols#endpoints).

- Microsoft Entra returns the profile picture in an ArrayBuffer, instead of just a URL to the image, so our provider converts it to a base64 encoded image string and returns that instead. See: https://learn.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0&tabs=http#examples. The default image size is 48x48 to avoid [running out of space](https://next-auth.js.org/faq#:~:text=What%20are%20the%20disadvantages%20of%20JSON%20Web%20Tokens%3F) in case the session is saved as a JWT.

================
File: docs/pages/getting-started/providers/naver.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/naver.svg" height="64" width="128" />

# Naver Provider

## Resources

- [Naver OAuth documentation](https://developers.naver.com/docs/login/overview/overview.md)
- [Naver OAuth documentation 2](https://developers.naver.com/docs/login/api/api.md)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/naver
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/naver
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/naver
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_NAVER_ID
AUTH_NAVER_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Naver from "next-auth/providers/naver"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Naver],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Naver from "@auth/qwik/providers/naver"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Naver],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Naver from "@auth/sveltekit/providers/naver"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Naver],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Naver from "@auth/express/providers/naver"

app.use("/auth/*", ExpressAuth({ providers: [Naver] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/netlify.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/netlify.svg" height="64" width="64" />

# Netlify Provider

## Resources

- [Netlify OAuth blog](https://www.netlify.com/blog/2016/10/10/integrating-with-netlify-oauth2/)
- [Netlify OAuth example](https://github.com/netlify/netlify-oauth-example/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/netlify
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/netlify
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/netlify
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_NETLIFY_ID
AUTH_NETLIFY_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Netlify from "next-auth/providers/netlify"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Netlify],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Netlify from "@auth/qwik/providers/netlify"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Netlify],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Netlify from "@auth/sveltekit/providers/netlify"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Netlify],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Netlify from "@auth/express/providers/netlify"

app.use("/auth/*", ExpressAuth({ providers: [Netlify] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/netsuite.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/netsuite.svg" height="64" width="64" />

# NetSuite

<Callout type="warning">To be released in `next-auth@5.0.0-beta.18`</Callout>

## Resources

- [NetSuite - Creating an Integration Record (OAuth 2.0)](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771733782.html#Related-Topics)
- [NetSuite - Authorizing OAuth Requests](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps)
- [NetSuite - Configure OAuth Roles](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771510070.html#Set-Up-OAuth-2.0-Roles)
- [Learn more about NetSuite OAuth 2.0](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/chapter_157769826287.html#OAuth-2.0)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/netsuite
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/netsuite
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/netsuite
```

  </Code.Svelte>
  <Code.Express>

```bash
https://example.com/auth/callback/netsuite
```

  </Code.Express>
</Code>

> NetSuite does not support `http://` callback URLs. When testing locally, you can use a service like [ngrok](https://ngrok.com) to get a local `https` URL.

### Environment Variables

```
AUTH_NETSUITE_ID
AUTH_NETSUITE_SECRET
AUTH_NETSUITE_ACCOUNT_ID
```

### Configuration

Before setting up the provider, you will need to ensure the following is setup.

- [Create an Integration Record](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771733782.html#procedure_157838925981)
  - Uncheck the TBA Auth Flow checkbox.
  - Check OAuth 2.0 Auth Flow checkbox.
  - Copy and paste the `Callback URL` below into the `Redirect URI` field.
  - Then select the scope(s) you want to use.
    - **REST Web Services** (`rest_webservices`) - Access to REST Web Services.
    - **RESTlets**(`restlets`) - Access to RESTLets.
    - **SuiteAnalytics Connect** (`suiteanalytics_connect`) - Access to SuiteAnalytics Connect.
  - Add any policies you want to use.
    - Application Logo (_Optional_) (Shown to users when they are asked to grant access to your application). - Consent Screen
    - Application Terms of Use (_Optional_) - A PDF file that contains the terms of use for your application. - Consent Screen
    - Application Privacy Policy (_Optional_) - A PDF file that contains the privacy policy for your application. - Consent Screen
  - OAuth 2.0 Consent Policy Preference - This setting determines whether the user is asked to grant access to your application **every time** they sign in or only the **first time** they sign in or **never**.
  - **Save** the Integration record.
  - The Integration record will be used to generate the `clientId` and `clientSecret` for the provider. **Save the generated values for later**

### Userinfo RESTLet Handler

To use this provider, you'll need to create a userinfo RESTlet in your NetSuite instance.
Our `userinfo` URL needs to be a suitelet or RESTLet URL that gives us the
information about the user. The best bet is to use the `N/runtime` module to
get the basics first. - Here is an example of a RESTlet below. Be sure to
deploy and enable access to "All Roles".

Be sure to deploy and use the **external** RESTLet url of any usage of the URIs.

```js
/**
 * @NApiVersion 2.1
 * @NScriptType Restlet
 */
define(["N/runtime"],
 (runtime) => {
/**
 * Defines the function that is executed when a GET request is sent to a RESTlet.
 * @param {Object} requestParams - Parameters from HTTP request URL; parameters passed as an Object (for all supported
 *     content types)
 * @returns {string | Object} HTTP response body; returns a string when request Content-Type is 'text/plain'; returns an
 *     Object when request Content-Type is 'application/json' or 'application/xml'
 * @since 2015.2
 */
  const get = (requestParams) => {
    let userObject = runtime.getCurrentUser();

    try {
      log.debug({ title: "Payload received:", details: requestParams });

      const { id, name, role, location, email, contact } = userObject;

      log.audit({ title: "Current User Ran", details: name });

      let user = {
        id,
        name,
        role,
        location,
        email,
        contact,
      };

      log.debug({ title: "Returning user", details: user });

      return JSON.stringify(user);
    } catch (e) {
      log.error({ title: "Error grabbing current user:", details: e });
    }
  };

  return {
    get,
  };
);
```

Above is an example of returning the basic runtime information. Be sure to create a new script record and deployment record. When you save the deployment record, you will get the URLs for your RESTlet, which we will use as the `userinfo` URL.

### Example Usage

<Code>
  <Code.Next>

```ts filename="@auth.ts"
import NextAuth from "next-auth"
import NetSuite from "next-auth/providers/netsuite"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    NetSuite({
      clientId: process.env.AUTH_NETSUITE_ID,
      clientSecret: process.env.AUTH_NETSUITE_SECRET,
      issuer: process.env.AUTH_NETSUITE_ACCOUNT_ID, // EX: TSTDRV1234567 or 81555 for prod, and 1234567-SB1 for Sandbox accounts not "_" use "-".
      // Returns the current user using the N/runtime module. This url can be a suitelet or RESTlet (Recommended)
      // Using getCurrentUser(); So we match this schema returned from this RESTlet in the profile callback. (Required)
      userinfo:
        "https://1234567.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=123&deploy=1",
      // Optional
      prompt: "login", // Required if you want to force the user to login every time.
      scope: "restlets", // Optional defaults to "restlets rest_webservices". Enter the scope(s) you want to use followed by spaces.
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import NetSuite from "@auth/qwik/providers/netsuite"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      NetSuite({
        clientId: import.meta.env.AUTH_NETSUITE_ID,
        clientSecret: import.meta.env.AUTH_NETSUITE_SECRET,
        issuer: import.meta.env.AUTH_NETSUITE_ACCOUNT_ID, // EX: TSTDRV1234567 or 81555 for prod, and 1234567-SB1 for Sandbox accounts not "_" use "-".
        // Returns the current user using the N/runtime module. This url can be a suitelet or RESTlet (Recommended)
        // Using getCurrentUser(); So we match this schema returned from this RESTlet in the profile callback. (Required)
        userinfo:
          "https://1234567.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=123&deploy=1",
        // Optional
        prompt: "login", // Required if you want to force the user to login every time.
        scope: "restlets", // Optional defaults to "restlets rest_webservices". Enter the scope(s) you want to use followed by spaces.
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import NetSuite from "@auth/sveltekit/providers/netsuite"
import { env } from "$env/dynamic/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    NetSuite({
      clientId: env.AUTH_NETSUITE_ID,
      clientSecret: env.AUTH_NETSUITE_SECRET,
      issuer: env.AUTH_NETSUITE_ACCOUNT_ID, // EX: TSTDRV1234567 or 81555 for prod, and 1234567-SB1 for Sandbox accounts not "_" use "-".
      // Returns the current user using the N/runtime module. This url can be a suitelet or RESTlet (Recommended)
      // Using getCurrentUser(); So we match this schema returned from this RESTlet in the profile callback. (Required)
      userinfo:
        "https://1234567.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=123&deploy=1",
      // Optional
      prompt: "login", // Required if you want to force the user to login every time.
      scope: "restlets", // Optional defaults to "restlets rest_webservices". Enter the scope(s) you want to use followed by spaces.
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import NetSuite from "@auth/express/providers/netsuite"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      NetSuite({
        clientId: process.env.AUTH_NETSUITE_ID,
        clientSecret: process.env.AUTH_NETSUITE_SECRET,
        issuer: process.env.AUTH_NETSUITE_ACCOUNT_ID, // EX: TSTDRV1234567 or 81555 for prod, and 1234567-SB1 for Sandbox accounts not "_" use "-".
        // Returns the current user using the N/runtime module. This url can be a suitelet or RESTlet (Recommended)
        // Using getCurrentUser(); So we match this schema returned from this RESTlet in the profile callback. (Required)
        userinfo:
          "https://1234567.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=123&deploy=1",
        // Optional
        prompt: "login", // Required if you want to force the user to login every time.
        scope: "restlets", // Optional defaults to "restlets rest_webservices". Enter the scope(s) you want to use followed by spaces.
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/nextcloud.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/nextcloud.svg" height="64" width="64" />

# Nextcloud Provider

## Resources

- [Nextcloud Documentation](https://docs.nextcloud.com/)
- [Nextcloud OAuth 2](https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/oauth2.html)
- [Nextcloud Clients and Client APIs](https://docs.nextcloud.com/server/latest/developer_manual/client_apis/index.html)
- [Nextcloud User provisioning API](https://docs.nextcloud.com/server/latest/admin_manual/configuration_user/user_provisioning_api.html)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/nextcloud
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/nextcloud
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/nextcloud
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_NEXTCLOUD_ID
AUTH_NEXTCLOUD_SECRET
AUTH_NEXTCLOUD_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts
import NextAuth from "next-auth"
import Nextcloud from "next-auth/providers/nextcloud"

const response = await NextAuth({
  providers: [
    Nextcloud({
      clientId: process.env.AUTH_NEXTCLOUD_ID,
      clientSecret: process.env.AUTH_NEXTCLOUD_SECRET,
      issuer: process.env.AUTH_NEXTCLOUD_ISSUER,
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Nextcloud from "@auth/qwik/providers/nextcloud"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Nextcloud({
        clientId: process.env.AUTH_NEXTCLOUD_ID,
        clientSecret: process.env.AUTH_NEXTCLOUD_SECRET,
        issuer: process.env.AUTH_NEXTCLOUD_ISSUER,
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Nextcloud from "@auth/sveltekit/providers/nextcloud"
import {
  AUTH_NEXTCLOUD_ID,
  AUTH_NEXTCLOUD_SECRET,
  AUTH_NEXTCLOUD_ISSUER,
} from "$env/static/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Nextcloud({
      clientId: AUTH_NEXTCLOUD_ID,
      clientSecret: AUTH_NEXTCLOUD_SECRET,
      issuer: AUTH_NEXTCLOUD_ISSUER,
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Nextcloud from "@auth/express/providers/nextcloud"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      Nextcloud({
        clientId: AUTH_NEXTCLOUD_ID,
        clientSecret: AUTH_NEXTCLOUD_SECRET,
        issuer: AUTH_NEXTCLOUD_ISSUER,
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/nodemailer.mdx
================
import { Callout, Tabs } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/nodemailer.svg" height="64" width="96" />

# Nodemailer Provider

## Overview

The Nodemailer provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Nodemailer provider can be used in conjunction with (or instead of) one or more OAuth providers.

### How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Nodemailer provider can be used with both JSON Web Token and database
  managed sessions, however **you must configure a database** to use it. It is
  not possible to enable email sign in without using a database.
</Callout>

## Configuration

1. Auth.js does not include `nodemailer` as a dependency, so you'll need to install it yourself if you want to use the Nodemailer provider.

```bash npm2yarn
npm install nodemailer
```

2. You will need an SMTP account; ideally for one of the [services known to work with `nodemailer`](https://community.nodemailer.com/2-0-0-beta/setup-smtp/well-known-services/). Nodemailer also works with [other transports](https://nodemailer.com/transports/), however if you want to use an HTTP based email service, we recommend using one of the other Auth.js providers designed for those, like [Resend](/getting-started/providers/resend) or [Sendgrid](/getting-started/providers/sendgrid).

3. There are two ways to configure the SMTP server connection.

You can either use a connection string or a `nodemailer` configuration object.

<Tabs items={['Connection string', 'Configuration object']}>
  <Tabs.Tab>

```bash filename=".env"
EMAIL_SERVER=smtp://username:password@smtp.example.com:587
EMAIL_FROM=noreply@example.com
```

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    Nodemailer({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Nodemailer from "@auth/qwik/providers/nodemailer"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Nodemailer({
        server: import.meta.env.EMAIL_SERVER,
        from: import.meta.env.EMAIL_FROM,
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Nodemailer from "@auth/sveltekit/providers/nodemailer"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    Nodemailer({
      server: env.EMAIL_SERVER,
      from: env.EMAIL_FROM,
    }),
  ],
})
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

  </Tabs.Tab>
  <Tabs.Tab>

```bash filename=".env"
EMAIL_SERVER_USER=username
EMAIL_SERVER_PASSWORD=password
EMAIL_SERVER_HOST=smtp.example.com
EMAIL_SERVER_PORT=587
EMAIL_FROM=noreply@example.com
```

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    Nodemailer({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: process.env.EMAIL_FROM,
    }),
  ],
})
```

</Code.Next>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Nodemailer from "@auth/sveltekit/providers/nodemailer"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    Nodemailer({
      server: {
        host: env.EMAIL_SERVER_HOST,
        port: env.EMAIL_SERVER_PORT,
        auth: {
          user: env.EMAIL_SERVER_USER,
          pass: env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: env.EMAIL_FROM,
    }),
  ],
})
```

</Code.Svelte>
</Code>

  </Tabs.Tab>
</Tabs>

4. Do not forget to setup one of the database [adapters](https://authjs.dev/reference/core/adapters) for storing the Email verification token.

5. You can now start the sign process with an email address at `/api/auth/signin`.

A user account (i.e. an entry in the `Users` table) will not be created for the user until the first time they verify their email address. If an email address is already associated with an account, the user will be signed in to that account when they use the link in the email.

## Customization

### Email Body

You can fully customize the sign in email that is sent by passing a custom function as the `sendVerificationRequest` option to `Nodemailer()`.

```ts {7} filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Nodemailer({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
      sendVerificationRequest({
        identifier: email,
        url,
        provider: { server, from },
      }) {
        // your function
      },
    }),
  ],
})
```

As an example, the following shows the source for our built-in `sendVerificationRequest()` method. Notice that we're rendering the HTML (`html()`) and making the network call (`transport.sendMail()`) to the email provider to actually do the sending here in this method.

```ts {8, 13}
import { createTransport } from "nodemailer"

export async function sendVerificationRequest(params) {
  const { identifier, url, provider, theme } = params
  const { host } = new URL(url)
  // NOTE: You are not required to use `nodemailer`, use whatever you want.
  const transport = createTransport(provider.server)
  const result = await transport.sendMail({
    to: identifier,
    from: provider.from,
    subject: `Sign in to ${host}`,
    text: text({ url, host }),
    html: html({ url, host, theme }),
  })
  const failed = result.rejected.concat(result.pending).filter(Boolean)
  if (failed.length) {
    throw new Error(`Email(s) (${failed.join(", ")}) could not be sent`)
  }
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: { url: string; host: string }) {
  return `Sign in to ${host}\n${url}\n\n`
}
```

<Callout type="info">
  If you want to generate great looking emails with React that are compatible
  with many email clients, check out [mjml](https://mjml.io) or
  [react-email](https://react.email)
</Callout>

### Verification Tokens

By default, we are generating a random verification token. You can define a `generateVerificationToken` method in your provider options if you want to override it:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Nodemailer({
      async generateVerificationToken() {
        return crypto.randomUUID()
      },
    }),
  ],
})
```

### Normalizing Email Addresses

By default, Auth.js will normalize the email address. It treats the address as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, i.e. when looking up users by e-mail from databases.) and also removes any secondary email address that may have been passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `Nodemailer` provider. The following example shows the default behavior:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Nodemailer from "next-auth/providers/nodemailer"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Nodemailer({
      normalizeIdentifier(identifier: string): string {
        // Get the first two elements only,
        // separated by `@` from user input.
        let [local, domain] = identifier.toLowerCase().trim().split("@")
        // The part before "@" can contain a ","
        // but we remove it on the domain part
        domain = domain.split(",")[0]
        return `${local}@${domain}`

        // You can also throw an error, which will redirect the user
        // to the sign-in page with error=EmailSignin in the URL
        // if (identifier.split("@").length > 2) {
        //   throw new Error("Only one email allowed")
        // }
      },
    }),
  ],
})
```

<Callout type="warning">
  Always make sure this returns a single e-mail address, even if multiple ones
  were passed in.
</Callout>

================
File: docs/pages/getting-started/providers/notion.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/notion.svg" height="64" width="64" />

# Notion Provider

## Resources

- [Notion documentation](https://developers.notion.com/docs)
- [Notion Authorization documentation](https://developers.notion.com/docs/authorization)
- [Notion Integrations](https://www.notion.so/my-integrations)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/notion
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/notion
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/notion
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_NOTION_ID
AUTH_NOTION_SECRET
AUTH_NOTION_REDIRECT_URI
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Notion from "next-auth/providers/notion"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Notion({
      clientId: process.env.AUTH_NOTION_ID,
      clientSecret: process.env.AUTH_NOTION_SECRET,
      redirectUri: process.env.AUTH_NOTION_REDIRECT_URI,
    }),
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Notion from "@auth/qwik/providers/notion"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Notion({
        clientId: import.meta.env.AUTH_NOTION_ID,
        clientSecret: import.meta.env.AUTH_NOTION_SECRET,
        redirectUri: import.meta.env.AUTH_NOTION_REDIRECT_URI,
      }),
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Notion from "@auth/sveltekit/providers/notion"
import {
  AUTH_NOTION_ID,
  AUTH_NOTION_SECRET,
  AUTH_NOTION_REDIRECT_URI,
} from "$env/static/private"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    Notion({
      clientId: AUTH_NOTION_ID,
      clientSecret: AUTH_NOTION_SECRET,
      redirectUri: AUTH_NOTION_REDIRECT_URI,
    }),
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Notion from "@auth/express/providers/notion"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      Notion({
        clientId: process.env.AUTH_NOTION_ID,
        clientSecret: process.env.AUTH_NOTION_SECRET,
        redirectUri: process.env.AUTH_NOTION_REDIRECT_URI,
      }),
    ],
  })
)
```

  </Code.Express>
</Code>

## Notes

- You need to select "Public Integration" on the configuration page to get an `oauth_id` and `oauth_secret`. Private integrations do not provide these details.
- You must provide a `clientId` and `clientSecret` to use this provider, as-well as a redirect URI (due to this being required by Notion endpoint to fetch tokens).

================
File: docs/pages/getting-started/providers/okta.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/okta.svg" height="64" width="64" />

# Okta Provider

## Resources

- [Okta OAuth documentation](https://developer.okta.com/docs/reference/api/oidc)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/okta
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/okta
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/okta
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_OKTA_ID
AUTH_OKTA_SECRET
AUTH_OKTA_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Okta from "next-auth/providers/okta"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Okta],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Okta from "@auth/qwik/providers/okta"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Okta],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Okta from "@auth/sveltekit/providers/okta"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Okta],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Okta from "@auth/express/providers/okta"

app.use("/auth/*", ExpressAuth({ providers: [Okta] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/onelogin.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/onelogin.svg" height="64" width="64" />

# OneLogin Provider

## Resources

- [OneLogin OAuth documentation](https://example.com)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/onelogin
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/onelogin
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/onelogin
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_ONELOGIN_ID
AUTH_ONELOGIN_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import OneLogin from "next-auth/providers/onelogin"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [OneLogin],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import OneLogin from "@auth/qwik/providers/onelogin"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [OneLogin],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import OneLogin from "@auth/sveltekit/providers/onelogin"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [OneLogin],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import OneLogin from "@auth/express/providers/onelogin"

app.use("/auth/*", ExpressAuth({ providers: [OneLogin] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/osso.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/osso.svg" height="64" width="64" />

# Osso Provider

## Resources

- [Osso Project](https://github.com/enterprise-oss/osso)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/osso
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/osso
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/osso
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_OSSO_ID
AUTH_OSSO_SECRET
AUTH_OSSO_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Osso from "next-auth/providers/osso"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Osso],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Osso from "@auth/qwik/providers/osso"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Osso],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Osso from "@auth/sveltekit/providers/osso"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Osso],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Osso from "@auth/express/providers/osso"

app.use("/auth/*", ExpressAuth({ providers: [Osso] }))
```

  </Code.Express>
</Code>

### Notes

- You can configure your OAuth Clients on your Osso Admin UI, i.e. https://yourInstance.com/admin/config - you'll need to get a Client ID and Secret and allow-list your redirect URIs.
- SAML - SSO differs a bit from OAuth, for every tenant who wants to sign in to your application using SAML, you and your customer need to perform a multi-step configuration in Osso's Admin UI and the admin dashboard of the tenant's Identity Provider. Osso provides documentation for providers like Okta and Osso, cloud-based IDPs who also offer a developer account that's useful for testing. Osso also provides a Mock IDP that you can use for testing without needing to sign up for an Identity Provider service.
- `issuer` should be the fully qualified domain – e.g. `demo.ossoapp.com`

================
File: docs/pages/getting-started/providers/osu.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/osu.svg" height="64" width="64" />

# Osu Provider

## Resources

- [osu! OAuth documentation](https://osu.ppy.sh/docs/index.html#authentication)
- [osu! app console](https://osu.ppy.sh/home/account/edit#new-oauth-application)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/osu
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/osu
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/osu
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_OSU_ID
AUTH_OSU_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Osu from "next-auth/providers/osu"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Osu],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Osu from "@auth/qwik/providers/osu"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Osu],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Osu from "@auth/sveltekit/providers/osu"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Osu],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Osu from "@auth/express/providers/osu"

app.use("/auth/*", ExpressAuth({ providers: [Osu] }))
```

  </Code.Express>
</Code>

### Notes

- osu! does not provide a user email.

================
File: docs/pages/getting-started/providers/passage.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/passage.svg" height="64" width="64" />

# Passage Provider

## Resources

- [Passage OIDC documentation](https://docs.passage.id/hosted-login/oidc-client-configuration)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/passage
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/passage
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/passage
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_PASSAGE_ID
AUTH_PASSAGE_SECRET
AUTH_PASSAGE_ISSUER
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Passage from "next-auth/providers/passage"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Passage],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Passage from "@auth/qwik/providers/passage"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Passage],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Passage from "@auth/sveltekit/providers/passage"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Passage],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Passage from "@auth/express/providers/passage"

app.use("/auth/*", ExpressAuth({ providers: [Passage] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/passkey.mdx
================
import { Callout, Steps } from "nextra/components"
import { Code } from "@/components/Code"
import { Accordion, Accordions } from "@/components/Accordion"

<img align="right" src="/img/providers/passkey.svg" width="128" height="128" />

# Passkey

## Setup

<Callout type="warning">
  The WebAuthn / Passkeys provider is experimental and not yet recommended for
  production use.
</Callout>

The Passkeys provider **requires a database adapter** as well as a new table in that database. Please see the docs page for your adapter for the respective migration details.

Passkeys are currently supported in the following adapters / framework packages.

| Package                   | Minmum Version  | Link                                        |
| ------------------------- | --------------- | ------------------------------------------- |
| `next-auth`               | `5.0.0-beta.17` |                                             |
| `@auth/sveltekit`         | `1.0.2`         |                                             |
| `@auth/prisma-adapter`    | `1.3.3`         | [Docs](/getting-started/adapters/prisma)    |
| `@auth/unstorage-adapter` | `2.1.0`         | [Docs](/getting-started/adapters/unstorage) |
| `@auth/drizzle-adapter`   | `1.1.1`         | [Docs](/getting-started/adapters/drizzle)   |

<Steps>
### Install peer dependencies

```bash npm2yarn
npm install @simplewebauthn/browser@9.0.1 @simplewebauthn/server@9.0.3
```

The `@simplewebauthn/browser` peer dependency is only required for custom signin pages. If you're using the Auth.js default pages, you can skip installing that peer dependency.

### Database Setup

The Passkeys provider requires an additional table called `Authenticator`. Passkeys are now supported in multiple adapters, please see their respective docs pages for more detailed migration steps. We'll use Prisma as an example going forward here, but there is also a raw SQL migration included below.

<Accordions>
<Accordion title="Prisma Schema">

```prisma {18, 54-66}
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
```

  </Accordion>
  <Accordion title="SQL Migration">

This migration works for **PostgreSQL** and **SQLite**.

```sql filename="./migration/add-webauthn-authenticator-table-postgres.sql"
-- CreateTable
CREATE TABLE "Authenticator" (
    "id" TEXT NOT NULL PRIMARY KEY,
    "credentialID" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "credentialPublicKey" TEXT NOT NULL,
    "counter" INTEGER NOT NULL,
    "credentialDeviceType" TEXT NOT NULL,
    "credentialBackedUp" BOOLEAN NOT NULL,
    "transports" TEXT,
    CONSTRAINT "Authenticator_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

-- CreateIndex
CREATE UNIQUE INDEX "Authenticator_credentialID_key" ON "Authenticator"("credentialID");
```

This migration works for **MySQL** / **MariaDB**.

```sql filename="./migration/add-webauthn-authenticator-table-mysql.sql"
-- CreateTable
CREATE TABLE Authenticator (
    id varchar(255) NOT NULL PRIMARY KEY,
    credentialID TEXT NOT NULL,
    userId varchar(255) NOT NULL,
    providerAccountId TEXT NOT NULL,
    credentialPublicKey TEXT NOT NULL,
    counter INTEGER NOT NULL,
    credentialDeviceType TEXT NOT NULL,
    credentialBackedUp BOOLEAN NOT NULL,
    transports TEXT,
    CONSTRAINT Authenticator_userId_fkey FOREIGN KEY (userId) REFERENCES User (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- CreateIndex
CREATE UNIQUE INDEX Authenticator_credentialID_key ON Authenticator(credentialID);
```

  </Accordion>
  </Accordions>

#### Edge Compatibility

If you're using `next-auth` with Next.js and middleware, you should ensure that your database client of choice is "edge compatible". If you're using an older version of Prisma or another adapter that is not edge compatible, you'll need to make some adjustments. Check out our [edge compatibility](/guides/edge-compatibility) guide for more details. There is also Prisma specific information in the [Prisma adapter docs](/getting-started/adapters/prisma#edge-compatibility).

### Update Auth.js Configuration

Add the `Passkey` provider to your configuration and make sure you're using a compatible database adapter. You'll also need to explicitly enable the experimental WebAuthn feature.

```ts filename="./auth.ts" {10}
import Passkey from "next-auth/providers/passkey"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export default {
  adapter: PrismaAdapter(prisma),
  providers: [Passkey],
  experimental: { enableWebAuthn: true },
}
```

If you're using the built-in Auth.js pages, then you are good to go now! Navigating to your `/signin` route should include a "Signin with Passkeys" button now.

### Custom Pages

If you're building a custom signin page, you can leverage the `next-auth/webauthn` `signIn` function to initiate both WebAuthn registration and authentication. Remember, when using the WebAuthn `signIn` function, you'll also need the `@simplewebauth/browser` peer dependency installed.

```ts filename="app/login/page.tsx" {4} /webauthn/
"use client"

import { useSession } from "next-auth/react"
import { signIn } from "next-auth/webauthn"

export default function Login() {
  const { data: session, update, status } = useSession()

  return (
    <div>
      {status === "authenticated" ? (
        <button onClick={() => signIn("passkey", { action: "register" })}>
          Register new Passkey
        </button>
      ) : status === "unauthenticated" ? (
        <button onClick={() => signIn("passkey")}>Sign in with Passkey</button>
      ) : null}
    </div>
  )
}
```

</Steps>

## Options

You can find all of the Passkeys provider options under the [API reference](/reference/core/providers/webauthn#webauthnconfig).

================
File: docs/pages/getting-started/providers/patreon.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/patreon.svg" height="64" width="64" />

# Patreon Provider

## Resources

- [Patreon OAuth documentation](https://docs.patreon.com/#apiv2-oauth)
- [Patreon Platform](https://www.patreon.com/portal/registration/register-clients)
- [ApiV2 Scopes](https://docs.patreon.com/#scopes)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/patreon
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/patreon
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/patreon
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_PATREON_ID
AUTH_PATREON_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Patreon from "next-auth/providers/patreon"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Patreon],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Patreon from "@auth/qwik/providers/patreon"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Patreon],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Patreon from "@auth/sveltekit/providers/patreon"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Patreon],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Patreon from "@auth/express/providers/patreon"

app.use("/auth/*", ExpressAuth({ providers: [Patreon] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/pinterest.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/pinterest.svg" height="64" width="64" />

# Pinterest Provider

## Resources

- [Pinterest OAuth documentation](https://developers.pinterest.com/docs/getting-started/authentication/)
- [Pinterest app console](https://developers.pinterest.com/apps/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/pinterest
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/pinterest
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/pinterest
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_PINTEREST_ID
AUTH_PINTEREST_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Pinterest from "next-auth/providers/pinterest"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Pinterest],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Pinterest from "@auth/qwik/providers/pinterest"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Pinterest],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Pinterest from "@auth/sveltekit/providers/pinterest"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Pinterest],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Pinterest from "@auth/express/providers/pinterest"

app.use("/auth/*", ExpressAuth({ providers: [Pinterest] }))
```

  </Code.Express>
</Code>

### Notes

- To use in production, make sure the app has standard API access and not trial access

================
File: docs/pages/getting-started/providers/pipedrive.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/pipedrive.svg" height="64" width="128" />

# Pipedrive Provider

## Resources

- [Pipedrive OAuth documentation](https://pipedrive.readme.io/docs/marketplace-oauth-authorization)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/pipedrive
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/pipedrive
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/pipedrive
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_PIPEDRIVE_ID
AUTH_PIPEDRIVE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import PipeDrive from "next-auth/providers/pipedrive"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [PipeDrive],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import PipeDrive from "@auth/qwik/providers/pipedrive"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [PipeDrive],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import PipeDrive from "@auth/sveltekit/providers/pipedrive"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [PipeDrive],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import PipeDrive from "@auth/express/providers/pipedrive"

app.use("/auth/*", ExpressAuth({ providers: [PipeDrive] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/postmark.mdx
================
import { Callout, Tabs } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/postmark.svg" height="64" width="96" />

# Postmark Provider

## Overview

The Postmark provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Postmark provider can be used in conjunction with (or instead of) one or more OAuth providers.

### How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Postmark provider can be used with both JSON Web Token and database
  managed sessions, however **you must configure a database** to use it. It is
  not possible to enable email sign in without using a database.
</Callout>

## Configuration

1. First, you'll need to [add your domain](https://account.postmarkapp.com/sign_up) to your Postmark account. This is required by Postmark and this domain of the address you use in the `from` provider option.

2. Next, you will have to generate an API key in the [Postmark Dashboard](https://account.postmarkapp.com/api_tokens). You can save this API key as the `AUTH_POSTMARK_KEY` environment variable.

```sh
AUTH_POSTMARK_KEY=abc
```

If you name your environment variable `AUTH_POSTMARK_KEY`, the provider will pick it up automatically and your Auth.js configuration object can be simpler. If you'd like to rename it to something else, however, you'll have to manually pass it into the provider in your Auth.js configuration.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Postmark from "next-auth/providers/postmark"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    Postmark({
      // If your environment variable is named differently than default
      apiKey: AUTH_POSTMARK_KEY,
      from: "no-reply@company.com"
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Postmark from "@auth/qwik/providers/postmark"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Postmark({
        // If your environment variable is named differently than default
        apiKey: import.meta.env.AUTH_POSTMARK_KEY,
        from: "no-reply@company.com",
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Postmark from "@auth/sveltekit/providers/postmark"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    Postmark({
      // If your environment variable is named differently than default
      apiKey: env.AUTH_POSTMARK_KEY,
      from: "no-reply@company.com",
    }),
  ],
})
```

</Code.Svelte>
</Code>

4. Do not forget to setup one of the [database adapters](https://authjs.dev/getting-started/database) for storing the Email verification token.

5. You can now start the sign-in process with an email address at `/api/auth/signin`.

A user account (i.e. an entry in the `Users` table) will not be created for the user until the first time they verify their email address. If an email address is already associated with an account, the user will be signed in to that account when they click the link in magic link email and use up the verification token.

## Customization

### Email Body

You can fully customize the sign in email that is sent by passing a custom function as the `sendVerificationRequest` option to `Postmark()`.

```js {7} filename="./auth.ts"
import NextAuth from "next-auth"
import Postmark from "next-auth/providers/postmark"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Postmark({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
      sendVerificationRequest({
        identifier: email,
        url,
        provider: { server, from },
      }) {
        // your function
      },
    }),
  ],
})
```

As an example, the following shows the source for our built-in `sendVerificationRequest()` method. Notice that we're rendering the HTML (`html()`) and making the network call (`fetch()`) to Postmark to actually do the sending here in this method.

```ts filename="./lib/authSendRequest.ts" {4, 14}
export async function sendVerificationRequest(params) {
  const { identifier: to, provider, url, theme } = params
  const { host } = new URL(url)
  const res = await fetch("https://api.postmark.com/emails", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${provider.apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      from: provider.from,
      to,
      subject: `Sign in to ${host}`,
      html: html({ url, host, theme }),
      text: text({ url, host }),
    }),
  })

  if (!res.ok)
    throw new Error("Postmark error: " + JSON.stringify(await res.json()))
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: { url: string; host: string }) {
  return `Sign in to ${host}\n${url}\n\n`
}
```

<Callout type="info">
  If you want to generate great looking emails with React that are compatible
  with many email clients, check out [mjml](https://mjml.io) or
  [react-email](https://react.email)
</Callout>

### Verification Tokens

By default, we are generating a random verification token. You can define a `generateVerificationToken` method in your provider options if you want to override it:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Postmark from "next-auth/providers/postmark"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Postmark({
      async generateVerificationToken() {
        return crypto.randomUUID()
      },
    }),
  ],
})
```

### Normalizing Email Addresses

By default, Auth.js will normalize the email address. It treats the address as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, i.e. when looking up users by e-mail from databases.) and also removes any secondary email address that may have been passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `Postmark` provider. The following example shows the default behavior:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Postmark from "next-auth/providers/postmark"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Postmark({
      normalizeIdentifier(identifier: string): string {
        // Get the first two elements only,
        // separated by `@` from user input.
        let [local, domain] = identifier.toLowerCase().trim().split("@")
        // The part before "@" can contain a ","
        // but we remove it on the domain part
        domain = domain.split(",")[0]
        return `${local}@${domain}`

        // You can also throw an error, which will redirect the user
        // to the sign-in page with error=EmailSignin in the URL
        // if (identifier.split("@").length > 2) {
        //   throw new Error("Only one email allowed")
        // }
      },
    }),
  ],
})
```

<Callout type="warning">
  Always make sure this returns a single e-mail address, even if multiple ones
  were passed in.
</Callout>

================
File: docs/pages/getting-started/providers/reddit.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/reddit.svg" height="64" width="64" />

# Reddit Provider

## Resources

- [Reddit API documentation](https://www.reddit.com/dev/api/)
- [Reddit app console](https://www.reddit.com/prefs/apps/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/reddit
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/reddit
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/reddit
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_REDDIT_ID
AUTH_REDDIT_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Reddit from "next-auth/providers/reddit"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Reddit],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Reddit from "@auth/qwik/providers/reddit"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Reddit],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Reddit from "@auth/sveltekit/providers/reddit"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Reddit],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Reddit from "@auth/express/providers/reddit"

app.use("/auth/*", ExpressAuth({ providers: [Reddit] }))
```

  </Code.Express>
</Code>

### Notes

- Reddit requires authorization every time you go through their page.
- Allows one callback URL per Client ID / Client Secret.
- This Provider template only has a one hour access token to it and only has the "identity" scope. If you want to get a refresh token as well you must set these authorization params:

```ts filename="./auth.ts"
export const { handlers, auth, signin, signout } = NextAuth({
  providers: [
    RedditProvider({
      clientId: process.env.REDDIT_CLIENT_ID,
      clientSecret: process.env.REDDIT_CLIENT_SECRET,
      authorization: {
        params: {
          duration: "permanent",
        },
      },
    }),
  ],
})
```

================
File: docs/pages/getting-started/providers/resend.mdx
================
import { Callout, Tabs } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/resend.svg"
  className="dark:bg-[currentColor]"
  height="64"
  width="96"
/>

# Resend Provider

## Overview

The Resend provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Resend provider can be used in conjunction with (or instead of) one or more OAuth providers.

### How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Resend provider can be used with both JSON Web Token and database managed
  sessions, however **you must configure a database** to use it. It is not
  possible to enable email sign in without using a database.
</Callout>

## Configuration

1. First, you'll need to [add your domain](https://resend.com/domains) to your Resend account. This is required by Resend and this domain of the address you use in the `from` provider option.

2. Next, you will have to generate an API key in the [Resend Dashboard](https://resend.com/api-keys). You can save this API key as the `AUTH_RESEND_KEY` environment variable.

```sh
AUTH_RESEND_KEY=abc
```

If you name your environment variable `AUTH_RESEND_KEY`, the provider will pick it up automatically and your Auth.js configuration object can be simpler. If you'd like to rename it to something else, however, you'll have to manually pass it into the provider in your Auth.js configuration.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    Resend({
      // If your environment variable is named differently than default
      apiKey: AUTH_RESEND_KEY,
      from: "no-reply@company.com"
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Resend from "@auth/qwik/providers/resend"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Resend({
        // If your environment variable is named differently than default
        apiKey: import.meta.env.AUTH_RESEND_KEY,
        from: "no-reply@company.com",
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Resend from "@auth/sveltekit/providers/resend"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    Resend({
      // If your environment variable is named differently than default
      apiKey: env.AUTH_RESEND_KEY,
      from: "no-reply@company.com",
    }),
  ],
})
```

</Code.Svelte>
</Code>

4. Do not forget to setup one of the [database adapters](https://authjs.dev/getting-started/database) for storing the Email verification token.

5. You can now start the sign-in process with an email address at `/api/auth/signin`.

A user account (i.e. an entry in the `Users` table) will not be created for the user until the first time they verify their email address. If an email address is already associated with an account, the user will be signed in to that account when they click the link in magic link email and use up the verification token.

## Customization

### Email Body

You can fully customize the sign in email that is sent by passing a custom function as the `sendVerificationRequest` option to `Resend()`.

```js {7} filename="./auth.ts"
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Resend({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
      sendVerificationRequest({
        identifier: email,
        url,
        provider: { server, from },
      }) {
        // your function
      },
    }),
  ],
})
```

As an example, the following shows the source for our built-in `sendVerificationRequest()` method. Notice that we're rendering the HTML (`html()`) and making the network call (`fetch()`) to Resend to actually do the sending here in this method.

```ts filename="./lib/authSendRequest.ts" {4, 14}
export async function sendVerificationRequest(params) {
  const { identifier: to, provider, url, theme } = params
  const { host } = new URL(url)
  const res = await fetch("https://api.resend.com/emails", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${provider.apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      from: provider.from,
      to,
      subject: `Sign in to ${host}`,
      html: html({ url, host, theme }),
      text: text({ url, host }),
    }),
  })

  if (!res.ok)
    throw new Error("Resend error: " + JSON.stringify(await res.json()))
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: { url: string; host: string }) {
  return `Sign in to ${host}\n${url}\n\n`
}
```

<Callout type="info">
  If you want to generate great looking emails with React that are compatible
  with many email clients, check out [mjml](https://mjml.io) or
  [react-email](https://react.email)
</Callout>

### Verification Tokens

By default, we are generating a random verification token. You can define a `generateVerificationToken` method in your provider options if you want to override it:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Resend({
      async generateVerificationToken() {
        return crypto.randomUUID()
      },
    }),
  ],
})
```

### Normalizing Email Addresses

By default, Auth.js will normalize the email address. It treats the address as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, i.e. when looking up users by e-mail from databases.) and also removes any secondary email address that may have been passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `Resend` provider. The following example shows the default behavior:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Resend({
      normalizeIdentifier(identifier: string): string {
        // Get the first two elements only,
        // separated by `@` from user input.
        let [local, domain] = identifier.toLowerCase().trim().split("@")
        // The part before "@" can contain a ","
        // but we remove it on the domain part
        domain = domain.split(",")[0]
        return `${local}@${domain}`

        // You can also throw an error, which will redirect the user
        // to the sign-in page with error=EmailSignin in the URL
        // if (identifier.split("@").length > 2) {
        //   throw new Error("Only one email allowed")
        // }
      },
    }),
  ],
})
```

<Callout type="warning">
  Always make sure this returns a single e-mail address, even if multiple ones
  were passed in.
</Callout>

================
File: docs/pages/getting-started/providers/sailpoint.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/sailpoint.svg" height="64" width="64" />

# SailPoint ISC Provider

SailPoint Identity Secure Cloud (ISC) is an enterprise SaaS platform for identity and security. In order to use this OAuth integration, you will need an ISC tenant. If you're a SailPoint customer or partner, please talk to your SailPoint account manager for more details. If you are a developer, check out the [SailPoint Developer Community](https://developer.sailpoint.com/discuss/).

<Callout>
  This provider is not shipped with any of the Auth.js packages because it is an
  enterprise provider for which we cannot obtain a tenant to test and ensure
  compatibility. That being said, we'd like to make providers like these
  available to our users, so we will share a copy and paste version of the
  provider on respective docs pages like this. The provider configuration below
  is provided as-is and has been submitted by a community member with access to
  a SailPoint tenant.
</Callout>

## Resources

- [SailPoint Identity Secure Cloud Authentication](https://developer.sailpoint.com/docs/api/authentication#choose-authorization-grant-flow)
- [Managing API Keys and Personal Access Tokens](https://documentation.sailpoint.com/saas/help/common/api_keys.html?h=oauth+client#creating-an-api-key)
- [SailPoint Developer Community](https://developer.sailpoint.com/discuss/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/sailpoint
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/sailpoint
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/sailpoint
```

  </Code.Svelte>
  <Code.Express>

```bash
https://example.com/auth/callback/sailpoint
```

  </Code.Express>
</Code>

### Create OAuth Client

First, you'll need to create a client in your SailPoint admin console in order to get your `clientId` and `clientSecret`. You can follow this [guide](https://documentation.sailpoint.com/saas/help/common/api_keys.html?h=oauth+client#creating-an-api-key), or follow the main steps below.

1. Create an OAuth Client () with grant types: `AUTHORIZATION_TOKEN` and `REFRESH_TOKEN`.
2. Set the redirect URL to match your callback URL, based on the example above.
3. Finally, select the scopes `sp:scope:all`.
4. Click "**Create**" and note down the generated `clientId` and `clientSecret`.

### Environment Variables

```sh
AUTH_SAILPOINT_ID=
AUTH_SAILPOINT_SECRET=
AUTH_SAILPOINT_BASE_URL=https://{tenant}.identitynow.com
AUTH_SAILPOINT_BASE_API_URL=https://{tenant}.api.identitynow.com
```

### Configuration

Unlike other Auth.js providers, this cannot be imported from the package (see the note at the top of this page for more details). However, you can copy and paste the following object into your `providers` array to enable this provider.

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    {
      id: "sailpoint",
      name: "SailPoint",
      type: "oauth",
      clientId: process.env.AUTH_SAILPOINT_ID!,
      clientSecret: process.env.AUTH_SAILPOINT_SECRET!,
      authorization: {
        url: `${process.env.AUTH_SAILPOINT_BASE_URL!}/oauth/authorize`,
        params: { scope: "sp:scopes:all" },
      },
      token: `${process.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/token`,
      userinfo: `${process.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/userinfo`,
      profile(profile) {
        return {
          id: profile.id,
          email: profile.email,
          name: profile.uid,
          image: null,
        }
      },
      style: { brandColor: "#011E69", logo: "sailpoint.svg" },
    },
  ],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      {
        id: "sailpoint",
        name: "SailPoint",
        type: "oauth",
        clientId: import.meta.env.AUTH_SAILPOINT_ID!,
        clientSecret: import.meta.env.AUTH_SAILPOINT_SECRET!,
        authorization: {
          url: `${import.meta.env.AUTH_SAILPOINT_BASE_URL!}/oauth/authorize`,
          params: { scope: "sp:scopes:all" },
        },
        token: `${import.meta.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/token`,
        userinfo: `${import.meta.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/userinfo`,
        profile(profile) {
          return {
            id: profile.id,
            email: profile.email,
            name: profile.uid,
            image: null,
          }
        },
        style: { brandColor: "#011E69", logo: "sailpoint.svg" },
      },
    ],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [
    {
      id: "sailpoint",
      name: "SailPoint",
      type: "oauth",
      clientId: env.AUTH_SAILPOINT_ID!,
      clientSecret: env.AUTH_SAILPOINT_SECRET!,
      authorization: {
        url: `${env.AUTH_SAILPOINT_BASE_URL!}/oauth/authorize`,
        params: { scope: "sp:scopes:all" },
      },
      token: `${env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/token`,
      userinfo: `${env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/userinfo`,
      profile(profile) {
        return {
          id: profile.id,
          email: profile.email,
          name: profile.uid,
          image: null,
        }
      },
      style: { brandColor: "#011E69", logo: "sailpoint.svg" },
    },
  ],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"

app.use(
  "/auth/*",
  ExpressAuth({
    providers: [
      {
        id: "sailpoint",
        name: "SailPoint",
        type: "oauth",
        clientId: process.env.AUTH_SAILPOINT_ID!,
        clientSecret: process.env.AUTH_SAILPOINT_SECRET!,
        authorization: {
          url: `${process.env.AUTH_SAILPOINT_BASE_URL!}/oauth/authorize`,
          params: { scope: "sp:scopes:all" },
        },
        token: `${process.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/token`,
        userinfo: `${process.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/userinfo`,
        profile(profile) {
          return {
            id: profile.id,
            email: profile.email,
            name: profile.uid,
            image: null,
          }
        },
        style: { brandColor: "#011E69", logo: "sailpoint.svg" },
      },
    ],
  })
)
```

  </Code.Express>
</Code>

### Profile

The SailPoint `userprofile` endpoint will return more fields, but by default the [User table](/getting-started/database#models) only supports `id`, `name`, `email`, and `image`. Therefore, if you'd like to use any of the following fields and you're using a database adapter with Auth.js, make sure you modify the `User` table schema in whichever adapter and database you're using. Then you can additionally return any of these fields from the `profile` callback above.

The available fields from the SailPoint `userprofile` endpoint response include the following.

```ts
type SailPointProfile = {
  tenant: string
  id: string
  uid: string
  email: string
  phone: string
  workPhone: string
  firstname: string
  lastname: string
  capabilities: string
  displayName: string
  name: string
}
```

================
File: docs/pages/getting-started/providers/salesforce.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/salesforce.svg" height="64" width="64" />

# Salesforce Provider

## Resources

- [Salesforce OAuth documentation](https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm&type=5)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/salesforce
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/salesforce
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/salesforce
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_SALESFORCE_ID
AUTH_SALESFORCE_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Salesforce from "next-auth/providers/salesforce"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Salesforce],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Salesforce from "@auth/qwik/providers/salesforce"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Salesforce],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Salesforce from "@auth/sveltekit/providers/salesforce"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Salesforce],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Salesforce from "@auth/express/providers/salesforce"

app.use("/auth/*", ExpressAuth({ providers: [Salesforce] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/sendgrid.mdx
================
import { Callout, Tabs } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/sendgrid.svg" height="64" width="96" />

# Sendgrid Provider

## Overview

The Sendgrid provider uses email to send "magic links" that contain URLs with verification tokens can be used to sign in.

Adding support for signing in via email in addition to one or more OAuth services provides a way for users to sign in if they lose access to their OAuth account (e.g. if it is locked or deleted).

The Sendgrid provider can be used in conjunction with (or instead of) one or more OAuth providers.

### How it works

On initial sign in, a **Verification Token** is sent to the email address provided. By default this token is valid for 24 hours. If the Verification Token is used within that time (i.e. by clicking on the link in the email) an account is created for the user and they are signed in.

If someone provides the email address of an _existing account_ when signing in, an email is sent and they are signed into the account associated with that email address when they follow the link in the email.

<Callout type="warning">
  The Sendgrid provider can be used with both JSON Web Token and database
  managed sessions, however **you must configure a database** to use it. It is
  not possible to enable email sign in without using a database.
</Callout>

## Configuration

1. First, you'll need to [add your domain](https://sendgrid.com/domains) to your Sendgrid account. This is required by Sendgrid and this domain of the address you use in the `from` provider option.

2. Next, you will have to generate an API key in the [Sendgrid Dashboard](https://sendgrid.com/api-keys). You can save this API key as the `AUTH_SENDGRID_KEY` environment variable.

```sh
AUTH_SENDGRID_KEY=abc
```

If you name your environment variable `AUTH_SENDGRID_KEY`, the provider will pick it up automatically and your Auth.js configuration object can be simpler. If you'd like to rename it to something else, however, you'll have to manually pass it into the provider in your Auth.js configuration.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Sendgrid from "next-auth/providers/sendgrid"

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: ...,
  providers: [
    Sendgrid({
      // If your environment variable is named differently than default
      apiKey: COMPANY_AUTH_SENDGRID_API_KEY,
      from: "no-reply@company.com"
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Sendgrid from "@auth/qwik/providers/sendgrid"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Sendgrid({
        // If your environment variable is named differently than default
        apiKey: import.meta.env.COMPANY_AUTH_SENDGRID_API_KEY,
        from: "no-reply@company.com",
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Sendgrid from "@auth/sveltekit/providers/sendgrid"
import { env } from "$env/dynamic/prviate"

export const { handle, signIn, signOut } = SvelteKitAuth({
  adapter: ...,
  providers: [
    Sendgrid({
      // If your environment variable is named differently than default
      apiKey: env.COMPANY_AUTH_SENDGRID_API_KEY,
      from: "no-reply@company.com",
    }),
  ],
})
```

</Code.Svelte>
</Code>

4. Do not forget to setup one of the [database adapters](https://authjs.dev/getting-started/database) for storing the Email verification token.

5. You can now start the sign-in process with an email address at `/api/auth/signin`.

A user account (i.e. an entry in the `Users` table) will not be created for the user until the first time they verify their email address. If an email address is already associated with an account, the user will be signed in to that account when they click the link in magic link email and use up the verification token.

## Customization

### Email Body

You can fully customize the sign in email that is sent by passing a custom function as the `sendVerificationRequest` option to `Sendgrid()`.

```js {7} filename="./auth.ts"
import NextAuth from "next-auth"
import Sendgrid from "next-auth/providers/sendgrid"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Sendgrid({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
      sendVerificationRequest({
        identifier: email,
        url,
        provider: { server, from },
      }) {
        // your function
      },
    }),
  ],
})
```

As an example, the following shows the source for our built-in `sendVerificationRequest()` method. Notice that we're rendering the HTML (`html()`) and making the network call (`fetch()`) to Sendgrid to actually do the sending here in this method.

```ts {4, 16} filename="./lib/authSendRequest.ts"
export async function sendVerificationRequest(params) {
  const { identifier: to, provider, url, theme } = params
  const { host } = new URL(url)
  const res = await fetch("https://api.sendgrid.com/v3/mail/send", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${provider.apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      personalizations: [{ to: [{ email: to }] }],
      from: { email: provider.from },
      subject: `Sign in to ${host}`,
      content: [
        { type: "text/plain", value: text({ url, host }) },
        { type: "text/html", value: html({ url, host, theme }) },
      ],
    }),
  })

  if (!res.ok) throw new Error("Sendgrid error: " + (await res.text()))
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: { url: string; host: string }) {
  return `Sign in to ${host}\n${url}\n\n`
}
```

<Callout type="info">
  If you want to generate great looking emails with React that are compatible
  with many email clients, check out [mjml](https://mjml.io) or
  [react-email](https://react.email)
</Callout>

### Verification Tokens

By default, we are generating a random verification token. You can define a `generateVerificationToken` method in your provider options if you want to override it:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Sendgrid from "next-auth/providers/sendgrid"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Sendgrid({
      async generateVerificationToken() {
        return crypto.randomUUID()
      },
    }),
  ],
})
```

### Normalizing Email Addresses

By default, Auth.js will normalize the email address. It treats the address as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, i.e. when looking up users by e-mail from databases.) and also removes any secondary email address that may have been passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `Sendgrid` provider. The following example shows the default behavior:

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Sendgrid from "next-auth/providers/sendgrid"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [
    Sendgrid({
      normalizeIdentifier(identifier: string): string {
        // Get the first two elements only,
        // separated by `@` from user input.
        let [local, domain] = identifier.toLowerCase().trim().split("@")
        // The part before "@" can contain a ","
        // but we remove it on the domain part
        domain = domain.split(",")[0]
        return `${local}@${domain}`

        // You can also throw an error, which will redirect the user
        // to the sign-in page with error=EmailSignin in the URL
        // if (identifier.split("@").length > 2) {
        //   throw new Error("Only one email allowed")
        // }
      },
    }),
  ],
})
```

<Callout type="warning">
  Always make sure this returns a single e-mail address, even if multiple ones
  were passed in.
</Callout>

================
File: docs/pages/getting-started/providers/simplelogin.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/simplelogin.svg"
  height="64"
  width="64"
/>

# SimpleLogin Provider

## Resources

- [Sign in with SimpleLogin](https://simplelogin.io/developer/)
- [SimpleLogin OAuth documentation](https://simplelogin.io/docs/siwsl/intro/)
- [SimpleLogin OAuth Configuration](https://app.simplelogin.io/developer)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/simplelogin
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/simplelogin
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/simplelogin
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_SIMPLELOGIN_ID
AUTH_SIMPLELOGIN_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="@/auth.ts"
import NextAuth from "next-auth"
import SimpleLogin from "next-auth/providers/simplelogin"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [SimpleLogin],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import SimpleLogin from "@auth/qwik/providers/simplelogin"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [SimpleLogin],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import SimpleLogin from "@auth/sveltekit/providers/simplelogin"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [SimpleLogin],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import SimpleLogin from "@auth/express/providers/simplelogin"

app.use("/auth/*", ExpressAuth({ providers: [SimpleLogin] }))
```

  </Code.Express>
</Code>

## Notes

### Authorized Redirect URIs

The "Authorized redirect URIs" used must include your full domain and end in the callback path. By default, SimpleLogin whitelists all `http[s]://localhost:*` address to facilitate local development. For example;

- For production: `https://{YOUR_DOMAIN}/api/auth/callback/simplelogin`
- For development: By default **localhost** is whitelisted.

**Authorized Redirect URIs** must be **HTTPS** for security reason (except for `localhost`).

================
File: docs/pages/getting-started/providers/slack.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/slack.svg" height="64" width="64" />

# Slack Provider

## Resources

- [Slack Authentication documentation](https://api.slack.com/authentication)
- [Sign-in with Slack](https://api.slack.com/docs/sign-in-with-slack)
- [Slack app console](https://api.slack.com/apps)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/slack
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/slack
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/slack
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_SLACK_ID
AUTH_SLACK_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Slack from "next-auth/providers/slack"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Slack],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Slack from "@auth/qwik/providers/slack"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Slack],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Slack from "@auth/sveltekit/providers/slack"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Slack],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Slack from "@auth/express/providers/slack"

app.use("/auth/*", ExpressAuth({ providers: [Slack] }))
```

  </Code.Express>
</Code>

### Notes

- Slack requires that the redirect URL of your app uses https, even for local development. An easy workaround for this is using a service like [ngrok](https://ngrok.com/) that creates a secure tunnel to your app, using https. Remember to set the url as `AUTH_URL` as well.

================
File: docs/pages/getting-started/providers/spotify.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/spotify.svg" height="64" width="64" />

# Spotify Provider

## Resources

- [Spotify OAuth documentation](https://developer.spotify.com/documentation/general/guides/authorization-guide)
- [Spotify app console](https://developer.spotify.com/dashboard/applications)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/spotify
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/spotify
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/spotify
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_SPOTIFY_ID
AUTH_SPOTIFY_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Spotify from "next-auth/providers/spotify"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Spotify],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Spotify from "@auth/qwik/providers/spotify"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Spotify],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Spotify from "@auth/sveltekit/providers/spotify"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Spotify],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Spotify from "@auth/express/providers/spotify"

app.use("/auth/*", ExpressAuth({ providers: [Spotify] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/strava.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/strava.svg" height="64" width="64" />

# Strava Provider

## Resources

- [Strava API documentation](http://developers.strava.com/docs/reference/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/strava
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/strava
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/strava
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_STRAVA_ID
AUTH_STRAVA_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Strava from "next-auth/providers/strava"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Strava],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Strava from "@auth/qwik/providers/strava"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Strava],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Strava from "@auth/sveltekit/providers/strava"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Strava],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Strava from "@auth/express/providers/strava"

app.use("/auth/*", ExpressAuth({ providers: [Strava] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/threads.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/threads.svg" height="64" width="64" />

# Threads Provider

## Resources

- [Threads OAuth documentation](https://developers.facebook.com/docs/threads)
- [Threads OAuth apps](https://developers.facebook.com/apps/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/threads
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/threads
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/threads
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_THREADS_ID
AUTH_THREADS_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Threads from "next-auth/providers/threads"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Threads],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Threads from "@auth/qwik/providers/threads"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Threads],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Threads from "@auth/sveltekit/providers/threads"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Threads],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Threads from "@auth/express/providers/threads"

app.use("/auth/*", ExpressAuth({ providers: [Threads] }))
```

  </Code.Express>
</Code>

### Notes

- Email address is not returned by the Threads API.
- Threads requires a callback URL to be configured in your Facebook app and Facebook requires you to use **https** even for localhost. In order to do that, you either need to [add an SSL to your localhost](https://www.freecodecamp.org/news/how-to-get-https-working-on-your-local-development-environment-in-5-minutes-7af615770eec/) or use a proxy such as [ngrok](https://ngrok.com/docs).

================
File: docs/pages/getting-started/providers/tiktok.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/tiktok.svg" height="64" width="64" />

# TikTok Provider

## Resources

- [TikTok app console](https://developers.tiktok.com/)
- [TikTok login kit documentation](https://developers.tiktok.com/doc/login-kit-web/)
- [Avaliable Scopes](https://developers.tiktok.com/doc/tiktok-api-scopes/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/tiktok
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/tiktok
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/tiktok
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_TIKTOK_ID
AUTH_TIKTOK_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import TikTok from "next-auth/providers/tiktok"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [TikTok],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import TikTok from "@auth/qwik/providers/tiktok"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [TikTok],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import TikTok from "@auth/sveltekit/providers/tiktok"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [TikTok],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import TikTok from "@auth/express/providers/tiktok"

app.use("/auth/*", ExpressAuth({ providers: [TikTok] }))
```

  </Code.Express>
</Code>

### Notes

- Production applications cannot use localhost URLs to sign in with TikTok. You need add the domain and Callback/Redirect url's to your TikTok app and have them review and approved by the TikTok Team.
- Email address is not supported by TikTok.
- Client_ID will be the Client Key in the TikTok Application

================
File: docs/pages/getting-started/providers/todoist.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/todoist.svg" height="64" width="64" />

# Todoist Provider

## Resources

- [Todoist OAuth documentation](https://developer.todoist.com/guides/#oauth)
- [Todoist configuration](https://developer.todoist.com/appconsole.html)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/todoist
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/todoist
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/todoist
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_TODOIST_ID
AUTH_TODOIST_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Todoist from "next-auth/providers/todoist"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Todoist],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Todoist from "@auth/qwik/providers/todoist"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Todoist],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Todoist from "@auth/sveltekit/providers/todoist"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Todoist],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Todoist from "@auth/express/providers/todoist"

app.use("/auth/*", ExpressAuth({ providers: [Todoist] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/trakt.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/trakt.svg" height="64" width="64" />

# Trakt Provider

## Resources

- [Trakt OAuth documentation](https://trakt.docs.apiary.io/#reference/authentication-oauth)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/trakt
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/trakt
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/trakt
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_TRAKT_ID
AUTH_TRAKT_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Trakt from "next-auth/providers/trakt"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Trakt],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Trakt from "@auth/qwik/providers/trakt"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Trakt],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Trakt from "@auth/sveltekit/providers/trakt"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Trakt],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Trakt from "@auth/express/providers/trakt"

app.use("/auth/*", ExpressAuth({ providers: [Trakt] }))
```

  </Code.Express>
</Code>

### Notes

- If you're using the api in production by calling `api.trakt.tv`. Follow the example. If you wish to develop on Trakt's sandbox environment by calling `api-staging.trakt.tv`, change the URLs.
- Trakt does not allow hotlinking images. Even the authenticated user's profie picture.
- Trakt does not supply the authenticated user's email.

================
File: docs/pages/getting-started/providers/twitch.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/twitch.svg" height="64" width="64" />

# Twitch Provider

## Resources

- [Twitch App Console](https://dev.twitch.tv/console/apps)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/twitch
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/twitch
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/twitch
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_TWITCH_ID
AUTH_TWITCH_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Twitch from "next-auth/providers/twitch"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Twitch],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Twitch from "@auth/qwik/providers/twitch"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Twitch],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Twitch from "@auth/sveltekit/providers/twitch"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Twitch],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Twitch from "@auth/express/providers/twitch"

app.use("/auth/*", ExpressAuth({ providers: [Twitch] }))
```

  </Code.Express>
</Code>

### Notes

- Twitch will redirect to the first redirect URI if multiple are added.

================
File: docs/pages/getting-started/providers/twitter.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/twitter.svg" height="64" width="64" />

# Twitter/X Provider

## Resources

- [Twitter App documentation](https://developer.twitter.com/en/apps)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/twitter
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/twitter
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/twitter
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_TWITTER_ID
AUTH_TWITTER_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Twitter from "next-auth/providers/twitter"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Twitter],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Twitter from "@auth/qwik/providers/twitter"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Twitter],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Twitter from "@auth/sveltekit/providers/twitter"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Twitter],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Twitter from "@auth/express/providers/twitter"

app.use("/auth/*", ExpressAuth({ providers: [Twitter] }))
```

  </Code.Express>
</Code>

### Notes

- Auth.js now uses Twitter/X OAuth 2.0 by default. There's no need to set `version` anymore.
- Email is currently not supported by Twitter/X OAuth 2.0.

================
File: docs/pages/getting-started/providers/united-effects.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/united-effects.svg"
  height="64"
  width="64"
/>

# United Effects Provider

## Resources

- [UnitedEffects Auth.js documentation](https://docs.unitedeffects.com/integrations/nextauthjs)",

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/united-effects
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/united-effects
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/united-effects
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_UNITEDEFFECTS_ID
AUTH_UNITEDEFFECTS_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import UnitedEffects from "next-auth/providers/united-effects"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [UnitedEffects],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import UnitedEffects from "@auth/qwik/providers/united-effects"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [UnitedEffects],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import UnitedEffects from "@auth/sveltekit/providers/united-effects"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [UnitedEffects],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import UnitedEffects from "@auth/express/providers/united-effects"

app.use("/auth/*", ExpressAuth({ providers: [UnitedEffects] }))
```

  </Code.Express>
</Code>

### Notes

- `issuer` should be the fully qualified URL including your Auth Group ID – e.g. `https://auth.unitedeffects.com/YQpbQV5dbW-224dCovz-3`

================
File: docs/pages/getting-started/providers/vipps-mobilepay.mdx
================
---
title: Vipps MobilePay
---

import { Code } from "@/components/Code"

<img
  align="right"
  src="/img/providers/vipps-mobilepay.svg"
  width="116"
  height="50"
/>

# Vipps MobilePay Provider

[Vipps MobilePay](https://vippsmobilepay.com/) is a widespread mobile payment application for mobile in Norway, Sweden, Denmark and Finland. The brand is split, where you have Vipps in Norway and Sweden, and MobilePay in Denmark and Finland, but both brands/apps are using the same API.

## Resources

- [Vipps MobilePay login documentation](https://developer.vippsmobilepay.com/docs/APIs/login-api/)
- [Official Vipps MobilePay Buttons](https://developer.vippsmobilepay.com/docs/knowledge-base/design-guidelines/buttons/)
- [Vipps MobilePay Public Testing discovery endpoint](https://apitest.vipps.no/access-management-1.0/access/.well-known/openid-configuration)
- [Vipps MobilePay Public Production discovery endpoint](https://api.vipps.no/access-management-1.0/access/.well-known/openid-configuration)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/vipps
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/vipps
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/vipps
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_VIPPS_ID
AUTH_VIPPS_SECRET
```

### Test API

To use the test mode, you need to override the issuer with the test API endpoint.

```
Vipps({ issuer: "https://apitest.vipps.no/access-management-1.0/access/" })
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Vipps from "next-auth/providers/vipps"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Vipps],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Vipps from "@auth/qwik/providers/vipps"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Vipps],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Vipps from "@auth/sveltekit/providers/vipps"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Vipps],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Vipps from "@auth/express/providers/vipps"

app.use("/auth/*", ExpressAuth({ providers: [Vipps] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/vk.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/vk.svg" width="64" height="64" />

# VK Provider

## Resources

- [VK API documentation](https://vk.com/dev/first_guide)
- [VK App configuration](https://vk.com/apps?act=manage)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/vk
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/vk
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/vk
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_VK_ID
AUTH_VK_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Vk from "next-auth/providers/vk"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Vk],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Vk from "@auth/qwik/providers/vk"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Vk],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Vk from "@auth/sveltekit/providers/vk"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Vk],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Vk from "@auth/express/providers/vk"

app.use("/auth/*", ExpressAuth({ providers: [Vk] }))
```

  </Code.Express>
</Code>

### Notes

- By default the provider uses 5.126 version of the API. See https://vk.com/dev/versions for more info. If you want to use a different version, you can pass it to provider's options object:

```ts filename="./auth.ts"
const apiVersion = "5.126"

export const { handlers, auth, signin, signout } = NextAuth({
  providers: [
    Vk({
      accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
      requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
      authorizationUrl: `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,
      profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,
    }),
  ],
})
```

================
File: docs/pages/getting-started/providers/webex.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/webex.svg" height="64" width="64" />

# Webex Provider

## Resources

- [Webex OAuth 2.0 Integration Guide](https://developer.webex.com/docs/integrations)
- [Login with Webex](https://developer.webex.com/docs/login-with-webex)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/webex
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/webex
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/webex
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_WEBEX_ID
AUTH_WEBEX_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Webex from "next-auth/providers/webex"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Webex],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Webex from "@auth/qwik/providers/webex"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Webex],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Webex from "@auth/sveltekit/providers/webex"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Webex],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Webex from "@auth/express/providers/webex"

app.use("/auth/*", ExpressAuth({ providers: [Webex] }))
```

  </Code.Express>
</Code>

### Notes

- The returned user profile from Webex when using the profile callback. Please refer to [People - Get My Own Details](https://developer.webex.com/docs/api/v1/people/get-my-own-details) on Webex Developer portal for additional fields. Returned fields may vary depending on the user's role, the OAuth integration's scope, and the organization the OAuth integration belongs to.

================
File: docs/pages/getting-started/providers/wikimedia.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/wikimedia.svg" height="64" width="64" />

# Wikimedia Provider

## Resources

- [Wikimedia OAuth documentation](https://www.mediawiki.org/wiki/Extension:OAuth)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/wikimedia
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/wikimedia
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/wikimedia
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_WIKIMEDIA_ID
AUTH_WIKIMEDIA_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Wikimedia from "next-auth/providers/wikimedia"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Wikimedia],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Wikimedia from "@auth/qwik/providers/wikimedia"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Wikimedia],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Wikimedia from "@auth/sveltekit/providers/wikimedia"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Wikimedia],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Wikimedia from "@auth/express/providers/wikimedia"

app.use("/auth/*", ExpressAuth({ providers: [Wikimedia] }))
```

  </Code.Express>
</Code>

- Go to and accept the Consumer Registration doc: https://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration
- Request a new OAuth 2.0 consumer to get the `clientId` and `clientSecret`: https://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration/propose/oauth2
  - Add the following redirect URL into the console: `http://<your-next-app-url>/api/auth/callback/wikimedia`
  - Do not check the box next to This consumer is only for **your username**
  - Unless you explicitly need a larger scope, feel free to select the radio button labelled User identity verification only - no ability to read pages or act on the users behalf.

After registration, you can initially test your application only with your own Wikimedia account.
You may have to wait several days for the application to be approved for it to be used by everyone.

### Notes

This provider also supports all Wikimedia projects:

- Wikipedia
- Wikidata
- Wikibooks
- Wiktionary
- etc..

Please be aware that Wikimedia accounts do not have to have an associated email address. So you may want to add check if the user has an email address before allowing them to login.

================
File: docs/pages/getting-started/providers/wordpress.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/wordpress.svg" height="64" width="64" />

# WordPress Provider

## Resources

- [WordPress OAuth documentation](https://developer.wordpress.com/docs/oauth2/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/wordpress
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/wordpress
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/wordpress
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_WORDPRESS_ID
AUTH_WORDPRESS_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import WordPress from "next-auth/providers/wordpress"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [WordPress],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import WordPress from "@auth/qwik/providers/wordpress"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [WordPress],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import WordPress from "@auth/sveltekit/providers/wordpress"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [WordPress],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import WordPress from "@auth/express/providers/wordpress"

app.use("/auth/*", ExpressAuth({ providers: [WordPress] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/workos.mdx
================
---
title: WorkOS
---

import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/workos.svg" height="64" width="64" />

# WorkOS Provider

## Resources

- [WorkOS SSO OAuth documentation](https://workos.com/docs/reference/sso)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/workos
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/workos
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/workos
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_WORKOS_ID
AUTH_WORKOS_SECRET
```

WorkOS also requires you to pass in your `connection` ID to the provider.

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import WorkOS from "next-auth/providers/workos"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [WorkOS({ connection: "conn_abc123" })],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import WorkOS from "@auth/qwik/providers/workos"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [WorkOS({ connection: "conn_abc123" })],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import WorkOS from "@auth/sveltekit/providers/workos"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [WorkOS({ connection: "conn_abc123" })],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import WorkOS from "@auth/express/providers/workos"

app.use(
  "/auth/*",
  ExpressAuth({ providers: [WorkOS({ connection: "conn_abc123" })] })
)
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/yandex.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/yandex.svg" height="64" width="64" />

# Yandex Provider

## Resources

- [Yandex - Creating an OAuth app](https://yandex.com/dev/id/doc/en/register-client#create)
- [Yandex - Manage OAuth apps](https://oauth.yandex.com/)
- [Yandex - OAuth documentation](https://yandex.com/dev/id/doc/en/)
- [Learn more about OAuth](https://authjs.dev/concepts/oauth)
- [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/yandex.ts)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/yandex
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/yandex
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/yandex
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_YANDEX_ID
AUTH_YANDEX_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Yandex from "next-auth/providers/yandex"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Yandex],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Yandex from "@auth/qwik/providers/yandex"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Yandex],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Yandex from "@auth/sveltekit/providers/yandex"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Yandex],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Yandex from "@auth/express/providers/yandex"

app.use("/auth/*", ExpressAuth({ providers: [Yandex] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/zitadel.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/zitadel.svg" height="64" width="64" />

# Zitadel Provider

## Resources

- [ZITADEL OpenID Endpoints](https://zitadel.com/docs/apis/openidoauth/endpoints)
- [ZITADEL recommended OAuth Flows](https://zitadel.com/docs/guides/integrate/oauth-recommended-flows)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/zitadel
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/zitadel
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/zitadel
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_ZITADEL_ID
AUTH_ZITADEL_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Zitadel from "next-auth/providers/zitadel"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Zitadel],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Zitadel from "@auth/qwik/providers/zitadel"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Zitadel],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Zitadel from "@auth/sveltekit/providers/zitadel"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Zitadel],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Zitadel from "@auth/express/providers/zitadel"

app.use("/auth/*", ExpressAuth({ providers: [Zitadel] }))
```

  </Code.Express>
</Code>

### Notes

The Redirect URIs used when creating the credentials must include your full domain and end in the callback path. For example:

- For production: `https://{YOUR_DOMAIN}/api/auth/callback/zitadel`
- For development: `http://localhost:3000/api/auth/callback/zitadel`

Make sure to enable dev mode in ZITADEL console to allow redirects for local development.

ZITADEL also returns a email_verified boolean property in the profile. You can use this property to restrict access to people with verified accounts.

```ts filename=pages/api/auth/[...nextauth].js
const options = {
  ...
  callbacks: {
    async signIn({ account, profile }) {
      if (account.provider === "zitadel") {
        return profile.email_verified;
      }
      return true; // Do different verification for other providers that don't have `email_verified`
    },
  }
  ...
}
```

================
File: docs/pages/getting-started/providers/zoho.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/zoho.svg" height="64" width="64" />

# Zoho Provider

## Resources

- [Zoho OAuth 2.0 Integration Guide](https://www.zoho.com/accounts/protocol/oauth/web-server-applications.html)
- [Zoho API Console](https://api-console.zoho.com)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/zoho
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/zoho
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/zoho
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_ZOHO_ID
AUTH_ZOHO_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Zoho from "next-auth/providers/zoho"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Zoho],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Zoho from "@auth/qwik/providers/zoho"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Zoho],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Zoho from "@auth/sveltekit/providers/zoho"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Zoho],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Zoho from "@auth/express/providers/zoho"

app.use("/auth/*", ExpressAuth({ providers: [Zoho] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/providers/zoom.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

<img align="right" src="/img/providers/zoom.svg" height="64" width="64" />

# Zoom Provider

## Resources

- [Zoom OAuth 2.0 Integration Guide](https://developers.zoom.us/docs/integrations/oauth/)

## Setup

### Callback URL

<Code>
  <Code.Next>

```bash
https://example.com/api/auth/callback/zoom
```

  </Code.Next>
  <Code.Qwik>

```bash
https://example.com/auth/callback/zoom
```

  </Code.Qwik>
  <Code.Svelte>

```bash
https://example.com/auth/callback/zoom
```

  </Code.Svelte>
</Code>

### Environment Variables

```
AUTH_ZOOM_ID
AUTH_ZOOM_SECRET
```

### Configuration

<Code>
  <Code.Next>

```ts filename="/auth.ts"
import NextAuth from "next-auth"
import Zoom from "next-auth/providers/zoom"

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Zoom],
})
```

  </Code.Next>
  <Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Zoom from "@auth/qwik/providers/zoom"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Zoom],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

```ts filename="/src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"
import Zoom from "@auth/sveltekit/providers/zoom"

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers: [Zoom],
})
```

  </Code.Svelte>
  <Code.Express>

```ts filename="/src/app.ts"
import { ExpressAuth } from "@auth/express"
import Zoom from "@auth/express/providers/zoom"

app.use("/auth/*", ExpressAuth({ providers: [Zoom] }))
```

  </Code.Express>
</Code>

================
File: docs/pages/getting-started/session-management/_meta.js
================


================
File: docs/pages/getting-started/session-management/custom-pages.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Custom Pages

To enable custom pages add the following to your Auth.js configuration. In the `pages` object, the key is the type of page and the value is the path/route at which the page is located. Please make sure you actually have a page at the specified route.

<Code>
<Code.Next>

```ts filename="./auth.ts" {8-10}
import { NextAuth } from "next-auth"
import GitHub from "next-auth/providers/github"

// Define your configuration in a separate variable and pass it to NextAuth()
// This way we can also 'export const config' for use later
export const config = {
  providers: [GitHub],
  pages: {
    signIn: "/login",
  },
}

export const { signIn, signOut, handle } = NextAuth(config)
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import GitHub from "@auth/qwik/providers/github"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [GitHub],
    pages: {
      signIn: "/login",
    },
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="src/auth.ts" {14-16}
import SvelteKitAuth from "@auth/sveltekit"
import GitHub from "@auth/sveltekit/providers/github"
import type { Provider } from "@auth/sveltekit/providers"

const providers: Provider[] = [GitHub]

// Export this map of provider details to use in the sign-in page later
export const providerMap = providers.map((provider) => {
  return { id: provider.id, name: provider.name }
})

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers,
  pages: {
    signIn: "/signin",
  },
})
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
<Code.Express>

```ts filename="src/routes/auth.route.ts" {12-14}
import express from "express"
import { ExpressAuth } from "@auth/express"
import GitHub from "@auth/express/providers/github"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    providers: [GitHub],
    pages: {
      signIn: "/signin",
    },
  })
)
```

</Code.Express>
</Code>

To continue setting up the custom page, checkout our [guide on custom pages](/guides/pages/signin).

================
File: docs/pages/getting-started/session-management/get-session.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Get Session

Once a user is logged in, you often want to get the session object in order to use the data in some way. A common use-case is to show their profile picture or display some other user information.

<Code>
<Code.Next>

```tsx filename="./components/UserAvatar.tsx" {4} /async/
import { auth } from "../auth"

export default async function UserAvatar() {
  const session = await auth()

  if (!session?.user) return null

  return (
    <div>
      <img src={session.user.image} alt="User Avatar" />
    </div>
  )
}
```

</Code.Next>
<Code.NextClient>

Although `next-auth` supports client-side data retrieval using `useSession` and `SessionProvider` for both the App Router and Pages Router, in real-world scenarios, these are used less frequently. Typically, you'll want to take full advantage of server-side rendering to optimize performance and security.

### App Router

```tsx filename="app/admin/dashboard.tsx"
"use client"
import { useSession } from "next-auth/react"

export default function Dashboard() {
  const { data: session } = useSession()

  if (session?.user?.role === "admin") {
    return <p>You are an admin, welcome!</p>
  }

  return <p>You are not authorized to view this page!</p>
}
```

```tsx filename="app/admin/page.tsx"
import { SessionProvider } from "next-auth/react"
import { Dashboard } from "./Dashboard"

export default function Administrator() {
  return (
    <SessionProvider>
      <Dashboard />
    </SessionProvider>
  )
}
```

### Page Server Side

In the pages router, to access a session in a component, you'll first need to get the `session` object in a page and then pass it down to the component.

```tsx filename="./pages/dashboard.tsx"
import { auth } from "@/auth.ts"
import { UserAvatar } from "@/components/UserAvatar"

export default function Dashboard({ session }) {
  return (
    <nav>
      <UserAvatar session={session} />
    </nav>
  )
}

export async function getServerSideProps(ctx) {
  const session = await auth(ctx)

  return {
    props: {
      session,
    },
  }
}
```

### Page Client Side

When accessing the session client-side using `useSession()`, make sure an Auth.js `<SessionProvider />` is
wrapping your page.

```tsx filename="pages/_app.tsx"
import type { AppProps } from "next/app"
import { SessionProvider } from "next-auth/react"

export default function MyApp({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />;
    </SessionProvider>
  )
}
```

```tsx filename="pages/dashboard.tsx"
import { useSession } from "next-auth/react"
import { UserAvatar } from "@/components/UserAvatar"

export default function Dashboard() {
  const { data: session } = useSession()

  return (
    <nav>
      <UserAvatar session={session} />
    </nav>
  )
}
```

Finally, we can use it in the component.

```tsx filename="./components/UserAvatar.tsx" /session/
import type { Session } from "next-auth"

export function UserAvatar({ session }: { session: Session | null }) {
  return (
    <div>
      <img
        src={session?.user?.image ?? "https://i.pravatar.cc/300"}
        alt="User Avatar"
      />
    </div>
  )
}
```

</Code.NextClient>
<Code.Qwik>

Under the hood Qwik is preparing automatically the session for you so you don't have to implement custom logic for that.
You can read the sesion on the server with `event.sharedMap.get("session")` and on the client with the `useSession()` action.

</Code.Qwik>
<Code.Svelte>

With SvelteKit, you have to return the `session` object from the load function in your `+page.server.ts` or `+layout.server.ts` files.

```ts filename="src/routes/+page.server.ts" {11}
import type { PageServerLoad } from "./$types"

export const load: PageServerLoad = async (events) => {
  const session = await events.locals.auth()

  if (!session?.user?.userId) {
    redirect(303, `/login`)
  }

  return {
    session,
  }
}
```

Then you can access the `session` on the `$page.data` object in your page.

```svelte filename="src/routes/+page.svelte" {7}
<script lang="ts">
  import { page } from "$app/stores"
</script>

<nav>
  <img
    src={$page.data.session?.user?.image ?? "https://i.pravatar.cc/300"}
    alt="User Avatar"
  />
</nav>
```

</Code.Svelte>
<Code.Express>

```ts filename="app.ts"
import { getSession } from "@auth/express"

export function authSession(req: Request, res: Response, next: NextFunction) {
  res.locals.session = await getSession(req)
  next()
}

app.use(authSession)

// Now in your route
app.get("/", (req, res) => {
  const { session } = res.locals
  res.render("index", { user: session?.user })
})
```

</Code.Express>
</Code>

If you'd like to extend your session with more fields from your OAuth provider, for example, please check out our ["extending the session" guide](/guides/extending-the-session).

<Callout>
  By default, GET requests to the session endpoint will automatically return the
  headers to prevent caching.
</Callout>

================
File: docs/pages/getting-started/session-management/login.mdx
================
import { Callout } from "nextra/components"
import { Screenshot } from "@/components/Screenshot"
import { Code } from "@/components/Code"

# Handling Signin and Signout

To signin your users, make sure you have at least one [authentication method](/getting-started/authentication) setup. You then need to build a button which will call the sign in function from your Auth.js framework package.

<Code>
  <Code.Next>

```tsx filename="./components/auth/signin-button.tsx"
import { signIn } from "@/auth"

export function SignIn() {
  return (
    <form
      action={async () => {
        "use server"
        await signIn()
      }}
    >
      <button type="submit">Sign in</button>
    </form>
  )
}
```

  </Code.Next>
  <Code.NextClient>

```tsx filename="./components/auth/signin-button.tsx"
"use client"
import { signIn } from "next-auth/react"

export function SignIn() {
  return <button onClick={() => signIn()}>Sign In</button>
}
```

  </Code.NextClient>
  <Code.Qwik>

With Qwik we can do a server-side sign in with Form action, or a more simple client-side login via submit method.

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { Form } from "@builder.io/qwik-city"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <>
      {/* server-side login with Form action */}
      <Form action={signInSig}>
        <input type="hidden" name="providerId" value="${providerId}" />
        <input
          type="hidden"
          name="options.redirectTo"
          value="/"
        />
        <button>Sign In</button>
      </Form>

      {/* submit method */}
      <Link
        onClick$={() => signInSig.submit({ redirectTo: "/" })}
      >
        SignIn
      </Link>
    </>
  )
})
```

  </Code.Qwik>
  <Code.Svelte>

The SvelteKit client supports two signin and signout methods, one server-side using Form Actions, and one client-side using requests and redirects.

#### Form Action (Server-Side)

To signin your users using a SvelteKit form action, we can use the `SignIn` component exported from `@auth/sveltekit/components`.

```svelte filename="src/routes/+page.svelte" {7-9}
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
</script>

<header>
  <nav>
    <SignIn>
      <span slot="submitButton">Sign In with GitHub</span>
    </SignIn>
  </nav>
</header>
```

This requires a server action at `/signin`, this path can be customized with the `signInPage` prop on the `SignIn` component.

```ts filename="src/routes/signin/+page.server.ts"
import { signIn } from "../../auth"
import type { Actions } from "./$types"

export const actions: Actions = { default: signIn }
```

#### Client Side

Client-side is a bit simpler as we just need to import a button `on:click` handler from `@auth/sveltekit/client`.

```svelte filename="src/routes/+page.svelte" {2, 8}
<script lang="ts">
  import { signIn } from "@auth/sveltekit/client"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <button on:click={signIn}>Signin</button>
  </nav>
</div>
```

Just like in other frameworks, you can also pass a provider to the `signIn` function which will attempt to login directly with that provider.

  </Code.Svelte>
  <Code.Express>

The Express package runs server-side and therefore it doesn't make sense to create a "SignIn button component". However, to signin or signout with Express, send a request to the appropriate [REST API Endpoints](/reference/core/types#authaction) from your client (i.e. `/auth/signin`, `/auth/signout`, etc.).

To sign in users with Express, you can create a route that handles the sign-in logic. Here is an example:

```ts filename="src/routes/auth.ts"
import express, { Request, Response } from "express"
import { signIn } from "../auth"
const router = express.Router()

router.post("/auth/signin", async (req: Request, res: Response) => {
  try {
    await signIn(req, res)
    res.redirect("/dashboard")
  } catch (error) {
    res.status(500).send("Sign in failed")
  }
})

export { router }
```

To sign out users with Express, you can create a route that handles the sign-out logic. Here is an example:

```ts filename="src/routes/auth.ts"
import express, { Request, Response } from "express"
import { signOut } from "../auth"
const router = express.Router()

router.post("/auth/signout", async (req: Request, res: Response) => {
  try {
    await signOut(req, res)
    res.redirect("/")
  } catch (error) {
    res.status(500).send("Sign out failed")
  }
})

export { router }
```

  </Code.Express>
</Code>

You can also pass a provider to the `signIn` function which will attempt to login directly with that provider. Otherwise, when clicking this button in your application, the user will be redirected to the configured sign in page. If you did not setup a [custom sign in page](/guides/pages/signin), the user will be redirected to the default signin page at `/[basePath]/signin`.

import DefaultSignInPage from "../../../public/img/getting-started/default-signin-page.webp"

<Screenshot src={DefaultSignInPage} alt="Default Sign-in Page" />

Once authenticated, the user will be redirected back to the page they started the signin from. If
you want the user to be redirected somewhere else after sign in (.i.e `/dashboard`), you can do so
by passing the target URL as `redirectTo` in the sign-in options.

<Code>
<Code.Next>

```tsx filename="app/components/signin-button.tsx" {8}
import { signIn } from "@/auth.ts"

export function SignIn() {
  return (
    <form
      action={async () => {
        "use server"
        await signIn("github", { redirectTo: "/dashboard" })
      }}
    >
      <button type="submit">Sign in</button>
    </form>
  )
}
```

</Code.Next>
<Code.NextClient>

```tsx filename="src/components/signin-button.tsx" {5}
"use client"
import { signIn } from "next-auth/react"

export function SignIn() {
  return (
    <button onClick={() => signIn("github", { redirectTo: "/dashboard" })}>
      Sign In
    </button>
  )
}
```

</Code.NextClient>
<Code.Qwik>

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <>
      <Link
        onClick$={() => signInSig.submit({ redirectTo: "/dashboard" })}
      >
        SignIn
      </Link>
    </>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```svelte filename="src/routes/+page.svelte" {9-13}
<script lang="ts">
  import { page } from "$app/stores"
  import { SignIn } from "@auth/sveltekit/components"
</script>

<header>
  <nav>
    <SignIn
      options={{
        redirectTo: $page.data.redirectTo
          ? `/${decodeURIComponent($page.data.redirectTo).slice(1)}`
          : `/dashboard`,
      }}
      className="w-full"
    >
      <span slot="submitButton">Sign in</span>
    </SignIn>
  </nav>
</header>
```

</Code.Svelte>
<Code.Express>
```ts filename="src/routes/auth.ts"
import express, { Request, Response } from "express";
import { signOut } from "../auth"; 
const router = express.Router()

router.post("/auth/signout", async (req: Request, res: Response) => {
try {
await signOut(req, res)
res.redirect("/")
} catch (error) {
res.status(500).send("Sign out failed")
}
})

export { router }
```
</Code.Express>
</Code>

### Signout

Signing out can be done similarly to signing in. Most frameworks offer both a client-side and server-side method for signing out as well.

<Code>
<Code.Next>

To sign out users with a form action, you can build a button that calls the exported signout function from your Auth.js config.

```tsx filename="app/components/signout-button.tsx" {8}
import { signOut } from "@/auth.ts"

export function SignOut() {
  return (
    <form
      action={async () => {
        "use server"
        await signOut()
      }}
    >
      <button type="submit">Sign Out</button>
    </form>
  )
}
```

</Code.Next>
<Code.NextClient>

```tsx filename="src/components/signout-button.tsx" {5}
"use client"
import { signOut } from "next-auth/react"

export function SignOut() {
  return <button onClick={() => signOut()}>Sign Out</button>
}
```

</Code.NextClient>
<Code.Qwik>

With Qwik we can do a server-side sign out with Form action, or a more simple client-side sign out via submit method.

```ts filename="./components/sign-out.tsx"
import { component$ } from "@builder.io/qwik"
import { Form, Link } from "@builder.io/qwik-city"
import { useSignOut } from "./plugin@auth"

export default component$(() => {
  const signOutSig = useSignOut()

  return (
    <>
      {/* server-side with Form action */}
      <Form action={signOutSig}>
        <input type="hidden" name="redirectTo" value="/signedout" />
        <button>Sign Out</button>
      </Form>

      {/* submit method */}
      <Link onClick$={() => signOutSig.submit({ redirectTo: "/" })}>
        SignIn
      </Link>
    </>
  )
})
```

</Code.Qwik>
<Code.Svelte>

SvelteKit supports both server and client-side methods for signing out as well.

#### Server-side

To use the SvelteKit form action for signing out, we can use the `SignOut` component exported from `@auth/sveltekit/components`.

```svelte filename="src/routes/+page.svelte" {2, 7-9}
<script lang="ts">
  import { SignOut } from "@auth/sveltekit/components"
</script>

<header>
  <nav>
    <SignOut>
      <span slot="submitButton">Signout</span>
    </SignOut>
  </nav>
</header>
```

This requires a server action at `/signout`, this path can be customized with the `signOutPage` prop on the `<SignOut>` component.

```ts filename="src/routes/signout/+page.server.ts"
import { signOut } from "../../auth"
import type { Actions } from "./$types"

export const actions: Actions = { default: signOut }
```

#### Client Side

Client-side is a bit simpler as we just need to import a button `on:click` handler from `@auth/sveltekit/client`.

```svelte filename="src/routes/+page.svelte" {8}
<script lang="ts">
  import { signOut } from "@auth/sveltekit/client"
</script>

<div>
  <nav>
    <img src="/img/logo.svg" alt="Company Logo" />
    <button on:click={signOut}>Signout</button>
  </nav>
</div>
```

</Code.Svelte>
<Code.Express>

The Express package runs server-side and therefore it doesn't make sense to create a "SignIn button component". However, to signin or signout with Express, send a request to the appropriate [REST API Endpoints](/reference/core/types#authaction) from your client (i.e. `/auth/signin`, `/auth/signout`, etc.).

To sign in users with Express, you can create a route that handles the sign-in logic. Here is an example:

```ts filename="src/routes/auth.ts"
import express, { Request, Response } from "express"
import { signIn } from "../auth"
const router = express.Router()

router.post("/auth/signin", async (req: Request, res: Response) => {
  try {
    await signIn(req, res)
    res.redirect("/dashboard")
  } catch (error) {
    res.status(500).send("Sign in failed")
  }
})

export { router }
```

To sign out users with Express, you can create a route that handles the sign-out logic. Here is an example:

```ts filename="src/routes/auth.ts"
import express, { Request, Response } from "express"
import { signOut } from "../auth"
const router = express.Router()

router.post("/auth/signout", async (req: Request, res: Response) => {
  try {
    await signOut(req, res)
    res.redirect("/")
  } catch (error) {
    res.status(500).send("Sign out failed")
  }
})

export { router }
```

</Code.Express>
</Code>

<Callout>
  Note that when signing out of an OAuth provider like GitHub in an Auth.js
  application, the user will not be signed out of GitHub elsewhere.
</Callout>

================
File: docs/pages/getting-started/session-management/protecting.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Protecting Resources

Protecting routes can be done generally by checking for the session and taking an action if an active session is not found, like redirecting the user to the login page or simply returning a `401: Unauthenticated` response.

### Pages

<Code>
<Code.Next>

You can use the `auth` function returned from `NextAuth()` and exported from your `auth.ts` or `auth.js` configuration file to get the session object.

```tsx filename="app/server/page.tsx" {4}
import { auth } from "@/auth"

export default async function Page() {
  const session = await auth()
  if (!session) return <div>Not authenticated</div>

  return (
    <div>
      <pre>{JSON.stringify(session, null, 2)}</pre>
    </div>
  )
}
```

</Code.Next>
<Code.NextClient>

To protect a page in the Next.js Pages router, we can use `auth` in `getServerSideProps` to return the `session` to the page as props.

```tsx filename="./pages/dashboard.tsx" {4, 10}
import { auth } from "../auth"

export default function Dashboard({ session }) {
  if (!session.user) return <div>Not authenticated</div>

  return <div>{JSON.stringify(session, null, 2)}</div>
}

export async function getServerSideProps(ctx) {
  const session = await auth(ctx)

  return {
    props: {
      session,
    },
  }
}
```

To access the session client-side using `useSession()`. Make sure `<SessionProvider />` is
wrapping your application.

```tsx filename="./pages/_app.tsx"
import type { AppProps } from "next/app"
import { SessionProvider } from "next-auth/react"

export default function MyApp({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />;
    </SessionProvider>
  )
}
```

</Code.NextClient>
<Code.Qwik>

Inside component$ you can use `useSession` loader to retrieve the current sessionStorage.

```ts
import { component$ } from '@builder.io/qwik';
import { useSession } from '~/routes/plugin@auth';

export default component$(() => {
  const session = useSession();
  return <p>{session.value?.user?.email}</p>;
});
```

</Code.Qwik>
<Code.Svelte>

In SvelteKit, you can leverage the `event.locals.auth()` function that is put there by the Auth.js `handle` function we're importing and using in `hooks.server.ts`.

By calling `event.locals.auth()` server-side, we can check for the session in any `+page.server.ts` or `+layout.server.ts` file and either allow the request on, or redirect to the `/login` page, for example.

```ts filename="src/routes/dashboard/+page.server.ts" {5}
import { fail, redirect } from "@sveltejs/kit"
import type { PageServerLoad } from "./$types"

export const load: PageServerLoad = async (event) => {
  const session = await event.locals.auth()

  if (!session?.user?.userId) {
    return fail(401, { type: "error", error: "Unauthenticated" })
  }

  return {
    session,
  }
}
```

</Code.Svelte>
<Code.Express>

You can protect routes by checking for the presence of a session and then redirect to a login page if the session is not present. This can either be done per route, or for a group of routes using a middleware such as the following:

```ts filename="lib.ts"
import { getSession } from "@auth/express"

export async function authenticatedUser(
  req: Request,
  res: Response,
  next: NextFunction
) {
  const session = res.locals.session ?? (await getSession(req, authConfig))
  if (!session?.user) {
    res.redirect("/login")
  } else {
    next()
  }
}
```

```ts filename="app.ts"
import { authenticatedUser } from "./lib.ts"

// This route is protected
app.get("/profile", authenticatedUser, (req, res) => {
  const { session } = res.locals
  res.render("profile", { user: session?.user })
})

// This route is not protected
app.get("/", (req, res) => {
  res.render("index")
})

app.use("/", root)
```

</Code.Express>
</Code>

### API Routes

Protecting API routes in the various frameworks can also be done with the `auth` export.

<Code>
<Code.Next>

In Next.js, you can use the `auth` function to wrap an API route handler. The request parameter will then have an `auth` key on it which you can check for a valid session.

```ts filename="./app/api/admin/route.ts" {4}
import { auth } from "@/auth"
import { NextResponse } from "next/server"

export const GET = auth(function GET(req) {
  if (req.auth) return NextResponse.json(req.auth)
  return NextResponse.json({ message: "Not authenticated" }, { status: 401 })
})
```

</Code.Next>
<Code.NextClient>

```ts filename="./pages/api/admin.ts"
// TODO: Update once server-side API methods are implemented for pages router again

// import { auth } from "../../auth"
// import { getSession } from "next-auth/react"
import { NextApiRequest, NextApiResponse } from "next"

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // const session = await auth(req, res)
  // const session = await getSession(req, res)
  const url = `${req.headers["x-forwarded-proto"]}://${req.headers.host}/api/auth/session`

  const sessionRes = await fetch(url)
  const session = await sessionRes.json()

  if (!session.user) {
    return res.status(401).json({ message: "Not authenticated" })
  }

  return res.json({ data: "Protected data" })
}
```

</Code.NextClient>
<Code.Qwik>

Session data can be accessed via the route event.sharedMap.
So a route can be protected and redirect using something like this located in a layout.tsx or page index.tsx:

```ts
export const onRequest: RequestHandler = (event) => {
  const session = event.sharedMap.get("session")
  if (!session || new Date(session.expires) < new Date()) {
    throw event.redirect(302, `/`)
  }
}
```

</Code.Qwik>
<Code.Svelte>

API Routes in SvelteKit work like any other server-side file in Auth.js in SvelteKit, you can access the session by calling `event.locals.auth()` in the `+server.ts` files as well.

```ts filename="src/routes/api/users/+server.ts"
import type { RequestHandler } from "./$types"

export const GET: RequestHandler = async (event) => {
  const session = await event.locals.auth()

  if (!session?.user?.userId) {
    return new Response(null, { status: 401, statusText: "Unauthorized" })
  }
}
```

</Code.Svelte>
<Code.Express>

API Routes are protected in the same way as any other route in Express, see [the examples above](/getting-started/session-management/protecting?framework=express#pages).

</Code.Express>
</Code>

### Next.js Middleware

With Next.js 12+, the easiest way to protect a set of pages is using the middleware file. You can create a `middleware.ts` file in your root pages directory with the following contents.

```ts filename="middleware.ts"
export { auth as middleware } from "@/auth"
```

Then define `authorized` callback in your `auth.ts` file. For more details check out the [reference docs](/reference/nextjs#authorized).

```ts filename="auth.ts"
import NextAuth from "next-auth"

export const { auth, handlers } = NextAuth({
  callbacks: {
    authorized: async ({ auth }) => {
      // Logged in users are authenticated, otherwise redirect to login page
      return !!auth
    },
  },
})
```

You can also use the `auth` method as a wrapper if you'd like to implement more logic inside the middleware.

```ts filename="middleware.ts"
import { auth } from "@/auth"

export default auth((req) => {
  if (!req.auth && req.nextUrl.pathname !== "/login") {
    const newUrl = new URL("/login", req.nextUrl.origin)
    return Response.redirect(newUrl)
  }
})
```

You can also use a regex to match multiple routes or you can negate certain routes in order to protect all remaining routes. The following example avoids running the middleware on paths such as the favicon or static images.

```ts filename="middleware.ts"
export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
}
```

Middleware will protect pages as defined by the `matcher` config export. For more details about the matcher, check out the [Next.js docs](https://nextjs.org/docs/pages/building-your-application/routing/middleware#matching-paths).

<Callout>
  You should not rely on middleware exclusively for authorization. Always ensure
  that the session is verified as close to your data fetching as possible.
</Callout>

================
File: docs/pages/getting-started/_meta.js
================


================
File: docs/pages/getting-started/authentication.mdx
================
import { Screenshot } from "@/components/Screenshot"
import { Accordion, Accordions } from "@/components/Accordion"

# Authentication

At this point, you need to decide how you're gonna authenticate users in your application. Auth.js supports four main authentication paradigms.

<Accordions>
<Accordion title="Why does Auth.js recommend OAuth as the primary authentication method for your application?">

OAuth services spend significant amounts of money, time, and engineering effort to build abuse detection (_bot-protection, rate-limiting_), password management (_password reset, credential stuffing, rotation_), data security (_encryption/salting, strength validation_), and much more. It is likely that your application would benefit from leveraging these battle-tested solutions rather than try to rebuild them from scratch. Or if you don't want to pay for an OAuth service, we support many self-hosted OAuth providers like [Keycloak](/getting-started/providers/keycloak).

</Accordion>
<Accordion title="Do I need a database?">

Auth.js by default saves the session in a cookie using encrypted [JSON Web Tokens](https://jwt.io/) so that you don't need to setup a database. However, if you want to persist user data you can set up a database by using one of our official database adapters or create your own.

</Accordion>
<Accordion title="Can I set up more than one authentication method?">

Yes! You can setup as many authentication methods as you'd like. However, when using a database, if you have multiple providers set up Auth.js will attempt to link them together. For example, if a user has already signed in with GitHub, and therefore has a `User` and `Account` table entry associated with that Email, and they then attempt to signin with another method using the same email address, then the two accounts will be linked. See the [FAQ](/concepts#security) for more information on account linking.

</Accordion>
</Accordions>

Once you have decided how to authenticate users in your application, click on your authentication method of choice under "Authentication" in the sidebar to continue.

================
File: docs/pages/getting-started/database.mdx
================
import { Callout } from "nextra/components"
import { Link } from "@/components/Link"
import manifest from "@/data/manifest.json"

# Database Adapters

<Callout type="info">
  Auth.js integrations save sessions in a cookie by default. Therefore, setting
  up a database is optional. However, if you want to persist user information in
  your own database, or you want to implement certain flows, you will need to
  use a Database Adapter.
</Callout>

**Database Adapters** are the bridge we use to connect Auth.js to your database. For instance, [when implementing magic links](/getting-started/authentication/email), the Email provider will require you to setup a database adapter to be able to store the [verification tokens](/concepts/database-models#verificationtoken) present on the links.

## Official Adapters

Below is a list of official adapters that are distributed as their own packages under the `@auth/`
namespace. Their source code is available in the [`nextauthjs/next-auth`
monorepo](https://github.com/nextauthjs/next-auth/tree/main/packages). If you're going to create a database adapter, please make sure you familiarise yourself [with the models](/concepts/database-models) Auth.js expects to be present and check out our "[creating a database adapter](/guides/creating-a-database-adapter)" guide.

<div className="mb-12 mt-8 grid w-full grid-cols-2 gap-x-4 gap-y-4 sm:grid-cols-3 lg:grid-cols-4">
  {Object.entries(manifest.adapters).map(([value, label]) => (
    <Link
      href={`/getting-started/adapters/${value}`}
      key={value}
      className="flex h-32 w-36 flex-col items-center justify-between rounded-lg border border-solid border-neutral-200 p-4 shadow-sm transition duration-300 hover:bg-neutral-50 dark:border-neutral-800 dark:hover:bg-neutral-950"
    >
      <img src={`/img/adapters/${value}.svg`} className="mt-2 h-12" />
      <div className="text-center text-sm">{label}</div>
    </Link>
  ))}
</div>

<Callout>
  If you don't find an adapter for your database or service of choice, you can
  create one yourself. Have a look at our guide on [how to create a database
  adapter](/guides/creating-a-database-adapter). If you create a new adapter,
  we'd love it if you [opened a
  PR](/guides/creating-a-database-adapter#official-adapter-guidelines) to share
  it with everyone!
</Callout>

## Models

This is a generic ER Diagram of what the full database schema should look like. Your database adapter of choice will include a template schema with more details for applying this schema to the underlying database. For more details, check out our [database models](/concepts/database-models) documentation. Please note, that the entire schema is not required for every use-case, for more details check out our [database adapters guide](/guides/creating-a-database-adapter).

```mermaid
%%{init: {'theme':'neutral'}}%%
erDiagram
    Account }o--|| User : ""
    Account {
        string userId
        string type
        string provider
        string providerAccountId
        string refresh_token
        string access_token
        int expires_at
        string token_type
        string scope
        string id_token
        string session_state
    }
    Session }o--|| User : ""
    Session {
        string userId
        string sessionToken
        timestamp expires
    }
    VerificationToken }o--|| User : ""
    VerificationToken {
        string identified
        string token
        timestamp expires
    }
    User {
        string id
        string name
        string email
        timestamp emailVerified
        string image
    }
```

================
File: docs/pages/getting-started/deployment.mdx
================
import { Callout } from "nextra/components"
import { Accordion, Accordions } from "@/components/Accordion"

# Deployment

## Environment Variables

<Callout>
  For consistency, we recommend prefixing all Auth.js environment variables with
  `AUTH_`. This way we can better autodetect them, and they can also be
  distinguished from other environment variables more easily.
</Callout>

Auth.js libraries require you to set an `AUTH_SECRET` environment variable. This is used to encrypt cookies and tokens. It should be a cryptographically secure random string of at least 32 characters:

```bash npm2yarn
npm exec auth secret
```

If you are using an [OAuth Provider](/concepts/oauth), your provider will provide you with a **Client ID** and **Client Secret** that you will need to set as environment variables as well (in the case of an OIDC provider, like Auth0, a third `issuer` value might be also required, refer to the provider's specific documentation).

<Callout type="info">
Auth.js supports **environment variable inference**, meaning that if you name your provider environment variables following a specific syntax, you won't need to explicitly pass them to the providers in your configuration.

Client ID's and client secrets should be named `AUTH_[PROVIDER]_ID` and `AUTH_[PROVIDER]_SECRET`. If your provider requires an issuer, that should be named `AUTH_[PROVIDER]_ISSUER`. For example:

```bash
AUTH_OKTA_ID=abc
AUTH_OKTA_SECRET=abc
AUTH_OKTA_ISSUER=abc
```

For more information, check out our [environment variables](/guides/environment-variables) page.

</Callout>

### `AUTH_SECRET`

This is the only strictly required environment variable. It is the secret used to encode the JWT and encrypt things in transit. As mentioned above, we recommend at least a 32 character random string. This can be generated via the CLI with `npm exec auth secret` or via openssl with `openssl rand -base64 33`.

### `AUTH_TRUST_HOST`

When deploying your application behind a reverse proxy, you'll need to set `AUTH_TRUST_HOST` equal
to `true`. This tells Auth.js to trust the `X-Forwarded-Host` header from the reverse proxy. Auth.js will automatically infer this to be true if we detect the environment variable indicating that your application is running on one of the supported hosting providers. Currently `VERCEL` and `CF_PAGES` (Cloudflare Pages) are supported.

### `AUTH_URL`

This environment variable is mostly unnecessary with v5 as the host is inferred from the request headers. However, if you are using a different base path, you can set this environment variable as well. For example, `AUTH_URL=http://localhost:3000/web/auth` or `AUTH_URL=https://company.com/app1/auth`

### `AUTH_REDIRECT_PROXY_URL`

> **_NOTE:_** Some providers (eg Apple) do not support [redirect proxy](https://github.com/nextauthjs/next-auth/blob/3ec06842682a31e53fceabca701a362abda1e7dd/packages/core/src/lib/utils/providers.ts#L48) usage.

This environment variable is designed for advanced use-cases only, when using Auth.js as a proxy for preview deploys, for example. For more details, see the [securing preview deploys](#securing-a-preview-deployment) section below.

## Serverless

1. Create the required [environment variables](#environment-variables) for your desired environments. Don't forget to also add the required environment variables for your provider(s) of choice (i.e. OAuth `clientId` / `clientSecret`, etc.).
2. When using an OAuth provider, make sure the callback URL for your production URL is setup correctly. Many OAuth providers will only allow you to set 1 `callbackUrl` per OAuth application. In which case, you'll need to create separate applications for each environment (development, production, etc.). Other providers, like Google, allow you to add many `callbackUrl`s to one application.
   - By default, the callbackUrl for `next-auth` (Next.js) applications should look something like this: `https://company.com/api/auth/callback/[provider]` (replace `company.com` with your domain and `provider` with the provider name, i.e. `github`).
   - All other frameworks (`@auth/sveltekit`, `@auth/express`, etc.), by default, will use the path `/auth/callback/[provider]`.
3. Deploy! After having setup those two prerequisites, you should be able to deploy and run your Auth.js application on Netlify, Vercel, etc.

<Callout type="warning">
  If you are storing users in a [database](/getting-started/database), we
  recommend using a different OAuth app for development/production so that you
  don't mix your test and production user base.
</Callout>

## Observability

To pass on your current user's details on to your observability tools, you can use the callbacks provided by Auth.js. For example, in the `session` callback, you could pass the `user.id` on to Sentry.

```ts filename="auth.ts"
import * as Sentry from "@sentry/browser"
import NextAuth from "next-auth"

export const { handlers, auth, signIn, signOut } = NextAuth({
  callbacks: {
    session({ session, user }) {
      const scope = Sentry.getCurrentScope()

      scope.setUser({
        id: user.id,
        email: user.email,
      })

      return session
    },
  },
})
```

## Self-hosted

Auth.js can also be deployed anywhere you can deploy your framework of choice. Check out the framework's documentation on self-hosting.

### Docker

In a Docker environment, make sure to set either `trustHost: true` in your Auth.js configuration or the `AUTH_TRUST_HOST` environment variable to `true`.

Our example application is also hosted via Docker [here](https://nextjs-docker-example.authjs.dev) (see the [source code](https://github.com/nextauthjs/next-auth-example)). Below is an example `Dockerfile` for a Next.js application using Auth.js.

```docker filename="Dockerfile"
# syntax=docker/dockerfile:1
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY package.json pnpm-lock.yaml* ./
RUN corepack enable pnpm && pnpm i --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN corepack enable pnpm && pnpm build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD ["node", "server.js"]
```

## Securing a preview deployment

> **_NOTE:_** Some providers (eg Apple) do not support [redirect proxy](https://github.com/nextauthjs/next-auth/blob/3ec06842682a31e53fceabca701a362abda1e7dd/packages/core/src/lib/utils/providers.ts#L48) usage.

Most OAuth providers cannot be configured with multiple callback URLs or using a wildcard.

However, Auth.js **supports Preview deployments**, even **with most OAuth providers**. The idea is to have one deployment which proxies authentication requests to the dynamic URLs of your main application. So you could have 1 stable deployment, like at `auth.company.com` where you would point all your OAuth provider's `callbackUrl`s, and this application would then, upon successful authentication, redirect the user back to the preview deploy URL, like `https://git-abc123-myapp.vercel.app`. Follow these steps to get started with securing preview deploys with Auth.js.

1. Determine a stable deployment URL. For example, a deployment whose URL does not change between builds, for example. `auth.yourdomain.com` (using a subdomain is not a requirement, this can be the main site's URL too, for example.)
2. In **both the preview and stable environment**, set `AUTH_REDIRECT_PROXY_URL` to that stable deployment URL, including the path from where Auth.js handles the routes. Eg.: (`https://auth.yourdomain.com/api/auth`). If the variable is not set in the stable environment, the proxy functionality will not be enabled!
3. Update the `callbackUrl` in your OAuth provider's configuration to use the stable deployment URL. For example, for GitHub it would be `https://auth.yourdomain.com/api/auth/callback/github`.

Fun fact: all of our example apps are using the proxy functionality!

<Callout type="info">
  To support preview deployments, the `AUTH_SECRET` value needs to be the same
  for the stable deployment and deployments that will need OAuth support.
</Callout>

<details>
<summary>
<b>How does this work?</b>
</summary>
To support preview deployments, Auth.js requires a deployment URL that is stable across deploys as a redirect proxy server.

It will redirect the OAuth callback request to the preview deployment URL, but only when the `AUTH_REDIRECT_PROXY_URL` environment variable is set.

When a user initiates an OAuth sign-in flow on a preview deployment, we save its URL in the `state` query parameter but set the `redirect_uri` to the stable deployment.

Then, the OAuth provider will redirect the user to the stable URL mentioned above, which will verify the `state` parameter and redirect the user to the preview deployment URL if the `state` is valid. This is secured by relying on the same server-side `AUTH_SECRET` for the stable deployment and the preview deployment.

</details>

================
File: docs/pages/getting-started/index.mdx
================
import { Callout } from "nextra/components"
import { ListDisclosure } from "@/components/ListDisclosure"
import { Link } from "@/components/Link"
import { Screenshot } from "@/components/Screenshot"
import { Plus, ArrowSquareOut, GithubLogo, Flask } from "@/icons"
import manifest from "@/data/manifest.json"
import { FrameworkLink } from "@/components/FrameworkLink"

# What is Auth.js?

Auth.js is a <abbr title="Designed to work seamlessly across different JavaScript runtime environments without relying on specific features or behaviors of any particular runtime">runtime agnostic</abbr> library based on standard Web APIs that integrates deeply with multiple modern JavaScript frameworks to provide an authentication experience that's simple to get started with, easy to extend, and always private and secure!

This documentation covers `next-auth@5.0.0-beta` and later and all other frameworks under the `@auth/*` namespace. Documentation for `next-auth@4.x.y` can still be found at [next-auth.js.org](https://next-auth.js.org).

Select your framework of choice to get started, or view the example application deployment or repository with the buttons below.

<div className="mb-12 mt-8 flex w-full flex-wrap items-start justify-around gap-2">
  <FrameworkLink
    id="nextjs"
    name="Next.js"
    demo="https://next-auth-example.vercel.app/"
    repo="https://github.com/nextauthjs/next-auth-example"
    isExperimental={false}
    isInvert={true}
  />
  <FrameworkLink
    id="qwik"
    name="Qwik"
    demo="https://qwik-auth-example.vercel.app/"
    repo="https://github.com/nextauthjs/qwik-auth-example"
  />
  <FrameworkLink
    id="sveltekit"
    name="SvelteKit"
    demo="https://sveltekit-auth-example.vercel.app/"
    repo="https://github.com/nextauthjs/sveltekit-auth-example"
  />
  <FrameworkLink
    id="express"
    name="Express"
    demo="https://express-auth-example.vercel.app/"
    repo="https://github.com/nextauthjs/express-auth-example"
    isInvert={true}
  />
  <Link
    href="/guides/creating-a-framework-integration"
    className="relative flex h-28 w-28 flex-col flex-wrap items-center justify-between rounded-lg border border-solid border-slate-200 bg-white p-4 !no-underline shadow-sm transition duration-300 hover:bg-neutral-100 dark:border-neutral-800 dark:bg-neutral-900 hover:dark:bg-neutral-950"
  >
    <Plus className="size-9" />
    <div className="mt-3 text-sm">Add New</div>
  </Link>
</div>

Check the [integrations page](/getting-started/integrations) for all supported packages. We are working on supporting more frameworks, but you can create your own or
help us create one for your favorite framework.

<Callout type="info">
  To reduce migration overhead, NextAuth.js for Next.js will continue to be
  released under the `next-auth` package name, instead of the `@auth/*`
  convention. Auth.js was born out of `next-auth` but [over the years has
  evolved](/contributors#history) to be framework agnostic.

Confused about Auth.js and NextAuth.js? Have a look at [our
history](/contributors#history).

</Callout>

## Authentication methods

There are 4 ways to authenticate users with Auth.js:

- [OAuth authentication](/getting-started/authentication/oauth) (_Sign in with Google, GitHub, LinkedIn, etc..._)
- [Magic Links](/getting-started/authentication/email) (_Email Provider like Forward Email, Resend, Sendgrid, Nodemailer etc..._)
- [Credentials](/getting-started/authentication/credentials) (_Username and Password, Integrating with external APIs, etc..._)
- [WebAuthn](/getting-started/authentication/webauthn) (_Passkeys, etc..._)

### Official Providers

<ListDisclosure limit={8}>
  {Object.entries(manifest.providersOAuth).map(([id, name]) => (
    <Link
      href={`/getting-started/providers/${id}`}
      key={name}
      className="flex h-32 w-36 flex-col items-center justify-between rounded-lg border border-solid border-neutral-200 p-4 !no-underline shadow-sm transition-colors duration-300 hover:bg-neutral-50 dark:border-neutral-800 dark:hover:bg-neutral-950"
    >
      <img src={`/img/providers/${id}.svg`} className="mt-2 w-11" />
      <div className="text-center text-sm">{name}</div>
    </Link>
  ))}
</ListDisclosure>

### Supported Databases

Optionally, Auth.js can be integrated with an external database via Database adapters, in case you need or want to store user data.

<ListDisclosure limit={8}>
  {Object.entries(manifest.adapters).map(([value, label]) => (
    <Link
      href={`/getting-started/adapters/${value}`}
      key={value}
      className="flex h-32 w-36 flex-col items-center justify-between rounded-lg border border-solid border-neutral-200 p-4 !no-underline shadow-sm transition-colors duration-300 hover:bg-neutral-50 dark:border-neutral-800 dark:hover:bg-neutral-950"
    >
      <img src={`/img/adapters/${value}.svg`} className="mt-2 h-12" />
      <div className="text-center text-sm">{label}</div>
    </Link>
  ))}
</ListDisclosure>

================
File: docs/pages/getting-started/installation.mdx
================
import { Steps, Callout } from "nextra/components"
import { Code } from "@/components/Code"

<Steps>
### Installing Auth.js

Start by installing the appropriate package for your framework.

<Code>
  <Code.Next>
    
    ```bash npm2yarn
    npm install next-auth@beta
    ```

  </Code.Next>
  <Code.Qwik>

    ```bash npm2yarn
    npm run qwik add auth
    ```

  </Code.Qwik>
  <Code.Svelte>
  
    ```bash npm2yarn
    npm install @auth/sveltekit
    ```
  </Code.Svelte>
  <Code.Express>
  
    ```bash npm2yarn
    npm install @auth/express
    ```
  
  </Code.Express>
</Code>

<Callout type="info">
  Installing `@auth/core` is not necessary, as a user you should never have to
  interact with `@auth/core`.
</Callout>

### Setup Environment

The only environment variable that is mandatory is the `AUTH_SECRET`. This is a random value used by the library to encrypt tokens and email
verification hashes. (See [Deployment](/getting-started/deployment) to learn more). You can generate one via the official [Auth.js CLI](https://cli.authjs.dev) running:

```bash
npx auth secret
```

This will also add it to your `.env` file, respecting the framework conventions (eg.: Next.js' `.env.local`).

### Configure

Next, create the Auth.js config file and object. This is where you can control the behaviour of the library and specify custom authentication logic, adapters, etc. We recommend all frameworks to create an `auth.ts` file in the project. In this file we'll pass in all the options to the framework specific initalization function and then export the route handler(s), signin and signout methods, and more.

<Callout type="info">
  You can name this file whatever you want and place it wherever you like, these
  are just conventions we've come up with.
</Callout>

<Code>
  <Code.Next>

1. Start by creating a new `auth.ts` file at the root of your app with the following content.

```ts filename="./auth.ts"
import NextAuth from "next-auth"

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [],
})
```

2. Add a Route Handler under `/app/api/auth/[...nextauth]/route.ts`.

<Callout>
  This file must be an App Router Route Handler, however, the rest of your app
  can stay under `page/` if you'd like.
</Callout>

```ts filename="./app/api/auth/[...nextauth]/route.ts"
import { handlers } from "@/auth" // Referring to the auth.ts we just created
export const { GET, POST } = handlers
```

3. Add optional Middleware to keep the session alive, this will update the session expiry every time its called.

```ts filename="./middleware.ts"
export { auth as middleware } from "@/auth"
```

  </Code.Next>
  <Code.Qwik>

1. Start by creating a new `plugin@auth.ts` file in your `src/routes` directory with the following content.

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [...],
  })
)
```

  </Code.Qwik>
  <Code.Svelte>

1. Start by creating a new `auth.ts` file in your `src/` directory with the following content.

```ts filename="./src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit"

export const { handle } = SvelteKitAuth({
  providers: [],
})
```

2. Re-export the `handle` method in SvelteKit's `src/hooks.server.ts` file.

```ts filename="./src/hooks.server.ts"
export { handle } from "./auth"
```

3. That handle function adds an `auth()` method onto our `event.locals`, which is available in any `+layout.server.ts` or `+page.server.ts` file. Therefore, we can access the session in our `load` function like this.

```ts filename="./src/routes/+layout.server.ts" {4}
import type { LayoutServerLoad } from "./$types"

export const load: LayoutServerLoad = async (event) => {
  const session = await event.locals.auth()

  return {
    session,
  }
}
```

  </Code.Svelte>
  <Code.Express>

1. Start by importing `ExpressAuth` and adding the handler to the auth route.

```ts filename="./src/routes/auth.route.ts" {1, 9}
import { ExpressAuth } from "@auth/express"
import express from "express"

const app = express()

// If your app is served through a proxy
// trust the proxy to allow us to read the `X-Forwarded-*` headers
app.set("trust proxy", true)
app.use("/auth/*", ExpressAuth({ providers: [] }))
```

Note this creates the Auth.js API, but does not yet protect resources. Continue on to [protecting resources](/getting-started/session-management/protecting) for more details.

  </Code.Express>
</Code>

### Setup Authentication Methods

With that, the basic setup is complete! Next we'll setup the first authentication methods and fill out that `providers` array.

</Steps>

================
File: docs/pages/getting-started/integrations.mdx
================
import { Callout } from "nextra/components"

# Integrations

Here are the state of planned and released integrations under the `@auth/*` and `@next-auth/*` scope, as well as `next-auth`. It also includes community created and maintained integrations. Integrations listed as "Planned" are something we'd love help with! See the [help needed](#help-needed) section below.

<Callout>
  Is your framework not supported? You can easily contribute by creating a
  framework integration by [following this
  guide](/guides/creating-a-framework-integration).
</Callout>

<Callout type="info">
  Note that because of preventing breaking changes on package imports,
  `next-auth` is the only framework package which is not named following the
  `@auth/*` convention. This library initially was born as `next-auth` but [over
  the years has evolved](/contributors#history) to be framework agnostic.
</Callout>

Framework and database integrations are all based on the [Auth.js Core library](/reference/core). In most cases, you will not interact with this package directly, as it is intended for library authors.

| Frameworks                            | Status                                                                                    |
| ------------------------------------- | ----------------------------------------------------------------------------------------- |
| NextAuth.js (`next-auth`)             | [v5 (beta)](https://nextjs.authjs.dev), [v4 (maintenance mode)](https://next-auth.js.org) |
| Astro Auth (`@auth/astro`)            | [Open PR](https://github.com/nextauthjs/next-auth/pull/9856)                              |
| Express Auth (`@auth/express`)        | [Experimental Release](https://express.authjs.dev)                                        |
| Fastify Auth (`@auth/fastify`)        | [Open PR](https://github.com/nextauthjs/next-auth/pull/9587)                              |
| Nuxt Auth (`@auth/nuxt`)              | [Open PR](https://github.com/nextauthjs/next-auth/pull/10684)                             |
| Qwik Auth (`@auth/qwik`)              | [Released](https://qwik.authjs.dev)                                                       |
| Remix Auth (`@auth/remix`)            | [Open PR](https://github.com/nextauthjs/next-auth/pull/6767)                              |
| SolidStart Auth (`@auth/solid-start`) | [Experimental Release](https://authjs.dev/reference/solid-start)                          |
| SvelteKit Auth (`@auth/sveltekit`)    | [Experimental Release](https://sveltekit.authjs.dev)                                      |

| Databases              | Status                                                                  |
| ---------------------- | ----------------------------------------------------------------------- |
| `@auth/*-adapter`      | Released. Fully compatible with `next-auth` and all `@auth/*` libraries |
| `@next-auth/*-adapter` | Maintenance has stopped. Update to `@auth/*-adapter`                    |

## Community Integrations

The community has published some great integrations / client packages for various frameworks and
libraries. We'd love to make some packages official in the future, if you're responsible for any of
them and are interested in collaborating, please do not hesitate to reach out!

| Client     | Links                                                                                       |
| ---------- | ------------------------------------------------------------------------------------------- |
| Hono.js    | [Auth.js middleware](https://github.com/honojs/middleware/tree/main/packages/auth-js)       |
| Rakkas     | [Auth.js Integration Example](https://github.com/rakkasjs/rakkasjs/tree/main/examples/auth) |
| SolidStart | [`@solid-mediakit/auth`](https://www.npmjs.com/package/@solid-mediakit/auth)                |
| Astro      | [`auth-astro`](https://github.com/nowaythatworked/auth-astro)                               |
| Nuxt       | [`@sidebase/nuxt-auth`](https://auth.sidebase.io)                                           |

### Help needed

In case you are a maintainer of a package that uses `@auth/core`, feel free to [reach out to
Balázs](https://twitter.com/balazsorban44) or [info@authjs.dev](mailto:info@authjs.dev), if you want to collaborate on making it an official package, maintained in our repository. If you are interested in bringing `@auth/core` support to your favorite framework, we would love to hear from you!

================
File: docs/pages/getting-started/migrating-to-v5.mdx
================
---
title: Migrating to v5
---

import { Callout, Tabs, Steps } from "nextra/components"

# Upgrade Guide (NextAuth.js v5)

<Callout type="info">
  This guide only applies to `next-auth` upgrades for users of Next.js. Feel
  free to skip to the next section,
  [Installation](/getting-started/installation), if you are not upgrading to
  `next-auth@5`.
</Callout>

**NextAuth.js version 5** is a major rewrite of the `next-auth` package, that being said, we introduced as few breaking changes as possible. For all else, this document will guide you through the migration process.

Get started by installing the latest version of `next-auth` with the `beta` tag.

```bash npm2yarn
npm install next-auth@beta
```

## New Features

#### Main changes

- App Router-first (`pages/` still supported)
- OAuth support on preview deployments ([Read more](/getting-started/deployment#securing-a-preview-deployment))
- Simplified setup (shared config, inferred [env variables](/guides/environment-variables#environment-variable-inference))
- New `account()` callback on providers ([`account()` docs](/reference/core/providers#account))
- Edge-compatible

#### Universal `auth()`

- A single method to authenticate anywhere
- Use `auth()` instead of `getServerSession`, `getSession`, `withAuth`, `getToken`, and `useSession` ([Read more](#authenticating-server-side))

## Breaking Changes

- Auth.js now builds on `@auth/core` with stricter [OAuth](https://www.ietf.org/rfc/rfc6749.html)/[OIDC](https://openid.net/specs/openid-connect-core-1_0.html) spec-compliance, which might break some existing OAuth providers. See our [open issues](https://github.com/nextauthjs/next-auth/issues?q=is%3Aopen+is%3Aissue+label%3Aproviders) for more details.
- OAuth 1.0 support is deprecated.
- The minimum required Next.js version is now [14.0](https://nextjs.org/14).
- The import `next-auth/next` is replaced. See [Authenticating server-side](#authenticating-server-side) for more details.
- The import `next-auth/middleware` is replaced. See [Authenticating server-side](#authenticating-server-side) for more details.
- When the `idToken: boolean` option is set to `false`, it won't entirely disable the ID token. Instead, it signals `next-auth` to also visit the `userinfo_endpoint` for the final user data. Previously, `idToken: false` opted out to check the `id_token` validity at all.

## Migration

<Steps>

### Configuration File

One of our goals was to avoid exporting your configuration from one file and passing it around as `authOptions` throughout your application. To achieve this, we settled on moving the configuration file to the root of the repository and having it export the necessary functions you can use everywhere else. (`auth`, `signIn`, `signOut`, `handlers` etc.).

The configuration file should look very similar to your previous route-based Auth.js configuration. Except that we're doing it in a new file in the root of the repository now, and we're exporting methods to be used elsewhere. Below is a simple example of a v5 configuration file.

```ts filename="./auth.ts" {5}
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"
import Google from "next-auth/providers/google"

export const { auth, handlers, signIn, signOut } = NextAuth({
  providers: [GitHub, Google],
})
```

Some things to note about the new configuration:

1. This is now in a file named `auth.ts` in the root of your repository. It can technically be named anything, but you'll be importing the exported methods from here across your app, so we'd recommend keeping it short.
2. There is no need to install `@auth/core` to import the provider definitions from, these come from `next-auth` itself.
3. The configuration object passed to the `NextAuth()` function is the same as before.
4. The returned methods exported from the `NextAuth()` function call are new and will be required elsewhere in your application.

The old configuration file, contained in the API Route (`pages/api/auth/[...nextauth].ts` / `app/api/auth/[...nextauth]/route.ts`), now becomes much shorter. **These exports are designed to be used in an App Router API Route**, but the rest of your app can stay in the Pages Router if you are gradually migrating!

```ts filename="app/api/auth/[...nextauth]/route.ts"
import { handlers } from "@/auth"
export const { GET, POST } = handlers
```

## Authenticating server-side

Auth.js has had a few different ways to authenticate server-side in the past, so we've tried to simplify this as much as possible.

Now that Next.js components are **server-first** by default, and thanks to the investment in using standard Web APIs, we were able to simplify the authentication process to a single `auth()` function call in most cases.

### Authentication methods

See the table below for a summary of the changes. Below that are `diff` examples of how to use the new `auth()` method in various environments and contexts.

| Where                   | v4                                                    | v5                               |
| ----------------------- | ----------------------------------------------------- | -------------------------------- |
| **Server Component**    | `getServerSession(authOptions)`                       | `auth()` call                    |
| **Middleware**          | `withAuth(middleware, subset of authOptions)` wrapper | `auth` export / `auth()` wrapper |
| **Client Component**    | `useSession()` hook                                   | `useSession()` hook              |
| **Route Handler**       | _Previously not supported_                            | `auth()` wrapper                 |
| **API Route (Edge)**    | _Previously not supported_                            | `auth()` wrapper                 |
| **API Route (Node.js)** | `getServerSession(req, res, authOptions)`             | `auth(req, res)` call            |
| **API Route (Node.js)** | `getToken(req)` (No session rotation)                 | `auth(req, res)` call            |
| **getServerSideProps**  | `getServerSession(ctx.req, ctx.res, authOptions)`     | `auth(ctx)` call                 |
| **getServerSideProps**  | `getToken(ctx.req)` (No session rotation)             | `auth(req, res)` call            |

#### Details

<Tabs items={["Server Component (App)", "Client Component (App)", "Middleware", "API Routes (Pages)", "getServerSideProps (Pages)"]}>

<Tabs.Tab>

Auth.js v4 has supported reading the session in Server Components for a while via `getServerSession`. This has been also simplified to the same `auth()` function.

```diff filename="app/page.tsx"
- import { authOptions } from "pages/api/auth/[...nextauth]"
- import { getServerSession } from "next-auth/next"
+ import { auth } from "@/auth"

export default async function Page() {
-  const session = await getServerSession(authOptions)
+  const session = await auth()
  return (<p>Welcome {session?.user.name}!</p>)
}
```

</Tabs.Tab>
<Tabs.Tab>

Imports from `next-auth/react` are now marked with the [`"use client"`](https://nextjs.org/docs/getting-started/react-essentials#the-use-client-directive) directive. Therefore, they can be used in client components just like they were used in previous versions. Don't forget, client components that attempt to access the session via context will need to be wrapped in a `<SessionProvider />`.

```ts filename="components/clientComponent.tsx"
'use client';

import { useSession, SessionProvider } from 'next-auth/react';

const ClientComponent = () => {
  const session = useSession();

  return (
    <SessionProvider>
      <p>Welcome {session?.user?.name}</p>
    </SessionProvider>
  )
}
```

</Tabs.Tab>
<Tabs.Tab>

```diff filename="middleware.ts"
- export { default } from "next-auth/middleware"
+ export { auth as middleware } from "@/auth"
```

For advanced use cases, you can use `auth` as a wrapper for your Middleware:

```ts filename="middleware.ts"
import { auth } from "@/auth"

export default auth((req) => {
  // req.auth
})

// Optionally, don't invoke Middleware on some paths
export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
}
```

Check out additional [Middleware docs](/getting-started/session-management/protecting#nextjs-middleware) for more details.

</Tabs.Tab>
<Tabs.Tab>

Instead of importing `getServerSession` from `next-auth/next` or `getToken` from `next-auth/jwt`, you can now import the `auth` function exported from your `auth.ts` config file and call it without passing `authOptions`.

```diff filename='pages/api/example.ts'
- import { getServerSession } from "next-auth/next"
- import { getToken } from "next-auth/jwt"
- import { authOptions } from "pages/api/auth/[...nextauth]"
+ import { auth } from "@/auth"
+ import { NextApiRequest, NextApiResponse } from "next"

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
-  const session = await getServerSession(req, res, authOptions)
-  const token = await getToken({ req })
+  const session = await auth(req, res)
  if (session) return res.json("Success")
  return res.status(401).json("You must be logged in.");
}
```

<Callout>
  Whenever `auth()` is passed the res object, it will rotate the session expiry.
  This was not the case with `getToken()` previously. The default session expiry
  is 30 days, but you can change it by setting `authOptions.session.maxAge`.
</Callout>

</Tabs.Tab>
<Tabs.Tab>

Instead of importing `getServerSession` from `next-auth/next` or `getToken` from `next-auth/jwt`, you can now import the `auth` function from your config file and call it without passing `authOptions`.

```diff filename="pages/protected.tsx"
- import { getServerSession } from "next-auth/next"
- import { getToken } from "next-auth/jwt"
- import { authOptions } from "pages/api/auth/[...nextauth]"
+ import { auth } from "@/auth"

export const getServerSideProps: GetServerSideProps = async (context) => {
-  const session = await getServerSession(context.req, context.res, authOptions)
-  const token = await getToken({ req: context.req })
+  const session = await auth(context)
  if (session) {
    // Do something with the session
  }

  return { props: { session } }
}
```

<Callout>
  Whenever `auth()` is passed the `res` object (i.e. as a part of `context`), it
  will rotate the session expiry. This was not the case with `getToken()`
  previously.
</Callout>

</Tabs.Tab>
</Tabs>

## Adapters

### Adapter packages

Beginning with `next-auth` v5, you should now install database adapters from the `@auth/*-adapter` scope, instead of `@next-auth/*-adapter`. Database adapters don't rely on any Next.js features, so it made more sense to move them to this new scope.

```diff
- npm install @next-auth/prisma-adapter
+ npm install @auth/prisma-adapter
```

<Callout type="info">
  Check out the [adapters page](/getting-started/database) for a list of
  official adapters, or the "[create a database
  adapter](/guides/creating-a-database-adapter)" guide to learn how to create
  your own.
</Callout>

### Database Migrations

NextAuth.js v5 **does not introduce any breaking changes to the database schema**. However, since OAuth 1.0 support is dropped, the (previously optional) `oauth_token_secret` and `oauth_token` fields can be removed from the `account` table if you are not using them.

Furthermore, previously uncommon fields like GitHub's `refresh_token_expires_in` fields were
required to be added to the `account` table. This is no longer the case, and you can remove it if
you are not using it. If you do use it, please make sure to return it via the new [`account()` callback](/reference/core/providers#account).

## Edge compatibility

While Auth.js strictly uses standard [Web APIs](https://developer.mozilla.org/en-US/docs/Web/API) (and thus can run in any environment that supports them), some libraries or ORMs (Object-Relational Mapping) packages that you rely on might not be ready yet. In this case, you can split the auth configuration into multiple files.

Auth.js supports two [session strategies](/concepts/session-strategies). When you are using an adapter, it will default to the `database` strategy. **Unless your database and its adapter is compatible with the Edge runtime/infrastructure, you will not be able to use the `"database"` session strategy**.

So for example, if you are using an adapter that relies on an ORM/library that is not yet compatible with Edge runtime(s) below is an example where we force the `jwt` strategy and split up the configuration so the library doesn't attempt to access the database in edge environments, like in the middleware.

<Callout>
  The following filenames are only a convention, they can be named anything you
  like.
</Callout>

1. Create an `auth.config.ts` file which exports an object containing your Auth.js configuration options. You can put all common configuration here **which does not rely on the adapter**. Notice this is exporting a configuration object only, we're not calling `NextAuth()` here.

```ts filename="auth.config.ts"
import GitHub from "next-auth/providers/github"
import type { NextAuthConfig } from "next-auth"

export default { providers: [GitHub] } satisfies NextAuthConfig
```

2. Next, create an `auth.ts` file and add your adapter and the `jwt` session strategy there. This is the `auth.ts` configuration file you will import from in the rest of your application, other than in the middleware.

```ts filename="auth.ts" {4, 9, 11}
import NextAuth from "next-auth"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"
import authConfig from "./auth.config"

const prisma = new PrismaClient()

export const { auth, handlers, signIn, signOut } = NextAuth({
  adapter: PrismaAdapter(prisma),
  session: { strategy: "jwt" },
  ...authConfig,
})
```

3. In your middleware file, import the configuration object from your first `auth.config.ts` file and use it to lazily initialize Auth.js there. In effect, initialize Auth.js separately with all of your common options, but **without the edge incompatible adapter**.

```ts filename="middleware.ts" {1} /NextAuth/
import authConfig from "./auth.config"
import NextAuth from "next-auth"

// Use only one of the two middleware options below
// 1. Use middleware directly
// export const { auth: middleware } = NextAuth(authConfig)

// 2. Wrapped middleware option
const { auth } = NextAuth(authConfig)
export default auth(async function middleware(req: NextRequest) {
  // Your custom middleware logic goes here
})
```

The above is just an example. **The main idea**, is to separate the part of the configuration that is edge-compatible from the rest, and only import the edge-compatible part in Middleware/Edge pages/routes. You can read more about this workaround in the [Prisma docs](/getting-started/adapters/prisma), for example.

Please follow up with your library/database/ORM's maintainer to see if they are planning to support the Edge runtime/infrastructure.

For more information in general about edge compatibility and how Auth.js fits into this, check out our [edge compatibility article](/guides/edge-compatibility).

## Environment Variables

There are **no breaking changes to the environment variables**, but we have cleaned up a few things which make some of them unnecessary. Therefore, we wanted to share some best practices around environment variables.

- All environment variables should be prefixed with `AUTH_`, `NEXTAUTH_` is no longer in use.
- If you name your provider `secret` / `clientId` variables using this syntax, i.e. `AUTH_GITHUB_SECRET` and `AUTH_GITHUB_ID`, they will be auto-detected and you won't have to explicitly pass them into your provider's configuration.
- The `NEXTAUTH_URL`/`AUTH_URL` is not strictly necessary anymore in most environments. We will auto-detect the host based on the request headers.
- The `AUTH_TRUST_HOST` environment variable serves the same purpose as setting `trustHost: true` in your Auth.js configuration. This is necessary when running Auth.js behind a proxy. When set to true we will trust the `X-Forwarded-Host` and `X-Forwarded-Proto` headers passed to the app by the proxy to auto-detect the host URL (`AUTH_URL`)
- The `AUTH_SECRET` environment variable is the **only variable that is really necessary**. You do not need to additionally pass this value into your config as the `secret` configuration option if you've set the environment variable.

For more information about environment variables and environment variable inference, check out our [environment variable](/guides/environment-variables) page.

## TypeScript

- `NextAuthOptions` is renamed to `NextAuthConfig`
- The following types are now exported from all framework packages like `next-auth` and `@auth/sveltekit`:

```ts
export type {
  Account,
  DefaultSession,
  Profile,
  Session,
  User,
} from "@auth/core/types"
```

- All `Adapter` types are re-exported from `/adapters` in the framework packages as well, i.e. from `next-auth/adapters`, `@auth/sveltekit/adapters`, etc.

</Steps>

## Cookies

- The `next-auth` prefix is renamed to `authjs`.

## Summary

We hope this migration goes smoothly for everyone! If you have any questions or get stuck anywhere, feel free to create [a new issue](https://github.com/nextauthjs/next-auth/issues/new) on GitHub, or come chat with us in the [Discord](https://discord.authjs.dev) server.

================
File: docs/pages/getting-started/typescript.mdx
================
import { Callout } from "nextra/components"
import { Screenshot } from "@/components/Screenshot"
import { Code } from "@/components/Code"

# TypeScript

Auth.js is committed to type-safety, so it's written in TypeScript and 100% type safe. It comes with its own type definitions to use in your project.

Even if you don't use TypeScript, IDEs like VS Code will pick this up to provide you with a better developer experience. While you are typing, you will get suggestions about what certain objects/functions look like, and sometimes links to documentation, examples, and other valuable resources.

## Philosophy

We have chosen [module
augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)
over [generics](https://www.typescriptlang.org/docs/handbook/2/generics.html) as the main technique to type Auth.js resources across your application in case you extend them.

<details>
<summary>
<b>Why not use <a href="https://www.typescriptlang.org/docs/handbook/2/generics.html">generics</a>?</b>
</summary>
The interfaces that are shared across submodules are not passed to Auth.js library functions as generics.

Whenever these types are used, the functions always expect to return these formats. With generics, one might be able to override the type in one place, but not the other, which would cause the types to be out of sync with the implementation.

With module augmentation, you defined the types once, and you can be sure that they are always the same where it's expected.

</details>

## Module Augmentation

Auth.js libraries come with certain interfaces that are shared across submodules and different Auth.js libraries (For example: `next-auth` and `@auth/prisma-adapter` will rely on types from `@auth/core`).

Good examples of such interfaces are `Session` or `User`. You can use TypeScript's [Module
Augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) to extend these types to add your own properties across Auth.js without having to pass generic all over the place.

Let's look at extending `Session` for example.

<Code>
<Code.Next>

```ts filename="auth.ts"
import NextAuth, { type DefaultSession } from "next-auth"

declare module "next-auth" {
  /**
   * Returned by `auth`, `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */
  interface Session {
    user: {
      /** The user's postal address. */
      address: string
      /**
       * By default, TypeScript merges new interface properties and overwrites existing ones.
       * In this case, the default session user properties will be overwritten,
       * with the new ones defined above. To keep the default session user properties,
       * you need to add them back into the newly declared interface.
       */
    } & DefaultSession["user"]
  }
}

export const { auth, handlers } = NextAuth({
  callbacks: {
    session({ session, token, user }) {
      // `session.user.address` is now a valid property, and will be type-checked
      // in places like `useSession().data.user` or `auth().user`
      return {
        ...session,
        user: {
          ...session.user,
          address: user.address,
        },
      }
    },
  },
})
```

</Code.Next>
<Code.Qwik>

```ts filename="plugin@auth.ts"
import { DefaultSession, QwikAuth$ } from "@auth/qwik"

declare module "@auth/qwik" {
  /**
   * Returned by the `useSession` hook and the `session` object in the sharedMap
   */
  interface Session {
    user: {
      /** The user's postal address. */
      address: string
      /**
       * By default, TypeScript merges new interface properties and overwrites existing ones.
       * In this case, the default session user properties will be overwritten,
       * with the new ones defined above. To keep the default session user properties,
       * you need to add them back into the newly declared interface.
       */
    } & DefaultSession["user"]
  }
}

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    callbacks: {
      session({ session, token, user }) {
        // `session.user.address` is now a valid property, and will be type-checked
        // in places like `useSession().user` or `sharedMap.get('session').user`
        return {
          ...session,
          user: {
            ...session.user,
            address: user.address,
          },
        }
      },
    },
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="auth.ts"
import SvelteKitAuth, { type DefaultSession } from "@auth/sveltekit"

declare module "@auth/sveltekit" {
  interface Session {
    user: {
      userId: string
      /**
       * By default, TypeScript merges new interface properties and overwrites existing ones.
       * In this case, the default session user properties will be overwritten,
       * with the new ones defined above. To keep the default session user properties,
       * you need to add them back into the newly declared interface.
       */
    } & DefaultSession["user"]
  }
}

export const { handle } = SvelteKitAuth({
  callbacks: {
    session: async ({ session, token }) => {
      if (token) {
        session.user.userId = token.sub
      }
      // `session.user.userId` is now a valid property, and will be type-checked
      // in places like `useSession().data.user` or `auth().user`
      return session
    },
  },
})
```

</Code.Svelte>
<Code.Express>
```ts filename="auth.ts"
import { ExpressAuthConfig } from "@auth/express";
// Extend the default Session type to include custom properties
declare module "@auth/express" {
  interface Session {
    user: {
      id: string; // Add a custom `id` property to the session user object
    };
  }
}

export const authConfig: ExpressAuthConfig = {
  callbacks: {
    /**
     * The `session` callback is used to customize the session object
     * returned to the client. Here, we add a custom `id` property to
     * the session user object, which is populated from the JWT token.
     *
     * @param session - The current session object.
     * @param token - The JWT token containing user information.
     * @returns The modified session object with the custom `id` property.
     */
    async session({ session, token }) {
      if (token.sub) {
        // Add the `id` property to the session user object
        session.user.id = token.sub; // `token.sub` contains the user ID
      }
      return session;
    },
  },
};
```
</Code.Express>
</Code>

Module augmentation is not limited to specific interfaces. You can augment any `interface` we've defined, here are some of the more common interfaces that you might want to override based on your use case.

```ts filename="types.d.ts"
declare module "next-auth" {
  /**
   * The shape of the user object returned in the OAuth providers' `profile` callback,
   * or the second parameter of the `session` callback, when using a database.
   */
  interface User {}
  /**
   * The shape of the account object returned in the OAuth providers' `account` callback,
   * Usually contains information about the provider being used, like OAuth tokens (`access_token`, etc).
   */
  interface Account {}

  /**
   * Returned by `useSession`, `auth`, contains information about the active session.
   */
  interface Session {}
}

// The `JWT` interface can be found in the `next-auth/jwt` submodule
import { JWT } from "next-auth/jwt"

declare module "next-auth/jwt" {
  /** Returned by the `jwt` callback and `auth`, when using JWT sessions */
  interface JWT {
    /** OpenID ID Token */
    idToken?: string
  }
}
```

<Callout type="info">
  The module declaration can be added to any file that is
  ["included"](https://www.typescriptlang.org/tsconfig#include) in your
  project&apos;s `tsconfig.json`.
</Callout>

## Resources

1. [TypeScript documentation: Module Augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)
2. [DigitalOcean: Module Augmentation in TypeScript](https://www.digitalocean.com/community/tutorials/typescript-module-augmentation)
3. [Creating a Database Adapter](/guides/creating-a-database-adapter)

================
File: docs/pages/guides/pages/_meta.js
================


================
File: docs/pages/guides/pages/built-in-pages.mdx
================
import { Code } from "@/components/Code"
import { Screenshot } from "@/components/Screenshot"

# Built-in Pages

Auth.js comes by default with a set of pages that are presented to the user as they go through their authentication journey (sign up, sign in, sign out, error, etc...). This is helpful so that you don't need to write those from scratch when using the library first time. The UI created is based on the providers specified in your configuration file.

If you do not pass a `providerId`, the `signIn` function will redirect the user to the signin page.

import SignInPage from "../../../public/img/tutorials/sign-in-page.webp"

<Screenshot src={SignInPage} alt="Sign-in Page" />

In this case the app has been configured with [GitHub](/getting-started/providers/github) and [Credentials](/getting-started/providers/credentials) providers.

If we added the [Google](/getting-started/providers/google) provider to our Auth.js config file (`./auth.ts`), then a 3rd option to sign in with Google would be available.

If you'd like to build your own sign in page, checkout our guide on custom sign-in pages.

================
File: docs/pages/guides/pages/error.mdx
================
import { Code } from "@/components/Code"
import { Screenshot } from "@/components/Screenshot"

# Custom error page

Auth.js can be configured to display a custom error page when something goes wrong during the user authentication flow (sign in, sign out, etc..).

In order to override Auth.js's `/api/auth/error` page we have to define our custom page in the AuthConfig:

<Code>
<Code.Next>

```ts filename="./auth.ts"
const authConfig: NextAuthConfig = {
...
  pages: {
    error: "/error",
  }
...
};
```

</Code.Next>
</Code>

Using the [example app](https://github.com/nextauthjs/next-auth-example), let's build a simple custom error page by creating `app/error/page.tsx`

<Code>
<Code.Next>

```tsx filename="app/error/page.tsx"
export default function AuthErrorPage() {
  return <>Oops</>
}
```

</Code.Next>
</Code>

Auth.js forwards the following errors as error query parameters in the URL to our custom error page:

| Query Param     | Example URL                       | Description                                                                                   |
| --------------- | --------------------------------- | --------------------------------------------------------------------------------------------- |
| `Configuration` | `/auth/error?error=Configuration` | There is a problem with the server configuration. Check if your options are correct.          |
| `AccessDenied`  | `/auth/error?error=AccessDenied`  | Usually occurs, when you restricted access through the signIn callback, or redirect callback. |
| `Verification`  | `/auth/error?error=Verification`  | Related to the Email provider. The token has expired or has already been used.                |
| `Default`       | `/auth/error?error=Default`       | Catch all, will apply, if none of the above matched.                                          |

So now we can update our custom error page with it:

<Code>
<Code.Next>

```tsx filename="app/error/page.tsx"
"use client"

import { useSearchParams } from "next/navigation"

enum Error {
  Configuration = "Configuration",
}

const errorMap = {
  [Error.Configuration]: (
    <p>
      There was a problem when trying to authenticate. Please contact us if this
      error persists. Unique error code:{" "}
      <code className="rounded-sm bg-slate-100 p-1 text-xs">Configuration</code>
    </p>
  ),
}

export default function AuthErrorPage() {
  const search = useSearchParams()
  const error = search.get("error") as Error

  return (
    <div className="flex h-screen w-full flex-col items-center justify-center">
      <a
        href="#"
        className="block max-w-sm rounded-lg border border-gray-200 bg-white p-6 text-center shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700"
      >
        <h5 className="mb-2 flex flex-row items-center justify-center gap-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white">
          Something went wrong
        </h5>
        <div className="font-normal text-gray-700 dark:text-gray-400">
          {errorMap[error] || "Please contact us if this error persists."}
        </div>
      </a>
    </div>
  )
}
```

</Code.Next>
</Code>

Now, when an error happens, Auth.js will redirect the user to our custom error page:

import CustomErrorPage from "../../../public/img/tutorials/custom-error-page.webp"

<Screenshot src={CustomErrorPage} alt="Custom Error Page" />

================
File: docs/pages/guides/pages/signin.mdx
================
import { Code } from "@/components/Code"
import { Screenshot } from "@/components/Screenshot"

# Custom Sign-in Page

To add a custom sign-in page, you'll need to define the path to your page in the [`pages`](/reference/core/types#pagesoptions) object in your Auth.js configuration. Make sure a route / page actually exists at the path you're defining here!

Additionally, we'll have to export a map of `provider.id` and `provider.name` to easily consume in our custom page if we want to dynamically render the correct buttons, based on what we've defined in our `auth.ts` configuration. Because you can pass your providers to the `providers` array as both a function, or the result of calling that function, this example `providerMap` handles both cases.

<Code>
<Code.Next>

```tsx filename="./auth.ts" {6, 21-28, 32-34}
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"
import Credentials from "next-auth/providers/credentials"
import type { Provider } from "next-auth/providers"

const providers: Provider[] = [
  Credentials({
    credentials: { password: { label: "Password", type: "password" } },
    authorize(c) {
      if (c.password !== "password") return null
      return {
        id: "test",
        name: "Test User",
        email: "test@example.com",
      }
    },
  }),
  GitHub,
]

export const providerMap = providers
  .map((provider) => {
    if (typeof provider === "function") {
      const providerData = provider()
      return { id: providerData.id, name: providerData.name }
    } else {
      return { id: provider.id, name: provider.name }
    }
  })
  .filter((provider) => provider.id !== "credentials")

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers,
  pages: {
    signIn: "/signin",
  },
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Credentials from "@auth/qwik/providers/credentials"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Credentials({
        credentials: {
          username: { label: "Username" },
          password: { label: "Password", type: "password" },
        },
        async authorize({ request }) {
          if (c.password !== "password") return null
          return {
            id: "test",
            name: "Test User",
            email: "test@example.com",
          }
        },
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```tsx filename="./src/auth.ts" {6, 21-28, 32-34}
import SvelteKitAuth from "@auth/sveltekit"
import GitHub from "@auth/sveltekit/providers/github"
import Credentials from "@auth/sveltekit/providers/credentials"
import type { Provider } from "@auth/sveltekit/providers"

const providers: Provider[] = [
  GitHub,
  Credentials({
    credentials: { password: { label: "Password", type: "password" } },
    authorize(c) {
      if (c.password !== "password") return null
      return {
        id: "test",
        name: "Test User",
        email: "test@example.com",
      }
    },
  }),
]

export const providerMap = providers.map((provider) => {
  if (typeof provider === "function") {
    const providerData = provider()
    return { id: providerData.id, name: providerData.name }
  } else {
    return { id: provider.id, name: provider.name }
  }
})

export const { handle, signIn, signOut } = SvelteKitAuth({
  providers,
  pages: {
    signIn: "/signin",
  },
})
```

</Code.Svelte>
</Code>

We can now build our own custom sign in page.

<Code>
<Code.Next>

```tsx filename="app/signin/page.tsx" /providerMap/
import { redirect } from "next/navigation"
import { signIn, auth, providerMap } from "@/auth.ts"
import { AuthError } from "next-auth"

const SIGNIN_ERROR_URL = "/error"

export default async function SignInPage(props: {
  searchParams: { callbackUrl: string | undefined }
}) {
  return (
    <div className="flex flex-col gap-2">
      <form
        action={async (formData) => {
          "use server"
          try {
            await signIn("credentials", formData)
          } catch (error) {
            if (error instanceof AuthError) {
              return redirect(`${SIGNIN_ERROR_URL}?error=${error.type}`)
            }
            throw error
          }
        }}
      >
        <label htmlFor="email">
          Email
          <input name="email" id="email" />
        </label>
        <label htmlFor="password">
          Password
          <input name="password" id="password" />
        </label>
        <input type="submit" value="Sign In" />
      </form>
      {Object.values(providerMap).map((provider) => (
        <form
          action={async () => {
            "use server"
            try {
              await signIn(provider.id, {
                redirectTo: props.searchParams?.callbackUrl ?? "",
              })
            } catch (error) {
              // Signin can fail for a number of reasons, such as the user
              // not existing, or the user not having the correct role.
              // In some cases, you may want to redirect to a custom error
              if (error instanceof AuthError) {
                return redirect(`${SIGNIN_ERROR_URL}?error=${error.type}`)
              }

              // Otherwise if a redirects happens Next.js can handle it
              // so you can just re-thrown the error and let Next.js handle it.
              // Docs:
              // https://nextjs.org/docs/app/api-reference/functions/redirect#server-component
              throw error
            }
          }}
        >
          <button type="submit">
            <span>Sign in with {provider.name}</span>
          </button>
        </form>
      ))}
    </div>
  )
}
```

</Code.Next>
<Code.Qwik>

With Qwik we can do a server-side sign in with Form action, or a more
simple client-side sign in via submit method.

```ts filename="./components/sign-in.tsx"
import { component$ } from "@builder.io/qwik"
import { Form, Link } from "@builder.io/qwik-city"
import { useSignIn } from "./plugin@auth"

export default component$(() => {
  const signInSig = useSignIn()

  return (
    <>
      {/* server-side login with Form action */}
      <Form action={signInSig}>
        <input type="hidden" name="providerId" value="<providerId>" />
        <input
          type="hidden"
          name="options.redirectTo"
          value="/"
        />
        <button>Sign In</button>
      </Form>

      {/* submit method */}
      <Link
        onClick$={() => signInSig.submit({ redirectTo: "/" })}
      >
        SignIn
      </Link>
    </>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```svelte filename="src/routes/signin/+page.svelte" /submitButton/ /providerMap/
<script lang="ts">
  import { SignIn } from "@auth/sveltekit/components"
  import { providerMap } from "../../auth.ts"
</script>

<div>
  <div>
    <h2>
      <img src="/img/logo.png" alt="Company Logo" />
      <span>Company</span>
    </h2>
    <div>
      {#each providerMap as provider}
        <SignIn provider={provider.id} signInPage="signin" className="w-full">
          <div slot="submitButton">
            <span>
              Signin with {provider.name}
            </span>
          </div>
        </SignIn>
      {/each}
    </div>
  </div>
</div>
```

You'll also need to create this server action in SvelteKit to handle the action at `/signin`. That's the default path, but this can be changed with the `signInPage` prop on the `SignIn` component above.

```ts filename="src/routes/signin/+page.server.ts"
import { signIn } from "../../auth"
import type { Actions } from "./$types"

export const actions = { default: signIn } satisfies Actions
```

</Code.Svelte>
</Code>

Then when calling `signIn` without any arguments anywhere in your application, the custom signin page will appear.

import CustomSignInPage from "../../../public/img/tutorials/custom-sign-in-page.webp"

<Screenshot
  src={CustomSignInPage}
  alt="Custom Sign-in Page"
  className="w-full max-w-3xl"
/>

================
File: docs/pages/guides/pages/signout.mdx
================
import { Code } from "@/components/Code"
import { Screenshot } from "@/components/Screenshot"

# Custom sign out page

Is easy to configure Auth.js to display a custom sign out page in case you need it.

Here's the code for a simple sign out page built on top of the [example app](https://github.com/nextauthjs/next-auth-example):

<Code>
<Code.Next>

```tsx filename="app/signout/page.tsx" {10}
import { signOut } from "@/auth"

export default function SignOutPage() {
  return (
    <div>
      <h5>Are you sure you want to sign out?</h5>
      <form
        action={async (formData) => {
          "use server"
          await signOut()
        }}
      >
        <button type="submit">Sign out</button>
      </form>
    </div>
  )
}
```

</Code.Next>
<Code.Qwik>

With Qwik we can do a server-side sign out with Form action, or a more
simple client-side sign out via submit method.

```ts filename="./components/sign-out.tsx"
import { component$ } from "@builder.io/qwik"
import { Form, Link } from "@builder.io/qwik-city"
import { useSignOut } from "./plugin@auth"

export default component$(() => {
  const signOutSig = useSignOut()

  return (
    <>
      {/* server-side with Form action */}
      <Form action={signOutSig}>
        <input type="hidden" name="redirectTo" value="/signedout" />
        <button>Sign Out</button>
      </Form>

      {/* submit method */}
      <Link onClick$={() => signOutSig.submit({ redirectTo: "/" })}>
        SignIn
      </Link>
    </>
  )
})
```

</Code.Qwik>
<Code.Svelte>

```svelte filename="src/routes/signout/+page.svelte" {13} /submitButton/
<script lang="ts">
  import { SignOut } from "@auth/sveltekit/components"
</script>

<div class="relative flex h-full w-full overflow-hidden">
  <div
    class="z-20 flex h-dvh w-full items-center justify-center md:ml-[15%] md:w-[22rem]"
  >
    <div class="flex w-80 flex-col items-center justify-center text-xl">
      <h2
        class="mb-4 flex items-center space-x-2 text-3xl font-light text-slate-600"
      >
        <img src="/img/logo.png" alt="Company Logo" class="size-5" />
        <span class="text-4xl font-medium text-white">Company</span>
      </h2>
      <div
        class="m-8 flex w-full flex-col gap-2 rounded bg-white p-6 shadow-lg"
      >
        <SignOut signOutPage="signout" className="w-full">
          <div
            slot="submitButton"
            class="mt-2 flex h-12 w-full items-center space-x-2 rounded px-4 text-base font-light transition focus:outline-none focus:ring-2 focus:ring-slate-800 focus:ring-offset-2"
          >
            <span class="flex w-full justify-center"> Signout </span>
          </div>
        </SignOut>
      </div>
    </div>
  </div>
</div>
```

You'll also need to create this server page in SvelteKit to handle the action at `/signout`. That's the default path, but this can be changed with the `signOutPage` prop on the `SignOut` component above.

```ts filename="src/routes/signout/+page.server.ts"
import { signOut } from "../../auth"
import type { Actions } from "./$types"

export const actions = { default: signOut } satisfies Actions
```

</Code.Svelte>
</Code>

Now if the user navigates to `/signout` they'll see the following page:

import CustomSignOut from "../../../public/img/tutorials/custom-sign-out.webp"

<Screenshot src={CustomSignOut} alt="Custom Sign-out" />

If they click "Sign out", the session will be deleted and they will be redirected to the homepage.

================
File: docs/pages/guides/_meta.js
================


================
File: docs/pages/guides/configuring-github.mdx
================
import { Callout, Tabs } from "nextra/components"
import { Screenshot } from "@/components/Screenshot"
import { Code } from "@/components/Code"

# OAuth with GitHub

In this tutorial, we'll be setting up Auth.js in a Next.js application to be able to log in with **GitHub**.

<Callout type="info">
  This tutorial uses GitHub as the OAuth provider and Next.js as the framework.
  Note that for any OAuth provider or any framework, **the process will be the
  same/very similar**, mainly differing on how you register your application in
  the chosen provider's dashboard.
</Callout>

## Setting up Auth.js

### Installing Auth.js and Next.js

For this tutorial, we're gonna use the default [Auth.js & Next.js example app](https://github.com/nextauthjs/next-auth-example). If you already have an existing Next.js app, it should work too. If you don't, clone the repository:

```bash
git clone https://github.com/nextauthjs/next-auth-example.git && cd next-auth-example
```

If you're using the example app, Auth.js is already installed, otherwise follow the [installation instructions](/getting-started/installation).

### Creating the server config

Next, we're gonna create the main Auth.js configuration file which contains the necessary configuration for Auth.js, as well as the dynamic route handler.

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"

export const { handlers, auth } = NextAuth({
  providers: [GitHub],
})
```

```ts filename="./app/api/auth/[...nextauth]/route.ts"
import { handlers } from "@/auth" // Referring to the auth.ts we just created
export const { GET, POST } = handlers
export const runtime = "edge" // optional
```

Since this is a [catch-all dynamic route](https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#catch-all-segments), it will respond to all the relevant Auth.js API routes so that your application can interact with the chosen OAuth provider using the [OAuth 2](https://oauth.net/2) protocol.

### Adding environment variables

If you haven't, create an `.env.local` file as explained in the [installation section](/getting-started/installation) and add the following two GitHub variables:

```bash filename=".env.local" {3-4}
AUTH_SECRET="changeMe"

AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=
```

We will be filling `AUTH_GITHUB_ID` and `AUTH_GITHUB_SECRET` with proper values from the GitHub Developer Portal once we have registered our application in GitHub.

## Registering your App

### Creating an OAuth App in GitHub

To get the required credentials from GitHub, we need to create an application in their developer settings.

Go to the [GitHub developer settings](https://github.com/settings/developers), also found under **Settings** → **Developers** → **OAuth Apps**, and click "New OAuth App":

import CreatingOAuthApp from "../../public/img/oauth-setup/creating-oauth-app.webp"

<Screenshot src={CreatingOAuthApp} alt="Creating an OAuth App on GitHub" />

Next, you'll be presented with a screen to register your application. Fill in all the required fields.

import CallbackUrl from "../../public/img/oauth-setup/callback-url.webp"

<Screenshot src={CallbackUrl} />

The default callback URL should generally take the form of `[origin]/api/auth/callback/[provider]`, however, the default is slightly different depending on which framework you're using.

<Code>
<Code.Next>

```bash
// Local
http://localhost:3000/api/auth/callback/github

// Prod
https://app.company.com/api/auth/callback/github
```

</Code.Next>
<Code.Qwik>

```bash
// Local
http://localhost:3000/auth/callback/github

// Prod
https://app.company.com/auth/callback/github
```

Notice no `/api` path parameter.

</Code.Qwik>
<Code.Svelte>

```bash
// Local
http://localhost:3000/auth/callback/github

// Prod
https://app.company.com/auth/callback/github
```

Notice no `/api` path parameter.

</Code.Svelte>
<Code.Express>

```bash
// Local
http://localhost:3000/auth/callback/github

// Prod
https://app.company.com/auth/callback/github
```

Notice no `/api` path parameter.

</Code.Express>
</Code>

Once you've entered all the required fields, press **"Register application"**.

### Secrets

After successfully registering your application, GitHub will present us with the required details.

import ClientIdSecret from "../../public/img/oauth-setup/clientid-secret.webp"

<Screenshot src={ClientIdSecret} alt="Generating clientId and clientSecret" />

We need 2 things from this screen, the **Client ID** and **Client Secret**.

The Client ID is always visible, it is a public identifier of your OAuth application within GitHub.

To get a Client Secret, you have to click on **"Generate a new client secret"**, which will create your first client secret. You can easily create a new client secret here in case your first one gets leaked, lost, etc.

<Callout>
  Keep your **Client Secret** secure and never expose it to the public or share
  it with people outside your organization.
</Callout>

## Wiring all together

Now that we have the required Client ID and Client Secret, paste them into your `.env.local` file we created earlier.

```bash filename=".env.local" {3-4}
AUTH_SECRET="changeMe"

AUTH_GITHUB_ID={clientId}
AUTH_GITHUB_SECRET={clientSecret}
```

With all the pieces in place, you can now start your local dev server and test the login process.

```bash npm2yarn
npm run dev
```

Navigate to [`http://localhost:3000`](http://localhost:3000). You should see the following page:

import AppStart from "../../public/img/oauth-setup/app-start.webp"

<Screenshot src={AppStart} alt="App Start" />

Click on **"Sign in"**, you should be redirected to the default Auth.js signin page. You can [customize this page](/guides/pages/signin) to fit your needs. Next, click on **"Sign in with GitHub"**. Auth.js will redirect you to GitHub, where GitHub will recognize your application and ask the user to confirm they want to authenticate to your new application by entering their credentials.

import GitHubCredentials from "../../public/img/oauth-setup/github-auth-credentials.webp"

<Screenshot src={GitHubCredentials} alt="GitHub Credentials" />

Once authenticated, GitHub will redirect the user back to your app and Auth.js will take care of the rest:

import GitHubAuthSuccess from "../../public/img/oauth-setup/github-auth-success.webp"

<Screenshot src={GitHubAuthSuccess} alt="GitHub Authentication Success" />

If you've landed back here that means everything worked! We have completed the whole OAuth authentication flow so that users can log in to your application via GitHub!

<Callout type="info">
  As you can see, most of the time required setting up OAuth in your application
  is spent registering your application in the OAuth provider's dashboard (some
  are easier to navigate, some are harder). Once registered, the setup via
  Auth.js should be straight forward.
</Callout>

## Deployment

Before you can release your app to production, you'll need to change a few things.

Unfortunately, GitHub is among the providers which do not let you register multiple callback URLs for one application. Therefore, you'll need to register a separate application in GitHub's dashboard [as we did previously](/guides/configuring-github#registering-our-app) but set the callback URL to your application's production domain (.i.e `https://example.com/api/auth/callback/github`). You'll then also have a new **Client ID** and **Client Secret** that you need to add to your production environment via your hosting provider's dashboard (Vercel, Netlify, Cloudflare, etc.) or however you manage environment variables in production.

Refer to the [Deployment page](/getting-started/deployment) for more information.

================
File: docs/pages/guides/configuring-http-email.mdx
================
---
title: Configuring your own HTTP Email
---

import { Code } from "@/components/Code"

# HTTP Email

We have a few built-in HTTP Email providers like [Resend](/getting-started/providers/resend), [SendGrid](/getting-started/providers/sendgrid) and [Postmark](/getting-started/providers/postmark), sometimes you may want to use your own HTTP endpoint to send emails.

To do this, we can write our own provider with a custom [`sendVerificationRequest`](/reference/core/providers/email#sendverificationrequest) method. Don't forget, an `email` type provider **requires** a database adapter.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import { sendVerificationRequest } from "./lib/authSendRequest"

export const { handlers, auth } = NextAuth({
  adapter,
  providers: [
    {
      id: "http-email",
      name: "Email",
      type: "email",
      maxAge: 60 * 60 * 24, // Email link will expire in 24 hours
      sendVerificationRequest,
    },
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { sendVerificationRequest } from "../lib/authSendRequest"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      {
        id: "http-email",
        name: "Email",
        type: "email",
        maxAge: 60 * 60 * 24, // Email link will expire in 24 hours
        sendVerificationRequest,
      },
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import { sendVerificationRequest } from "../lib/authSendRequest"

export const { handle, auth } = SvelteKitAuth({
  adapter,
  providers: [
    {
      id: "http-email",
      name: "Email",
      type: "email",
      maxAge: 60 * 60 * 24, // Email link will expire in 24 hours
      sendVerificationRequest,
    },
  ],
})
```

</Code.Svelte>
<Code.Express>

```ts filename="./src/routes/auth.route.ts"
import { ExpressAuth } from "@auth/express"
import { sendVerificationRequest } from "../lib/authSendRequest"
import express from "express"

const app = express()

app.set("trust proxy", true)
app.use(
  "/auth/*",
  ExpressAuth({
    adapter,
    providers: [
      {
        id: "http-email",
        name: "Email",
        type: "email",
        maxAge: 60 * 60 * 24, // Email link will expire in 24 hours
        sendVerificationRequest,
      },
    ],
  })
)
```

</Code.Express>
</Code>

After we've setup the initial configuration, you've got to write `sendVerificationRequest` function. Below is a simple version which just sends a text email with a link to the user.

```ts filename="./lib/authSendRequest.ts"
export async function sendVerificationRequest({ identifier: email, url }) {
  // Call the cloud Email provider API for sending emails
  const response = await fetch("https://api.sendgrid.com/v3/mail/send", {
    // The body format will vary depending on provider, please see their documentation
    body: JSON.stringify({
      personalizations: [{ to: [{ email }] }],
      from: { email: "noreply@company.com" },
      subject: "Sign in to Your page",
      content: [
        {
          type: "text/plain",
          value: `Please click here to authenticate - ${url}`,
        },
      ],
    }),
    headers: {
      // Authentication will also vary from provider to provider, please see their docs.
      Authorization: `Bearer ${process.env.SENDGRID_API}`,
      "Content-Type": "application/json",
    },
    method: "POST",
  })

  if (!response.ok) {
    const { errors } = await response.json()
    throw new Error(JSON.stringify(errors))
  }
}
```

A more advanced `sendVerificationRequest` can be seen below, this is a version of the builtin function.

```ts filename="./lib/authSendRequest.ts"
export async function sendVerificationRequest(params) {
  const { identifier: to, provider, url, theme } = params
  const { host } = new URL(url)
  const res = await fetch("https://api.resend.com/emails", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${provider.apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      from: provider.from,
      to,
      subject: `Sign in to ${host}`,
      html: html({ url, host, theme }),
      text: text({ url, host }),
    }),
  })

  if (!res.ok)
    throw new Error("Resend error: " + JSON.stringify(await res.json()))
}

function html(params: { url: string; host: string; theme: Theme }) {
  const { url, host, theme } = params

  const escapedHost = host.replace(/\./g, "&#8203;.")

  const brandColor = theme.brandColor || "#346df1"
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  }

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}
```

To sign in via this custom provider, you would refer to it by the id in when you are calling the sign-in method, for example: `signIn('http-email', { email: 'user@company.com' })`.

================
File: docs/pages/guides/configuring-oauth-providers.mdx
================
import { Callout, Steps } from "nextra/components"
import { Code } from "@/components/Code"

# Configuring an OAuth provider

## Override default provider config

For built-in providers, usually you only need to specify a client id and client secret, and in case of OIDC (OpenID Connect), an issuer as well.
We can [infer these from environment variables](/guides/environment-variables#oauth-variables).

If you need to override any of the defaults provider config options, you can add them in the provider's function call and they will be deeply-merged with our [defaults](https://github.com/nextauthjs/next-auth/tree/main/packages/core/src/providers).
That means you only have to override part of the options that you need to be different. For example if you want different scopes, overriding `authorization.params.scope` is enough, instead of the whole `authorization` option.

For example, to override a provider's default `scope`s, you can do the following:

<Code>
<Code.Next>
```ts filename="./auth.ts"
import NextAuth from "next-auth";
import Auth0 from "next-auth/providers/auth0";

export const { handlers, auth } = NextAuth({
  providers: [
    Auth0({ authorization: { params: { scope: "openid custom_scope" } } }),
  ],
});
```
</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Auth0 from "@auth/qwik/providers/auth0";

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Auth0({ authorization: { params: { scope: "openid custom_scope" } } }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>
```ts filename="src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";
import Auth0 from "@auth/sveltekit/providers/auth0";

export const { handle, signIn } = SvelteKitAuth({
  providers: [
    Auth0({ authorization: { params: { scope: "openid custom_scope" } } }),
  ],
});
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

Another example, the `profile` callback will return `name`, `email` and `picture` by default, but you might want to return more information from the provider. What you return will be used to create the user object in the database.

<Code>
<Code.Next>
```ts filename="./auth.ts"
import NextAuth from "next-auth";
import Auth0 from "next-auth/providers/auth0";

export const { handlers, auth } = NextAuth({
  providers: [
    Auth0({
      // You can also make calls to external resources if necessary.
      async profile(profile) {
        return {};
      },
    }),
  ],
});
```
</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Auth0 from "@auth/qwik/providers/auth0";

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Auth0({
        // You can also make calls to external resources if necessary.
        async profile(profile) {
          return {};
        },
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>
```ts filename="src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";
import Auth0 from "@auth/sveltekit/providers/auth0";

export const { handle } = SvelteKitAuth({
  providers: [
    Auth0({
      // You can also make calls to external resources if necessary.
      async profile(profile) {
        return {};
      },
    }),
  ],
});
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

## Use your own provider

<Callout>
  Check our [built-in OAuth providers](/getting-started/authentication/oauth)
  first, before creating one from scratch.
</Callout>

We support any [OAuth](https://datatracker.ietf.org/doc/html/rfc6749) or [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) compliant provider.
Start by passing an object to the [`providers` list](/reference/core#providers):

<Code>
<Code.Next>
```ts filename="./auth.ts"
import NextAuth from "next-auth";

export const { handlers, auth } = NextAuth({
  providers: [{
    id: "my-provider", // signIn("my-provider") and will be part of the callback URL
    name: "My Provider", // optional, used on the default login page as the button text.
    type: "oidc", // or "oauth" for OAuth 2 providers
    issuer: "https://my.oidc-provider.com", // to infer the .well-known/openid-configuration URL
    clientId: process.env.AUTH_CLIENT_ID, // from the provider's dashboard
    clientSecret: process.env.AUTH_CLIENT_SECRET, // from the provider's dashboard
  }],
});
```
</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [{
      id: "my-provider", // signIn("my-provider") and will be part of the callback URL
      name: "My Provider", // optional, used on the default login page as the button text.
      type: "oidc", // or "oauth" for OAuth 2 providers
      issuer: "https://my.oidc-provider.com", // to infer the .well-known/openid-configuration URL
      clientId: import.meta.env.AUTH_CLIENT_ID, // from the provider's dashboard
      clientSecret: import.meta.env.AUTH_CLIENT_SECRET, // from the provider's dashboard
    }],
  })
)
```

</Code.Qwik>
<Code.Svelte>
```ts filename="src/auth.ts"
import { SvelteKitAuth } from "@auth/sveltekit";

export const { handle } = SvelteKitAuth({
  providers: [{
    id: "my-provider", // signIn("my-provider") and will be part of the callback URL
    name: "My Provider", // optional, used on the default login page as the button text.
    type: "oidc", // or "oauth" for OAuth 2 providers
    issuer: "https://my.oidc-provider.com", // to infer the .well-known/openid-configuration URL
    clientId: process.env.AUTH_CLIENT_ID, // from the provider's dashboard
    clientSecret: process.env.AUTH_CLIENT_SECRET, // from the provider's dashboard
  }],
});
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

Then, set the [callback URL](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-07.html#name-client-redirection-endpoint) in your provider's dashboard to `https://app.com/{basePath}/callback/{id}`.

<Callout type="info">
  By default, `basePath` is `/api/auth` for Next.js, and `/auth` in all other
  integrations. See [`basePath`](/reference/core#basepath).
</Callout>

That's it! 🎉

## Adding a new built-in provider

If you think your custom provider might be useful to others, we encourage you to open a PR and add it to the built-in list.

<Steps>

### Creating the provider's file

Create a new `{provider}.ts` file under the [`packages/core/src/providers`](https://github.com/nextauthjs/next-auth/tree/main/packages/core/src/providers) directory.

### Adhere to our code conventions

Use the [built-in providers](https://github.com/nextauthjs/next-auth/tree/main/packages/core/src/providers) as a guide, make sure your provider adheres to the same code conventions, .i.e:

- Use TypeScript
- Use a named default export: `export default function YourProvider`
- Export the TypeScript `interface` that defines the provider's available user info properties
- Add the necessary JSDoc comments/documentation. For example, the [Auth0 provider](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/auth0.ts) is a good example for OIDC and the [GitHub Provider](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/github.ts) is an OAuth provider.)
- Add links to the provider's API reference/documentation so others can understand how to set up this provider

### Add your provider in the GitHub issues dropdown

Add the new provider name to the `Provider type` dropdown options in [`the provider issue template`](https://github.com/nextauthjs/next-auth/edit/main/.github/ISSUE_TEMPLATE/2_bug_provider.yml)

### Add a logo

Add a logo `{provider}.svg` to the
[`docs/static/img/providers`](https://github.com/nextauthjs/next-auth/tree/main/docs/static/img/providers) directory.

</Steps>

Once the PR is merged, others will also be able to discover and use this provider with any of our integrations. That's it! 🎉

================
File: docs/pages/guides/configuring-resend.mdx
================
import { Callout, Steps, Tabs } from "nextra/components"
import { Screenshot } from "@/components/Screenshot"

# Magic links with Resend

In this tutorial, we'll be setting up Auth.js in a Next.js application to be able to log in with **Resend**.

Magic links (also known as "passwordless") authentication is a login method which uses emails containing a verification token embedded in a URL. When the user clicks on the link, they will be redirected to your Auth.js app and be logged in, as long as that verification token is still valid.

<Callout type="info">
  This tutorial uses Resend as the Passwordless email provider and Next.js as
  the framework. Note that for any OAuth provider or any framework, **the
  process will be the same/very similar**, mainly differing on how you register
  your application in the chosen provider's dashboard.
</Callout>

## Setting up Auth.js

### Installing Auth.js and Next.js

For this tutorial, we're gonna use the default [Auth.js & Next.js example app](https://github.com/nextauthjs/next-auth-example). If you already have an existing Next.js app, it should work too. If you don't, clone the repository:

```bash
git clone https://github.com/nextauthjs/next-auth-example.git && cd next-auth-example
```

If you're using the example app, Auth.js is already installed, otherwise follow the [installation instructions](/getting-started/installation).

### Creating the server config

Next, we're gonna create the main Auth.js configuration file which contains the necessary configuration for Auth.js, as well as the dynamic route handler.

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth } = NextAuth({
  providers: [Resend],
})
```

```ts filename="app/api/auth/[...nextauth]/route.ts"
export { GET, POST } from "@/auth"
```

Since this is a [catch-all dynamic route](https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#catch-all-segments), it will respond to all the relevant Auth.js API routes so that your application can interact with the chosen OAuth provider using the [OAuth 2](https://oauth.net/2) protocol.

### Adding environment variables

If you haven't, create an `.env.local` file as explained in the [installation section](/getting-started/installation) and add the following Resend API key variable.

```bash filename=".env.local" {3}
AUTH_SECRET="changeMe"

AUTH_RESEND_KEY=
```

We will be filling `AUTH_RESEND_KEY` with a proper key from the Resend developer portal once we've registered our account and application.

## Registering your App

To be able to send Emails using Resend you'll need to do two things.

1. Create an API Key
2. Verify your Domain

### API Key

You'll need to sign up for an account at [Resend](https://resend.com), and then go to ["API Keys"](https://resend.com/api-keys) in the main sidebar. There you can click on **"Create API Key"**. We only need "Sending Access".

### Domain

To verify your domain, follow the [Resend docs](https://resend.com/docs/dashboard/domains/introduction) and come back once you've got everything set up with your domain.

Next, you will have to update the `from` address to be from the domain you've configured and verified in Resend.

```ts
import NextAuth from "next-auth"
import Resend from "next-auth/providers/resend"

export const { handlers, auth } = NextAuth({
  providers: [
    Resend({
      from: "auth@app.company.com",
    }),
  ],
})
```

## Wiring all together

Now that we have the required API key, paste it into your `.env.local` file we created earlier.

```bash filename=".env.local" {3}
AUTH_SECRET="changeMe"

AUTH_RESEND_KEY={apiKey}
```

With all the pieces in place, you can now start your local dev server and test the login process.

```bash npm2yarn
npm run dev
```

Navigate to [`http://localhost:3000`](http://localhost:3000). You should see the following page:

import AppStart from "../../public/img/oauth-setup/app-start.webp"

<Screenshot src={AppStart} alt="App Start" />

Click on **"Sign in"**, you should be redirected to the default Auth.js signin page. You can [customize this page](/guides/pages/signin) to fit your needs. Next, enter your email address in the email input field and click **"Sign in with Resend"**.

Go to your email inbox and you should find the email from your Auth.js application with a button labelled "Sign in". Click on this button and you should be redirected back to your local dev app and be signed in!

import GitHubAuthSuccess from "../../public/img/oauth-setup/github-auth-success.webp"

<Screenshot src={GitHubAuthSuccess} alt="GitHub Authentication Success" />

If you've landed back here that means everything worked! We have completed the whole passwordless authentication flow so that your users can log in to your application via passwordless magic-links!

<Callout>
  You can customize the contents of this email and modify some additional Resend
  parameters. For more details, check out our [Resend
  provider](/getting-started/providers/resend) docs page.
</Callout>

## Deployment

Deploying your Auth.js application with Resend does not require any other changes. Just make sure you've added all the required environment variables to your production environment. Refer to the [Deployment page](/getting-started/deployment) for more information.

================
File: docs/pages/guides/corporate-proxy.mdx
================
import { Code } from "@/components/Code"

# Supporting corporate proxies

Auth.js libraries use the `fetch` API to communicate with OAuth providers. If your organization uses a corporate proxy, you may need to configure the `fetch` API to use the proxy.

## Using a custom fetch function

You can provide a custom `fetch` function by passing it as an option to the provider.

# Using Undici Library

Here, we use the `undici` library to make requests through a proxy server, by passing a `dispatcher` to the `fetch` implementation by `undici`.

<Code>
  <Code.Next>

```tsx filename="auth.ts"
import NextAuth, { customFetch } from "next-auth"
import GitHub from "next-auth/providers/github"
import { ProxyAgent, fetch as undici } from "undici"

const dispatcher = new ProxyAgent("my.proxy.server")
function proxy(...args: Parameters<typeof fetch>): ReturnType<typeof fetch> {
  // @ts-expect-error `undici` has a `duplex` option
  return undici(args[0], { ...args[1], dispatcher })
}

export const { handlers, auth } = NextAuth({
  providers: [GitHub({ [customFetch]: proxy })],
})
```

  </Code.Next>
</Code>

# Using HttpsProxyAgent

On Edge Runtimes or with proxy restrictions, the `undici` library may not work. Using a simpler approach with HttpsProxyAgent by passing a `proxyAgent` to the `fetch` implementation.

<Code>
  <Code.Next>

```tsx filename="auth.ts"
import NextAuth, { customFetch } from "next-auth"
import GitHub from "next-auth/providers/github"
const { HttpsProxyAgent } = require("https-proxy-agent")

const proxyAgent = new HttpsProxyAgent("my.proxy.server")
async function proxy(url: string, options: any): Promise<Response> {
  const response = (await fetch(url, {
    ...options,
    agent: proxyAgent,
  })) as unknown as Response
  return response
}

export const { handlers, auth } = NextAuth({
  providers: [GitHub({ [customFetch]: proxy })],
})
```

  </Code.Next>
</Code>

## Resources

- [`undici` - Basic Proxy Request with local agent dispatcher](https://undici.nodejs.org/#/docs/api/ProxyAgent?id=example-basic-proxy-request-with-local-agent-dispatcher)

================
File: docs/pages/guides/creating-a-database-adapter.mdx
================
import { Callout } from "nextra/components"

# Creating a database adapter

Auth.js adapters allow you to integrate with any (even multiple) database/back-end service, even if we don't have an [official package](https://github.com/nextauthjs/next-auth/tree/main/packages) available yet. (We welcome PRs for new adapters! See the [guidelines](#official-adapter-guidelines) below.)

Auth.js adapters are very flexible, and you can implement only the methods you need, and only create the database tables/columns that are actually going to be used.

An Auth.js adapter is a function that receives an ORM/database client and returns an object with methods (based on the [`Adapter` interface](/reference/core/adapters#adapter)) that interact with the database. The same database Adapter will be compatible with any Auth.js library.

Optionally, you can run our [Adapter tests](https://github.com/nextauthjs/next-auth/blob/main/packages/utils/adapter.ts) on your adapter to ensure it is compliant with the Auth.js.

## User management

Auth.js differentiates between users and accounts. A user can have multiple accounts. An account is created for each provider type the user signs in with for the first time. For example, if a user signs in with Google and then with Facebook, they will have two accounts, one for each provider. The first provider the user signs in with will also be used to create the user object. See the [`profile()` provider method](/reference/core/providers#profile).

### Methods and models

<div style={{display: "grid", gridTemplateColumns: "1fr 1fr"}}>
  <span>
    - [`createUser`](/reference/core/adapters#createuser)
    - [`getUser`](/reference/core/adapters#getuser)
    - [`getUserByAccount`](/reference/core/adapters#getuserbyaccount)
    - [`updateUser`](/reference/core/adapters#updateuser)
    - [`linkAccount`](/reference/core/adapters#linkaccount)

    Not yet invoked by Auth.js:
    - [_`deleteUser`_](/reference/core/adapters#deleteuser)
    - [_`unlinkAccount`_](/reference/core/adapters#unlinkaccount)

  </span>
  ```mermaid
  erDiagram
      User ||--|{ Account : ""
      User {
        string id
      }
      Account {
        string userId
        string type
        string provider
        string providerAccountId
      }
  ```
</div>

See also: [User](/concepts/database-models#user) and [Account](/concepts/database-models#account) models.

<Callout type="info">
  Although Auth.js doesn't require it, for basic display purposes, we recommend
  adding the following columns to the `User` table as well: `name`, `email`,
  `image`. You can configure the columns via the [`profile()` provider
  method](/reference/core/providers#profile). If you don't need to save these
  properties, create an empty `profile() {}` method.
</Callout>

<Callout type="info">
  Although Auth.js doesn't require it, the `Account` table typically saves
  tokens retrieved from the provider. You can configure the columns via the
  [`account()` provider method](/reference/core/providers#account). If you don't
  need to save tokens, create an empty `account() {}` method.
</Callout>

## Database session management

Auth.js can manage sessions in two ways. Learn about them and their advantages and disadvantages at [Concepts: Session strategies](/concepts/session-strategies).

### Methods and models

<div style={{display: "grid", gridTemplateColumns: "1fr 1fr"}}>
  <span>
    - [`createSession`](/reference/core/adapters#createsession)
    - [`getSessionAndUser`](/reference/core/adapters#getsessionanduser)
    - [`updateSession`](/reference/core/adapters#updatesession)
    - [`deleteSession`](/reference/core/adapters#deletesession)
  </span>
  ```mermaid
  erDiagram
      User ||--|{ Account : ""
      User {
        string id
      }
      User ||--|{ Session : ""
      Session {
        string id
        timestamp expires
        string sessionToken
        string userId
      }
      Account {
        string userId
        string type
        string provider
        string providerAccountId
      }
  ```
</div>

If you want to use database sessions, you will need to implement the following methods:

To add database session management, you will need to expand your database tables/columns as follows:

See also: [Session](/concepts/database-models#session) models.

## Verification tokens

When you want to support email/passwordless login, Auth.js uses a database to store temporary verification tokens that are tied to a user's email address.

### Methods and models

<div style={{display: "grid", gridTemplateColumns: "1fr 1fr"}}>
  <span>
    - [`getUserByEmail`](/reference/core/adapters#getuserbyemail)
    - [`createVerificationToken`](/reference/core/adapters#createverificationtoken)
    - [`useVerificationToken`](/reference/core/adapters#useverificationtoken)
  </span>
  ```mermaid
  erDiagram
      User ||--|{ Account : ""
      User {
        string id
        timestamp emailVerified
      }
      Account {
        string userId
        string type
        string provider
        string providerAccountId
      }
      User ||--|{ VerificationToken : ""
      VerificationToken {
        string identifier
        string token
        timestamp expires
      }
  ```
</div>

See also: [Verification Token](/concepts/database-models#verification-token) models.

## Official adapter guidelines

<Callout type="info">
  When all of the below steps are done, you are ready to submit a PR to our
  [repository](https://github.com/nextauthjs/next-auth).
</Callout>

If you created an adapter and want us to distribute it as an official package, please make sure it meets the following requirements. Check out this [existing adapter](https://github.com/nextauthjs/next-auth/tree/main/packages/adapter-prisma) to learn about the package structure, required files, test setup, config, etc.

1. The Adapter _must_ implement all methods of the [`Adapter` interface](/reference/core/adapters#adapter)
1. [Adapter tests](https://github.com/nextauthjs/next-auth/blob/main/packages/utils/adapter.ts) _must_ be included and _must_ pass. Docker is favored over services, to make CI resilient to network errors and to reduce the number of GitHub Action Secrets (which also lets us run these tests in fork PRs)
1. The Adapter _must_ follow these coding styles

   - Written in TypeScript
   - Passes the linting rules of the monorepo
   - Does not include polyfills
   - Configured as an ES module (ESM)
   - Documented via JSDoc comments
   - Have at least one named export exported from its main module. (For example `export function MyAdapter(): Adapter {}`)
   - collection/table names should follow the convention (plural/singular, camelCase/snake_case) of the underlying ORM/database docs/conventions

1. Configure the monorepo to help us maintain the package

   - Add a (preferably `.svg`) logo to [this directory](https://github.com/nextauthjs/next-auth/tree/main/docs/public/img/adapters)
   - Add the Adapter to our GitHub workflow files [here](https://github.com/nextauthjs/next-auth/tree/main/.github/workflows/release.yml#L12) and [here](https://github.com/nextauthjs/next-auth/tree/main/.github/pr-labeler.yml)
   - Make sure to [`.gitignore` generated files](https://github.com/nextauthjs/next-auth/tree/main/.gitignore#L58) if there are any

1. The Adapter _must_ be able to handle any property coming from the user

   ORMs/database clients might have their own data types, but Auth.js expects these to be normalized as plain JavaScript objects for consistency. If your ORM/database client does not convert automatically, you need to convert the values when reading/writing from/to the database.

   You might be tempted to check the name of a property and convert it based on that, but this is not scalable (eg.: a `User` object might have more than one `Date` property, not only `emailVerified`).

   Instead, we recommend creating util functions that convert the values. Below is an example of how to convert dates (if your ORM/database client uses other data types, remember to convert them too, not only dates). It checks if the value can be parsed as a date, and if so, it converts it to a `Date` object. Otherwise, it leaves the original value as is.:

```ts
// https://github.com/honeinc/is-iso-date/blob/8831e79b5b5ee615920dcb350a355ffc5cbf7aed/index.js#L5
const isoDateRE =
  /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/

const isDate = (val: any): val is ConstructorParameters<typeof Date>[0] =>
  !!(val && isoDateRE.test(val) && !isNaN(Date.parse(val)))

export const format = {
  /** Takes an object that's coming from a database and converts it to plain JavaScript. */
  from<T>(object: Record<string, any> = {}): T {
    const newObject: Record<string, unknown> = {}
    for (const [key, value] of Object.entries(object))
      if (isDate(value)) newObject[key] = new Date(value)
      else newObject[key] = value
    return newObject as T
  },
  /** Takes an object that's coming from Auth.js and prepares it to be written to the database. */
  to<T>(object: Record<string, any>): T {
    const newObject: Record<string, unknown> = {}
    for (const [key, value] of Object.entries(object))
      if (value instanceof Date) newObject[key] = value.toISOString()
      else newObject[key] = value
    return newObject as T
  },
}
```

## TypeScript

You can take advantage of the types that comes with the framework packages (i.e. `next-auth/adapters`, `@auth/sveltekit/adapters`).

```ts
import type { Adapter } from "next-auth/adapters"

function MyAdapter(): Adapter {
  return {
    // your adapter methods here
  }
}
```

When writing your Adapter in JavaScript, you can still use JSDoc to get helpful editor hints and auto-completion.

```js {1}
/** @return { import("next-auth/adapters").Adapter } */
function MyAdapter() {
  return {
    // your adapter methods here
  }
}
```

## Resources

- [Official adapters' source code](https://github.com/nextauthjs/next-auth/tree/main/packages)
- [`Adapter` interface](/reference/core/adapters#adapter)

================
File: docs/pages/guides/creating-a-framework-integration.mdx
================
# Creating a Framework Integration

The core functionalities of Auth.js - `@auth/core` - are built on top of the Web Standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request)/[Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) mental model, and therefore are framework-agnostic. For each framework, we provide an integration layer that allows you to use the authentication features in a way that is specific to the framework. See the [list of integrations](/getting-started/integrations) that are currently available.

We welcome contributions of new official integrations. If you are interested in creating & maintaining a new integration, please read the following guidelines.

## Official framework guidelines

If you want to create a new official framework integration and distribute it under `@auth/` namespace, please make sure to follow the next steps and fulfill our maintenance requirements below:

### Setting up a new integration

We provide a script that generates all the required files for a new integration. To run the script, run the following command:

```bash npm2yarn
npm setup-fw-integration <framework-name>
```

This will copy all the files from our official template at `./packages/frameworks-template` to a new directory under `packages/` with all the required files, and rename the placeholders to the name of the framework you provided.

- Coding styles. The source code files should:

  - Be written in TypeScript
  - Pass the linting rules of the monorepo
  - Have a named export exported from its main module. For example: `export function ExpressAuth()`

- API reference documentation - We use [TypeDoc](https://typedoc.org/) for automated documentation generation. The documentation should:

  - Be written in JSDoc comments.
  - Explain how to use and configure the integration: How to do Session management, how to login/logout, how to configure the base URL.
  - Include a link to the official framework documentation in the reference section.

- Deployed Example. This task can be in a follow-up PR. The deployed example should:

  - All the actions (URL) should work as expected.
  - Have at least one OAuth provider configured.
  - The example code should live under `apps/examples/<framework-name>`. For example: `apps/examples/express`.

The above are required for us to distribute the package as an official package. Once the checklist is completed, you can mark the PR as "Ready for review" and the maintainers will review it.

================
File: docs/pages/guides/debugging.mdx
================
import { Callout } from "nextra/components"

# Debugging

Debugging Auth.js starts with enabling the `debug` option in your main Auth.js configuration.

```ts filename="./auth.ts" {4}
import NextAuth from "next-auth"

export const { handlers, auth } = NextAuth({
  debug: true,
})
```

This will use the `console` methods to log out many details about the authentication process, including requests, responses, errors, and database requests and responses.

## Logging

You can customize the logging output by providing your own logger. This is useful if you want to send logs to a logging service, or if you want to customize the format of the logs.

```ts filename="./auth.ts"
import log from "logging-service"
export const { handlers, auth } = NextAuth({
  logger: {
    error(code, ...message) {
      log.error(code, message)
    },
    warn(code, ...message) {
      log.warn(code, message)
    },
    debug(code, ...message) {
      log.debug(code, message)
    },
  },
})
```

<Callout type="warning">
  Enabling the `debug` option in production can lead to sensitive information
  being saved in your logs. Make sure to sanitize any sensitive information.
</Callout>

When `logger` options are set, the `debug` option is ignored

================
File: docs/pages/guides/edge-compatibility.mdx
================
import { Callout } from "nextra/components"

As Edge runtimes become more and more popular people are naturally trying to deploy Auth.js and `next-auth` in these environments and are running into some fundamental compatibility issues that plague the entire ecosystem at the moment. We're hoping with this document we can pick people up no matter where they currently are in terms of understanding and experience and help them understand the challenges and hopefully get Auth.js up and running in whichever runtime they choose!

To begin, let us get some background knowledge out of the way. If you're familiar with this, feel free to skip this section!

## Definitions

We're going to be talking specifically about Auth.js and how it intersects with the [edge runtimes](https://runtime-compat.unjs.io) that are very popular today with various frameworks, hosting providers, libraries, etc.

First things first, **what is "edge"** in this context? Edge here is borrowed from the network engineering folks and refers to a compute node (i.e. server) that is located on the edge of a network, i.e. closer to the users. Usually these are compute nodes that are lower power than the kind of full-fledged servers that can be found in the core of a datacenter that run most important workloads. Some advantages of running code here include lower latency to the users end devices, better scalability story, and more cost-effective compute. Some disadvantages include less powerful hardware and potentially different compatibility in terms of the software stack.

So when we say <abbr title="The JavaScript execution environment usually running at the edge of a network, closer to the user, that is explicitly NOT Node.js and is therefore different in various aspects compared to what we're used to running our code with (i.e. Node.js).">**edge runtimes**</abbr>, we mean a server-side JavaScript runtime that is **not** Node.js and is optimized to run on these edge compute nodes (servers). That generally means that the code is executing closer to your users on lower power hardware that is optimized for other things like quick startup times, low memory usage, etc.

This is a problem because these runtimes are often missing features that Node.js has and sometimes these are critical to the functioning of the libraries and packages you rely on. When a package says it's "edge compatible" or "edge ready", what they really mean is that they've engineered their software to avoid any of the Node.js features / modules that are missing in some of the edge runtimes, thereby making them more universally compatible. Check out unjs's [compatibility matrix](https://runtime-compat.unjs.io) to get an idea of which runtimes support which features. While not critical to Auth.js, this is a good time to mention that there is an industry group designed to provide a space for JavaScript runtimes to collaborate on API interop - [WinterCG](https://wintercg.org).

<Callout>
  I want to note here that these features / modules are often missing because
  the underlying environment they're running on doesn't provide them. For
  example, developers can invest as much time as they want, but if their
  server-side JavaScript runtime is going to be running in a sandboxed operating
  system environment that doesn't give them access to the Filesystem, then they
  won't be able to implement the `fs` module no matter how hard they try.
</Callout>

Because this Node.js vs. other runtimes situation is so fragmented and fluid at the moment, many libraries are optimizing their workloads to use only the most common denominator features, like `fetch`. For example, if you're a database provider and you can engineer your system so that your client library only has to make HTTP requests to communicate with your backend, then you can advertise your library as "edge compatible" and run in any place your users may want to. This is as opposed to other database client libraries which have to use raw TCP sockets from Node.js to communicate with their backend, for example.

## Auth.js

Edge compatibility is something Auth.js has optimized for. That means that you can run the core Auth.js functionality on any JavaScript runtime you choose. The key word here, however, being **core functionality**. If you use _only_ Auth.js / `next-auth` and no other library in your Auth.js callbacks, Middleware, etc. then you can use it wherever you want!

Issues begin to arise when you want to use other libraries with Auth.js.

## The Problem

### Database Adapters

A common package to pair with Auth.js to implement a holistic authentication system is a database client. Database clients are troublesome in that they often leverage TCP sockets to communicate directly with the database server. One such common database which does this is PostgreSQL.

PostgreSQL is a database that uses a message-based protocol for communication between a the client and server that is transported via **TCP (or Unix) sockets**. Raw TCP sockets are one of those Node.js features that are generally not available to edge runtimes. Therefore, on the surface, it seems like it's not possible to communicate with a PostgreSQL database from JavaScript running on edge runtime. The same goes for many other databases and their respective communication protocols.

As edge runtimes have matured and become more popular, however, people have gotten creative and implemented various solutions to this problem. One such common solution is to put some sort of API server in front of the database whose goal is to translate database queries sent to it via HTTP into a protocol the database can understand. This allows the client side to only have to make HTTP requests to the API server, which is something that every edge runtime supports.

### Middleware

In Next.js and `next-auth` you can also use Next.js [Middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware) to protect routes by checking if a session exists and deciding where to route next. By default, on Vercel and other hosting providers, **Middleware code always runs in an edge runtime**. This means that our code will be trying to execute, for example, PostgreSQL queries in an environment where the underlying functionality is not available (i.e. TCP sockets). Therefore, **to use a database adapter that isn't explicitly "edge compatible", we will need to find a way to query the database using the features that we do have available to us**.

## The Solution

Auth.js used with the [database session strategy](/concepts/session-strategies#database-session) and a database adapter makes many calls to the database during normal operations. No matter which framework you're using, every Auth.js client can fetch the currently active session and this is done by querying the database to check if the user's `sessionToken` is both in the database and valid (i.e. not expired).

This means that everywhere in your application where you may want to check if the user is authenticated or not will require a database call. Now in real life Auth.js is a bit smarter about this and uses caching and other tricks to avoid unnecessary database requests, but you can imagine that every `auth()` call will trigger a database query. Therefore, we need some sort of workaround to use Auth.js in edge runtimes with many database adapters!

### Split Config

With Next.js and `next-auth` in mind, let's think about what we need to do to make Auth.js be able to both run some of its code in an edge runtime, but also use a database to store its sessions. We would need a separate "version" of `next-auth` without the database settings for the edge environment and another one with the database for everywhere else. To achieve this, we can use the ["lazy initialization"](/reference/nextjs#lazy-initialization) features of Auth.js to instantiate a standalone client without the adapter for middleware and another one to be used everywhere else.

1. First, a common Auth.js configuration object to be used everywhere. This **will not** include the database adapter.

```ts filename="auth.config.ts" /NextAuthConfig/
import GitHub from "next-auth/providers/github"
import type { NextAuthConfig } from "next-auth"

// Notice this is only an object, not a full Auth.js instance
export default {
  providers: [GitHub],
} satisfies NextAuthConfig
```

2. Next, a separate **instantiated** Auth.js instance which imports that configuration, but also adds the adapter and using `jwt` for the Session strategy:

```ts filename="auth.ts" {2, 10, 11}
import NextAuth from "next-auth"
import authConfig from "./auth.config"

import { PrismaClient } from "@prisma/client"
import { PrismaAdapter } from "@auth/prisma-adapter"

const prisma = new PrismaClient()

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: PrismaAdapter(prisma),
  session: { strategy: "jwt" },
  ...authConfig,
})
```

3. Our Middleware, which would then import the configuration **without the database adapter** and instantiate its own Auth.js client.

```ts filename="middleware.ts" {2, 4}
import NextAuth from "next-auth"
import authConfig from "./auth.config"

export const { auth: middleware } = NextAuth(authConfig)
```

4. Finally, everywhere else we can import from the primary `auth.ts` configuration and use `next-auth` as usual. See our [session management docs](/getting-started/session-management/protecting) for more examples.

```tsx filename="app/protected/page.tsx" {4} /session/
import { auth } from "@/auth"

export default async function Page() {
  const session = await auth()

  if (!session) {
    return <div>Not authenticated</div>
  }

  return (
    <div className="container">
      <pre>{JSON.stringify(session, null, 2)}</pre>
    </div>
  )
}
```

It is important to note here that we've now removed database functionality and support from `next-auth` **in the middleware**. That means that we won't be able to fetch the session or other info like the user's account details, etc. while executing code in middleware. That means you'll want to rely on checks like the one demonstrated above in the `/app/protected/page.tsx` file to ensure you're [protecting your routes](/getting-started/session-management/protecting) effectively. Middleware is then still used for bumping the session cookie's expiry time, for example.

================
File: docs/pages/guides/environment-variables.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Environment variables

## Auth secret

<Code>
<Code.Next>

```bash filename=".env.local"
AUTH_SECRET="This is an example"
```

</Code.Next>
<Code.Qwik>

```bash filename=".env"
AUTH_SECRET="This is an example"
```

</Code.Qwik>
<Code.Svelte>

```bash filename=".env"
AUTH_SECRET="This is an example"
```

</Code.Svelte>
<Code.Express>

```bash filename=".env"
AUTH_SECRET="This is an example"
```

</Code.Express>
</Code>

`AUTH_SECRET` is a random token used by the library to encrypt tokens and email verification hashes, and it's mandatory to keep things secure (See [Deployment](/getting-started/deployment) to learn more). You can use the CLI to generate an auth secret:

```bash npm2yarn
npm exec auth secret
```

## Environment Variable Inference

Auth.js is automatically configured to pick the right environment variables for `clientId` and `clientSecret` when using an [official OAuth provider](/getting-started/authentication/oauth).

The shape of these variables in your `.env` files should always follow the same pattern:

```
AUTH_[PROVIDER]_ID=
AUTH_[PROVIDER]_SECRET=
```

For example if we're using the Google, Twitter and GitHub providers, your `.env` file would look something like this.

```bash
# Google
AUTH_GOOGLE_ID=123
AUTH_GOOGLE_SECRET=123

# Twitter
AUTH_TWITTER_ID=123
AUTH_TWITTER_SECRET=123

# GitHub
AUTH_GITHUB_ID=123
AUTH_GITHUB_SECRET=123
```

Then in your Auth.js configuration file, the `provider` array is simplified to this.

<Code>
<Code.Next>

```ts filename="./auth.ts" {7}
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"
import Twitter from "next-auth/providers/twitter"
import GitHub from "next-auth/providers/github"

export const { handlers, auth } = NextAuth({
  providers: [Google, Twitter, GitHub],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Google from "@auth/qwik/providers/google"
import Twitter from "@auth/qwik/providers/twitter"
import GitHub from "@auth/qwik/providers/github"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [Google, Twitter, GitHub],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./auth.ts" {7}
import SvelteKitAuth from "@auth/sveltekit"
import Google from "@auth/sveltekit/providers/google"
import Twitter from "@auth/sveltekit/providers/twitter"
import GitHub from "@auth/sveltekit/providers/github"

export const { handle } = SvelteKitAuth({
  providers: [Google, Twitter, GitHub],
})
```

</Code.Svelte>
</Code>

If for some reason you want to name the variables differently:

```bash
# Google
AUTH_WEBAPP_GOOGLE_CLIENT_ID=123
AUTH_WEBAPP_GOOGLE_CLIENT_SECRET=123
```

Then you will need to manually reference them in the config:

<Code>
<Code.Next>

```ts filename="./auth.ts" {7-8}
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"

export const { handlers, auth } = NextAuth({
  providers: [
    Google({
      clientId: process.env.AUTH_WEBAPP_GOOGLE_CLIENT_ID,
      clientSecret: process.env.AUTH_WEBAPP_GOOGLE_CLIENT_SECRET,
    }),
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Google from "@auth/qwik/providers/google"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Google({
        clientId: import.meta.env.AUTH_WEBAPP_GOOGLE_CLIENT_ID,
        clientSecret: import.meta.env.AUTH_WEBAPP_GOOGLE_CLIENT_SECRET,
      }),
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts" {8-9}
import SvelteKitAuth from "@auth/sveltekit"
import Google from "@auth/sveltekit/providers/google"
import { env } from "$env/dynamic/private"

export const { handle } = SvelteKitAuth({
  providers: [
    Google({
      clientId: env.AUTH_WEBAPP_GOOGLE_CLIENT_ID,
      clientSecret: env.AUTH_WEBAPP_GOOGLE_CLIENT_SECRET,
    }),
  ],
})
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

================
File: docs/pages/guides/extending-the-session.mdx
================
import { Callout } from "nextra/components"

# Extending the Session

Auth.js libraries only expose a subset of the user's information by default in a session to not accidentally expose sensitive user information.
This is `name`, `email`, and `image`.

<Callout type="info">
  All callbacks are async functions, so you can also get extra information from
  a database or external APIs.
</Callout>

A common use case is to add the user's id to the session. Below it is shown how to do this based on the session strategy you are using.

## With JWT

To have access to the user id, add the following to your Auth.js configuration:

```ts filename="auth.ts"
  //  By default, the `id` property does not exist on `token` or `session`. See the [TypeScript](https://authjs.dev/getting-started/typescript) on how to add it.
  callbacks: {
    jwt({ token, user }) {
      if (user) { // User is available during sign-in
        token.id = user.id
      }
      return token
    },
    session({ session, token }) {
      session.user.id = token.id
      return session
    },
  },
}
```

During sign-in, the `jwt` callback exposes the user's profile information coming from the provider.
You can leverage this to add the user's id to the JWT token. Then, on subsequent calls of this API will have access to the user's id via `token.id`.
Then, to expose the user's id in the actual session, you can access `token.id` in the `session` callback and save it on `session.user.id`.

Calls to `auth()` or `useSession()` will now have access to the user's id.

## With Database

If you are using a database session strategy, you can add the user's id to the session by modifying the `session` callback:

```ts filename="auth.ts"
  //  By default, the `id` property does not exist on `session`. See the [TypeScript](https://authjs.dev/getting-started/typescript) on how to add it.
  callbacks: {
    session({ session, user }) {
      session.user.id = user.id
      return session
    },
  }
}
```

This will add the user's id to the session object. Notice that in this case, we are getting the id from the `user` object, not the `token`.
With the database session strategy, the `user` object is the user from the database, and there is no `token`.

Calls to `auth()` or `useSession()` will now have access to the user's id.

<Callout type="warning">
  The session object is not persisted server-side, even when using database
  sessions - only data such as the session token (id), the user, and the expiry
  time is stored in the session table. If you need to persist session data
  server-side, you must save it elsewhere. You can connect to the database in
  the `session()` callback to retrieve this information.
</Callout>

## With provider functions

We can extend the default session data in a few ways, one of which is by using the `authorize` and `profile` functions. These functions let us return a user object with the properties we need. We can then create logic based on this information to search in a database or an external API.

```ts
import Github from "next-auth/providers/github"
import Credentials from "next-auth/providers/credentials"
import type { Provider } from "next-auth/providers"

const providers: Provider[] = [
  Google({
    clientId: process.env.AUTH_GOOGLE_ID,
    clientSecret: process.env.AUTH_GOOGLE_SECRET,
    async profile(profile) {
      return { ...profile }
    },
  }),
  Credentials({
    async authorize(credentials) {
      return { ...credentials }
    },
  }),
]
```

## Resources

- [Concepts. Session strategies](/concepts/session-strategies)
- [TypeScript](/getting-started/typescript)

================
File: docs/pages/guides/integrating-third-party-backends.mdx
================
# Integrating with third-party backends

When logging in through a provider, you can use the received OAuth tokens to authenticate against a third-party API.
These tokens can be used to authorize requests to backends that are supporting the corresponding provider.

For example:

- GitHub's `access_token` will give you access to GitHub's APIs.
- Self-managed providers (like [Keycloak](https://www.keycloak.org), [`oidc-provider`](https://github.com/panva/node-oidc-provider), etc.) can be used to authorize against custom third-party backends.

## Storing the token in the session

The token(s) are made available in the `account` parameter of the jwt callback.
To store them in the session, they can be attached to the token first.

```typescript
jwt({ token, trigger, session, account }) {
  if (account?.provider === "my-provider") {
    return { ...token, accessToken: account.access_token }
  }
  // ...
}
```

In order to access the token when making API requests, it needs to be made available to the Auth.js session.

```typescript
async session({ session, token }) {
  session.accessToken = token.accessToken
  return session
}
```

## Using the token to make authorized API requests

OAuth tokens are commonly attached as `Authorization: Bearer <>` header.
It is recommended to attach this header server side, like a [Route Handler](https://nextjs.org/docs/app/building-your-application/routing/route-handlers).

```typescript
export async function handler(request: NextRequest) {
  const session = await auth()
  return await fetch(/*<your-backend-url>/api/authenticated/greeting*/, {
    headers: { "Authorization":  `Bearer ${session?.accessToken}` }
  })
  // ...
}
```

## Configuring the backend to authorize requests through your provider

Consult your backend framework's documentation on how to verify incoming access tokens.
Below is an [example](https://github.com/nextauthjs/authjs-third-party-backend/tree/main/backend-express) with Express.js using a [Keycloak](https://providers.authjs.dev/keycloak) instance.

```javascript
const app = express()
const jwtCheck = jwt({
  secret: jwks.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri:
      "https://keycloak.authjs.dev/realms/master/protocol/openid-connect/certs",
  }),
  issuer: "https://keycloak.authjs.dev/realms/master",
  algorithms: ["RS256"],
})
app.get("*", jwtCheck, (req, res) => {
  const name = req.auth?.name ?? "unknown name"
  res.json({ greeting: `Hello, ${name}!` })
})
// ...
```

## Resources

- Further examples for different backend frameworks can be found [here](https://github.com/nextauthjs/authjs-third-party-backend/tree/main).
- A full example of how to integrate a client app with a third-party API can be found in the [next-auth-example](https://github.com/nextauthjs/next-auth-example).
- [Keycloak](https://www.keycloak.org) - Open Source Identity and Access Management For Modern Applications and Services
- [`oidc-provider`](https://github.com/panva/node-oidc-provider) - OpenID Certified™ OAuth 2.0 Authorization Server implementation for Node.js

================
File: docs/pages/guides/refresh-token-rotation.mdx
================
import { Code } from "@/components/Code"
import { Callout } from "nextra/components"

<Callout>
  As of today, there is no built-in solution for automatic Refresh Token
  rotation. This guide will help you to achieve this in your application. Our
  goal is to add zero-config support for built-in providers eventually. [Let us
  know](/contributors#core-team) if you would like to help.
</Callout>

## What is refresh token rotation?

Refresh token rotation is the practice of updating an `access_token` on behalf of the user, without requiring interaction (ie.: re-authenticating).
`access_token`s are usually issued for a limited time. After they expire, the service verifying them will ignore the value, rendering the `access_token` useless.
Instead of asking the user to sign in again to obtain a new `access_token`, many providers also issue a `refresh_token` during initial signin, that has a longer expiry date.
Auth.js libraries can be configured to use this `refresh_token` to obtain a new `access_token` without requiring the user to sign in again.

## Implementation

<Callout type="info">
  There is an inherent limitation of the following guides that comes from the
  fact, that - for security reasons - `refresh_token`s are usually only usable
  once. Meaning that after a successful refresh, the `refresh_token` will be
  invalidated and cannot be used again. Therefore, in some cases, a
  race-condition might occur if multiple requests will try to refresh the token
  at the same time. The Auth.js team is aware of this and would like to provide
  a solution in the future. This might include some "lock" mechanism to prevent
  multiple requests from trying to refresh the token at the same time, but that
  comes with the drawback of potentially creating a bottleneck in the
  application. Another possible solution is background token refresh, to prevent
  the token from expiring during an authenticated request.
</Callout>

First, make sure that the provider you want to use supports `refresh_token`'s. Check out [The OAuth 2.0 Authorization Framework](https://www.rfc-editor.org/rfc/rfc6749#section-6) spec for more details.
Depending on the [session strategy](/concepts/session-strategies), the `refresh_token` can be persisted either in an encrypted JWT inside a cookie or in a database.

### JWT strategy

<Callout>
  While using a cookie to store the `refresh_token` is simpler, it is less
  secure. To mitigate risks with the `strategy: "jwt"`, Auth.js libraries store
  the `refresh_token` in an _encrypted_ JWT, in an `HttpOnly` cookie. Still, you
  need to evaluate based on your requirements which strategy you choose.
</Callout>

Using the [jwt](/reference/core/types#jwt) and [session](/reference/core/types#session) callbacks, we can persist OAuth tokens and refresh them when they expire.

Below is a sample implementation of refreshing the `access_token` with Google. Please note that the OAuth 2.0 request to get the `refresh_token` will vary between different providers, but the rest of logic should remain similar.

<Code>
  <Code.Next>

```ts filename="./auth.ts"
import NextAuth, { type User } from "next-auth"
import Google from "next-auth/providers/google"

export const { handlers, auth } = NextAuth({
  providers: [
    Google({
      // Google requires "offline" access_type to provide a `refresh_token`
      authorization: { params: { access_type: "offline", prompt: "consent" } },
    }),
  ],
  callbacks: {
    async jwt({ token, account }) {
      if (account) {
        // First-time login, save the `access_token`, its expiry and the `refresh_token`
        return {
          ...token,
          access_token: account.access_token,
          expires_at: account.expires_at,
          refresh_token: account.refresh_token,
        }
      } else if (Date.now() < token.expires_at * 1000) {
        // Subsequent logins, but the `access_token` is still valid
        return token
      } else {
        // Subsequent logins, but the `access_token` has expired, try to refresh it
        if (!token.refresh_token) throw new TypeError("Missing refresh_token")

        try {
          // The `token_endpoint` can be found in the provider's documentation. Or if they support OIDC,
          // at their `/.well-known/openid-configuration` endpoint.
          // i.e. https://accounts.google.com/.well-known/openid-configuration
          const response = await fetch("https://oauth2.googleapis.com/token", {
            method: "POST",
            body: new URLSearchParams({
              client_id: process.env.AUTH_GOOGLE_ID!,
              client_secret: process.env.AUTH_GOOGLE_SECRET!,
              grant_type: "refresh_token",
              refresh_token: token.refresh_token!,
            }),
          })

          const tokensOrError = await response.json()

          if (!response.ok) throw tokensOrError

          const newTokens = tokensOrError as {
            access_token: string
            expires_in: number
            refresh_token?: string
          }

          return {
            ...token,
            access_token: newTokens.access_token,
            expires_at: Math.floor(Date.now() / 1000 + newTokens.expires_in),
            // Some providers only issue refresh tokens once, so preserve if we did not get a new one
            refresh_token: newTokens.refresh_token
              ? newTokens.refresh_token
              : token.refresh_token,
          }
        } catch (error) {
          console.error("Error refreshing access_token", error)
          // If we fail to refresh the token, return an error so we can handle it on the page
          token.error = "RefreshTokenError"
          return token
        }
      }
    },
    async session({ session, token }) {
      session.error = token.error
      return session
    },
  },
})

declare module "next-auth" {
  interface Session {
    error?: "RefreshTokenError"
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    access_token: string
    expires_at: number
    refresh_token?: string
    error?: "RefreshTokenError"
  }
}
```

  </Code.Next>
</Code>

### Database strategy

Using the database session strategy is similar, but instead we will save the `access_token`, `expires_at` and `refresh_token` on the `account` for the given provider.

<Code>
  <Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export const { handlers, signIn, signOut, auth } = NextAuth({
  adapter: PrismaAdapter(prisma),
  providers: [
    Google({
      authorization: { params: { access_type: "offline", prompt: "consent" } },
    }),
  ],
  callbacks: {
    async session({ session, user }) {
      const [googleAccount] = await prisma.account.findMany({
        where: { userId: user.id, provider: "google" },
      })
      if (googleAccount.expires_at * 1000 < Date.now()) {
        // If the access token has expired, try to refresh it
        try {
          // https://accounts.google.com/.well-known/openid-configuration
          // We need the `token_endpoint`.
          const response = await fetch("https://oauth2.googleapis.com/token", {
            method: "POST",
            body: new URLSearchParams({
              client_id: process.env.AUTH_GOOGLE_ID!,
              client_secret: process.env.AUTH_GOOGLE_SECRET!,
              grant_type: "refresh_token",
              refresh_token: googleAccount.refresh_token,
            }),
          })

          const tokensOrError = await response.json()

          if (!response.ok) throw tokensOrError

          const newTokens = tokensOrError as {
            access_token: string
            expires_in: number
            refresh_token?: string
          }

          await prisma.account.update({
            data: {
              access_token: newTokens.access_token,
              expires_at: Math.floor(Date.now() / 1000 + newTokens.expires_in),
              refresh_token:
                newTokens.refresh_token ?? googleAccount.refresh_token,
            },
            where: {
              provider_providerAccountId: {
                provider: "google",
                providerAccountId: googleAccount.providerAccountId,
              },
            },
          })
        } catch (error) {
          console.error("Error refreshing access_token", error)
          // If we fail to refresh the token, return an error so we can handle it on the page
          session.error = "RefreshTokenError"
        }
      }
      return session
    },
  },
})

declare module "next-auth" {
  interface Session {
    error?: "RefreshTokenError"
  }
}
```

  </Code.Next>
</Code>

### Error handling

If the token refresh was unsuccessful, we can force a re-authentication.

<Code>

<Code.Next>

```tsx filename="app/dashboard/page.tsx"
import { auth, signIn } from "@/auth"

export default async function Page() {
  const session = await auth()
  if (session?.error === "RefreshTokenError") {
    await signIn("google") // Force sign in to obtain a new set of access and refresh tokens
  }
}
```

</Code.Next>

<Code.NextClient>

```tsx filename="app/dashboard/page.tsx"
"use client"

import { useEffect } from "react"
import { signIn, useSession } from "next-auth/react"

export default function Page() {
  const { data: session } = useSession() // For this to work, the Page should be wrapped inside the SessionProvider component in Layout
  useEffect(() => {
    if (session?.error !== "RefreshTokenError") return
    signIn("google") // Force sign in to obtain a new set of access and refresh tokens
  }, [session?.error])
}
```

</Code.NextClient>

</Code>

================
File: docs/pages/guides/restricting-user-access.mdx
================
import { Callout } from "nextra/components"

# Restricting user access to the app

Auth.js libraries allow you to restrict users by intercepting the registration/login flow. You can use the `signIn` callback to control whether a user is allowed to sign up or not.

<Callout type="info">
  All callbacks are async functions, so you can also get extra information from
  a database or external APIs.
</Callout>

## Restrict the app to company employees

For example, it is possible to only allow your company's employees to sign up with their company email addresses.

Add the following code to your Auth.js configuration:

```ts
callbacks: {
  signIn({ profile }) {
    return profile.email.endsWith("@yourdomain.com")
  }
}
```

If the user's email does not end with `@yourdomain.com`,
the sign-up (in case of a database strategy) process will be blocked, and subsequent login attempts will be rejected as well.

================
File: docs/pages/guides/role-based-access-control.mdx
================
import { Callout } from "nextra/components"
import { Code } from "@/components/Code"

# Role-based access control

There are two ways to add [role-based access control (RBAC)](https://en.wikipedia.org/wiki/Role-based_access_control) to your application with Auth.js, based on the [session strategy](/concepts/session-strategies) you choose. Let's see an example for each of these.

## Getting the role

Start by adding a `profile()` callback to the providers' config to determine the user role:

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"

export const { handlers, auth } = NextAuth({
  providers: [
    Google({
      profile(profile) {
        return { role: profile.role ?? "user", ... }
      },
    })
  ],
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import Google from "@auth/qwik/providers/google"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Google({
        profile(profile) {
          return { role: profile.role ?? "user", ... }
        },
      })
    ],
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Google from "@auth/sveltekit/providers/google"

export const { handle } = SvelteKitAuth({
  providers: [
    Google({
      profile(profile) {
        return { role: profile.role ?? "user", ... }
      },
    })
  ],
})
```

</Code.Svelte>
</Code>

<Callout>
  Determining the users role is your responsibility, you can either add your own
  logic or if your provider returns a role you can use that instead.
</Callout>

## Persisting the role

Persisting the role will be different depending on the [session strategy](/concepts/session-strategies) you're using. If you don't know which session strategy you're using, then most likely you're using JWT (the default one).

### With JWT

When you don't have a database configured, the role will be persisted in a cookie, by using the `jwt()` callback. On sign-in, the `role` property is exposed from the `profile` callback on the `user` object. Persist the `user.role` value by assigning it to `token.role`. That's it!

If you also want to use the role on the client, you can expose it via the `session` callback.

<Code>
<Code.Next>

```ts filename="./auth.ts" {8}
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"

export const { handlers, auth } = NextAuth({
  providers: [
    Google({
      profile(profile) {
        return { role: profile.role ?? "user", ... }
      },
    })
  ],
  callbacks: {
    jwt({ token, user }) {
      if(user) token.role = user.role
      return token
    },
    session({ session, token }) {
      session.user.role = token.role
      return session
    }
  }
})
```

</Code.Next>
<Code.Qwik>
  
```ts filename="/src/routes/plugin@auth.ts" {9}
import { QwikAuth$ } from "@auth/qwik"
import Google from "@auth/qwik/providers/google"

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [
      Google({
        profile(profile) {
          return { role: profile.role ?? "user", ... }
        },
      })
    ],
    callbacks: {
      jwt({ token, user }) {
        if(user) token.role = user.role
        return token
      },
      session({ session, token }) {
        session.user.role = token.role
        return session
      }
    }
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts" {8}
import SvelteKitAuth from "@auth/sveltekit"
import Google from "@auth/sveltekit/providers/google"

export const { handle } = SvelteKitAuth({
  providers: [
    Google({
      profile(profile) {
        return { role: profile.role ?? "user", ... }
      },
    })
  ],
  callbacks: {
    jwt({ token, user }) {
      if(user) token.role = user.role
      return token
    },
    session({ session, token }) {
      session.user.role = token.role
      return session
    }
  }
})
```

</Code.Svelte>
</Code>

<Callout type="info">
  With this strategy, if you want to update the role, the user needs to be
  forced to sign in again.
</Callout>

### With Database

When you have a database, you can save the user role on the [User model](/reference/core/adapters#adapteruser). The below example is showing you how to do this with Prisma, but the idea is the same for all adapters.

First, add a `role` column to the User model.

```prisma filename="/prisma/schema.prisma"
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?  // New column
  accounts      Account[]
  sessions      Session[]
}
```

The `profile()` callback's return value is used to create users in the database. That's it! Your newly created users will now have an assigned role.

If you also want to use the role on the client, you can expose it via the `session` callback.

<Code>
<Code.Next>

```ts filename="./auth.ts"
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"
import prisma from "lib/prisma"

export const { handlers, auth } = NextAuth({
  adapter: PrismaAdapter(prisma),
  providers: [
    Google({
      profile(profile) {
        return { role: profile.role ?? "user", ... }
      }
    })
  ],
  callbacks: {
    session({ session, user }) {
      session.user.role = user.role
      return session
    }
  }
})
```

</Code.Next>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
import { QwikAuth$ } from "@auth/qwik"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(
  () => ({
    providers: [],
    adapter: PrismaAdapter(prisma),
    callbacks: {
      session({ session, user }) {
        session.user.role = user.role
        return session
      },
    },
  })
)
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./src/auth.ts"
import SvelteKitAuth from "@auth/sveltekit"
import Google from "@auth/sveltekit/providers/google"
import prisma from "lib/prisma"

export const { handle, auth } = SvelteKitAuth({
  adapter: PrismaAdapter(prisma),
  providers: [
    Google({
      profile(profile) {
        return { role: profile.role ?? "user", ... }
      }
      ...
    })
  ],
  callbacks: {
    session({ session, user }) {
      session.user.role = user.role
      return session
    }
  }
})
```

```ts filename="src/hooks.server.ts"
export { handle } from "./auth"
```

</Code.Svelte>
</Code>

<Callout type="info">
  It is up to you how you want to manage to update the roles, either through
  direct database access or building your role update API.
</Callout>

## Using the role

The user can access the information stored in the current session through the authorization function exported from the configuration file of the respective framework. This function retrieves information exposed via the `session` and `jwt` callbacks in the configuration file. With this information, you can implement different strategies and logic to display the UI based on your needs.

<Code>
<Code.Next>
To get the data on the server side, you should import the `auth` function from the configuration file and verify if the user has the expected role.

```ts filename="./app/admin/page.tsx"
import { auth } from "@/auth";

export default async function Page() {
  const session = await auth();

  if (session?.user?.role === "admin") {
    return <p>You are an admin, welcome!</p>;
  }

  return <p>You are not authorized to view this page!</p>;
}
```

</Code.Next>
<Code.NextClient>
If you want to use the role on the client side, use the `useSession` hook. The `session.user.role` will contain the required role if you exposed it via the `session` callback.

```ts filename="./app/admin/page.tsx"
"use client"
import { useSession } from "next-auth/react";

export default function Page() {
  const session = useSession();

  if (session?.user?.role === "admin") {
    return <p>You are an admin, welcome!</p>;
  }

  return <p>You are not authorized to view this page!</p>;
}
```

</Code.NextClient>
<Code.Qwik>

```ts filename="/src/routes/plugin@auth.ts"
export const onRequest: RequestHandler = (event) => {
  const session = event.sharedMap.get("session")
  if (!session || new Date(session.expires) < new Date()) {
    throw event.redirect(302, `/auth/signin?redirectTo=${event.url.pathname}`)
  }

  return session
}
```

</Code.Qwik>
<Code.Svelte>

```ts filename="./routes/+page.server.ts"
import { redirect } from "@sveltejs/kit"

export const load: PageServerLoad = async (event) => {
  const session = await event.locals.auth()

  if (!session && event.url.pathname !== "/login") {
    const fromUrl = event.url.pathname + event.url.search
    redirect(307, `/login?redirectTo=${encodeURIComponent(fromUrl)}`)
  }

  return {
    session,
  }
}
```

</Code.Svelte>
</Code>

<Callout>
  When using Next.js and JWT, you can alternatively also use
  [Middleware](/getting-started/session-management/protecting#nextjs-middleware)
  to redirect the user based on their role, even before rendering the page.
</Callout>

## Resources

- [Concepts: Session strategies](/concepts/session-strategies)
- [Adapters: User model](/getting-started/database#user-model)
- [Adapters: Prisma adapter](/getting-started/adapters/prisma)
- [Next.js: Middleware](/getting-started/session-management/protecting#nextjs-middleware)
- [TypeScript](/getting-started/typescript)

================
File: docs/pages/guides/testing.mdx
================
# Testing

Repeated and consistent testing of authentication has always been tricky. OAuth providers in particular are especially difficult to test in an automated fashion, because they often introduce additional verification steps that will trigger if you're logging in from a new geographic location, a datacenter IP address, or from a new user-agent, etc.

To get around these limitations, we recommend you use one of the following strategies to run successful E2E tests against Auth.js applications.

1. Run your own OAuth provider using software like [Keycloak](https://www.keycloak.org)
2. Enable an authentication method like the Credentials provider in development mode

Below are one example of each strategy, leveraging [@playwright/test](https://playwright.dev) for the automated E2E tests.

## Keycloak

First, set up a [Keycloak](https://www.keycloak.org/getting-started/getting-started-docker) instance. Then you have to add the [Keycloak provider](/getting-started/providers/keycloak) to your Auth.js configuration.

This test requires two environment variables to be set. These credentials should be for a test user who can authenticate against your newly created Keycloak instance.

```bash filename=".env"
TEST_KEYCLOAK_USERNAME=abc
TEST_KEYCLOAK_PASSWORD=123
```

Then we can use [`@playwright/test`](https://playwright.dev) to execute two test steps.

1. Which will visit the signin URL, enter the authentication credentials, and then click the "Sign In" button. It ensures the session is then set correctly.
2. Which will click the "Sign Out" button and ensure the session is then `null`.

```ts filename="tests/e2e/basic-auth.spec.ts" {10, 32}
import { test, expect, type Page } from "@playwright/test"

test("Basic auth", async ({ page, browser }) => {
  if (
    !process.env.TEST_KEYCLOAK_USERNAME ||
    !process.env.TEST_KEYCLOAK_PASSWORD
  )
    throw new TypeError("Incorrect TEST_KEYCLOAK_{USERNAME,PASSWORD}")

  await test.step("should login", async () => {
    await page.goto("http://localhost:3000/auth/signin")
    await page.getByText("Keycloak").click()
    await page.getByText("Username or email").waitFor()
    await page
      .getByLabel("Username or email")
      .fill(process.env.TEST_KEYCLOAK_USERNAME)
    await page.locator("#password").fill(process.env.TEST_KEYCLOAK_PASSWORD)
    await page.getByRole("button", { name: "Sign In" }).click()
    await page.waitForURL("http://localhost:3000")
    const session = await page.locator("pre").textContent()

    expect(JSON.parse(session ?? "{}")).toEqual({
      user: {
        email: "bob@alice.com",
        name: "Bob Alice",
        image: "https://avatars.githubusercontent.com/u/67470890?s=200&v=4",
      },
      expires: expect.any(String),
    })
  })

  await test.step("should logout", async () => {
    await page.getByText("Sign out").click()
    await page
      .locator("header")
      .getByRole("button", { name: "Sign in", exact: true })
      .waitFor()
    await page.goto("http://localhost:3000/auth/session")

    expect(await page.locator("html").textContent()).toBe("null")
  })
})
```

## `Credentials` Provider in Development

This method requires less initial setup and maintenance as you do not need to maintain a separate OAuth provider (like Keycloak), but you also must be extremely careful that you do not leave insecure authentication methods available in production. For example, in this example we will be adding a Credentials provider which accepts the password `password`.

```ts filename="auth.ts" {16}
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"
import Credentials from "next-auth/providers/credentials"

const providers = [GitHub]

if (process.env.NODE_ENV === "development") {
  providers.push(
    Credentials({
      id: "password",
      name: "Password",
      credentials: {
        password: { label: "Password", type: "password" },
      },
      authorize: (credentials) => {
        if (credentials.password === "password") {
          return {
            email: "bob@alice.com",
            name: "Bob Alice",
            image: "https://avatars.githubusercontent.com/u/67470890?s=200&v=4",
          }
        }
      },
    })
  )
}

export const { handlers, auth } = NextAuth({
  providers,
})
```

The above configuration example will add the GitHub provider all the time, and the `Credentials` provider only in development. After making that configuration tweak, we can write our `@playwright/test` tests just like above.

```ts filename="tests/e2e/basic-auth.spec.ts" {8}
import { test, expect, type Page } from "@playwright/test"

test("Basic auth", async ({ page, browser }) => {
  if (!process.env.TEST_PASSWORD) throw new TypeError("Missing TEST_PASSWORD")

  await test.step("should login", async () => {
    await page.goto("http://localhost:3000/auth/signin")
    await page.getByLabel("Password").fill(process.env.TEST_PASSWORD)
    await page.getByRole("button", { name: "Sign In" }).click()
    await page.waitForURL("http://localhost:3000")
    const session = await page.locator("pre").textContent()

    expect(JSON.parse(session ?? "{}")).toEqual({
      user: {
        email: "bob@alice.com",
        name: "Bob Alice",
        image: "https://avatars.githubusercontent.com/u/67470890?s=200&v=4",
      },
      expires: expect.any(String),
    })
  })

  await test.step("should logout", async () => {
    await page.getByText("Sign out").click()
    await page
      .locator("header")
      .getByRole("button", { name: "Sign in", exact: true })
      .waitFor()
    await page.goto("http://localhost:3000/auth/session")

    expect(await page.locator("html").textContent()).toBe("null")
  })
})
```

================
File: docs/pages/_app.tsx
================
import { GoogleAnalytics } from "@next/third-parties/google"
import { Analytics } from "@vercel/analytics/react"
import Script from "next/script"

================
File: docs/pages/_document.tsx
================
import Document, { Html, Head, Main, NextScript } from "next/document"
import { SkipNavLink } from "nextra-theme-docs"
class AuthDocument extends Document
⋮----
render()

================
File: docs/pages/_meta.js
================


================
File: docs/pages/404.mdx
================
import { NotFoundPage } from "nextra-theme-docs"
import Image from "next/image"

# Page Not Found

import ConfusedTravolta from "../public/img/etc/confused-travolta.gif"

<div className="">
  <Image
    src={ConfusedTravolta}
    alt="Confused Travolta"
    unoptimized
    className="mx-auto my-32 rounded-md"
    width={768}
  />
</div>

<NotFoundPage />

================
File: docs/pages/animated-stars.css
================
.bg-animation {
#stars {
#stars:after {
#stars2 {
#stars2:after {
#stars3 {
#stars3:after {
#stars4 {
#stars4:after {

================
File: docs/pages/contributors.mdx
================
import { Steps } from "nextra/components"

# Contributors

Maintaining Auth.js as an open source project is very hard work. All the core team members have regular jobs and the library is maintained and developed out of good will in our free time. Donations can enable the core team to eventually work full time on Auth.js to provide more features and an even better developer experience!

<div className="my-4 flex gap-2">
  <img src="/img/etc/opencollective-logomark.svg" width="64" />
  <img src="/img/etc/opencollective-wordmark.svg" width="250" />
</div>

You can find us on [Open Collective](https://opencollective.com/nextauth). We are very thankful for all of our existing contributors and would be delighted if you or your company would decide to join them.

## Core team

Without these people, the project could not have become one of the most used authentication libraries in its category.

- [Balázs Orbán](https://github.com/balazsorban44) - Lead Maintainer
- [Thang Vu](https://github.com/ThangHuuVu) - Maintainer
- [Nico Domino](https://github.com/ndom91) - Maintainer
- [Lluis Agusti](https://github.com/lluia) - Maintainer

## Special thanks

Special thanks to Filip Skokan for their feedback and high-quality OAuth libraries that we build on, Lori Karikari for creating most of the original provider configurations, Fredrik Pettersen for creating the original Prisma Adapter, Gerald Nolan for adding support for Sign in with Apple, Jefferson Bledsoe for working on original testing automation, and Tom Grey for their work/guidance on the API Reference documentation.

- [Filip Skokan](https://github.com/panva)
- [Lori Karikari](https://github.com/LoriKarikari)
- [Fredrik Pettersen](https://github.com/Fumler)
- [Gerald Nolan](https://github.com/geraldnolan)
- [Jefferson Bledsoe](https://github.com/JeffersonBledsoe)
- [Tom Grey](https://github.com/tgreyuk)

## Other contributors

Auth.js as it exists today has been possible thanks to the work of many individual contributors.

Thank you to the [dozens of individual contributors](https://github.com/nextauthjs/next-auth/graphs/contributors) who have helped shape Auth.js.

## History

<Steps>

### 2016 – Initial release

NextAuth.js was originally developed by [Iain Collins](https://github.com/iaincollins) in 2016 as an authentication framework specific to [Next.js](https://nextjs.org/).

### 2020 – Refactor and clean up

NextAuth.js was rebuilt from the ground up to support serverless, MySQL, Postgres, MongoDB, JSON Web Tokens and built-in support for over a dozen authentication providers.

[Balázs Orbán](https://github.com/balazsorban44) joined as a co-maintainer, helping to offload some of the work from Iain.

### 2021 – Multi-framework effort

Iain and Balázs defined future goals for the project. Their vision aligned perfectly, discussing that NextAuth.js could one day become useful for other frameworks.

Iain left the project to focus on other things, knowing that Balázs will work on their shared vision.

Balázs became the lead maintainer of the project.

Efforts started to move NextAuth.js to other frameworks and to support as many databases and providers as possible.

It was shown that a single package could not support all of these use cases.

Database Adapters were moved to their packages under the name `@next-auth/*-adapter`.

### 2022 – Birth of Auth.js

Based on NextAuth.js, Balázs released [Auth.js (`@auth/core`)](https://twitter.com/balazsorban44/status/1603082914362986496), a runtime/framework independent core library that is the base of
all Auth.js libraries. A complete rewrite that still shared most of the public API with NextAuth.js but internally was very different.

### 2023 – Auth.js silent releases

Due to personal reasons, Balázs had to step down as the lead maintainer, but was still contributing. The project was taken over by [Thang Huu Vu](https://github.com/thanghuuvu) for a while.

Balázs returned and continued the work on Auth.js. As a pilot project, `next-auth@experimental` (later `next-auth@beta`) releases were published
to work out what was needed in the core library to support other frameworks and what was framework specific from the old NextAuth.js implementation.

The new default documentation page became [authjs.dev](https://authjs.dev) (the one you are reading right now), and the old NextAuth.js documentation at [next-auth.js.org](https://next-auth.js.org) was kept around
to document NextAuth.js v4 and is kept only as a back reference.

Database Adapters were moved from the `@next-auth/*-adapter` namespace to `@auth/*-adapter`, indicating that they are not NextAuth.js specific anymore.

Community integrations started showing up, making it clear that the initial vision of Auth.js was shared by many.

### 2024 – Growing the Auth.js ecosystem

With the release of [NextAuth.js v5](/getting-started/migrating-to-v5), now all Auth.js libraries are based on the same core library.
**The name "NextAuth.js" designates only the Next.js integration**, while Auth.js refers to the core library and our ecosystem as a whole.
Other integrations will generally be refered to with their framework name + Auth, e.g. "SvelteKit Auth" or "Express Auth".

All official integrations are distributed under the `@auth` scope except for NextAuth.js, which is distributed under `next-auth` to reduce migration overhead.

</Steps>

## Notes

The Auth.js/NextAuth.js project is not provided by, nor otherwise affiliated with Vercel Inc. or its subsidiaries. Any contributions to this project by individuals affiliated with Vercel are made in their personal capacity.

================
File: docs/pages/global.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
⋮----
details > *:not(summary) {
⋮----
@apply p-4;
⋮----
html[class~="dark"]
:is(html[class~="dark"]) ::selection {
::selection {
/* Here because we can't safelist Nextra's tailwind classes
* and this is used on the index.mdx page */
._bg-primary-500 {
.underline-highlight {
⋮----
&::after {
⋮----
.gradient-bg {
.blur-shadow {
.button-primary {
.button-primary:hover {
div.nextra-code > pre {
div.nextra-code * pre {
⋮----
@apply !bg-transparent;
⋮----
pre code.nextra-code:not(:has(span)) {
:is(html[class~="dark"] .nextra-code span) {
⋮----
@layer utilities {
⋮----
.animation-delay-2000 {
.animation-delay-4000 {
⋮----
@layer components {
⋮----
.break-word-legacy {
⋮----
/* Scrollbar */
::-webkit-scrollbar {
::-webkit-scrollbar-track {
::-webkit-scrollbar-thumb {
::-webkit-scrollbar-thumb:hover {
/* Navbar GitHub Star Counter */
.github-counter {
div.nextra-search + a {
html[data-theme="dark"] .github-counter {
/* Tooltip transitions */
⋮----
[data-scope="tooltip"][data-part="content"][data-state="open"] {
[data-scope="tooltip"][data-part="content"][data-state="closed"] {
#carbonads_bak {
⋮----
.carbon-text {
.carbon-poweredby {
#carbon-responsive .carbon-img {
img {
#carbon-responsive .carbon-responsive-wrap {
⋮----
.sponsoredBadge {
article.nextra-content table {
/* Hide Nextra Search 'kbd' on small screen sizes */
div.nextra-search kbd {
/* Native popover */
[popover] {
⋮----
/* Final state of the exit animation */
⋮----
[popover]:popover-open {
@starting-style {
:is(html[class~="dark"])
html > head:has(meta[content*="reference/core/providers"]) + body .provider {
.nextra-sidebar-container {
⋮----
.DocSearch-Button {
⋮----
@apply hidden;

================
File: docs/pages/index.mdx
================
import Link from "next/link"
import { Pre, Code } from "nextra/components"
import Footer from "@/components/Footer"
import { RichTabs } from "@/components/RichTabs"
import { LogosMarquee } from "@/components/LogosMarquee"
import { Blur } from "@/components/Blur"
import { Guides } from "@/components/Guides"
import SvelteKit from "../public/img/etc/sveltekit.svg"
import Express from "../public/img/etc/express.svg"
import Next from "../public/img/etc/nextjs.svg"
import Qwik from "../public/img/etc/qwik.svg"

import { CaretRight } from "@/icons"

<div className="relative overflow-hidden w-full h-full flex flex-col">
  <section className="flex justify-center w-full px-8 xl:px-0 flex-col lg:flex-row self-center items-center lg:items-start gap-6 max-w-7xl pt-12 pb-24 sm:py-32 lg:py-56">
    <div className="flex-col flex justify-start gap-10 lg:py-8 mx-8">
      <div className="flex flex-col gap-8 justify-center py-2 items-center w-full">
        <span className="text-6xl font-black lg:text-8xl">Auth.js</span>
        <div className="flex flex-col gap-4 justify-center text-2xl font-bold text-center lg:text-3xl">
          <div>Authentication for the Web.</div>
          <div className="underline-highlight">Free and open source.</div>
        </div>
      </div>
      <div className="text-lg justify-center items-center flex gap-4">
        <Link
          href="/getting-started"
          className="p-3 w-1/2 text-center bg-violet-600 dark:bg-violet-800 text-white hover:dark:bg-violet-900 transition hover:bg-violet-700 duration-300"
        >
          Get Started
        </Link>
        <Link
          href="https://github.com/nextauthjs/next-auth"
          target="_blank"
          className="p-3 w-1/2 justify-center flex gap-2 items-center dark:bg-gray-300 bg-violet-200 text-black transition duration-300 hover:dark:bg-gray-400 hover:bg-violet-300"
        >
          <svg className="size-5" viewBox="0 0 256 256">
            <rect width="256" height="256" fill="none" />
            <path
              d="M119.83,56A52,52,0,0,0,76,32a51.92,51.92,0,0,0-3.49,44.7A49.28,49.28,0,0,0,64,104v8a48,48,0,0,0,48,48h48a48,48,0,0,0,48-48v-8a49.28,49.28,0,0,0-8.51-27.3A51.92,51.92,0,0,0,196,32a52,52,0,0,0-43.83,24Z"
              fill="none"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="16"
            />
            <path
              d="M104,232V192a32,32,0,0,1,32-32h0a32,32,0,0,1,32,32v40"
              fill="none"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="16"
            />
            <path
              d="M104,208H72a32,32,0,0,1-32-32A32,32,0,0,0,8,144"
              fill="none"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="16"
            />
          </svg>
          Source
        </Link>
      </div>
      <div className="text-lg flex-col flex gap-2 items-center">
        <a
          href="https://go.clerk.com/ew92wBC"
          target="_blank"
          className="group flex flex-col md:flex-row w-full items-center md:justify-between text-sm dark:bg-neutral-900/50 font-medium text-neutral-700 dark:text-neutral-300 bg-neutral-50/60 backdrop-blur px-4 py-3 border border-neutral-300 dark:border-neutral-800 rounded-md ring-[6px] ring-black/[0.02] dark:ring-black/10"
        >
          <span>Looking for a hosted alternative?</span>
          <span  
            className="flex gap-0.5 items-center font-semibold text-violet-600 dark:text-violet-400 group"
          >
            Use Clerk
            <CaretRight className="size-3 [&_polyline]:stroke-[px] transition group-hover:translate-x-0.5" />
          </span>
        </a>
        <span className="text-xs text-neutral-400 dark:text-neutral-600">Sponsored</span>
      </div>
    </div>
    <RichTabs
      orientation="horizontal"
      tabKey="hero"
      defaultValue="nextjs"
      className="w-full flex flex-col !py-8 md:!py-16 !m-0 max-w-xl xl:max-w-2xl lg:self-start"
    >
      <RichTabs.List className="justify-between p-2 rounded-t-lg bg-white/40 backdrop-blur dark:bg-neutral-950/25">
        <div className="flex gap-2">
          {[
            { value: "express", src: Express,  name: "Express", darkInvert: true },
            { value: "nextjs", src: Next, name: "Next.js", darkInvert: true },
            { value: "qwik", src: Qwik,  name: "Qwik", darkInvert: false },
            { value: "sveltekit", src: SvelteKit,  name: "SvelteKit", darkInvert: false },
          ].map((trigger) => (
            <RichTabs.Trigger
              key={trigger.value}
              title={trigger.name}
              value={trigger.value}
              orientation="vertical"
              className=" !border-0 aria-selected:!bg-violet-600 aria-selected:dark:!bg-violet-900 aria-selected:!text-white dark:bg-neutral-800 bg-white !h-auto !w-auto !flex-row !gap-2 !justify-start p-2 px-3 rounded-md outline-none transition-all duration-300 hover:bg-violet-200 hover:dark:bg-violet-900/20 !font-normal"
            >
              <img
                width="24"
                src={trigger.src}
                alt={`${trigger.name} Logo`}
                className={trigger.darkInvert ? 'dark:invert': '' }
              />
            </RichTabs.Trigger>
          ))}
          <Link
            href="/getting-started/integrations"
            className="!border-0 aria-selected:!bg-violet-600 aria-selected:dark:!bg-violet-900 dark:bg-neutral-900 bg-white !h-auto !w-auto !flex-row !gap-2 !justify-start p-2 px-3 rounded-md outline-none transition-all duration-300 flex items-center hover:bg-violet-200 hover:dark:bg-violet-900/20"
          >
            <span className="hidden text-sm md:block">More</span>
            <CaretRight className="size-4" />
          </Link>
        </div>
        <div className="inline-flex gap-2 items-center self-end pr-4 h-12">
          <div className="bg-green-300 rounded-full size-4"></div>
          <div className="bg-amber-300 rounded-full size-4"></div>
          <div className="bg-red-300 rounded-full size-4"></div>
        </div>
      </RichTabs.List>
      <div className="p-2 pt-0 w-full rounded-b-lg shadow-md bg-white/40 backdrop-blur dark:bg-neutral-950/25 [&_div]:border-0 [&_div]:shadow-none [&>div.h-full>div>div>pre]:dark:!bg-neutral-950/60 [&>div.h-full>div>div>pre]:!bg-white/60">
      {Object.entries({
        nextjs: `\
// auth.ts
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"
export const { auth, handlers } = NextAuth({ providers: [GitHub] })

// middleware.ts
export { auth as middleware } from "@/auth"

// app/api/auth/[...nextauth]/route.ts
import { handlers } from "@/auth"
export const { GET, POST } = handlers
`,
          sveltekit: `\
// src/auth.ts
import { SvelteKitAuth } from "@auth/sveltekit"
import GitHub from '@auth/sveltekit/providers/github'

export const { handle } = SvelteKitAuth({
  providers: [GitHub],
})

// src/hooks.server.ts
export { handle } from "./auth"
`,
          express: `\
// server.ts
import { express } from "express"
import { ExpressAuth } from "@auth/express"
import GitHub from "@auth/express/providers/github"

const app = express()

app.use("/auth/\*", ExpressAuth({ providers: [GitHub] }))
`,
          qwik: `\
// src/routes/plugin@auth.ts
import { QwikAuth } from "@auth/qwik"
import GitHub from "@auth/qwik/providers/github"
export const { onRequest, useSession } = QwikAuth$(() => ({ providers: [GitHub] }))
`
}).map(([key, code]) =>

  <RichTabs.Content
    key={key}
    orientation="vertical"
    value={key}
    className="h-full"
    tabIndex={-1}
  >
    <Pre data-language="tsx" data-copy="">
      <Code data-language="tsx">
        {code}
      </Code>
    </Pre>
  </RichTabs.Content>
)}
</div>
</RichTabs>

  </section>
  <Guides />
  <section
    className="flex relative h-[40rem] flex-col justify-between items-center pt-24 pb-12
    bg-neutral-200 dark:bg-neutral-900 overflow-hidden"
  >
    <div
      className="z-10 flex gap-4 justify-start items-center text-2xl md:text-3xl font-bold
      text-center text-white lg:text-4xl h-full"
    >
      <div className="leading-normal text-slate-800 px-12 dark:text-slate-200 pb-12 dark:drop-shadow-none">
        Supports all these providers and more!
      </div>
    </div>
    <LogosMarquee />
  </section>
  <Footer className="bg-white dark:bg-neutral-950 py-8 !m-0" />
  <Blur />
  <div className="overflow-hidden bg-animation -z-10">
    <div id="stars"></div>
    <div id="stars2"></div>
    <div id="stars3"></div>
    <div id="stars4"></div>
  </div>
</div>

================
File: docs/pages/security.mdx
================
import { Callout, Steps } from "nextra/components"
import { ChatCircleText, GitBranch } from "@/icons"

<h2 className="dark:border-primary-100/10 mt-10 flex flex-row items-center gap-2 border-b border-neutral-200/70 pb-1 text-3xl font-semibold tracking-tight text-slate-900 contrast-more:border-neutral-400 dark:text-slate-100 contrast-more:dark:border-neutral-400">
  <GitBranch className="size-8" /> <span>Supported versions</span>
</h2>

- Security updates are only released for the current `latest` version.
- Old releases are not maintained and do not receive updates.

<Callout>
  `@auth/*` packages (other than the database adapters) are currently under
  development and - unless stated otherwise - they are not considered ready for
  production yet. That said, we encourage you to reach out to us if you have any
  questions or concerns via the below-mentioned channels. We are committed to
  making Auth.js a secure and reliable solution for your authentication needs.
</Callout>

<h2 className="dark:border-primary-100/10 mt-10 flex flex-row items-center gap-2 border-b border-neutral-200/70 pb-1 text-3xl font-semibold tracking-tight text-slate-900 contrast-more:border-neutral-400 dark:text-slate-100 contrast-more:dark:border-neutral-400">
  <ChatCircleText className="size-8" /> <span>Reporting a Vulnerability</span>
</h2>

Auth.js practices responsible disclosure. We request that you contact us directly to report serious issues that might impact the security of sites using Auth.js.

If you contact us regarding a serious issue:

<Steps>

### Getting back to you

We will endeavour to get back to you within 72 hours.

### Publishing a fix

We will aim to publish a fix within 30 days.

### Disclosing the issue

We will disclose the issue ( _and credit you, with your consent_ ) once a fix to resolve the issue has been released.

### 90 days limit

If 90 days have elapsed and we still don't have a fix, we will disclose the issue publicly.

</Steps>

The best way to report an issue is by contacting us via email at info@balazsorban.com, hi@thvu.dev,
yo@ndo.dev and hi@ubbe.dev, or raise a public issue - **without disclosing any sensitive details** - requesting someone get in touch with you via whatever means you prefer for more details.

<Callout type="info">
  For less serious issues (e.g. RFC compliance for unsupported flows or
  potential issues that may cause a problem in the future) it is appropriate to
  make these public as bug reports or feature requests or to raise a question to
  open a discussion around them.
</Callout>

================
File: docs/pages/sponsors.mdx
================
import { Callout } from "nextra/components"

# Sponsors

<Callout type="info">
  Auth.js is completely free and fully open-source. It is used in some of the
  biggest sites on the Internet [like
  ChatGPT](https://twitter.com/balazsorban44/status/1721632174279897132) with
  **more than 100 million users a week**!
</Callout>

Therefore, it is easy to forget that Auth.js is created and maintained by [actual humans](/contributors#core-team)! None of the individuals work on the project full-time, and they often dedicate their free time to support anyone from individuals to medium-size to billion-dollar companies.

It would not be possible without the generous support of our sponsors.

<a
  className="mt-8 flex items-center gap-6"
  style={{
    color: "#6c47ff",
  }}
  href="https://go.clerk.com/ew92wBC"
  target="_blank"
>
  <img
    src="/img/etc/clerk-logo.svg"
    alt="Clerk Logo"
    className="w-24 rounded-xl bg-white p-4 pl-5"
  />
  <div className="text-xl font-semibold leading-snug text-sky-600 md:text-3xl">
    Clerk <br />
    <span className="text-xl font-medium">
      The most comprehensive User Management Platform
    </span>
  </div>
</a>

## 🥇 Gold sponsors

<div className="flex flex-wrap gap-2">
  {[
    [
      "https://a0.to/signup/nextauthjs",
      "https://avatars.githubusercontent.com/u/2824157?v=4",
      "Auth0 by Okta",
    ],
  ].map(([href, src, name]) => (
    <a
      key={name}
      href={href}
      target="_blank"
      className="mt-8 flex flex-col items-center gap-3 text-center font-semibold text-sky-600"
    >
      <img
        className="w-20 rounded-md bg-slate-100 p-2"
        src={src}
        alt={`${name} Logo`}
      />
      {name}
    </a>
  ))}
</div>

## 🥈 Silver sponsors

<div className="flex flex-row flex-wrap gap-8 pt-8 md:gap-16">
  {[
    [
      "https://fusionauth.io",
      "https://avatars.githubusercontent.com/u/41974756?s=200&v=4",
      "FusionAuth",
    ],
    [
      "https://stytch.com",
      "https://avatars.githubusercontent.com/u/69983493?s=200&v=4",
      "Stytch",
    ],
    [
      "https://www.beyondidentity.com",
      "https://avatars.githubusercontent.com/u/69811361?s=200&v=4",
      "Beyond Identity",
    ],
  ].map(([href, src, name]) => (
    <a
      key={name}
      href={href}
      target="_blank"
      className="flex flex-col items-center gap-3 text-center font-semibold text-sky-600"
    >
      <img
        className="w-20 rounded-md bg-slate-100 p-2"
        src={src}
        alt={`${name} Logo`}
      />
      {name}
    </a>
  ))}
</div>

## 🥉 Bronze sponsors

<div className="flex flex-row flex-wrap gap-8 pt-8 md:gap-16">
  {[
    [
      "https://arcjet.com/?ref=auth.js",
      "https://avatars.githubusercontent.com/u/24397786?s=200&v=4",
      "Arcjet",
    ],
    [
      "https://descope.com",
      "https://avatars.githubusercontent.com/u/97479186?s=200&v=4",
      "Descope",
    ],
    [
      "https://lowdefy.com",
      "https://avatars.githubusercontent.com/u/47087496?s=200&v=4",
      "Lowdefy",
    ],
    [
      "https://prisma.io",
      "https://avatars.githubusercontent.com/u/17219288?s=200&v=4",
      "Prisma",
    ],
    [
      "https://vercel.com",
      "https://avatars.githubusercontent.com/u/14985020?s=200&v=4",
      "Vercel",
    ],
    [
      "https://route4me.com",
      "https://avatars.githubusercontent.com/u/7936820?v=4",
      "Route4Me",
    ],
    [
      "https://badass.dev",
      "https://avatars.githubusercontent.com/u/136839242?v=4",
      "Badass Courses",
    ],
    [
      "https://github.com/encoredev/encore",
      "https://avatars.githubusercontent.com/u/50438175?v=4",
      "Encore",
    ],
    [
      "https://github.com/neondatabase/neon",
      "https://avatars.githubusercontent.com/u/77690634?v=4",
      "Neon",
    ],
    [
      "https://sent.dm",
      "https://avatars.githubusercontent.com/u/153308555?v=4",
      "Sent.dm",
    ],
  ].map(([href, src, name]) => (
    <a
      key={name}
      href={href}
      target="_blank"
      className="flex flex-col items-center gap-3 text-center font-semibold text-sky-600"
    >
      <img
        className="w-20 rounded-md bg-slate-100 p-2"
        src={src}
        alt={`${name} Logo`}
      />
      {name}
    </a>
  ))}
</div>

## 🙇🏽‍♂️ Become a sponsor

<div className="mt-8">
<details>
  <summary>
    Why are auth providers sponsoring Auth.js?
  </summary>

Auth.js is a set of libraries that make it easy to add authentication to any application with any framework. There are companies who provide authentication as a service with high availability/first-class support and more. Auth.js libraries make it easy to integrate with them. Some of the following companies very generously sponsor Auth.js to help support the project and the community. We welcome their support and are grateful for it. If you feel that Auth.js is not able to meet your needs, we encourage you to check them out.

</details>
</div>

If you or your company enjoys Auth.js, please consider [sponsoring via OpenCollective](https://opencollective.com/nextauth) too. Choose a higher tier to appear on this page. Sponsors are listed in alphabetical order in their respective group.

> This is a donation. No goods or services are expected in return. Any requests for refunds for those purposes will be rejected.

================
File: docs/public/.well-known/security.txt
================
Contact: mailto:info@balazsorban.com
Contact: mailto:hi@thvu.dev
Contact: mailto:authjs-security@ndo.dev
Acknowledgments: https://authjs.dev/security
Preferred-Languages: en
Canonical: https://authjs.dev/.well-known/security.txt

# Security Policy

NextAuth.js practices responsible disclosure.

## Reporting a Vulnerability

We request that you contact us directly to report serious issues that might impact the security of sites using NextAuth.js.

If you contact us regarding a serious issue:

- We will endeavor to get back to you within 72 hours.
- We will aim to publish a fix within 30 days.
- We will disclose the issue (and credit you, with your consent) once a fix to resolve the issue has been released.
- If 90 days has elapsed and we still don't have a fix, we will disclose the issue publicly.

The best way to report an issue is by contacting us via email at hi@thvu.dev, info@balazsorban.com and yo@ndo.dev, or raise a public issue requesting someone get in touch with you via whatever means you prefer for more details. (Please do not disclose sensitive details publicly at this stage.)

> For less serious issues (e.g. RFC compliance for unsupported flows or potential issues that may cause a problem in the future) it is appropriate to submit these publicly as bug reports or feature requests or to raise a question to open a discussion around them.

## Supported Versions

Security updates are only released for the current version.

Old releases are not maintained and do not receive updates.

================
File: docs/public/img/adapters/azure-tables.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 18 18"><defs><radialGradient id="a" cx="-105.01" cy="-10.41" r="5.95" gradientTransform="matrix(1.036 0 0 1.027 117.74 19.64)" gradientUnits="userSpaceOnUse"><stop offset=".18" stop-color="#5ea0ef"/><stop offset="1" stop-color="#0078d4"/></radialGradient><clipPath id="b"><path fill="none" d="M14.97 7.53a6.14 6.14 0 1 1-7.4-4.54 6.14 6.14 0 0 1 7.4 4.54Z"/></clipPath></defs><path fill="#50e6ff" d="M2.95 5.27a.18.18 0 0 1-.17-.18 2.01 2.01 0 0 0-2.01-2 .18.18 0 0 1-.18-.18.18.18 0 0 1 .18-.18 2.01 2.01 0 0 0 2-2.01.18.18 0 0 1 .18-.18.18.18 0 0 1 .18.18 2.01 2.01 0 0 0 2 2 .18.18 0 0 1 .19.18.18.18 0 0 1-.18.18A2.01 2.01 0 0 0 3.13 5.1a.18.18 0 0 1-.18.18Z"/><path fill="#50e6ff" d="M15.61 17.46a.14.14 0 0 1-.14-.15 1.6 1.6 0 0 0-1.6-1.6.14.14 0 0 1-.15-.14.14.14 0 0 1 .14-.14 1.6 1.6 0 0 0 1.61-1.61.14.14 0 0 1 .14-.14.14.14 0 0 1 .14.14 1.6 1.6 0 0 0 1.6 1.6.14.14 0 1 1 0 .29 1.6 1.6 0 0 0-1.6 1.6.14.14 0 0 1-.14.15Z"/><path fill="url(#a)" d="M14.97 7.53a6.14 6.14 0 1 1-7.4-4.54 6.14 6.14 0 0 1 7.4 4.54Z"/><g clip-path="url(#b)"><path fill="#f2f2f2" d="M5.7 13.12a1.64 1.64 0 1 0 .01-3.28 1.3 1.3 0 0 0 .01-.14 1.65 1.65 0 0 0-1.66-1.64H2.83a6.25 6.25 0 0 0 1.6 5.06Z"/><path fill="#f2f2f2" d="m15.05 7.82-.01-.05a5.98 5.98 0 0 0-1.4-2.88 1.83 1.83 0 0 0-.3-.09 1.8 1.8 0 0 0-2.3 1.66 2 2 0 0 0-.2 0 1.74 1.74 0 0 0-.58 3.37 1.45 1.45 0 0 0 .54.1h2.03a13.45 13.45 0 0 0 2.22-2.11Z"/></g><path fill="#50e6ff" d="M17.2 3.83c-.64-1.05-2.1-1.45-4.16-1.15a14.6 14.6 0 0 0-2.09.45 6.46 6.46 0 0 1 1.53.77l.72-.15a7.49 7.49 0 0 1 1.1-.09 2.19 2.19 0 0 1 1.96.73c.38.63.06 1.73-.89 3a16.72 16.72 0 0 1-4.75 4.05A16.76 16.76 0 0 1 4.8 13.7c-1.56.23-2.68 0-3.06-.64s-.07-1.73.88-3c.12-.15.15-.23.28-.38a6.25 6.25 0 0 1 .03-1.63 11.55 11.55 0 0 0-1.17 1.37C.52 11.08.18 12.57.8 13.62a3.17 3.17 0 0 0 2.9 1.24 8.43 8.43 0 0 0 1.25-.1 17.86 17.86 0 0 0 6.22-2.4 17.8 17.8 0 0 0 5.06-4.33c1.24-1.66 1.58-3.15.95-4.2Z"/></svg>

================
File: docs/public/img/adapters/d1.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 49"><path fill="#F38020" d="m18.63 37.42-9.64-12.9 9.59-12.53-1.86-2.53-10.8 14.13-.02 1.81 10.86 14.55 1.87-2.53z"/><path fill="#F38020" d="M22 6.5h-3.72l13.4 18.3L18.6 42.5h3.74L35.4 24.81 22 6.51z"/><path fill="#F38020" d="M29.18 6.5h-3.76l13.6 18.09-13.6 17.91h3.76l12.91-17v-1.82L29.17 6.5z"/></svg>

================
File: docs/public/img/adapters/dgraph.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid" viewBox="0 0 256 305"><defs><linearGradient id="a" x1="0%" x2="100%" y1="50%" y2="50%"><stop offset="0%" stop-color="#FF1800"/><stop offset="100%" stop-color="#FF009B"/></linearGradient></defs><path fill="url(#a)" d="M206.72 54.81a36.94 36.94 0 0 0 4.55-17.76A37.11 37.11 0 0 0 174.22 0a37.11 37.11 0 0 0-35.97 28.15l-10.24-.4C57.3 27.76 0 85.05 0 155.75a127.6 127.6 0 0 0 36.39 89.37 36.76 36.76 0 0 0-7.46 22.25 37.11 37.11 0 0 0 37.05 37.05 37.15 37.15 0 0 0 34.54-23.66 128.53 128.53 0 0 0 27.47 2.97c70.7-.01 128-57.32 128.01-128a127.62 127.62 0 0 0-49.28-100.9v-.02Zm-32.51 4.99a23.1 23.1 0 0 1-5.74-.73l-15.38 44.6 22.45-3.67-31.62 51.54 26.32-6.4L81.63 250.8a22.75 22.75 0 0 1-27.84 35.7 22.75 22.75 0 0 1 20.4-40.42l25.12-54.78-24.5 6.63 39.84-57.03-24.5 5.92 69.45-92.45a22.75 22.75 0 0 1 14.6-40.17 22.75 22.75 0 0 1 0 45.5v.1Z"/></svg>

================
File: docs/public/img/adapters/drizzle.svg
================
<svg width="160" height="160" viewBox="0 0 160 160" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M37.058 78.7296C38.9195 75.4813 37.7789 71.368 34.5104 69.5422C31.2419 67.7164 27.0832 68.8696 25.2218 72.1179L3.37059 110.248C1.50909 113.496 2.64969 117.61 5.91818 119.435C9.18668 121.261 13.3454 120.108 15.2068 116.86L37.058 78.7296Z" fill="#C5F74F"/>
  <path d="M84.157 49.4932C86.0185 46.2449 84.8779 42.1316 81.6094 40.3058C78.3409 38.4801 74.1822 39.6333 72.3208 42.8815L50.4696 81.0116C48.6081 84.2598 49.7487 88.3732 53.0172 90.1989C56.2857 92.0247 60.4444 90.8715 62.3058 87.6233L84.157 49.4932Z" fill="#C5F74F"/>
  <path d="M156.63 49.4946C158.491 46.2463 157.351 42.133 154.082 40.3072C150.814 38.4815 146.655 39.6346 144.793 42.8829L122.942 81.013C121.081 84.2612 122.221 88.3746 125.49 90.2003C128.758 92.0261 132.917 90.8729 134.778 87.6246L156.63 49.4946Z" fill="#C5F74F"/>
  <path d="M109.52 78.7296C111.381 75.4813 110.24 71.368 106.972 69.5422C103.703 67.7164 99.5448 68.8696 97.6833 72.1179L75.8321 110.248C73.9706 113.496 75.1112 117.61 78.3797 119.435C81.6482 121.261 85.8069 120.108 87.6684 116.86L109.52 78.7296Z" fill="#C5F74F"/>
</svg>

================
File: docs/public/img/adapters/dynamodb.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><defs><linearGradient id="a" x1="0%" x2="100%" y1="100%" y2="0%"><stop offset="0%" stop-color="#2E27AD"/><stop offset="100%" stop-color="#527FFF"/></linearGradient></defs><rect width="256" height="256" fill="url(#a)"/><path fill="#FFF" d="M166.7 175.5c-10.7 8.7-33.1 13.2-54.6 13.2-21.4 0-43.8-4.5-54.5-13.2V193c0 8.7 22.4 18.4 54.5 18.4 32.2 0 54.5-9.7 54.6-18.4v-17.4Zm0-33h6.4c0 3.8-2 7.4-5.7 10.7 4.5 4 5.7 8 5.7 10.8v29c0 16-31.4 24.6-61 24.6-29.4 0-60.7-8.6-60.9-24.6v-29c0-2.8 1.2-6.7 5.7-10.8-4.5-4-5.7-7.9-5.7-10.7v-29c0-2.8 1.2-6.7 5.7-10.7-4.5-4-5.7-8-5.7-10.7V63c0-16 31.4-24.7 61-24.7 16.6 0 32.6 2.7 43.9 7.3l-2.5 5.8a115.3 115.3 0 0 0-41.5-6.8C80 44.6 57.6 54.3 57.6 63S80 81.4 112.1 81.4h2.6l.3 6.4h-3c-21.4 0-43.8-4.6-54.5-13.2V92c0 3.4 3.4 6.3 6.3 8.1 8.6 5.5 24 9.3 41.2 10l-.2 6.4a100 100 0 0 1-42.6-10c-2.4 1.8-4.7 4.3-4.7 7 0 8.7 22.4 18.4 54.5 18.4 3.2 0 6.3-.1 9.3-.3l.5 6.3c-3.2.2-6.5.4-9.8.4-21.4 0-43.8-4.6-54.5-13.2v17.3c0 3.4 3.4 6.3 6.3 8.2 9.9 6.3 28.3 10.2 48.2 10.2h1.4v6.3H112c-20.2 0-38.6-3.7-49.8-10-2.4 1.7-4.7 4.2-4.7 7 0 8.6 22.4 18.3 54.5 18.3 32.2 0 54.5-9.7 54.6-18.4 0-2.7-2.3-5.2-4.7-7-1.6.9-3.3 1.8-5.2 2.5l-2.4-5.8c2.3-1 4.3-2 6-3.1 2.8-1.9 6.3-4.8 6.3-8.1ZM194 96h-18c-1 0-2-.6-2.6-1.4-.6-1-.7-2-.3-3L184 64.4h-41.3l-19.2 38.1H144a3.2 3.2 0 0 1 3 4.1l-18.2 56.9L194.1 96Zm9.8-1-80 82.6a3.2 3.2 0 0 1-4 .6 3.2 3.2 0 0 1-1.3-3.7l21-65.7h-21.2c-1.1 0-2.1-.6-2.7-1.5-.6-1-.7-2.1-.2-3.1L138 59.8c.6-1 1.7-1.7 2.9-1.7h48c1 0 2 .5 2.6 1.4.6.9.8 2 .4 3l-11 27.2h20.8c1.3 0 2.4.8 3 2 .4 1.1.2 2.5-.7 3.4ZM62.3 194a68.7 68.7 0 0 0 17 6.4l1.5-6.1a62 62 0 0 1-15.4-5.8l-3.1 5.6Zm17-44.3 1.5-6.2c-6-1.5-11.4-3.5-15.4-5.7l-3.1 5.5a68.6 68.6 0 0 0 17 6.4Zm-17-57.2 3.1-5.5c4 2.2 9.3 4.2 15.4 5.7L79.2 99a68.7 68.7 0 0 1-17-6.4Z"/></svg>

================
File: docs/public/img/adapters/edgedb.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" color="#1f8aed" viewBox="0 0 140 114"><path fill="currentColor" fill-rule="evenodd" d="M118.58 56.97c0 9.66-3.87 11.39-8.2 11.39h-9.2V45.57h9.2c4.33 0 8.2 1.73 8.2 11.4Zm-4.7 0c0-6.75-2.04-7.07-5-7.07H106v14.13h2.87c2.97 0 5.02-.32 5.02-7.06ZM65.13 68.36V45.57h14.5v4.33h-9.67v4.65h7.3v4.28h-7.3v5.2h9.67v4.33h-14.5Zm22.6 45.57h4.84V0h-4.83v113.93Zm40.52-55.69v5.79h4.01c2.5 0 3.15-1.64 3.15-2.87 0-.96-.46-2.92-3.88-2.92h-3.28Zm0-8.34v4.33h3.28c1.87 0 2.97-.82 2.97-2.19 0-1.36-1.1-2.14-2.97-2.14h-3.28Zm-4.83-4.33h9.3c4.88 0 6.33 3.42 6.33 5.88 0 2.28-1.45 3.92-2.46 4.38 2.92 1.41 3.42 4.28 3.42 5.74 0 1.91-.96 6.79-7.3 6.79h-9.29V45.57Zm-86.04 11.4c0 9.66-3.87 11.39-8.2 11.39h-9.2V45.57h9.2c4.33 0 8.2 1.73 8.2 11.4Zm14.22 7.24c2.46 0 3.74-.82 4.2-1.37v-2.5h-3.93v-3.92h7.8v9.07c-.69 1.05-4.43 3.1-7.84 3.1-5.6 0-10.35-2.19-10.35-11.85s4.79-11.4 9.12-11.4c6.79 0 8.47 3.56 9.02 6.7l-4.01.92c-.23-1.46-1.5-3.29-4.42-3.29-2.96 0-5.01.32-5.01 7.07 0 6.74 2.14 7.47 5.42 7.47Zm-18.91-7.24c0-6.75-2.06-7.07-5.02-7.07H24.8v14.13h2.87c2.96 0 5.02-.32 5.02-7.06ZM0 68.36V45.57h14.5v4.33H4.82v4.65h7.3v4.28h-7.3v5.2h9.66v4.33H0Z" clip-rule="evenodd"/></svg>

================
File: docs/public/img/adapters/fauna.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 290"><path fill="#3A1AB6" d="M198.9 60.9c-17.6 6-26 16.7-31.8 33.4a29.8 29.8 0 0 1-9.4 12.8l14.4 15.7-45.8-32.7L0 0s9.1 60.5 12.3 82.7c2.2 15.7 6 22.7 18.1 29.9l4.9 2.6L56 126.5l-12.4-6.6 57.1 31.9-.3.8-61.5-29 12.3 43c2.8 10.4 6.1 14.2 16 18l18.4 6.8 11.3-4.6-14.4 9.8-72 93.5c47.8-45.5 88.4-61.6 118-74.8 38-16.8 60.7-27.5 75.6-66.1C214.8 122 223 87.4 233.6 74L256 44.7s-46.4 12.5-57.1 16.2Z"/></svg>

================
File: docs/public/img/adapters/firebase.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 192 192"><defs><linearGradient id="b" x1="56.9" x2="48.9" y1="102.54" y2="98.36" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#a52714"/><stop offset=".4" stop-color="#a52714" stop-opacity=".5"/><stop offset=".8" stop-color="#a52714" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="90.89" x2="87.31" y1="90.91" y2="87.33" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#a52714" stop-opacity=".8"/><stop offset=".5" stop-color="#a52714" stop-opacity=".21"/><stop offset="1" stop-color="#a52714" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="27.19" x2="160.88" y1="40.28" y2="173.97" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fff" stop-opacity=".1"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><clipPath id="a"><path fill="none" d="M143.41 47.34a4 4 0 0 0-6.77-2.16L115.88 66 99.54 34.89a4 4 0 0 0-7.08 0l-8.93 17-22.4-41.77a4 4 0 0 0-7.48 1.28L32 150l57.9 32.46a12 12 0 0 0 11.7 0L160 150z"/></clipPath></defs><g fill="none"><path d="M0 0h192v192H0z"/><g clip-path="url(#a)"><path fill="#ffa000" d="M32 150 53.66 11.39a4 4 0 0 1 7.48-1.27l22.4 41.78 8.93-17a4 4 0 0 1 7.08 0L160 150z"/><path fill="url(#b)" d="M106 9 0 0v192l32-42z" opacity=".12"/><path fill="#f57c00" d="m106.83 96.01-23.3-44.12L32 150z"/><path fill="url(#c)" d="M0 0h192v192H0z" opacity=".2"/><path fill="#ffca28" d="M160 150 143.41 47.34a4 4 0 0 0-6.77-2.16L32 150l57.9 32.47a12 12 0 0 0 11.7 0z"/><path fill="#fff" fill-opacity=".2" d="M143.41 47.34a4 4 0 0 0-6.77-2.16L115.88 66 99.54 34.89a4 4 0 0 0-7.08 0l-8.93 17-22.4-41.77a4 4 0 0 0-7.48 1.28L32 150h-.08l.07.08.57.28L115.83 67l20.78-20.8a4 4 0 0 1 6.78 2.16l16.45 101.74.16-.1zM32.19 149.81 53.66 12.39a4 4 0 0 1 7.48-1.28l22.4 41.78 8.93-17a4 4 0 0 1 7.08 0l16 30.43z"/><path fill="#a52714" d="M101.6 181.49a12 12 0 0 1-11.7 0l-57.76-32.4-.14.91 57.9 32.46a12 12 0 0 0 11.7 0L160 150l-.15-.92z" opacity=".2"/><path fill="url(#d)" d="M143.41 47.34a4 4 0 0 0-6.77-2.16L115.88 66 99.54 34.89a4 4 0 0 0-7.08 0l-8.93 17-22.4-41.77a4 4 0 0 0-7.48 1.28L32 150l57.9 32.46a12 12 0 0 0 11.7 0L160 150z"/></g><circle cx="144" cy="144" r="40" fill="#757575"/><path fill="#fff" fill-rule="evenodd" d="m144 146-18 8v-8l18-8 18 8v7-1.5 2.5zm0-22 18 8v8l-18-8-18 8v-8zm6.75 29 9 4-15.75 7v-8z"/></g></svg>

================
File: docs/public/img/adapters/hasura.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.122.001a.393.393 0 0 0-.336.139C.448 1.725.034 6.02.724 8.172A4.54 4.54 0 0 1 .88 10.38c-.133.73-.269 1.612-.269 2.222C.611 18.895 5.712 24 12.001 24c6.29 0 11.388-5.102 11.388-11.399 0-.613-.133-1.493-.27-2.222a4.54 4.54 0 0 1 .157-2.207c.69-2.15.276-6.447-1.062-8.032a.405.405 0 0 0-.649.05l-1.649 2.59a1.268 1.268 0 0 1-1.693.275A11.325 11.325 0 0 0 12 1.203c-2.297 0-4.435.682-6.223 1.852a1.27 1.27 0 0 1-1.693-.275L2.434.19a.41.41 0 0 0-.312-.189zM12 3.805a8.835 8.835 0 0 1 8.82 8.824c-.004 4.864-3.959 8.823-8.82 8.823-4.861 0-8.816-3.959-8.816-8.824a8.836 8.836 0 0 1 5.048-7.976A8.73 8.73 0 0 1 12 3.805zM9.566 8.732a.254.254 0 0 0-.219.127.253.253 0 0 0 .003.255l1.848 3.111-2.482 3.787a.257.257 0 0 0-.011.26.252.252 0 0 0 .222.134h1.859a.258.258 0 0 0 .213-.116l1.341-2.097 1.202 2.085a.251.251 0 0 0 .22.128h1.832a.247.247 0 0 0 .219-.128.234.234 0 0 0 .006-.255l-2.253-3.908-1.933-3.259a.251.251 0 0 0-.22-.124Z"/></svg>

================
File: docs/public/img/adapters/kysely.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" viewBox="0 0 132 132"><g clip-path="url(#a)"><rect width="128" height="128" x="2" y="2" fill="#fff" rx="16"/><path fill="#000" d="M41.3 109V24h5.2v49.3h.6L91.9 24h7l-37 40.3L98.5 109H92L58.6 68 46.5 81.2V109h-5.2Z"/></g><rect width="128" height="128" x="2" y="2" stroke="#121212" stroke-width="4" rx="16"/><defs><clipPath id="a"><rect width="128" height="128" x="2" y="2" fill="#fff" rx="16"/></clipPath></defs></svg>

================
File: docs/public/img/adapters/mikro-orm.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 103 132"><path fill="#166788" d="M99.87 53.9a42.87 42.87 0 0 1-10.58 10.7 53.33 53.33 0 0 1-7.26 4.38c-8.97 4.54-19.62 7-30.78 7s-21.8-2.46-30.78-7a65.9 65.9 0 0 1-3.6-1.98 53.13 53.13 0 0 1-3.65-2.4A42.74 42.74 0 0 1 2.64 53.9 26.54 26.54 0 0 0 0 65.31c0 4.72 1.3 9.23 3.64 13.36a37.36 37.36 0 0 0 1.87 2.91c8.45 11.78 25.78 19.87 45.74 19.87 19.97 0 37.3-8.1 45.75-19.87a34.05 34.05 0 0 0 1.86-2.9 26.93 26.93 0 0 0 3.65-13.37c0-4-.94-7.83-2.64-11.43Z"/><path fill="#166788" d="M99.87 84a42.87 42.87 0 0 1-10.58 10.71 53.29 53.29 0 0 1-7.26 4.38c-8.97 4.54-19.62 7-30.78 7s-21.8-2.46-30.78-7a65.64 65.64 0 0 1-3.6-1.98 53.1 53.1 0 0 1-3.65-2.4A42.74 42.74 0 0 1 2.64 84 26.54 26.54 0 0 0 0 95.43c0 4.72 1.3 9.22 3.64 13.36a37.93 37.93 0 0 0 1.87 2.9c8.45 11.78 25.78 19.88 45.74 19.88 19.97 0 37.3-8.1 45.75-19.87a34.44 34.44 0 0 0 1.86-2.91 26.92 26.92 0 0 0 3.65-13.36c0-4-.94-7.83-2.64-11.43Z"/><path fill="#1A1A1A" d="M51.25 0C23 0 0 16.21 0 36.14a26.5 26.5 0 0 0 3.49 13.08c.28.51.58 1.02.89 1.51 3.56 5.68 9.14 10.6 16.1 14.29A53.06 53.06 0 0 0 24.6 67a67.66 67.66 0 0 0 26.65 5.28A67.6 67.6 0 0 0 77.9 67a65.13 65.13 0 0 0 4.13-1.98c6.96-3.7 12.53-8.61 16.1-14.29a31.78 31.78 0 0 0 1.74-3.16c1.7-3.6 2.64-7.44 2.64-11.43C102.5 16.21 79.5 0 51.25 0Zm26.72 42.42a16.51 16.51 0 0 1-.96 1.74C75.05 47.28 72 49.98 68.17 52a29.88 29.88 0 0 1-2.27 1.09A37.25 37.25 0 0 1 51.25 56a37.25 37.25 0 0 1-15.81-3.44 28.2 28.2 0 0 1-1.1-.55c-3.82-2.03-6.88-4.73-8.85-7.85a21.08 21.08 0 0 1-.95-1.74 14.56 14.56 0 0 1-1.45-6.28c0-10.95 12.63-19.86 28.16-19.86 15.54 0 28.17 8.91 28.17 19.86 0 2.2-.52 4.3-1.45 6.28Z"/></svg>

================
File: docs/public/img/adapters/mongodb.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 120 256"><path fill="#00684A" d="M83 28.8A458 458 0 0 1 61 .2a.5.5 0 0 0-.8 0A458 458 0 0 1 38 28.8c-93.4 118.5 14.7 198.5 14.7 198.5l.9.6c.8 12.3 2.8 30.1 2.8 30.1h8s2-17.7 2.9-30.1l1-.7s108-80 14.7-198.4ZM60.5 225.5s-4.9-4.1-6.2-6.2v-.2L60.1 90c0-.4.7-.4.7 0l5.8 129v.3c-1.3 2-6.1 6.2-6.1 6.2Z"/></svg>

================
File: docs/public/img/adapters/neo4j.svg
================
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 200 75"><path d="M39.2 19c-10.6 0-17.7 6.2-17.7 18.1v8.5a8 8 0 0 1 3.5-.8 7.9 7.9 0 0 1 3.5.8v-8.5c0-7.8 4.2-11.8 10.8-11.8S50 29.3 50 37.1v18.6h6.9V37c0-12-7-18.1-17.7-18.1Z"/><path d="M60.7 37.8c0-10.9 8-18.8 19.2-18.8s19.2 8 19.2 18.8v2.5H67.9c1 6.4 5.8 10 12 10 4.6 0 7.9-1.5 10-4.6h7.6c-2.7 6.7-9.3 11-17.6 11-11.3 0-19.2-8-19.2-18.9Zm31.1-3.6c-1.4-5.8-6-8.9-11.9-8.9s-10.4 3.2-11.8 8.9Z"/><path d="M102.7 37.8c0-10.9 8-18.8 19.3-18.8s19.3 8 19.3 18.8-8 18.8-19.3 18.8-19.3-8-19.3-18.8Zm31.6 0c0-7.2-4.9-12.5-12.3-12.5s-12.3 5.3-12.3 12.5 5 12.5 12.3 12.5 12.3-5.2 12.3-12.5Z"/><path d="M180.6 62.8h.8c4.5 0 6.1-2 6.1-7V20.2h7v35.2c0 8.8-3.6 13.4-12.4 13.4h-1.5Z"/><path d="M177.2 59.1h-6.9v-8.5H153a8.6 8.6 0 0 1-7.9-4.4 7.7 7.7 0 0 1 1-8.2l15.6-20.5a8.7 8.7 0 0 1 15.6 5.1v22h5.2v6h-5.2Zm-25.5-17.3a1.8 1.8 0 0 0-.4 1 1.7 1.7 0 0 0 1.8 1.7h17.2v-22a1.7 1.7 0 0 0-1.2-1.7 2.4 2.4 0 0 0-.6-.1 1.6 1.6 0 0 0-1.4.7l-15.4 20.4Z"/><path fill="#018bff" d="M191 5.5a5.9 5.9 0 1 0 5.9 6 5.9 5.9 0 0 0-5.9-6Z"/><path fill="#018bff" d="M24.7 47a5.8 5.8 0 0 0-3.5 1.2l-6.5-4.4a6 6 0 0 0 .2-1.6A5.9 5.9 0 1 0 9 48a5.8 5.8 0 0 0 3.5-1.2l6.5 4.5a5.9 5.9 0 0 0 0 3.2l-6.5 4.4A5.8 5.8 0 0 0 9 57.7a5.9 5.9 0 1 0 5.9 5.9 6 6 0 0 0-.2-1.6l6.5-4.4a5.8 5.8 0 0 0 3.5 1.2 5.9 5.9 0 0 0 0-11.8Z"/></svg>

================
File: docs/public/img/adapters/neon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="58" height="57" viewBox="0 0 58 57" fill="none">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 9.82759C0 4.39996 4.47705 0 9.99976 0H47.9989C53.5216 0 57.9986 4.39996 57.9986 9.82759V41.5893C57.9986 47.2045 50.7684 49.6414 47.2618 45.2082L36.2991 31.3488V48.1552C36.2991 53.04 32.2698 57 27.2993 57H9.99976C4.47705 57 0 52.6 0 47.1724V9.82759ZM9.99976 7.86207C8.89522 7.86207 7.99981 8.74206 7.99981 9.82759V47.1724C7.99981 48.2579 8.89522 49.1379 9.99976 49.1379H27.5993C28.1516 49.1379 28.2993 48.6979 28.2993 48.1552V25.6178C28.2993 20.0027 35.5295 17.5656 39.0361 21.9989L49.9988 35.8583V9.82759C49.9988 8.74206 50.1034 7.86207 48.9988 7.86207H9.99976Z" fill="#00E0D9"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 9.82759C0 4.39996 4.47705 0 9.99976 0H47.9989C53.5216 0 57.9986 4.39996 57.9986 9.82759V41.5893C57.9986 47.2045 50.7684 49.6414 47.2618 45.2082L36.2991 31.3488V48.1552C36.2991 53.04 32.2698 57 27.2993 57H9.99976C4.47705 57 0 52.6 0 47.1724V9.82759ZM9.99976 7.86207C8.89522 7.86207 7.99981 8.74206 7.99981 9.82759V47.1724C7.99981 48.2579 8.89522 49.1379 9.99976 49.1379H27.5993C28.1516 49.1379 28.2993 48.6979 28.2993 48.1552V25.6178C28.2993 20.0027 35.5295 17.5656 39.0361 21.9989L49.9988 35.8583V9.82759C49.9988 8.74206 50.1034 7.86207 48.9988 7.86207H9.99976Z" fill="url(#paint0_linear_10558_11765)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 9.82759C0 4.39996 4.47705 0 9.99976 0H47.9989C53.5216 0 57.9986 4.39996 57.9986 9.82759V41.5893C57.9986 47.2045 50.7684 49.6414 47.2618 45.2082L36.2991 31.3488V48.1552C36.2991 53.04 32.2698 57 27.2993 57H9.99976C4.47705 57 0 52.6 0 47.1724V9.82759ZM9.99976 7.86207C8.89522 7.86207 7.99981 8.74206 7.99981 9.82759V47.1724C7.99981 48.2579 8.89522 49.1379 9.99976 49.1379H27.5993C28.1516 49.1379 28.2993 48.6979 28.2993 48.1552V25.6178C28.2993 20.0027 35.5295 17.5656 39.0361 21.9989L49.9988 35.8583V9.82759C49.9988 8.74206 50.1034 7.86207 48.9988 7.86207H9.99976Z" fill="url(#paint1_linear_10558_11765)" fill-opacity="0.4"/>
<path d="M48.0003 0C53.523 0 58 4.39996 58 9.82759V41.5893C58 47.2045 50.7699 49.6414 47.2633 45.2082L36.3006 31.3488V48.1552C36.3006 53.04 32.2712 57 27.3008 57C27.8531 57 28.3008 56.56 28.3008 56.0172V25.6178C28.3008 20.0027 35.5309 17.5656 39.0375 21.9989L50.0002 35.8583V1.96552C50.0002 0.879992 49.1048 0 48.0003 0Z" fill="#63F655"/>
<defs>
<linearGradient id="paint0_linear_10558_11765" x1="57.9986" y1="57" x2="7.99657" y2="-0.861316" gradientUnits="userSpaceOnUse">
<stop stop-color="#62F755"/>
<stop offset="1" stop-color="#8FF986" stop-opacity="0"/>
</linearGradient>
<linearGradient id="paint1_linear_10558_11765" x1="57.9986" y1="57" x2="23.7087" y2="43.4286" gradientUnits="userSpaceOnUse">
<stop stop-opacity="0.9"/>
<stop offset="1" stop-color="#1A1A1A" stop-opacity="0"/>
</linearGradient>
</defs>
</svg>

================
File: docs/public/img/adapters/pg.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 264"><path d="M255 158a13 13 0 0 0-10.7-8.6 26 26 0 0 0-8.6.5 77 77 0 0 1-13.3 1.7c11.9-20 21.5-42.7 27-64.2 9-34.7 4.2-50.5-1.4-57.6A77.5 77.5 0 0 0 185.6.4c-14-.2-26.2 2.5-32.5 4.5-6-1-12.3-1.6-19-1.7a61.7 61.7 0 0 0-33 8.1 151 151 0 0 0-23.5-5.8C54.8 1.7 36.4 4.6 23 14.2 6.6 25.7-.9 45.7.5 73.6c.4 9 5.4 36 13.2 61.5a215 215 0 0 0 14.2 36.3c7 13.4 14.6 21.2 23 24a22.6 22.6 0 0 0 22.4-4.8c1.1 1.4 2.7 2.7 4.7 4 2.6 1.6 5.7 3 8.9 3.8 11.3 2.8 22 2 31-1.9a643.2 643.2 0 0 1 .3 10.7A109.5 109.5 0 0 0 123 240c1.4 4.2 3.6 11 9.3 16.5 6 5.5 13.1 7.3 19.7 7.3 3.3 0 6.4-.5 9.2-1 9.8-2.2 21-5.4 29-16.9 7.6-10.8 11.4-27.2 12-53l.3-2 .1-1.4 1.8.2h.5c10 .4 22.2-1.7 29.7-5.2 6-2.7 25-12.8 20.5-26.3"/><path fill="#336791" d="M238 160.7c-29.8 6.2-31.9-4-31.9-4 31.4-46.5 44.5-105.6 33.2-120.1C208.4-3 155 15.8 154 16.3h-.3a106 106 0 0 0-19.8-2 49 49 0 0 0-31.4 9.3S7-15.7 11.5 73.1c1 18.9 27 142.9 58.2 105.4 11.4-13.7 22.4-25.3 22.4-25.3 5.5 3.7 12 5.5 18.9 4.8l.5-.4c-.2 1.7 0 3.4.2 5.3-8 9-5.7 10.6-21.7 13.9-16.2 3.3-6.7 9.3-.5 10.8 7.6 2 25 4.6 36.8-12l-.4 2c3.1 2.5 5.3 16.3 5 29-.4 12.5-.7 21.1 1.8 27.8 2.5 6.8 5 22 26 17.4 17.7-3.7 26.8-13.5 28-29.9 1-11.6 3-9.8 3.2-20.2l1.6-5c1.9-15.7.3-20.7 11.2-18.4l2.6.2c8 .4 18.4-1.2 24.6-4 13.2-6.2 21-16.5 8-13.8"/><path fill="#FFF" d="M108 81.5c-2.6-.3-5 0-6.3 1-.6.4-.9 1-1 1.5 0 1 .7 2.3 1.2 3 1.3 1.7 3.3 3 5.2 3.2h.9c3.2 0 6.2-2.5 6.4-4.3.4-2.4-3-4-6.3-4.4"/><path fill="#FFF" d="M196.9 81.6c-.3-1.8-3.6-2.4-6.6-2-3.1.5-6.1 1.9-5.9 3.7.2 1.5 2.8 3.9 5.8 3.9h.8c2-.3 3.6-1.6 4.3-2.4 1-1.1 1.7-2.4 1.6-3.2"/><path fill="#FFF" d="M247.8 160c-1.1-3.4-4.8-4.5-10.8-3.3-18 3.8-24.5 1.2-26.6-.4a246 246 0 0 0 31.7-71.1c3-11.4 4.6-22 4.7-30.6.1-9.5-1.5-16.4-4.8-20.7a70.4 70.4 0 0 0-56.9-26.5c-16.3-.2-30.2 4-32.8 5.2a82 82 0 0 0-18.5-2.4c-12.3-.2-23 2.7-31.8 8.7-3.8-1.4-13.6-4.8-25.7-6.7-20.9-3.4-37.5-.9-49.3 7.5-14.1 10-20.7 28-19.4 53.2.4 8.5 5.3 34.6 13 59.7 10 33 21 51.6 32.4 55.5 1.4.4 3 .7 4.6.7 4.2 0 9.4-1.9 14.7-8.3a529.8 529.8 0 0 1 20.3-23c4.5 2.5 9.5 3.8 14.6 4v.4l-2.6 3.2c-3.5 4.4-4.2 5.4-15.5 7.7-3.3.7-11.8 2.4-12 8.4-.1 6.6 10.2 9.3 11.3 9.6 4.1 1 8 1.6 11.8 1.6 9 0 17-3 23.5-8.8-.2 23.4.8 46.4 3.6 53.4 2.3 5.8 7.9 19.8 25.6 19.8 2.6 0 5.5-.3 8.7-1 18.5-4 26.5-12.1 29.6-30.2a901 901 0 0 0 5.9-45c2.8.9 6.5 1.3 10.4 1.3a61 61 0 0 0 23.7-4.5c6.7-3.1 18.8-10.7 16.6-17.4Zm-44.1-83.5c0 3.7-.6 7-1.1 10.5a80.8 80.8 0 0 0-.3 26 49.2 49.2 0 0 1-2.2 28c-.7-1.1-1.3-2.5-2-4-.5-1.2-1.7-3.4-3.3-6.3-6.4-11.5-21.4-38.4-13.7-49.3 2.2-3.3 8-6.7 22.6-4.9Zm-17.6-61.7c21.3.4 38.2 8.4 50.1 23.7 9.2 11.7-1 65-30.1 111l-1-1.2-.3-.4c7.6-12.5 6-24.8 4.8-35.8-.6-4.5-1-8.7-1-12.7.2-4.2.7-7.8 1.3-11.3a71.5 71.5 0 0 0 1.3-16c-.5-5-6.3-20.2-18-33.8a81 81 0 0 0-28.6-21.5c5.5-1.2 13-2.2 21.5-2Zm-119.4 161c-6 7-10 5.7-11.3 5.3-8.8-3-18.9-21.4-27.8-50.7A330.6 330.6 0 0 1 15 72.5C13.8 50 19.3 34.2 31.2 25.8c19.4-13.8 51.3-5.6 64.2-1.4l-.6.5c-21 21.3-20.5 57.6-20.5 59.8a150.2 150.2 0 0 1-.6 34 38.4 38.4 0 0 0 12.7 34.7 540 540 0 0 0-19.7 22.4Zm22.5-30a31 31 0 0 1-8.2-26c2-13.6 1.2-25.4.8-31.8v-2.3c3-2.7 17.2-10.3 27.4-8 4.6 1 7.4 4.2 8.6 9.6 6 28.1.8 39.9-3.4 49.3-.9 1.9-1.7 3.7-2.4 5.6l-.6 1.5c-1.3 3.7-2.6 7.2-3.4 10.4-7 0-13.7-3-18.8-8.3Zm1 37.9c-2-.5-3.8-1.4-4.9-2.1.9-.4 2.5-1 5.2-1.6 13.4-2.7 15.4-4.7 20-10.4 1-1.3 2.1-2.8 3.8-4.6 2.4-2.7 3.5-2.2 5.5-1.4 1.6.7 3.2 2.7 3.8 5 .3 1 .7 3-.5 4.6-9.4 13.1-23 13-32.9 10.5Zm69.8 65c-16.3 3.4-22-4.9-25.9-14.4-2.4-6.2-3.6-33.9-2.8-64.5l-.1-1.1-.5-2.2a15 15 0 0 0-8.1-9.7c-1.5-.6-4.2-1.7-7.5-1 .7-2.8 2-6 3.2-9.5l.6-1.5c.6-1.7 1.4-3.4 2.2-5.2 4.4-9.9 10.5-23.3 4-53.8-2.5-11.4-10.8-17-23.3-15.7A53.5 53.5 0 0 0 82 76.7c1-11.5 4.6-33 18-46.6a44.3 44.3 0 0 1 33.6-12.6 71.2 71.2 0 0 1 54.4 26c8.5 10 13 20.1 14.9 25.5-13.8-1.4-23.1 1.4-27.9 8.1-10.3 14.8 5.7 43.4 13.3 57.2 1.4 2.5 2.7 4.7 3 5.6a51 51 0 0 0 8.1 13l2 2.6c-4.2 1.2-11.7 4-11 17.8-.5 7-4.4 39.6-6.4 51-2.6 15.3-8.2 21-24 24.3Zm68.1-78c-4.2 2-11.4 3.5-18.1 3.8-7.5.3-11.3-.9-12.2-1.6-.4-8.6 2.8-9.5 6.2-10.5l1.5-.5 1 .8c6 4 16.8 4.4 32 1.3h.1c-2 1.8-5.5 4.4-10.5 6.7Z"/></svg>

================
File: docs/public/img/adapters/pouchdb.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 330"><g fill-opacity=".9"><path fill="#6CCB94" d="M18.8 0 0 91.5l53.8 50.7-35 62.3L90 329.7h77.8l71.4-125.2-35.2-62.3 52-50.7L238.6 0l-73.1 97.4H92.4L18.8 0Z"/><path fill="#5DBD85" d="m18.8 204.5 35-62.3 75 62.3h-110Z"/><path fill="#64C48C" d="m53.8 142.2 75 62.3-36.4-107-38.6 44.7Z"/><path fill="#6ECC95" d="M239.1 204.5 204 142.2l-75 62.3h110Z"/><path fill="#5EBE86" d="M90 329.7h77.7l-38.9-125.2L90 329.7Z"/><path fill="#76D29C" d="m203.9 142.2-75 62.3 36.7-107 38.3 44.7Z"/><path fill="#74D09B" d="m238.7 0 17.1 91.5-52 50.7-38.2-44.8L238.7 0Z"/><path fill="#64C48C" d="m128.8 204.5 39 125.2L239 204.5H128.8Z"/><path fill="#58B880" d="M128.8 204.5 90 329.7 19 204.5h110Z"/><path fill="#5FBF87" d="M18.8 0 0 91.5l53.8 50.7 38.6-44.8L18.8 0Z"/><path fill="#6ECC95" d="m128.8 204.5 36.8-107H92.4l36.4 107Z"/></g></svg>

================
File: docs/public/img/adapters/prisma.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 106 128"><path fill="#000" fill-rule="evenodd" d="M105.3 97.5 61.3 4a7 7 0 0 0-6-4 7 7 0 0 0-6.5 3.3L1.1 80.7a7.2 7.2 0 0 0 0 7.7l23.4 36.2a7.5 7.5 0 0 0 8.4 3l67.8-20a7 7 0 0 0 4.6-4c1-2 1-4.1 0-6Zm-9.9 4-57.4 17c-1.8.5-3.5-1-3.1-2.7l20.5-98.4c.4-1.8 3-2.1 3.8-.4l38 80.7c.7 1.6-.1 3.3-1.8 3.8Z" clip-rule="evenodd"/></svg>

================
File: docs/public/img/adapters/sequelize.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64"><style>.D{fill:#2f406a}.E{fill:#2379bd}.F{fill:#03afef}</style><path d="M51.73 20.41V43.5L32.14 54.97l-.18.17v8.7l.18.16 27.59-15.94V15.93h-.27l-7.77 4.35v.18" class="D"/><path d="m12.48 43.65 19.7 11.4V64L4.35 48V16h.28l7.76 4.51.08.27v22.97" class="E"/><path d="M12.48 20.73 4.28 16l27.8-16 27.65 15.93-8 4.48-19.69-11.2-19.6 11.48" class="F"/><path d="m31.8 41.01-.22-.21v-8.65l.22-.12v-.2l7.41-4.34h.23v8.93l-7.7 4.56" class="D"/><path d="M23.97 36.74v-9.27h.21l7.55 4.4v9.15l-7.83-4.28" class="E"/><path d="m31.66 22.93-7.7 4.56L31.8 32l7.7-4.5-7.84-4.62" class="F"/><path d="m22.21 46.67-.21-.21v-8.67l.21-.11v-.22l7.42-4.33h.23v8.93l-7.7 4.56" class="D"/><path d="M14.38 42.39v-9.27h.22l7.55 4.4v9.15l-7.76-4.28" class="E"/><path d="m22.1 28.57-7.72 4.55 7.83 4.56 7.7-4.5-7.83-4.63" class="F"/><path d="m42.07 46.88-.22-.2V38l.22-.12v-.21l7.41-4.33h.24v8.92l-7.7 4.56" class="D"/><path d="M34.24 42.6v-9.27h.25l7.55 4.4v9.15L34.2 42.6" class="E"/><path d="m41.94 28.72-7.7 4.56 7.83 4.56 7.7-4.5-7.83-4.62" class="F"/><path d="m32.48 52.53-.2-.21v-8.67l.2-.11v-.22L39.9 39h.23v8.93l-7.7 4.56" class="D"/><path d="M24.64 48.25v-9.26h.21l7.55 4.4v9.16l-7.76-4.3" class="E"/><path d="m32.35 34.43-7.71 4.56 7.84 4.5 7.7-4.5-7.83-4.56" class="F"/><path d="m31.8 28.72-.22-.21v-8.64l.22-.11v-.22l7.41-4.33h.23v8.93l-7.64 4.58" class="D"/><path d="M23.97 24.47V15.2h.21l7.55 4.4v9.12l-7.83-4.28" class="E"/><path d="m31.66 10.67-7.7 4.56 7.84 4.56 7.7-4.5-7.84-4.62" class="F"/><path d="m22.21 34.38-.21-.21v-8.73l.21-.12v-.21l7.42-4.33h.23v8.92l-7.7 4.57" class="D"/><path d="M14.38 30.11v-9.27h.22l7.55 4.4v9.16l-7.76-4.29" class="E"/><path d="m22.1 16.3-7.72 4.54 7.83 4.6 7.7-4.5-7.83-4.63" class="F"/><path d="m42.07 34.6-.22-.22v-8.65l.22-.11v-.22l7.41-4.33h.24V30l-7.7 4.56" class="D"/><path d="M34.24 30.36v-9.3h.25L42 25.44v9.15l-7.76-4.23" class="E"/><path d="m41.94 16.51-7.7 4.56 7.83 4.56 7.7-4.5-7.83-4.62" class="F"/><path d="m32.48 40.2-.2-.2v-8.62l.2-.12v-.21l7.42-4.33h.23v8.92l-7.65 4.57" class="D"/><path d="M24.64 35.97V26.7h.21l7.55 4.4v9.1l-7.76-4.23" class="E"/><path d="m32.35 22.15-7.71 4.55 7.83 4.56 7.7-4.5-7.82-4.6" class="F"/></svg>

================
File: docs/public/img/adapters/supabase.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" viewBox="0 0 109 113"><path fill="url(#a)" d="M63.7 110.3a4.9 4.9 0 0 1-8.7-3l-1-67.2h45.2a9.8 9.8 0 0 1 7.7 15.8l-43.2 54.4Z"/><path fill="url(#b)" fill-opacity=".2" d="M63.7 110.3a4.9 4.9 0 0 1-8.7-3l-1-67.2h45.2a9.8 9.8 0 0 1 7.7 15.8l-43.2 54.4Z"/><path fill="#3ECF8E" d="M45.3 2A4.9 4.9 0 0 1 54 5l.5 67.3H9.8a9.8 9.8 0 0 1-7.6-15.9L45.3 2.1Z"/><defs><linearGradient id="a" x1="54" x2="94.2" y1="55" y2="71.8" gradientUnits="userSpaceOnUse"><stop stop-color="#249361"/><stop offset="1" stop-color="#3ECF8E"/></linearGradient><linearGradient id="b" x1="36.2" x2="54.5" y1="30.6" y2="65.1" gradientUnits="userSpaceOnUse"><stop/><stop offset="1" stop-opacity="0"/></linearGradient></defs></svg>

================
File: docs/public/img/adapters/surrealdb.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid" viewBox="0 0 256 299"><defs><linearGradient id="a" x1="31%" x2="69%" y1="11.7%" y2="88.3%"><stop offset="0%" stop-color="#FF00A0"/><stop offset="100%" stop-color="#9600FF"/></linearGradient></defs><path fill="url(#a)" d="m128 78.6 71.1 39.3v-15.7L128 62.9l-71.1 39.3 156.4 86.4v15.7L128 251.5a76503 76503 0 0 1-85.3-47.2v-47.1l85.3 47.1 14.2-7.9-113.8-62.8v78.6l99.6 55 99.5-55v-31.4L85.3 102.2 128 78.6Zm-99.6 7.8V118l142.2 78.6L128 220l-71.1-39.4v15.8l71 39.3a82053 82053 0 0 1 71.2-39.3L42.7 110V94.3L128 47l85.3 47.2v47.1l-85.3-47-14.2 7.9L227.5 165V86.4l-99.5-55-99.6 55ZM128 0 0 70.7V228l128 70.7L256 228V70.7L128 0Zm113.7 220L128 283 14.2 220V78.6L128 15.7l113.8 62.9V220Z"/></svg>

================
File: docs/public/img/adapters/typeorm.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 233"><path fill="#8E8F8F" d="M138.6 32.2c3.1 0 5.6 2.5 5.7 5.6v64.9c0 3.1-2.5 5.6-5.5 5.7h-53a5.7 5.7 0 0 1-5.7-5.5v-65c0-3 2.4-5.6 5.5-5.7h53Zm0 2.6H85.8a3.2 3.2 0 0 0-3.2 3v64.9c0 1.7 1.4 3.1 3 3.2h53c1.7 0 3.1-1.4 3.2-3v-65c0-1.7-1.4-3.1-3.2-3.1ZM93.3 92.7v3.7h-3.8v-3.7h3.8Zm42.2 0v3.7H95.2v-3.7h40.3ZM93.3 76.3v3.8h-3.8v-3.8h3.8Zm42.2 0v3.8H95.2v-3.8h40.3ZM93.3 60.6v3.7h-3.8v-3.7h3.8Zm42.2 0v3.7H95.2v-3.7h40.3Zm0-14.5v3.8h-46V46h46Z"/><path fill="#8E8F8F" d="M138.6 121.6c3.1 0 5.6 2.5 5.7 5.5v65c0 3.1-2.5 5.6-5.5 5.7h-53a5.7 5.7 0 0 1-5.7-5.5v-65c0-3 2.4-5.6 5.5-5.7h53Zm0 2.5H85.8a3.3 3.3 0 0 0-3.2 3v65c0 1.7 1.4 3.1 3 3.2h53c1.7 0 3.1-1.4 3.2-3v-65c0-1.7-1.4-3-3-3.1h-.2Zm-45.3 58v3.8h-3.8V182h3.8Zm42.2 0v3.7H95.2v-3.7h40.3Zm-42.2-16.4v3.8h-3.8v-3.8h3.8Zm42.2 0v3.8H95.2v-3.8h40.3ZM93.3 150v3.7h-3.8V150h3.8Zm42.2 0v3.7H95.2V150h40.3Zm0-14.5v3.8h-46v-3.8h46Z"/><polygon fill="#8E8F8F" points="153.9 70.3 153.9 73.5 172.8 73.5 172.8 159 153.9 159 153.9 162.1 172.8 162.1 175.9 162.1 175.9 159 175.9 73.5 175.9 70.3 172.8 70.3"/><path fill="#FE0902" d="M19.3 14.8a29 29 0 0 1 16-11.7l1-.3.8-.3 1.2-.3.9-.2.4-.1.8-.2.4-.1.9-.2.8-.1.8-.2.7-.1.8-.1.8-.1.7-.1h.7l.8-.2h1l1-.1h.9l1-.1H56v15.1c-13.3-1.3-19.3 2.8-22 7l-.2.5-.8 1.8-.2.4v.2l-.2.4v.4l-.2.3v.6l-.1.2v.3l-.1.4v.3l-.1.5v27.5l-.1 6.9v5.8l-.1 4.6v4.4l-.1 3.8-.1 4v2.1l-.1 2V92l-.1.7v4.6l-.1.5v.5l-.1.7v.5l-.1.4-.1.5v.3l-.1.4v.3l-.2.4-.1.5-.1.5-.2.5-.1.4-.2.5-.1.5c-2 5-6.3 9.4-16.3 11.5 9.7 2 14 6.2 16.1 11l.2.5.5 1.4.1.5.2 1 .1.4v.3l.2.5v.9l.2.5v1.4l.1.7v2.3l.1.8v3.5l.1 2.3v2.5l.1 2.7v3.2l.2 5.4v13.7l.2 9.7v23.1l.1.3v.4l.2.3v.6l.1.1.1.4.2.4v.2l.2.4.1.4.2.4c2 4.7 7.6 9.8 22 8.6h.7v15h-1l-.6.1h-3.9l-.6-.1H49l-.6-.1h-.7l-.7-.2h-.7l-.7-.1-.7-.1h-.4l-.7-.2h-.4l-.8-.2h-.4l-.8-.2H41l-.8-.2-.8-.2-.8-.2-.8-.2c-7.5-2-15.4-6.1-19.4-14a31 31 0 0 1 13-23.9l.5-.2-1.5 1a31 31 0 0 0-12 23 26.6 26.6 0 0 1-2.8-11.7v-4.1l-.2-5-.1-6-.2-7.5-.2-6.6-.2-8.5-.3-9.2L14 143l-.1-3.4c-.3-7.5-3.3-11.2-6.5-13l-.4-.2-.2-.1-.3-.2-.4-.1-.4-.2-.3-.1-.4-.1-.4-.1-.2-.1H4l-.3-.1h-.3l-.4-.2H0v-17.8h2.9l.2-.1h.4l.3-.1h.3l.3-.2h.2l.4-.1.4-.2h.3c3.7-1.5 7.8-5 8.2-13.9l.4-12.8.3-10.5.2-6 .3-9.4.2-6.7.1-5 .2-6.8v-4.2l.1-3.3a26 26 0 0 1 3.5-13l.1-.2Zm180.7.4V0h1.3l.7-.1h3.5l.5.1h1l.6.1.7.1h.7l.7.1.7.1.7.1.8.1.7.2h.4l.8.2.8.1.8.2.8.2.8.2 1.2.3.8.2a28.3 28.3 0 0 1 19.1 15 29 29 0 0 1 2.2 10.4V32l.2 5v3.4l.2 5.1.2 6.7.1 4.9.2 8.5.3 9.2.5 14.4.1 3.3c.3 7.7 3.4 11.4 6.7 13.2l.3.2h.2l.4.2.4.2h.1l.4.2h.2l.4.2h.1l.6.1.3.1h.3l.4.1h.2l.3.1h2.6v17.8h-2.8l-.3.1h-.4l-.3.1-.3.1h-.3l-.2.1h-.2l-.4.2h-.2l-.3.2h-.2l-.4.2c-3.5 1.5-7.3 5.1-7.6 13.6l-.4 12.8-.3 10.5-.2 6-.3 9.4-.2 6.7-.1 5-.2 6.8v4.2l-.1 3.3c0 3.1-.6 6.2-1.7 9.1l-.1.4c-3.8 9.7-12.9 14.3-21.3 16.5l-.8.2h-.4l-.9.2-.4.1-.8.2h-.4l-.7.2h-.4l-.8.2h-.8l-.7.2h-.7l-.7.1-.7.1h-1l-.7.1h-.9l-.9.1H200v-15.1c14 1.3 19.9-3.2 22.3-7.7l.2-.4.2-.4.2-.4.1-.4.2-.4.1-.4v-.2l.2-.4v-.3l.1-.4.1-.4v-.3l.1-.3v-.4l.1-.4V177l.1-6.7v-6.9l.1-6.1v-3.6l.1-2.9v-3.3l.1-2v-2l.1-2 .1-2V135l.1-.5v-.9l.1-.5v-.5l.2-.5v-.7l.2-.5v-.5l.2-.5c0-.5.2-1 .4-1.6l.2-.5.8-1.8.2-.5c2.3-4.2 6.7-7.8 15.4-9.6-11-2.2-15.1-7.4-16.8-13l-.1-.4-.2-1-.1-.4v-.3l-.2-.5v-.9l-.2-.5v-1.4l-.1-.7v-2.3l-.1-.8V91l-.1-2v-2.3l-.1-2.6v-2.7l-.1-3.8v-5.4L224 67v-6l-.2-10.4V39.3c.9-.4 1.7-1 2.5-1.5 4-2.9 7-6.8 9-11.3l.2-.3A27.5 27.5 0 0 1 224.3 39l-.4.2V27.6l-.1-.3v-.4l-.2-.3V26l-.1-.1-.1-.4-.2-.4v-.2l-.2-.4-.1-.4-.2-.4c-2-4.7-7.6-9.8-22-8.6h-.7Z"/><path fill="#FFAB00" d="m31.2 36 .4.4.5.3V28l.1-.4v-.3l.2-.4v-.5l.2-.4v-.2l.2-.4V25l.2-.4.8-1.8.3-.4c2.6-4.3 8.6-8.4 22-7V.2h-6.5l-1 .2H48l-1 .1h-.8l-.7.2h-.8L44 1l-.7.1-.8.2-.8.1-.9.2h-.4l-.8.3h-.4l-.9.3-1.2.3-.9.3-.8.3c-6.2 2-12.3 5.6-16 11.7 1.1 9 5 16.5 11.8 21.3ZM56 232v-15c-14.6 1.3-20.4-3.6-22.6-8.3l-.2-.4-.2-.6-.2-.4v-.2l-.1-.4-.2-.4v-.4l-.1-.4-.1-.3v-.4l-.1-.3v-.3l-.1-.5v-11.8l-1.5 1a31 31 0 0 0-12.1 23.2c4 7.9 12 12 19.4 14l.8.2.8.2.8.2.8.1.8.2h.4l.8.2h.4l.7.2h.4l.8.1h.3l.7.2h.7l.7.1h.7l.6.1h.7l.6.1h2l.6.1h3ZM238.1 17.4C234.2 8.3 225.6 4 217.5 2l-.8-.2-.8-.2h-.3l-.8-.2-.4-.1-.8-.2-.8-.1-.7-.1-.8-.1-.7-.1-.7-.1-.7-.1h-.7l-.7-.1-1-.1h-.9l-.8-.1h-2l-.5-.1H200v15.2c14.6-1.4 20.4 3.5 22.6 8.2l.2.5.2.6.2.3v.2l.1.4.2.4v.4l.1.4.1.3v.4l.1.3v.3l.1.5v10.9c.9-.4 1.7-1 2.5-1.5A30 30 0 0 0 238 17.3Zm-11 177.3-3.2-2v11.7l-.1.3v.3l-.2.4v.4l-.1.3-.1.4v.2l-.2.4-.2.4-.1.4-.2.4-.2.4-.2.4c-2.4 4.5-8.3 9-22.3 7.7v15.1h6.5l1-.2h1.2l.7-.2h.7l.7-.1.7-.1.8-.2h.4l.7-.2.8-.1h.4l.8-.2.4-.1.8-.2c8.6-2 18-6.7 21.8-16.6a29 29 0 0 0-11.5-19Z"/></svg>

================
File: docs/public/img/adapters/unstorage.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 361 361"><path fill="#EFDA4F" d="M0 0h361v361H0V0Z"/><path fill="#070702" d="M289.2 228.5A32.4 32.4 0 0 1 303 245c.9 3.6 1.1 6.9 1.2 10.6V266a3268.6 3268.6 0 0 1 .2 26.8v9.7c-.5 3.3-1.8 4.5-4.4 6.5-3.1.4-5 .7-7.7-1.2-1.7-2.4-1.7-3.8-1.7-6.8v-6.4a44198.8 44198.8 0 0 0-.1-28.5V263c0-7.3-1-14-6-19.6-4-3.6-8.7-3.7-13.9-3.6-6.3.8-12 3.9-16.6 8.3-2.5 3.6-3.4 6-3.4 10.3v6.4a41036.2 41036.2 0 0 1-.1 28.7v9.2c-.7 3.2-2 4.4-4.5 6.4-3 .6-3 .6-6 0-2.8-2.7-4-4.4-4.5-8.3V297a596334376 596334376 0 0 1 0-23.5 1144 1144 0 0 0 0-27V236c.6-3.7 1.5-4.9 4.5-7.1 3.4-.5 5.3-.4 8.4 1.3 1.6 1.7 1.6 1.7 1.6 5.7l2.2-1.5 3-1.9 3-1.9c8.6-5.2 21.4-6 31-2.2Z"/><path fill="#050501" d="m161 229 3 2c.4 2.1.4 2.1.4 4.8v9.6a1632.5 1632.5 0 0 1 .2 28c0 6.5.2 13 4.8 18.2 5.8 5.1 11.7 4.7 19.2 4.7 4.7-.4 6.8-1.3 10.4-4.3 3.4-4.5 4.1-8.6 4.2-14v-6.4a13583.4 13583.4 0 0 1 .3-28.3V237l.1-2.7c.5-2.8 1.1-3.7 3.4-5.3 6-.7 6-.7 8.7 1.2 1.8 2.4 1.7 4 1.7 7v3.2l.1 3.5v3.6a1215.3 1215.3 0 0 1 .2 19v10.8c0 10.5-3.5 18.9-11 26.3-9 7.2-19.5 7.2-30.7 6.4-7.6-1.1-13-4.2-18-10-1.3-2.9-1.3-2.9-2-5l-3-1c-1.7-4-2.3-7.5-2.3-11.8v-10.6a1927 1927 0 0 1-.2-27.3v-9.9c.5-2.4.5-2.4 2.3-4.2 3-1.6 5-1.5 8.2-1.2Z"/><path fill="#C4B340" d="m260 242 2 1-10 10c0-4.3 2.1-5.9 5-9l3-2Z"/></svg>

================
File: docs/public/img/adapters/upstash-redis.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="isolation:isolate" viewBox="0 0 64 64"><defs><clipPath id="a"><rect width="64" height="64"/></clipPath></defs><g clip-path="url(#a)"><path fill="#00E9A3" d="M11.345 52.655c9.126 9.127 23.922 9.127 33.048 0 9.126-9.126 9.126-23.922 0-33.048l-4.131 4.131c6.845 6.844 6.845 17.942 0 24.786-6.844 6.845-17.942 6.845-24.786 0l-4.131 4.131Z"/><path fill="#00E9A3" d="M19.607 44.393c4.563 4.563 11.961 4.563 16.524 0 4.563-4.563 4.563-11.961 0-16.524L32 32a5.841 5.841 0 0 1 0 8.262 5.841 5.841 0 0 1-8.262 0l-4.131 4.131Z"/><path fill="#00E9A3" d="M52.655 11.345c-9.126-9.127-23.922-9.127-33.048 0-9.126 9.126-9.126 23.922 0 33.048l4.131-4.131c-6.845-6.844-6.845-17.942 0-24.786 6.844-6.845 17.942-6.845 24.786 0l4.131-4.131Z"/><path fill="#00E9A3" d="M44.393 19.607c-4.563-4.563-11.961-4.563-16.524 0-4.563 4.563-4.563 11.961 0 16.524L32 32a5.841 5.841 0 0 1 0-8.262 5.841 5.841 0 0 1 8.262 0l4.131-4.131Z"/><path fill="#FFF" fill-opacity=".8" d="M52.655 11.345c-9.126-9.127-23.922-9.127-33.048 0-9.126 9.126-9.126 23.922 0 33.048l4.131-4.131c-6.845-6.844-6.845-17.942 0-24.786 6.844-6.845 17.942-6.845 24.786 0l4.131-4.131Z"/><path fill="#FFF" fill-opacity=".8" d="M44.393 19.607c-4.563-4.563-11.961-4.563-16.524 0-4.563 4.563-4.563 11.961 0 16.524L32 32a5.841 5.841 0 0 1 0-8.262 5.841 5.841 0 0 1 8.262 0l4.131-4.131Z"/></g></svg>

================
File: docs/public/img/adapters/xata.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 461 467"><path fill="#06D6A0" d="M389.4 465.6c32.3-32.2 53.8-72.4 60-111.8 6.2-39.4-3.6-74.8-27.1-98.4L300.7 376.7l88.7 89Z"/><path fill="#FB0" d="M71.6 466.3c-32.3-32.2-53.8-72.4-60-111.8-6.2-39.4 3.6-74.8 27.1-98.4l121.6 121.3-88.7 89Z"/><path fill="#FF0075" d="M.7 122.2c0 45.5 18.2 89.2 50.4 121.4l121.6 121.2a171.7 171.7 0 0 0-.3-242.8L50.8.7A171.7 171.7 0 0 0 .7 122.2Z"/><path fill="#0076FF" d="M460.3 121.5c0 45.5-18.2 89.2-50.4 121.4L288.3 364a171.7 171.7 0 0 1 .3-242.8L410.2 0c32.1 32.2 50.2 76 50.1 121.5Z"/></svg>

================
File: docs/public/img/etc/clerk-logo.svg
================
<svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="39.9997" cy="39.9998" r="12.4999" fill="#6C47FF"/>
<path d="M62.232 6.74247C63.4816 7.57946 63.5883 9.34018 62.5248 10.4037L53.39 19.5385C52.5644 20.3641 51.2836 20.4945 50.2445 19.9622C47.1718 18.388 43.6895 17.4999 39.9998 17.4999C27.5734 17.4999 17.4999 27.5734 17.4999 39.9998C17.4999 43.6895 18.388 47.1718 19.9622 50.2445C20.4945 51.2836 20.3641 52.5644 19.5385 53.39L10.4037 62.5248C9.34018 63.5883 7.57946 63.4816 6.74247 62.232C2.48381 55.874 0 48.227 0 39.9998C0 17.9085 17.9085 0 39.9998 0C48.227 0 55.874 2.48381 62.232 6.74247Z" fill="#BAB1FF"/>
<path d="M62.5249 69.5959C63.5884 70.6594 63.4816 72.4201 62.232 73.2571C55.8741 77.5158 48.227 79.9996 39.9998 79.9996C31.7726 79.9996 24.1255 77.5158 17.7676 73.2571C16.518 72.4201 16.4112 70.6594 17.4747 69.5959L26.6095 60.4611C27.4351 59.6355 28.7159 59.505 29.7551 60.0374C32.8278 61.6116 36.3101 62.4997 39.9998 62.4997C43.6895 62.4997 47.1718 61.6116 50.2445 60.0374C51.2837 59.505 52.5645 59.6355 53.3901 60.4611L62.5249 69.5959Z" fill="#6C47FF"/>
</svg>

================
File: docs/public/img/etc/cli.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="96" stroke-linejoin="round" viewBox="0 0 96 96" width="96">
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M9 15H87V75C87 78.314 84.314 81 81 81H15C11.686 81 9 78.314 9 75V15ZM0 6H9H87H96V15V75C96 83.284 88.284 91 80 91H16C7.716 91 0 83.284 0 75V15V6ZM24 66.8034L26.6516 64.1518L39.0909 51.7125C41.1412 49.6622 41.1412 46.3378 39.0909 44.2875L26.6516 31.8482L24 29.1966L18.6966 34.5L21.3482 37.1518L32.1966 48L21.3482 58.8482L18.6966 61.5L24 66.8034ZM48 58.5296H51.735H70.5H74.235V66H70.5H51.735H48V58.5296Z">
  </path>
</svg>

================
File: docs/public/img/etc/express.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="0 0 128 128"  version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<path d="M126.67 98.44c-4.56 1.16-7.38.05-9.91-3.75-5.68-8.51-11.95-16.63-18-24.9-.78-1.07-1.59-2.12-2.6-3.45C89 76 81.85 85.2 75.14 94.77c-2.4 3.42-4.92 4.91-9.4 3.7l26.92-36.13L67.6 29.71c4.31-.84 7.29-.41 9.93 3.45 5.83 8.52 12.26 16.63 18.67 25.21 6.45-8.55 12.8-16.67 18.8-25.11 2.41-3.42 5-4.72 9.33-3.46-3.28 4.35-6.49 8.63-9.72 12.88-4.36 5.73-8.64 11.53-13.16 17.14-1.61 2-1.35 3.3.09 5.19C109.9 76 118.16 87.1 126.67 98.44zM1.33 61.74c.72-3.61 1.2-7.29 2.2-10.83 6-21.43 30.6-30.34 47.5-17.06C60.93 41.64 63.39 52.62 62.9 65H7.1c-.84 22.21 15.15 35.62 35.53 28.78 7.15-2.4 11.36-8 13.47-15 1.07-3.51 2.84-4.06 6.14-3.06-1.69 8.76-5.52 16.08-13.52 20.66-12 6.86-29.13 4.64-38.14-4.89C5.26 85.89 3 78.92 2 71.39c-.15-1.2-.46-2.38-.7-3.57q.03-3.04.03-6.08zm5.87-1.49h50.43c-.33-16.06-10.33-27.47-24-27.57-15-.12-25.78 11.02-26.43 27.57z"></path>
</svg>

================
File: docs/public/img/etc/nextjs.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="256px" viewBox="0 0 256 256" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
    <title>Next.js</title>
    <defs>
        <circle id="path-1" cx="128" cy="128" r="128"></circle>
        <linearGradient x1="55.6325605%" y1="56.3850422%" x2="83.2279093%" y2="96.0801119%" id="nextjsLinearGradient-3">
            <stop stop-color="#FFFFFF" offset="0%"></stop>
            <stop stop-color="#FFFFFF" stop-opacity="0" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="50%" y1="0%" x2="49.9534722%" y2="73.4375%" id="nextjsLinearGradient-4">
            <stop stop-color="#FFFFFF" offset="0%"></stop>
            <stop stop-color="#FFFFFF" stop-opacity="0" offset="100%"></stop>
        </linearGradient>
    </defs>
    <g>
        <mask id="mask-2" fill="white">
            <use xlink:href="#path-1"></use>
        </mask>
        <g mask="url(#mask-2)">
            <circle fill="#000000" cx="128" cy="128" r="128"></circle>
            <path d="M212.6336,224.028444 L98.3352889,76.8 L76.8,76.8 L76.8,179.157333 L94.0282311,179.157333 L94.0282311,98.6788978 L199.109689,234.446222 C203.851378,231.273244 208.368356,227.790222 212.6336,224.028444 Z" fill="url(#nextjsLinearGradient-3)"></path>
            <rect fill="url(#nextjsLinearGradient-4)" x="163.555556" y="76.8" width="17.0666667" height="102.4"></rect>
        </g>
    </g>
</svg>

================
File: docs/public/img/etc/opencollective-logomark.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="256px" viewBox="0 0 256 256" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
	<g>
		<path d="M209.765144,128.149979 C209.765144,144.1633 204.864381,159.48989 196.498747,172.725072 L229.945675,206.171999 C246.682105,183.856759 255.729307,156.715152 255.729307,128.821102 C255.729307,99.5569917 245.974603,73.0710207 229.258944,51.4858128 L196.48314,84.214794 C205.122561,97.2224683 209.736907,112.48781 209.749537,128.103156 L209.765144,128.149979 Z" fill="#B8D3F4"></path>
		<path d="M127.513484,210.354816 C82.1460872,210.268958 45.3875094,173.517358 45.2930393,128.149979 C45.3617502,82.7643138 82.1278487,45.984257 127.513484,45.8983186 C144.244752,45.8983186 159.571342,50.7990817 172.119792,59.1647154 L204.864381,26.3889116 C182.54365,9.66665129 155.403429,0.630863298 127.513484,0.636494403 C57.1235437,0.636494403 0,57.7600381 0,128.149979 C0,198.508704 57.1235437,255.663463 127.513484,255.663463 C155.537352,255.740876 182.775989,246.40851 204.864381,229.161884 L171.417454,195.730564 C159.555734,205.485268 144.260359,210.354816 127.513484,210.354816 L127.513484,210.354816 Z" fill="#7FADF2"></path>
	</g>
</svg>

================
File: docs/public/img/etc/opencollective-wordmark.svg
================
<svg width="137" height="23" viewBox="0 0 137 23" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M76.5834 0.875H74.8117C74.7394 0.875 74.7033 0.913514 74.7033 0.990541V17.0892C74.7033 17.1662 74.7394 17.2047 74.8117 17.2047H76.5834C76.6557 17.2047 76.6919 17.1662 76.6919 17.0892V0.990541C76.6557 0.913514 76.6195 0.875 76.5834 0.875Z" fill="#0C2D66"/>
<path d="M108.871 5.88176H110.859C110.895 5.88176 110.968 5.95879 110.968 5.9973V7.88446C110.968 7.96149 110.932 8 110.859 8H108.871C108.834 8 108.798 8.03851 108.798 8.07703V17.0892C108.798 17.1662 108.762 17.2047 108.69 17.2047H106.918C106.846 17.2047 106.81 17.1662 106.81 17.0892V8.07703C106.81 8.03851 106.774 8 106.737 8H104.785C104.713 8 104.677 7.96149 104.677 7.88446V5.9973C104.677 5.92027 104.713 5.88176 104.785 5.88176H106.737C106.774 5.88176 106.81 5.84324 106.81 5.80473V0.990541C106.81 0.913514 106.846 0.875 106.918 0.875H108.69C108.762 0.875 108.798 0.913514 108.798 0.990541V5.80473C108.798 5.84324 108.834 5.88176 108.871 5.88176Z" fill="#0C2D66"/>
<path d="M112.739 2.26154H114.511C114.583 2.26154 114.619 2.30006 114.619 2.37708V4.26425C114.619 4.34127 114.583 4.37979 114.511 4.37979H112.739C112.667 4.37979 112.631 4.34127 112.631 4.26425V2.37708C112.631 2.30006 112.667 2.26154 112.739 2.26154Z" fill="#0C2D66"/>
<path d="M112.739 5.88181H114.511C114.583 5.88181 114.619 5.95884 114.619 5.99735V17.0892C114.619 17.1663 114.583 17.2048 114.511 17.2048H112.739C112.667 17.2048 112.631 17.1663 112.631 17.0892V5.99735C112.631 5.92033 112.667 5.88181 112.739 5.88181Z" fill="#0C2D66"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M131.649 15.2791C130.6 15.2791 129.696 14.8169 129.046 14.0467C129.009 13.9697 129.009 13.8926 129.082 13.8541L135.156 11.1197L136.928 10.3109C137 10.2724 137 10.2338 137 10.1953C136.421 7.5379 134.144 5.57371 131.468 5.68925C128.648 5.80479 126.298 8.23114 126.189 11.2352C126.045 14.5859 128.539 17.3588 131.685 17.3588C133.963 17.3588 135.915 15.8568 136.747 13.7386C136.783 13.6615 136.747 13.5845 136.674 13.5845L134.903 13.2379C134.867 13.2379 134.794 13.2379 134.794 13.3149C134.144 14.4703 132.987 15.2791 131.649 15.2791ZM131.649 7.80753C132.697 7.80753 133.637 8.30821 134.252 9.07848C134.288 9.15551 134.288 9.23253 134.216 9.27105C134.216 9.27105 128.359 11.9285 128.286 11.967C128.214 12.0055 128.142 11.9285 128.142 11.89V11.5819C128.105 9.46362 129.696 7.80753 131.649 7.80753Z" fill="#0C2D66"/>
<path d="M124.201 5.88181H125.936C126.009 5.88181 126.045 5.95884 125.972 6.03587L122.393 17.1278C122.357 17.1663 122.321 17.2048 122.284 17.2048H119.826C119.754 17.2048 119.717 17.1663 119.717 17.1278L116.138 6.03587C116.138 5.95884 116.174 5.88181 116.246 5.88181H117.982C118.054 5.88181 118.09 5.92033 118.09 5.95884L120.911 14.7784C120.983 14.971 121.2 14.971 121.272 14.7784L124.092 5.95884C124.128 5.92033 124.165 5.88181 124.201 5.88181Z" fill="#0C2D66"/>
<path d="M99.2532 15.279C97.0838 15.279 95.3845 13.1993 95.7822 10.8115C95.9991 9.50201 97.2284 8.15404 98.4577 7.88445C99.7955 7.57634 101.061 8.07701 101.856 9.03985C101.893 9.07837 101.965 9.07837 102.001 9.03985L103.266 7.69188C103.303 7.65337 103.303 7.57634 103.266 7.53782C102.218 6.30539 100.663 5.57363 98.9639 5.65066C96.1799 5.80472 93.8659 8.23107 93.7213 11.1966C93.5767 14.5473 96.0714 17.3203 99.217 17.3203C100.808 17.3203 102.254 16.5885 103.266 15.4331C103.303 15.3946 103.303 15.3561 103.266 15.3176L102.001 13.9696C101.965 13.9311 101.893 13.9311 101.856 13.9696C101.242 14.8169 100.302 15.279 99.2532 15.279Z" fill="#0C2D66"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M87.4301 15.279C86.3816 15.279 85.4777 14.8169 84.8269 14.0466C84.7907 13.9696 84.7907 13.8926 84.8631 13.854L90.9372 11.1196L92.7089 10.3108C92.7812 10.2723 92.7812 10.2338 92.7812 10.1953C92.2027 7.53783 89.9249 5.57364 87.2493 5.68918C84.4292 5.80472 82.079 8.23107 81.9706 11.2351C81.826 14.5858 84.3207 17.3588 87.4663 17.3588C89.7441 17.3588 91.6965 15.8567 92.5281 13.7385C92.5643 13.6615 92.5281 13.5844 92.4558 13.5844L90.6842 13.2378C90.648 13.2378 90.5757 13.2378 90.5757 13.3149C89.9249 14.4703 88.7317 15.279 87.4301 15.279ZM87.4302 7.80744C88.4787 7.80744 89.4187 8.30812 90.0334 9.07839C90.0696 9.15541 90.0696 9.23244 89.9972 9.27096C89.9972 9.27096 84.14 11.9284 84.0676 11.9669C83.9953 12.0054 83.923 11.9284 83.923 11.8899V11.5818C83.8869 9.46352 85.4777 7.80744 87.4302 7.80744Z" fill="#0C2D66"/>
<path d="M78.6804 0.875H80.4521C80.4882 0.875 80.5605 0.913514 80.5605 0.990541V17.0892C80.5605 17.1662 80.5244 17.2047 80.4521 17.2047H78.6804C78.6081 17.2047 78.572 17.1662 78.572 17.0892V0.990541C78.572 0.913514 78.6081 0.875 78.6804 0.875Z" fill="#0C2D66"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.4102 11.5433C62.4102 8.30813 64.8688 5.68921 67.906 5.68921C70.9431 5.68921 73.4017 8.30813 73.4017 11.5433C73.4017 14.7784 70.9431 17.3973 67.906 17.3973C64.8688 17.3973 62.4102 14.7784 62.4102 11.5433ZM71.4131 11.5433C71.4131 9.50204 69.8584 7.80744 67.9059 7.80744C65.9535 7.80744 64.3988 9.50204 64.3988 11.5433C64.3988 13.5845 65.9897 15.2791 67.9059 15.2791C69.8222 15.2791 71.4131 13.5845 71.4131 11.5433Z" fill="#0C2D66"/>
<path d="M54.3475 10.8115C53.9497 13.1993 55.6491 15.279 57.8184 15.279C58.8669 15.279 59.807 14.8169 60.4216 13.9696C60.4578 13.9311 60.5301 13.9311 60.5663 13.9696L61.8317 15.3176C61.8679 15.3561 61.8679 15.3946 61.8317 15.4331C60.8194 16.5885 59.3731 17.3203 57.7823 17.3203C54.6367 17.3203 52.1419 14.5473 52.2866 11.1966C52.4312 8.23107 54.7452 5.80472 57.5292 5.65066C59.2285 5.57363 60.7832 6.30539 61.8317 7.53782C61.8679 7.57634 61.8679 7.65337 61.8317 7.69188L60.5663 9.03985C60.5301 9.07837 60.4578 9.07837 60.4216 9.03985C59.6262 8.07701 58.3608 7.57634 57.023 7.88445C55.7937 8.15404 54.5644 9.50201 54.3475 10.8115Z" fill="#0C2D66"/>
<path d="M41.9755 5.68921C40.8185 5.68921 39.4807 6.45948 38.8661 7.3838C38.8299 7.46083 38.6853 7.42232 38.6853 7.34529V5.99732C38.6853 5.9588 38.6491 5.88178 38.5768 5.88178H36.8052C36.769 5.88178 36.6967 5.92029 36.6967 5.99732V17.1277C36.6967 17.1662 36.7329 17.2433 36.8052 17.2433H38.5768C38.613 17.2433 38.6853 17.2047 38.6853 17.1277V11.5818C38.6853 9.46353 40.0231 7.96151 41.9393 7.96151C44.4702 7.96151 45.2295 9.73313 45.2295 11.8129V17.1277C45.2295 17.1662 45.2657 17.2433 45.338 17.2433H47.1096C47.1458 17.2433 47.2181 17.2047 47.2181 17.1277V11.8129C47.2542 8.57772 45.808 5.68921 41.9755 5.68921Z" fill="#0C2D66"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.2971 15.279C29.2486 15.279 28.3447 14.8169 27.6939 14.0466C27.6577 13.9696 27.6577 13.8926 27.73 13.854L33.8042 11.1196L35.5759 10.3108C35.6482 10.2723 35.6482 10.2338 35.6482 10.1953C35.0697 7.53783 32.7919 5.57364 30.1163 5.68918C27.2962 5.80472 24.946 8.23107 24.8376 11.2351C24.6929 14.5858 27.1877 17.3588 30.3333 17.3588C32.6111 17.3588 34.5635 15.8567 35.3951 13.7385C35.4312 13.6615 35.3951 13.5844 35.3228 13.5844L33.5511 13.2378C33.515 13.2378 33.4427 13.2378 33.4427 13.3149C32.7919 14.4703 31.6349 15.279 30.2971 15.279ZM30.2971 7.80744C31.3456 7.80744 32.2857 8.30812 32.9003 9.07839C32.9365 9.15541 32.9365 9.23244 32.8642 9.27096C32.8642 9.27096 27.0069 11.9284 26.9346 11.9669C26.8623 12.0054 26.79 11.9284 26.79 11.8899V11.5818C26.79 9.46352 28.3808 7.80744 30.2971 7.80744Z" fill="#0C2D66"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.0755 7.1527C15.8347 6.18986 16.9194 5.61216 18.2933 5.57364C20.9327 5.53513 23.319 7.53783 23.7529 10.3493C24.4037 14.0466 21.7282 17.2817 18.3657 17.2817C16.9194 17.2817 15.7986 16.6655 15.0393 15.7027C14.967 15.6257 14.8585 15.6642 14.8585 15.7797V22.1344C14.8585 22.2115 14.8224 22.25 14.7501 22.25H13.0146C12.9423 22.25 12.9061 22.2115 12.9061 22.1344V5.99729C12.9061 5.92026 12.9423 5.88175 13.0146 5.88175H14.7862C14.8585 5.88175 14.8947 5.92026 14.8947 5.99729V7.07567C14.8947 7.19121 15.0032 7.22972 15.0755 7.1527ZM14.9308 10.8115C14.5331 13.3533 16.594 15.5486 18.9803 15.125C20.4265 14.8554 21.6197 13.6229 21.8366 12.0824C22.2343 9.54051 20.1735 7.34524 17.7872 7.76889C16.3409 7.99997 15.1839 9.27091 14.9308 10.8115Z" fill="#0C2D66"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.39804 5.68921C3.36095 5.68921 0.902344 8.30813 0.902344 11.5433C0.902344 14.7784 3.36095 17.3973 6.39804 17.3973C9.43514 17.3973 11.8937 14.7784 11.8937 11.5433C11.8937 8.30813 9.43514 5.68921 6.39804 5.68921ZM6.39803 7.80744C8.35045 7.80744 9.90516 9.50203 9.90516 11.5432C9.90516 13.5845 8.3143 15.2791 6.39803 15.2791C4.48177 15.2791 2.89091 13.5845 2.89091 11.5432C2.89091 9.50203 4.48177 7.80744 6.39803 7.80744Z" fill="#0C2D66"/>
</svg>

================
File: docs/public/img/etc/powered-by-vercel.svg
================
<svg width="209" height="40" viewBox="0 0 209 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 5C0 2.23858 2.23858 0 5 0H204C206.761 0 209 2.23858 209 5V35C209 37.7614 206.761 40 204 40H5C2.23858 40 0 37.7614 0 35V5Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M20 13L28 27H12L20 13Z" fill="white"/>
<line x1="40.5" y1="2.18556e-08" x2="40.5" y2="40" stroke="#333333"/>
<path d="M53.2784 26H55.0341V21.9091H57.4205C60.1193 21.9091 61.4545 20.2784 61.4545 18.1307C61.4545 15.9886 60.1307 14.3636 57.4261 14.3636H53.2784V26ZM55.0341 20.4205V15.8693H57.2386C58.9773 15.8693 59.6875 16.8125 59.6875 18.1307C59.6875 19.4489 58.9773 20.4205 57.2614 20.4205H55.0341ZM66.9432 26.1761C69.4034 26.1761 71.0114 24.375 71.0114 21.6761C71.0114 18.9602 69.4034 17.1591 66.9432 17.1591C64.483 17.1591 62.875 18.9602 62.875 21.6761C62.875 24.375 64.483 26.1761 66.9432 26.1761ZM66.9489 24.75C65.3409 24.75 64.5909 23.3466 64.5909 21.6705C64.5909 20 65.3409 18.5795 66.9489 18.5795C68.5455 18.5795 69.2955 20 69.2955 21.6705C69.2955 23.3466 68.5455 24.75 66.9489 24.75ZM74.5341 26H76.2614L78.0341 19.6989H78.1648L79.9375 26H81.6705L84.233 17.2727H82.4773L80.7784 23.6534H80.6932L78.9886 17.2727H77.233L75.517 23.6818H75.4318L73.7216 17.2727H71.9659L74.5341 26ZM89.3409 26.1761C91.2443 26.1761 92.5909 25.2386 92.9773 23.8182L91.3693 23.5284C91.0625 24.3523 90.3239 24.7727 89.358 24.7727C87.9034 24.7727 86.9261 23.8295 86.8807 22.1477H93.0852V21.5455C93.0852 18.392 91.1989 17.1591 89.2216 17.1591C86.7898 17.1591 85.1875 19.0114 85.1875 21.6932C85.1875 24.4034 86.767 26.1761 89.3409 26.1761ZM86.8864 20.875C86.9545 19.6364 87.8523 18.5625 89.233 18.5625C90.5511 18.5625 91.4148 19.5398 91.4205 20.875H86.8864ZM94.9702 26H96.669V20.6705C96.669 19.5284 97.5497 18.7045 98.7543 18.7045C99.1065 18.7045 99.5043 18.767 99.6406 18.8068V17.1818C99.4702 17.1591 99.1349 17.142 98.919 17.142C97.8963 17.142 97.0213 17.7216 96.7031 18.6591H96.6122V17.2727H94.9702V26ZM104.56 26.1761C106.463 26.1761 107.81 25.2386 108.196 23.8182L106.588 23.5284C106.281 24.3523 105.543 24.7727 104.577 24.7727C103.122 24.7727 102.145 23.8295 102.099 22.1477H108.304V21.5455C108.304 18.392 106.418 17.1591 104.44 17.1591C102.009 17.1591 100.406 19.0114 100.406 21.6932C100.406 24.4034 101.986 26.1761 104.56 26.1761ZM102.105 20.875C102.173 19.6364 103.071 18.5625 104.452 18.5625C105.77 18.5625 106.634 19.5398 106.639 20.875H102.105ZM113.456 26.1705C115.047 26.1705 115.672 25.1989 115.979 24.642H116.121V26H117.78V14.3636H116.081V18.6875H115.979C115.672 18.1477 115.092 17.1591 113.467 17.1591C111.359 17.1591 109.808 18.8239 109.808 21.6534C109.808 24.4773 111.337 26.1705 113.456 26.1705ZM113.831 24.7216C112.314 24.7216 111.524 23.3864 111.524 21.6364C111.524 19.9034 112.297 18.6023 113.831 18.6023C115.314 18.6023 116.109 19.8125 116.109 21.6364C116.109 23.4716 115.297 24.7216 113.831 24.7216ZM124.575 26H126.234V24.642H126.376C126.683 25.1989 127.308 26.1705 128.899 26.1705C131.013 26.1705 132.547 24.4773 132.547 21.6534C132.547 18.8239 130.99 17.1591 128.882 17.1591C127.263 17.1591 126.678 18.1477 126.376 18.6875H126.274V14.3636H124.575V26ZM126.24 21.6364C126.24 19.8125 127.036 18.6023 128.518 18.6023C130.058 18.6023 130.831 19.9034 130.831 21.6364C130.831 23.3864 130.036 24.7216 128.518 24.7216C127.058 24.7216 126.24 23.4716 126.24 21.6364ZM135.216 29.25C136.619 29.25 137.511 28.517 138.011 27.1648L141.619 17.2898L139.784 17.2727L137.574 24.0455H137.483L135.273 17.2727H133.455L136.648 26.1136L136.438 26.6932C136.006 27.8239 135.398 27.9261 134.466 27.6705L134.057 29.0625C134.261 29.1591 134.705 29.25 135.216 29.25ZM149.426 14.3636H146.693L150.71 26H153.881L157.892 14.3636H155.165L152.347 23.2045H152.239L149.426 14.3636ZM162.224 26.1705C164.384 26.1705 165.838 25.1193 166.179 23.5L163.94 23.3523C163.696 24.017 163.071 24.3636 162.264 24.3636C161.054 24.3636 160.287 23.5625 160.287 22.2614V22.2557H166.23V21.5909C166.23 18.625 164.435 17.1591 162.128 17.1591C159.56 17.1591 157.895 18.983 157.895 21.6761C157.895 24.4432 159.537 26.1705 162.224 26.1705ZM160.287 20.7557C160.338 19.7614 161.094 18.9659 162.168 18.9659C163.219 18.9659 163.946 19.7159 163.952 20.7557H160.287ZM167.81 26H170.23V21.0625C170.23 19.9886 171.014 19.25 172.082 19.25C172.418 19.25 172.878 19.3068 173.105 19.3807V17.233C172.889 17.1818 172.588 17.1477 172.344 17.1477C171.366 17.1477 170.565 17.7159 170.247 18.7955H170.156V17.2727H167.81V26ZM177.893 26.1705C180.217 26.1705 181.678 24.8068 181.791 22.8011H179.507C179.365 23.733 178.751 24.2557 177.922 24.2557C176.791 24.2557 176.058 23.3068 176.058 21.6364C176.058 19.9886 176.797 19.0455 177.922 19.0455C178.808 19.0455 179.376 19.6307 179.507 20.5H181.791C181.689 18.483 180.161 17.1591 177.882 17.1591C175.234 17.1591 173.598 18.9943 173.598 21.6705C173.598 24.3239 175.206 26.1705 177.893 26.1705ZM187.318 26.1705C189.477 26.1705 190.932 25.1193 191.273 23.5L189.034 23.3523C188.79 24.017 188.165 24.3636 187.358 24.3636C186.148 24.3636 185.381 23.5625 185.381 22.2614V22.2557H191.324V21.5909C191.324 18.625 189.528 17.1591 187.222 17.1591C184.653 17.1591 182.989 18.983 182.989 21.6761C182.989 24.4432 184.631 26.1705 187.318 26.1705ZM185.381 20.7557C185.432 19.7614 186.188 18.9659 187.261 18.9659C188.312 18.9659 189.04 19.7159 189.045 20.7557H185.381ZM195.324 14.3636H192.903V26H195.324V14.3636Z" fill="white"/>
</svg>

================
File: docs/public/img/etc/qwik.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="272px" viewBox="0 0 256 272" version="1.1" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
  <title>Qwik</title>
  <g>
    <path
      d="M224.802633,271.548066 L176.04373,223.065139 L175.29865,223.17158 L175.29865,222.639928 L71.6062201,120.251664 L97.1567871,95.5849889 L82.1459867,9.46423235 L10.923994,97.7115967 C-1.21249511,109.938494 -3.44814914,129.82085 5.28159772,144.493127 L49.7819901,218.280821 C56.5954198,229.657294 68.9446684,236.461781 82.2524269,236.355341 L104.289921,236.14246 L224.802633,271.548066 Z"
      fill="#18B6F6"></path>
    <path
      d="M251.41376,96.0096521 L241.619075,77.935132 L236.508852,68.685266 L234.486489,65.0701426 L234.273609,65.2830228 L207.445212,18.8201544 C200.738387,7.12474433 188.176258,-0.105173442 174.549179,4.00642427e-13 L151.021523,0.639029547 L80.8637673,0.851690324 C67.5565576,0.958020713 55.4201892,7.97527771 48.7129802,19.3517514 L6.02242644,103.983883 L82.3544777,9.25113264 L182.427394,119.187811 L164.648054,137.15644 L175.29426,223.171031 L175.4007,222.958151 L175.4007,223.171031 L175.18782,223.171031 L175.4007,223.383362 L183.704676,231.464033 L224.053163,270.909425 C225.756753,272.504381 228.524745,270.590653 227.353355,268.570486 L202.441978,219.555907 L245.877777,139.283048 L247.261498,137.688092 C247.793699,137.05 248.3259,136.412457 248.752209,135.774364 C257.269064,124.18501 258.439906,108.66231 251.41376,96.0096521 Z"
      fill="#AC7EF4"></path>
    <polygon fill="#FFFFFF"
      points="182.745617 118.763148 82.3533804 9.35773736 96.6190999 95.053337 71.0685329 119.826452 175.080283 223.065139 165.711906 137.36932">
    </polygon>
  </g>
</svg>

================
File: docs/public/img/etc/solidstart.svg
================
<?xml version="1.0" encoding="utf-8"?>
<svg width="256px" height="239px" viewBox="256 239 256 239" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  preserveAspectRatio="xMidYMid">
  <title>SolidJS</title>
  <defs>
    <linearGradient id="solid-1" gradientUnits="userSpaceOnUse" x1="27.5" y1="3" x2="152" y2="63.5" gradientTransform="matrix(1.610062, 0, 0, 1.610062, 249.559296, 233.120835)">
      <stop offset="0.1" stop-color="#76b3e1"/>
      <stop offset="0.3" stop-color="#dcf2fd"/>
      <stop offset="1" stop-color="#76b3e1"/>
    </linearGradient>
    <linearGradient id="solid-2" gradientUnits="userSpaceOnUse" x1="95.8" y1="32.6" x2="74" y2="105.2" gradientTransform="matrix(1.610062, 0, 0, 1.610062, 249.559296, 233.120835)">
      <stop offset="0" stop-color="#76b3e1"/>
      <stop offset="0.5" stop-color="#4377bb"/>
      <stop offset="1" stop-color="#1f3b77"/>
    </linearGradient>
    <linearGradient id="solid-3" gradientUnits="userSpaceOnUse" x1="18.4" y1="64.2" x2="144.3" y2="149.8" gradientTransform="matrix(1.610062, 0, 0, 1.610062, 249.559296, 233.120835)">
      <stop offset="0" stop-color="#315aa9"/>
      <stop offset="0.5" stop-color="#518ac8"/>
      <stop offset="1" stop-color="#315aa9"/>
    </linearGradient>
    <linearGradient id="solid-4" gradientUnits="userSpaceOnUse" x1="75.2" y1="74.5" x2="24.4" y2="260.8" gradientTransform="matrix(1.610062, 0, 0, 1.610062, 249.559296, 233.120835)">
      <stop offset="0" stop-color="#4377bb"/>
      <stop offset="0.5" stop-color="#1a336b"/>
      <stop offset="1" stop-color="#1a336b"/>
    </linearGradient>
  </defs>
  <g>
    <path d="M 512 289.472 C 512 289.472 426.667 226.681 360.653 241.171 L 355.824 242.781 C 346.164 246.002 338.113 250.831 333.282 257.272 L 330.063 262.101 L 305.911 303.963 L 347.774 312.014 C 365.484 323.284 388.025 328.115 408.956 323.284 L 483.019 337.775 L 512 289.472 Z" fill="#76b3e1"/>
    <path d="M 512 289.472 C 512 289.472 426.667 226.681 360.653 241.171 L 355.824 242.781 C 346.164 246.002 338.113 250.831 333.282 257.272 L 330.063 262.101 L 305.911 303.963 L 347.774 312.014 C 365.484 323.284 388.025 328.115 408.956 323.284 L 483.019 337.775 L 512 289.472 Z" opacity=".3" fill="url(#solid-1)"/>
    <path d="M 333.282 289.472 L 326.843 291.083 C 299.472 299.133 291.422 324.894 305.911 347.435 C 322.012 368.366 355.824 379.636 383.195 371.586 L 483.019 337.775 C 483.019 337.775 397.685 274.983 333.282 289.472 Z" fill="#518ac8"/>
    <path d="M 333.282 289.472 L 326.843 291.083 C 299.472 299.133 291.422 324.894 305.911 347.435 C 322.012 368.366 355.824 379.636 383.195 371.586 L 483.019 337.775 C 483.019 337.775 397.685 274.983 333.282 289.472 Z" opacity=".3" fill="url(#solid-2)"/>
    <path d="M 465.308 361.925 C 446.869 338.889 416.3 329.337 388.025 337.775 L 288.202 369.976 L 256 426.328 L 436.327 456.92 L 468.528 398.957 C 474.969 387.686 473.359 374.807 465.308 361.925 Z" fill="url(#solid-3)"/>
    <path d="M 433.106 418.277 C 414.667 395.241 384.1 385.689 355.824 394.127 L 256 426.328 C 256 426.328 341.333 490.73 407.346 474.631 L 412.176 473.019 C 439.547 464.97 449.207 439.209 433.106 418.277 Z" fill="url(#solid-4)"/>
  </g>
</svg>

================
File: docs/public/img/etc/sveltekit.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="256px" viewBox="0 0 256 308" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
    <g>
				<path d="M239.681566,40.706757 C211.113272,-0.181889366 154.69089,-12.301439 113.894816,13.6910393 L42.2469062,59.3555354 C22.6760042,71.6680028 9.1958152,91.6538543 5.11196889,114.412133 C1.69420521,133.371174 4.6982178,152.928576 13.6483951,169.987905 C7.51549676,179.291145 3.33259428,189.7413 1.3524912,200.706787 C-2.77083771,223.902098 2.62286977,247.780539 16.3159596,266.951444 C44.8902975,307.843936 101.312954,319.958266 142.10271,293.967161 L213.75062,248.302665 C233.322905,235.991626 246.803553,216.005094 250.885557,193.246067 C254.302867,174.287249 251.30121,154.730228 242.355449,137.668922 C248.486748,128.365895 252.667894,117.916162 254.646134,106.951413 C258.772188,83.7560394 253.378243,59.8765465 239.682665,40.706757" fill="#FF3E00"></path>
				<path d="M106.888658,270.841265 C83.7871855,276.848065 59.3915045,267.805346 45.7864111,248.192566 C37.5477583,236.66102 34.3023491,222.296573 36.7830958,208.343155 C37.1989333,206.075414 37.7711933,203.839165 38.4957755,201.650433 L39.845476,197.534835 L43.5173097,200.231763 C51.9971301,206.462491 61.4784803,211.199728 71.5527203,214.239302 L74.2164003,215.047419 L73.9710252,217.705878 C73.6455499,221.487851 74.6696022,225.262925 76.8616703,228.361972 C80.9560313,234.269749 88.3011363,236.995968 95.2584831,235.190159 C96.8160691,234.773852 98.3006859,234.121384 99.6606718,233.25546 L171.331634,187.582718 C174.877468,185.349963 177.321139,181.729229 178.065299,177.605596 C178.808171,173.400048 177.830501,169.072361 175.351884,165.594581 C171.255076,159.685578 163.908134,156.9582 156.947927,158.762547 C155.392392,159.178888 153.90975,159.83088 152.551509,160.695872 L125.202489,178.130144 C120.705281,180.989558 115.797437,183.144784 110.64897,184.521162 C87.547692,190.527609 63.1523949,181.484801 49.5475471,161.872188 C41.3085624,150.340895 38.0631179,135.976391 40.5442317,122.023052 C43.0002744,108.333716 51.1099574,96.3125326 62.8835328,88.9089537 L134.548175,43.2323647 C139.047294,40.3682559 143.958644,38.21032 149.111311,36.8336525 C172.21244,30.8273594 196.607527,39.8700206 210.212459,59.4823515 C218.451112,71.013898 221.696522,85.3783452 219.215775,99.3317627 C218.798144,101.59911 218.225915,103.835236 217.503095,106.024485 L216.153395,110.140083 L212.483484,107.447276 C204.004261,101.212984 194.522,96.4735732 184.44615,93.4336926 L181.78247,92.6253012 L182.027845,89.9668419 C182.350522,86.1852063 181.326723,82.4111645 179.1372,79.3110228 C175.042839,73.4032457 167.697734,70.677026 160.740387,72.4828355 C159.182801,72.8991426 157.698185,73.5516104 156.338199,74.4175344 L84.6672364,120.0922 C81.1218886,122.323199 78.6795938,125.943704 77.9387928,130.066574 C77.1913232,134.271925 78.1673502,138.601163 80.6469865,142.078963 C84.7438467,147.987899 92.0907405,150.71526 99.0509435,148.910997 C100.608143,148.493836 102.092543,147.841423 103.452857,146.976298 L130.798305,129.548621 C135.293566,126.685437 140.201191,124.528302 145.350175,123.152382 C168.451453,117.145935 192.846751,126.188743 206.451598,145.801356 C214.690583,157.332649 217.936027,171.697153 215.454914,185.650492 C212.997261,199.340539 204.888162,211.362752 193.115613,218.769811 L121.450695,264.442553 C116.951576,267.306662 112.040226,269.464598 106.887559,270.841265" fill="#FFFFFF"></path>
		</g>
</svg>

================
File: docs/public/img/providers/42-school.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" viewBox="0 -200 960 960"><polygon points="32 412.6 362.1 412.6 362.1 578 526.8 578 526.8 279.1 197.3 279.1 526.8 -51.1 362.1 -51.1 32 279.1"/><polygon points="597.9 114.2 762.7 -51.1 597.9 -51.1"/><polygon points="762.7 114.2 597.9 279.1 597.9 443.9 762.7 443.9 762.7 279.1 928 114.2 928 -51.1 762.7 -51.1"/><polygon points="928 279.1 762.7 443.9 928 443.9"/></svg>

================
File: docs/public/img/providers/apple.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="4 32 376.4 449.4"><path d="M318.7 268.7c-.2-36.7 16.4-64.4 50-84.8-18.8-26.9-47.2-41.7-84.7-44.6-35.5-2.8-74.3 20.7-88.5 20.7-15 0-49.4-19.7-76.4-19.7C63.3 141.2 4 184.8 4 273.5q0 39.3 14.4 81.2c12.8 36.7 59 126.7 107.2 125.2 25.2-.6 43-17.9 75.8-17.9 31.8 0 48.3 17.9 76.4 17.9 48.6-.7 90.4-82.5 102.6-119.3-65.2-30.7-61.7-90-61.7-91.9zm-56.6-164.2c27.3-32.4 24.8-61.9 24-72.5a106 106 0 0 0-67.9 34.9 95.7 95.7 0 0 0-25.6 71.9c26.1 2 49.9-11.4 69.5-34.3z"/></svg>

================
File: docs/public/img/providers/asgardeo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 99.9 86.4"><g transform="translate(-553 -389)"><path fill="#ff7300" d="m624.4 389 9.1 15.9-10.1 17.6h20.3l9.2 15.9h-57Z" data-name="Path 264"/><path fill="#ff7300" d="m553 438.4 9.2-16h20.3L572.4 405l9.1-16 28.6 49.5Z" data-name="Path 265"/><path d="M613.1 475.4 603 457.8l-10.2 17.6h-18.4L603 426l28.5 49.4Z" data-name="Path 266"/></g></svg>

================
File: docs/public/img/providers/atlassian.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0.3 -41.1 145.2 186.7"><linearGradient id="a" x1="62.6" x2="25" y1="150.1" y2="85.1" gradientTransform="matrix(1 0 0 -1 0 228)" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0052cc"/><stop offset=".9" stop-color="#2684ff"/></linearGradient><path fill="url(#a)" d="M43 67a4.1 4.1 0 0 0-5.8-.8 4.3 4.3 0 0 0-1.2 1.5L.5 138.8a4.3 4.3 0 0 0 1.9 5.7 4.2 4.2 0 0 0 1.9.5h49.5a4 4 0 0 0 3.8-2.4C68.3 120.6 61.8 87 43 67z"/><path fill="#2684ff" d="M69.1 2.3a93.8 93.8 0 0 0-5.4 92.6l23.8 47.7a4.3 4.3 0 0 0 3.8 2.4h49.5a4.2 4.2 0 0 0 4.3-4.2 4.3 4.3 0 0 0-.4-2L76.4 2.3a4 4 0 0 0-7.3 0z"/></svg>

================
File: docs/public/img/providers/auth0.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 256 287"><path fill="#EB5424" d="m203.2 231.5-28.7-88.4 75.2-54.6h-93L128 0h93l28.7 88.4a128 128 0 0 1-46.5 143.1zm-150.4 0 75.2 54.7 75.2-54.7L128 177l-75.2 54.6zM6.3 88.5a128 128 0 0 0 46.5 143l28.7-88.4L6.3 88.5h93L128 0H35L6.3 88.4z"/></svg>

================
File: docs/public/img/providers/authentik.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" data-name="Layer 1" viewBox="0 0 1000 1000"><defs><style>.cls-1{fill:#fd4b2d}</style></defs><rect width="35" height="100" x="546.7" y="275.3" class="cls-1"/><rect width="35" height="78.2" x="637.7" y="271.1" class="cls-1"/><path d="M127.6 385.3a127.6 127.6 0 0 0-112 67h59.2c26.3-22.8 64.4-29.4 92 0h62.8c-24.5-33.2-61.2-67-102-67Z" class="cls-1"/><path d="M212.4 512.5C130.6 683.6-13 537.8 74.8 452.2H15.5c-46.5 81.1 17.8 190.5 112.1 188 73 0 133.2-108.3 133.2-127.4 0-8.5-11.7-34.3-31.2-60.6h-62.8c20.8 18.9 39 46.4 45.6 60.3Zm2.2-5Z" class="cls-1"/><path d="M1000 274.1V726c0 86.6-70.5 157-157.1 157h-66.7V729.2H458V883h-66.7c-86.6 0-157-70.5-157-157V583.7H739V312.1H495.2v152.7h-261V274a151.3 151.3 0 0 1 1-18 154.4 154.4 0 0 1 3.9-21.1 196 196 0 0 1 1.9-6.7 13.7 13.7 0 0 1 .5-1.6l1-3.2 1.2-3.3 1.4-3.6c.4-1.2 1-2.3 1.5-3.5a159 159 0 0 1 14.2-26.5l.2-.2a196.4 196.4 0 0 1 13-16.6l4.7-5.1.2-.2a36.5 36.5 0 0 1 2.7-2.7 159.8 159.8 0 0 1 18.6-15.6l5.6-3.8 6.4-3.9a143.1 143.1 0 0 1 16.7-8.5 152.8 152.8 0 0 1 18.4-6.6 144.4 144.4 0 0 1 10.8-2.8 158.5 158.5 0 0 1 21.3-3.1l3.1-.2h1.5c2.4-.2 4.8-.2 7.2-.2H843c2.4 0 4.8 0 7.2.2h1.5l3 .2a158.3 158.3 0 0 1 21.4 3l3.6.9c2.5.6 4.9 1.2 7.3 2a152.8 152.8 0 0 1 18.3 6.6 149.8 149.8 0 0 1 23.1 12.4l5.6 3.8a157.5 157.5 0 0 1 21.5 18.5l4.7 5a311.4 311.4 0 0 1 8.6 10.5l4.4 6.2.2.2a159.7 159.7 0 0 1 14.3 26.5l1.4 3.5 1.4 3.6 1.1 3.3c.3 1.2.7 2 1.1 3.2a15.7 15.7 0 0 1 .5 1.6l2 6.7A156 156 0 0 1 999 256a151.3 151.3 0 0 1 1 18Z" class="cls-1"/><path d="M973.3 186.6H260.8A157 157 0 0 1 391.2 117h451.7a157 157 0 0 1 130.4 69.5Z" class="cls-1"/><path d="M999 256.1H235.1a155.4 155.4 0 0 1 25.6-69.5h712.5a155.3 155.3 0 0 1 25.6 69.5Z" class="cls-1"/><path d="M1000 274.1v51.5H738.9v-13.5H495.2v13.5H234.1v-51.5a153.4 153.4 0 0 1 1-18H999a151.3 151.3 0 0 1 1.1 18Z" class="cls-1"/><rect width="261.1" height="69.5" x="234.1" y="325.6" class="cls-1"/><rect width="261.1" height="69.5" x="738.9" y="325.6" class="cls-1"/><rect width="261.1" height="69.5" x="234.1" y="395.2" class="cls-1"/><rect width="261.1" height="69.5" x="738.9" y="395.2" class="cls-1"/></svg>

================
File: docs/public/img/providers/azure-ad-b2c.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 59.2 47.3"><path fill="#0072c6" d="M32.4 0 14.9 15.1 0 42h13.4zm2.3 3.5-7.5 21 14.3 18-27.7 4.8h45.4z"/></svg>

================
File: docs/public/img/providers/azure-ad.svg
================
<svg id="svg1035" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 374.5 377.3" width="2481" height="2500"><style>.st0{fill:#00bef2}.st1{fill:#fff;stroke:#fff;stroke-width:1.2357;stroke-linecap:round;stroke-linejoin:round}</style><g id="layer1" transform="translate(-39.022 -78.115)"><g id="g1016" transform="translate(-63.947 -88.179)"><path id="path1008" class="st0" d="M290 166.3c.4 0 .8.5 1.4 1.4.5.8 42.6 51.3 93.6 112.2 51 60.9 92.6 111 92.4 111.3-.1.3-40.7 33.6-90.2 73.9s-91.6 74.6-93.5 76.2c-3.3 2.7-3.5 2.8-4.7 1.6-.7-.7-42.9-35.2-93.8-76.7S102.8 390.5 103 390c.2-.5 42-50.4 93.1-111s92.9-110.7 93.1-111.5c.2-.8.5-1.2.8-1.2z"/><path id="path923" class="st1" d="M283.1 483.6c-5.8-2.1-12.8-8.1-15.7-13.7-3.6-6.9-3.3-17.7.7-26.3 3.1-6.4 3.1-6.6 1.1-8.1-1.1-.8-14.4-8.2-29.4-16.3-15-8.1-28.1-15.2-29-15.7-1.2-.7-3.2 0-6.8 2.3-11.7 7.4-23.9 6.6-33.5-2.3-6.9-6.4-8.9-10.9-8.9-20.1 0-8.9 1.8-13.5 7.5-19.2 7.7-7.7 18-10.3 27.9-7 5.4 1.8 5.5 1.8 8.9-.8 4-3 36.1-32.3 51.6-47l10.7-10.2-3.2-6.7c-6.5-13.5-3.2-28.5 8.2-37.5 6.2-4.9 10.8-6.4 19.7-6.4 20.8 0 35.3 21.8 27.5 41.3-2.1 5.4-2.1 5.5-.1 8.8 1.7 2.9 30.6 37.8 45.9 55.6 2.7 3.1 5.7 5.6 6.7 5.6s4.4-1 7.6-2.2c14.9-5.9 30.6.7 36.8 15.5 4 9.5.5 22.3-8 30-6 5.4-10.4 7.1-18.4 7.1-5.6 0-7.7-.6-13.6-3.8-4.4-2.4-7.8-3.6-9.2-3.2-2.4.6-39.3 25.9-47.5 32.5-5 4.1-5.4 5.6-2.8 11.7 2.5 6 2.2 15.4-.6 21.3-3.1 6.5-10.8 13-17.5 15-6.8 1.9-10.9 1.9-16.6-.2zm1.7-110.2v-57l-3.2-4.4c-1.8-2.4-3.5-4.4-3.8-4.4-1.3 0-65.9 58.7-65.9 59.9 0 .3 1 3.3 2.2 6.5 1.2 3.3 2.1 8 2 10.7-.1 2.7-.1 5.7-.1 6.7.1 2.3 21.7 16.1 54.1 34.8 8.9 5.2 12 6.5 13.1 5.6 1.3-1.1 1.6-12.2 1.6-58.4zm27.4 50.4c42.8-26.9 50.8-32.3 51.3-34.3.3-1.2.7-5.9.8-10.6l.3-8.4-21.8-25.9c-23.4-27.7-32-37.1-34-37.1-.7 0-4.2 2-7.8 4.4l-6.6 4.4.3 56.9c.3 51 .7 59.6 2.6 59.6.2.1 7-4 14.9-9z"/></g></g></svg>

================
File: docs/public/img/providers/azure-devops.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 59.2 47.3"><path fill="#0072c6" d="M32.4 0 14.9 15.1 0 42h13.4zm2.3 3.5-7.5 21 14.3 18-27.7 4.8h45.4z"/></svg>

================
File: docs/public/img/providers/azure.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 59.2 47.3"><path fill="#0072c6" d="M32.4 0 14.9 15.1 0 42h13.4zm2.3 3.5-7.5 21 14.3 18-27.7 4.8h45.4z"/></svg>

================
File: docs/public/img/providers/bankid-no.svg
================
<svg width="120" height="90" viewBox="0 0 120 90" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="100%" height="100%" fill="#39134c" /> 
<path d="M38.13 24.7024H22.4443C20.3528 24.7024 18.5228 22.869 18.5228 20.7738C18.5228 18.6785 20.3528 16.8452 22.4443 16.8452H38.13C40.2214 16.8452 42.0514 18.6785 42.0514 20.7738C42.0514 22.869 40.2214 24.7024 38.13 24.7024Z" fill="#fff"/>
<path d="M38.13 56.1309H22.4443C20.3528 56.1309 18.5228 54.2976 18.5228 52.2024C18.5228 50.1071 20.3528 48.2738 22.4443 48.2738H38.13C40.2214 48.2738 42.0514 50.1071 42.0514 52.2024C42.0514 54.2976 40.2214 56.1309 38.13 56.1309Z" fill="#fff"/>
<path d="M38.13 71.8452H22.4443C20.3528 71.8452 18.5228 70.0119 18.5228 67.9167C18.5228 65.8214 20.3528 63.9881 22.4443 63.9881H38.13C40.2214 63.9881 42.0514 65.8214 42.0514 67.9167C42.0514 70.0119 40.2214 71.8452 38.13 71.8452Z" fill="#fff"/>
<path d="M69.5014 40.4167H53.8157C51.7243 40.4167 49.8943 38.5833 49.8943 36.4881C49.8943 34.3928 51.7243 32.5595 53.8157 32.5595H69.5014C71.5928 32.5595 73.4228 34.3928 73.4228 36.4881C73.4228 38.5833 71.5928 40.4167 69.5014 40.4167Z" fill="#fff"/>
<path d="M69.5014 56.1309H53.8157C51.7243 56.1309 49.8943 54.2976 49.8943 52.2024C49.8943 50.1071 51.7243 48.2738 53.8157 48.2738H69.5014C71.5928 48.2738 73.4228 50.1071 73.4228 52.2024C73.4228 54.2976 71.5928 56.1309 69.5014 56.1309Z" fill="#fff"/>
<path d="M100.873 24.7024H85.1871C83.0957 24.7024 81.2657 22.869 81.2657 20.7738C81.2657 18.6785 83.0957 16.8452 85.1871 16.8452H100.873C102.964 16.8452 104.794 18.6785 104.794 20.7738C104.794 22.869 102.964 24.7024 100.873 24.7024Z" fill="#fff"/>
<path d="M100.873 40.4167H85.1871C83.0957 40.4167 81.2657 38.5833 81.2657 36.4881C81.2657 34.3928 83.0957 32.5595 85.1871 32.5595H100.873C102.964 32.5595 104.794 34.3928 104.794 36.4881C104.794 38.5833 102.964 40.4167 100.873 40.4167Z" fill="#fff"/>
<path d="M100.873 71.8452H85.1871C83.0957 71.8452 81.2657 70.0119 81.2657 67.9167C81.2657 65.8214 83.0957 63.9881 85.1871 63.9881H100.873C102.964 63.9881 104.794 65.8214 104.794 67.9167C104.794 70.0119 102.964 71.8452 100.873 71.8452Z" fill="#fff"/>
</svg>

================
File: docs/public/img/providers/battlenet.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 580.4"><path fill="#148eff" d="M473.5 197.6c-76-35-185-57.4-287.8-49 5.2-34 17.9-57.8 38.7-62.8 28.7-6.8 60 12 89.9 46.4 19.5 2.5 42.7 7 58.8 10.7C318.7 40.6 245.7-16.8 190.2 4.4c-42.2 16-63.8 74.2-61.2 152.3C74 168.4 31.1 189.2 3.7 219c-1.4 1.6-4.5 5.6-3.4 7.6.8 1.5 3.6-.2 4.8-1 31.9-22.3 72.6-34.3 125.7-41.9 7.5 83.3 42.8 189 101.3 273.8-32 12.5-58.8 13.4-73.6-2.2-20.3-21.4-19.6-58-4.8-101a669 669 0 0 1-20.1-56.3C72 396.4 58.9 488.3 105 525.8c35 28.5 96.2 18.1 162.5-23.1 37.7 41.7 77.1 68.5 116.7 77.3 2.1.4 7.2 1 8.3-.9.9-1.4-2-3-3.3-3.7-35.1-16.4-66-45.7-99-87.9C358.4 439.4 432.3 356 476.5 263c26.9 21.5 41 44.3 35 64.8-8.5 28.3-40.5 46-85.2 54.7a692.4 692.4 0 0 1-38.7 45.6c115.9 4 202-30.5 211.5-89.1 7.1-44.7-32.4-92.4-101.3-129.2 17.4-53.5 20.8-101 8.6-139.7-.7-2-2.6-6.8-4.9-6.8-1.7 0-1.7 3.2-1.6 4.7 3.4 38.6-6.5 80-26.5 129.7ZM260.2 444.3a502.8 502.8 0 0 1-77-264.8A503 503 0 0 1 451 245.2a503 503 0 0 1-190.8 199.1Z"/></svg>

================
File: docs/public/img/providers/beyondidentity.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 32 32"><path fill="#5077c5" d="m22.1 0-8.3 16.6L10 8.7H7.1l6.7 12.8L25 0Zm-9.2 27.2V30h2.5v-7.7z"/></svg>

================
File: docs/public/img/providers/bitbucket.svg
================
<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
aria-label="Bitbucket" role="img"
viewBox="0 0 512 512"><rect
width="512" height="512"
rx="15%"
fill="#ffffff"/><path fill="#2684ff" d="M422 130a10 10 0 00-9.9-11.7H100.5a10 10 0 00-10 11.7L136 409a10 10 0 009.9 8.4h221c5 0 9.2-3.5 10 -8.4L422 130zM291 316.8h-69.3l-18.7-98h104.8z"/><path fill="url(#a)" d="M59.632 25.2H40.94l-3.1 18.3h-13v18.9H52c1 0 1.7-.7 1.8-1.6l5.8-35.6z" transform="translate(89.8 85) scale(5.3285)"/><linearGradient id="a" x2="1" gradientTransform="rotate(141 22.239 22.239) scale(31.4)" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0052cc"/><stop offset="1" stop-color="#2684ff"/></linearGradient></svg>

================
File: docs/public/img/providers/box.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 444.9 245.4"><g fill="#0075C9"><path d="M239 72.4c-33 0-61.8 18.6-76.3 46A86.4 86.4 0 0 0 34.6 89.6V16.9A17.3 17.3 0 0 0 0 17v143.4a86.4 86.4 0 0 0 162.7 39 86.4 86.4 0 1 0 76.3-127zM86.4 210.6a51.8 51.8 0 1 1 0-103.6 51.8 51.8 0 0 1 0 103.6zm152.6 0a51.8 51.8 0 1 1 0-103.6 51.8 51.8 0 0 1 0 103.6z"/><path d="m441.7 218-44.3-59 44.3-59.2A17.3 17.3 0 0 0 414 79l-38.2 51-38.2-51A17.3 17.3 0 0 0 310 99.7l44.2 59.2L310 218a17.3 17.3 0 0 0 27.6 20.8l38.2-51 38.2 51a17.3 17.3 0 0 0 27.6-20.8z"/></g></svg>

================
File: docs/public/img/providers/boxyhq-saml.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 576 576"><path fill="#212121" d="m1578.6 346 50.8 40.3-27.3 23-49.9-40.3 26.4-23Zm52.9-64.6v7.4c0 13.9-2 26.4-5.9 37.4a80.4 80.4 0 0 1-16.5 28.3 72.5 72.5 0 0 1-25.1 17.9c-9.7 4-20.3 6.1-32 6.1s-22.5-2-32.2-6.1a73.8 73.8 0 0 1-25.3-17.9 83.2 83.2 0 0 1-16.5-28.2 115.6 115.6 0 0 1-5.7-37.6v-7.3c0-14 1.9-26.4 5.7-37.5 4-11.1 9.4-20.5 16.4-28.3 7-7.8 15.4-13.8 25.1-17.8a81.2 81.2 0 0 1 32.3-6.3 80 80 0 0 1 32 6.3c9.7 4 18.1 10 25.2 17.8a80.4 80.4 0 0 1 16.6 28.3c4 11 5.9 23.6 5.9 37.5Zm-44.6 7.4V281c0-9-.8-16.9-2.4-23.7-1.5-7-3.7-12.7-6.7-17.4a29.4 29.4 0 0 0-26-14.1 29.1 29.1 0 0 0-26.1 14.1c-3 4.7-5.2 10.5-6.7 17.4-1.4 6.8-2.1 14.7-2.1 23.7v7.6c0 9 .7 16.9 2.1 23.8a56.2 56.2 0 0 0 6.6 17.4c3 4.7 6.7 8.3 11 10.7 4.4 2.4 9.6 3.6 15.4 3.6a30 30 0 0 0 14.9-3.6c4.3-2.4 8-6 10.9-10.7a54 54 0 0 0 6.7-17.4 106 106 0 0 0 2.4-23.7Zm-167.2-22.6V300h-93.3v-33.7h93.4ZM1341 194v182h-43.9V194h43.9Zm108.3 0v182h-43.8V194h43.8Zm-245.4 166.1 35-119.4h45.2l-54.3 155.4c-1.2 3.4-2.8 7.1-4.7 11-1.9 4-4.5 7.8-7.8 11.4s-7.7 6.5-13 8.8a48.3 48.3 0 0 1-19.2 3.3c-4 0-7-.2-9-.6l-8.5-1.9V398h5.5a35 35 0 0 0 10.8-1.4c2.7-.9 4.8-2.2 6.2-4a18 18 0 0 0 3.5-6.4l10.3-26Zm-8.9-119.4 26.6 94.7 4.6 44.6H1198l-48.1-139.2h45.1Zm-128.9 0 19 37.3 19.6-37.2h43.8l-35.5 65.8 37.4 69.4h-44.1l-21.2-40-21 40H1020l37.4-69.4-35.4-65.9h44.1Zm-182.2 69v-2.6a86 86 0 0 1 4.2-27.4 57 57 0 0 1 32.9-36.2 70 70 0 0 1 28-5.2c10.7 0 20 1.7 28.1 5.2a56 56 0 0 1 20.5 14.4 62.3 62.3 0 0 1 12.5 21.9 84.4 84.4 0 0 1 4.3 27.3v2.6c0 9.9-1.4 19-4.3 27.4-2.8 8.4-7 15.6-12.5 21.9-5.5 6.2-12.3 11-20.4 14.4s-17.4 5.1-28 5.1c-10.5 0-20-1.7-28-5.1a56 56 0 0 1-20.6-14.4 63.8 63.8 0 0 1-12.5-21.9 85.3 85.3 0 0 1-4.2-27.4Zm42.1-2.6v2.6c0 5.1.4 9.9 1.1 14.3s2 8.3 3.8 11.6c1.7 3.3 4.1 5.8 7.1 7.6 3 1.9 6.8 2.8 11.3 2.8 4.4 0 8-1 11-2.7 3-1.9 5.3-4.4 7-7.7 1.8-3.3 3-7.2 3.8-11.6s1.1-9.2 1.1-14.2V307c0-4.9-.3-9.5-1-13.9-.8-4.4-2-8.2-3.8-11.6-1.8-3.4-4.1-6-7.1-8-3-1.9-6.8-2.9-11.3-2.9-4.4 0-8.1 1-11.1 3-3 1.8-5.3 4.5-7 8-1.8 3.3-3 7.1-3.8 11.6-.7 4.3-1.1 9-1.1 13.8Zm-125.9-8.5h-46.9L753 270h38c6.8 0 12.3-.8 16.4-2.3 4-1.6 7-3.9 8.9-6.9 1.9-3 2.8-6.7 2.8-11.2 0-5.2-1-9.3-2.9-12.5s-5-5.5-9-6.9a48.2 48.2 0 0 0-16-2.2h-21.5v148H726V194h65.4c11.2 0 21.2 1 30 3.1 9 2 16.4 5.1 22.6 9.3a41 41 0 0 1 14.2 15.7 47.3 47.3 0 0 1 4.9 22.2c0 7.4-1.6 14.3-4.7 20.8s-8.5 11.8-16 15.9c-7.3 4-17.3 6-30 6.3L800 298.6Zm-1.7 77.4h-55.8l15-33.7h40.8c6 0 10.8-1 14.4-2.8 3.6-2 6.2-4.4 7.8-7.5a22 22 0 0 0 2.5-10.5 28 28 0 0 0-2.4-12.1c-1.5-3.4-3.9-6-7.2-7.9-3.3-2-7.8-2.9-13.4-2.9h-36.9l.3-28.7h44.1l10.3 11.5a55.1 55.1 0 0 1 28.9 5.1c7.1 4 12.2 9 15.3 15.5s4.6 13.1 4.6 20.1A54 54 0 0 1 859 352c-5 8-12.7 14-22.9 18s-22.7 6-37.7 6ZM0 149a24 24 0 0 1 24-24h87a24 24 0 0 1 24 24v267a24 24 0 0 0 24 24h267.7a24 24 0 0 1 24 24v88a24 24 0 0 1-24 24H24a24 24 0 0 1-24-24V149Z"/><path fill="#212121" fill-rule="evenodd" d="M147.3 0a24 24 0 0 0-24 24v403a24 24 0 0 0 24 24H550a24 24 0 0 0 24-24V24a24 24 0 0 0-24-24H147.3Zm21.2 21.2a24 24 0 0 0-24 24v360.6a24 24 0 0 0 24 24h360.3a24 24 0 0 0 24-24V45.2a24 24 0 0 0-24-24H168.5Z" clip-rule="evenodd"/><path stroke="#212121" stroke-linecap="round" stroke-width="40" d="m285 171.6-49 49m176.3 49.2 49.5-48.5m-176.6 48.5-49-49m176.9-49.2 48.5 49.5"/><path stroke="#212121" stroke-linecap="round" stroke-width="42" d="M361.3 143.8 338 307"/><path fill="#212121" d="M7.3 131.3 127.8 9.5l7 124.2-127.5-2.4ZM444.8 568l120.9-122.2-120.9 4.1v118Z"/></svg>

================
File: docs/public/img/providers/bungie.svg
================
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" enable-background="new 0 0 72.125 22.875" viewBox="0 0 500 145.653" height="145.653" width="500" y="0px" x="0px" id="Layer_1" version="1.1"><metadata id="metadata313"><rdf:RDF><cc:Work rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/><dc:title/></cc:Work></rdf:RDF></metadata><defs id="defs311"/><pattern overflow="visible" viewBox="2.125 -70.896 69 69" id="Polka_Dot_Pattern" patternUnits="userSpaceOnUse" height="69" width="69" y="298" x="-323.375"><g id="g232"><polygon id="polygon2" points="71.125,-1.896 2.125,-1.896 2.125,-70.896 71.125,-70.896   " fill="none"/><polygon id="polygon4" points="71.125,-1.896 2.125,-1.896 2.125,-70.896 71.125,-70.896   " fill="#F6BB60"/><g id="g24"><path id="path6" d="M61.772-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path8" d="M54.105-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path10" d="M46.439-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path12" d="M38.772-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path14" d="M31.105-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path16" d="M23.439-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path18" d="M15.772-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path20" d="M8.105-71.653c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path22" d="M0.439-71.653c0.018,0.072,0.008,0.127-0.026,0.19C0.361-71.362,0.3-71.4,0.248-71.335     c-0.051,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.07,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.038-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.051-0.12-0.064-0.187c-0.021-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.215,0.124-0.215,0.224c0.002,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g28"><path id="path26" d="M69.439-71.653c0.018,0.072,0.008,0.127-0.026,0.19c-0.052,0.101-0.113,0.063-0.165,0.128     c-0.051,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.07,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.038-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.051-0.12-0.064-0.187c-0.021-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.215,0.124-0.215,0.224c0.002,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><path id="path30" d="M0.495-71.653c0.018,0.072,0.008,0.127-0.026,0.19c-0.052,0.101-0.113,0.063-0.165,0.128    c-0.051,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161    c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631    c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45    c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.07,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221    c0.038-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.051-0.12-0.064-0.187c-0.021-0.114,0.002-0.224,0-0.337    c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207    c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.215,0.124-0.215,0.224C0.5-71.68,0.503-71.744,0.51-71.626    c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><g id="g208"><g id="g52"><path id="path32" d="M69.439-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path34" d="M61.778-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path36" d="M54.118-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path38" d="M46.458-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path40" d="M38.797-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path42" d="M31.137-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path44" d="M23.477-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path46" d="M15.816-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path48" d="M8.156-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path50" d="M0.495-64.001c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143C2-61.45,2.217-61.397,2.391-61.46c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g74"><path id="path54" d="M69.439-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path56" d="M61.778-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path58" d="M54.118-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path60" d="M46.458-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path62" d="M38.797-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path64" d="M31.137-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path66" d="M23.477-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path68" d="M15.816-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path70" d="M8.156-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path72" d="M0.495-56.348c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224C0.5-56.374,0.503-56.438,0.51-56.32      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g96"><path id="path76" d="M69.439-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path78" d="M61.778-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path80" d="M54.118-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path82" d="M46.458-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path84" d="M38.797-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path86" d="M31.137-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path88" d="M23.477-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path90" d="M15.816-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path92" d="M8.156-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path94" d="M0.495-48.695c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g118"><path id="path98" d="M69.439-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path100" d="M61.778-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path102" d="M54.118-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path104" d="M46.458-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path106" d="M38.797-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path108" d="M31.137-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path110" d="M23.477-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path112" d="M15.816-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path114" d="M8.156-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      C8.15-41.004,8.149-41.02,8.14-41.04" fill="#FFFFFF"/><path id="path116" d="M0.495-41.042c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g140"><path id="path120" d="M69.439-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path122" d="M61.778-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path124" d="M54.118-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path126" d="M46.458-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path128" d="M38.797-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path130" d="M31.137-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path132" d="M23.477-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path134" d="M15.816-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path136" d="M8.156-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path138" d="M0.495-33.39c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224C0.5-33.416,0.503-33.48,0.51-33.362      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g162"><path id="path142" d="M69.439-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path144" d="M61.778-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path146" d="M54.118-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path148" d="M46.458-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path150" d="M38.797-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path152" d="M31.137-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path154" d="M23.477-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path156" d="M15.816-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path158" d="M8.156-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path160" d="M0.495-25.736c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g184"><path id="path164" d="M69.439-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path166" d="M61.778-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path168" d="M54.118-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path170" d="M46.458-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path172" d="M38.797-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path174" d="M31.137-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path176" d="M23.477-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path178" d="M15.816-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path180" d="M8.156-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path182" d="M0.495-18.084c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224C0.5-18.11,0.503-18.175,0.51-18.057      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g><g id="g206"><path id="path186" d="M69.439-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362C69-9.692,69.159-9.523,69.154-9.4c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path188" d="M61.778-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path190" d="M54.118-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path192" d="M46.458-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path194" d="M38.797-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path196" d="M31.137-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path198" d="M23.477-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path200" d="M15.816-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.009,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      c0.177,0.042,0.384-0.104,0.543-0.143c0.18-0.043,0.397,0.01,0.571-0.053C17.933-7.969,17.839-8.227,18-8.34      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path202" d="M8.156-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      C7.915-10.05,7.866-9.836,7.886-9.75C7.717-9.692,7.876-9.523,7.871-9.4C7.868-9.351,7.83-9.295,7.826-9.239      c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631      C9.114-7.652,9.321-7.799,9.48-7.837c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path204" d="M0.495-10.431c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128      C0.254-10.05,0.205-9.836,0.225-9.75C0.056-9.692,0.215-9.523,0.21-9.4c-0.002,0.05-0.041,0.105-0.045,0.161      c-0.01,0.119,0.017,0.266,0.068,0.37C0.33-8.671,0.501-8.456,0.668-8.325c0.19,0.148,0.365,0.572,0.608,0.631      C1.454-7.652,1.66-7.799,1.819-7.837C2-7.88,2.217-7.827,2.391-7.89c0.222-0.079,0.127-0.337,0.288-0.45      c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46C3.477-8.933,3.471-8.995,3.5-9.071      c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337      c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207      c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169      c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/></g></g><g id="g230"><path id="path210" d="M69.439-2.778c0.018,0.072,0.008,0.127-0.026,0.19C69.361-2.487,69.3-2.525,69.248-2.46     c-0.051,0.063-0.099,0.276-0.079,0.362C69-2.04,69.159-1.871,69.154-1.748c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C70.397,0,70.604-0.146,70.763-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.07,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.038-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.051-0.12-0.064-0.187c-0.021-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.215,0.124-0.215,0.224c0.002,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path212" d="M61.778-2.778c0.018,0.072,0.007,0.127-0.026,0.19C61.7-2.487,61.64-2.525,61.587-2.46     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C62.737,0,62.943-0.146,63.103-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224C61.915-3.117,61.78-3.02,61.781-2.92c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path214" d="M54.118-2.778c0.018,0.072,0.007,0.127-0.026,0.19C54.04-2.487,53.98-2.525,53.927-2.46     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C55.077,0,55.283-0.146,55.442-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224C54.255-3.117,54.12-3.02,54.121-2.92c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path216" d="M46.458-2.778c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C47.416,0,47.623-0.146,47.782-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224C46.594-3.117,46.459-3.02,46.46-2.92c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path218" d="M38.797-2.778c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C39.756,0,39.962-0.146,40.122-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224C38.934-3.117,38.799-3.02,38.8-2.92c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path220" d="M31.137-2.778c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C32.095,0,32.302-0.146,32.461-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224C31.273-3.117,31.139-3.02,31.14-2.92c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path222" d="M23.477-2.778c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C24.435,0,24.642-0.146,24.801-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     c-0.021,0.011-0.021-0.005-0.03-0.025" fill="#FFFFFF"/><path id="path224" d="M15.816-2.778c0.018,0.072,0.007,0.127-0.026,0.19c-0.053,0.101-0.112,0.063-0.165,0.128     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C16.774,0,16.981-0.146,17.14-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789c-0.18,0.034-0.287,0.126-0.442,0.207     c-0.17,0.088-0.139,0.166-0.318,0.224c-0.081,0.026-0.216,0.124-0.215,0.224c0.001,0.115,0.005,0.051,0.012,0.169     C15.81-2.74,15.809-2.756,15.8-2.776" fill="#FFFFFF"/><path id="path226" d="M8.156-2.778c0.018,0.072,0.007,0.127-0.026,0.19C8.077-2.487,8.018-2.525,7.965-2.46     c-0.05,0.063-0.099,0.276-0.079,0.362c-0.169,0.058-0.01,0.227-0.015,0.35C7.868-1.698,7.83-1.643,7.826-1.587     c-0.01,0.119,0.017,0.266,0.068,0.37c0.097,0.198,0.268,0.413,0.435,0.544c0.19,0.148,0.365,0.572,0.608,0.631     C9.114,0,9.321-0.146,9.48-0.185c0.18-0.043,0.397,0.01,0.571-0.053c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.069,0.339-0.263,0.376-0.46c0.016-0.082,0.01-0.145,0.039-0.221     c0.039-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.052-0.12-0.064-0.187c-0.022-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789C8.954-3.54,8.847-3.448,8.692-3.367     c-0.17,0.088-0.139,0.166-0.318,0.224C8.292-3.117,8.158-3.02,8.159-2.92C8.16-2.805,8.164-2.869,8.17-2.751     C8.15-2.74,8.149-2.756,8.14-2.776" fill="#FFFFFF"/><path id="path228" d="M0.495-2.778c0.018,0.072,0.008,0.127-0.026,0.19C0.417-2.487,0.356-2.525,0.304-2.46     C0.253-2.397,0.205-2.184,0.225-2.098C0.056-2.04,0.215-1.871,0.21-1.748c-0.002,0.05-0.041,0.105-0.045,0.161     c-0.01,0.119,0.017,0.266,0.068,0.37C0.33-1.019,0.501-0.804,0.668-0.673c0.19,0.148,0.365,0.572,0.608,0.631     C1.454,0,1.66-0.146,1.819-0.185C2-0.228,2.217-0.175,2.391-0.237c0.222-0.079,0.127-0.337,0.288-0.45     c0.104-0.074,0.287-0.01,0.406-0.051c0.2-0.07,0.339-0.263,0.376-0.46C3.477-1.28,3.471-1.343,3.5-1.419     c0.038-0.103,0.111-0.16,0.09-0.293c-0.01-0.062-0.051-0.12-0.064-0.187c-0.021-0.114,0.002-0.224,0-0.337     c-0.003-0.2,0.017-0.379-0.078-0.55c-0.38-0.688-1.236-0.929-1.975-0.789C1.293-3.54,1.187-3.448,1.031-3.367     c-0.17,0.088-0.139,0.166-0.318,0.224C0.632-3.117,0.498-3.02,0.498-2.92C0.5-2.805,0.503-2.869,0.51-2.751     C0.489-2.74,0.488-2.756,0.479-2.776" fill="#FFFFFF"/></g></g></pattern><g transform="matrix(7.065163,0,0,7.065163,-14.476519,-6.71434)" id="g306"><defs id="defs236"><rect height="20.618" width="70.772003" y="0.94999999" x="2.0480001" id="SVGID_1_"/></defs><clipPath id="SVGID_2_"><use height="100%" width="100%" y="0" x="0" style="overflow:visible" id="use238" overflow="visible" xlink:href="#SVGID_1_"/></clipPath><defs id="defs246"><filter height="18.979" width="39.466" y="0.94999999" x="16.952" filterUnits="userSpaceOnUse" id="Adobe_OpacityMaskFilter"><feFlood id="feFlood241" result="back"/><feBlend id="feBlend243" mode="normal" in2="back" in="SourceGraphic"/></filter></defs><mask id="SVGID_3_" height="18.979" width="39.466" y="0.95" x="16.952" maskUnits="userSpaceOnUse"><g style="filter:url(#Adobe_OpacityMaskFilter)" id="g267"><g id="g265" enable-background="new    "><g id="g263"><defs id="defs249"><rect height="30.021" width="73.515999" transform="rotate(-179.98935,37.642567,13.096702)" y="-1.914" x="0.88499999" id="SVGID_4_"/></defs><clipPath clip-path="url(#SVGID_2_)" id="SVGID_5_"><use height="100%" width="100%" y="0" x="0" style="overflow:visible" id="use251" overflow="visible" xlink:href="#SVGID_4_"/></clipPath><linearGradient gradientTransform="matrix(29.0984,0,0,-29.0984,8282.1563,7951.1138)" y2="272.7988" x2="-283.0827" y1="272.7988" x1="-284.08249" gradientUnits="userSpaceOnUse" id="SVGID_6_"><stop id="stop254" style="stop-color:#231F20" offset="0"/><stop id="stop256" style="stop-color:#F5F5F6" offset="0.8517"/><stop id="stop258" style="stop-color:#FFFFFF" offset="1"/></linearGradient><rect style="fill:url(#SVGID_6_)" id="rect261" height="30.035" width="73.519997" clip-path="url(#SVGID_5_)" y="-1.921" x="0.88300002"/></g></g></g></mask><g id="g288" mask="url(#SVGID_3_)" clip-path="url(#SVGID_2_)"><g id="g286"><defs id="defs271"><rect height="18.979" width="39.465" y="0.94999999" x="16.952" id="SVGID_7_"/></defs><clipPath id="SVGID_8_"><use height="100%" width="100%" y="0" x="0" style="overflow:visible" id="use273" overflow="visible" xlink:href="#SVGID_7_"/></clipPath><g id="g284" clip-path="url(#SVGID_8_)"><defs id="defs277"><rect height="18.979" width="39.465" y="0.94999999" x="16.952" id="SVGID_9_"/></defs><clipPath id="SVGID_10_"><use height="100%" width="100%" y="0" x="0" style="overflow:visible" id="use279" overflow="visible" xlink:href="#SVGID_9_"/></clipPath><path style="fill:#bbbdbf" id="path282" d="M 56.418,8.447 C 52.112,3.802 45.588,0.756 38.443,0.96 21.744,1.436 16.865,15.35 16.953,19.93 17.846,10.89 26.214,2.315 38.155,2.403 c 6.819,0.052 13.037,3.28 16.617,7.582 0.275,-0.794 0.992,-1.338 1.646,-1.538" clip-path="url(#SVGID_10_)"/></g></g></g><path id="path290" d="m 2.373,21.317 c -0.179,0 -0.324,-0.145 -0.324,-0.323 V 9.938 C 2.049,9.76 2.194,9.614 2.373,9.614 H 6.009 L 8.334,9.613 c 1.729,0.004 3.77,0.976 3.771,3.209 0,1.245 -0.887,1.905 -1.32,2.321 0.663,0.336 1.554,1.323 1.555,2.752 10e-4,1.119 -0.436,1.98 -1.156,2.556 -0.721,0.575 -1.722,0.866 -2.85,0.866 H 5.527 Z m 1.768,-5.073 c -0.177,0 -0.323,0.147 -0.323,0.324 v 2.655 c 0,0.178 0.146,0.325 0.323,0.325 h 4.193 c 1.551,-0.009 2.231,-0.569 2.235,-1.653 -0.007,-1.012 -0.5,-1.641 -2.235,-1.651 z m 4.192,-1.771 c 1.125,-0.001 1.998,-0.65 2.001,-1.65 C 10.331,11.932 9.496,11.39 8.333,11.387 H 4.141 c -0.177,0 -0.323,0.146 -0.323,0.323 v 2.439 c 0,0.178 0.146,0.323 0.323,0.323 h 4.192 z" clip-path="url(#SVGID_2_)"/><path id="path292" d="m 14.898,16.89 c 0,1.104 0.209,2.273 0.96,3.17 0.75,0.896 2.04,1.508 4.174,1.506 h 0.001 c 2.133,0 3.423,-0.61 4.173,-1.506 0.751,-0.896 0.96,-2.066 0.96,-3.17 V 9.938 c 0,-0.179 -0.145,-0.324 -0.324,-0.324 H 23.72 c -0.178,0 -0.324,0.146 -0.324,0.324 v 6.952 c -0.009,1.687 -0.677,2.894 -3.364,2.903 -2.687,-0.01 -3.354,-1.217 -3.364,-2.903 V 9.938 c 0,-0.179 -0.146,-0.324 -0.324,-0.324 h -1.122 c -0.178,0 -0.324,0.146 -0.324,0.324 z" clip-path="url(#SVGID_2_)"/><path id="path294" d="m 37.302,18.051 c 0,0.178 -0.09,0.208 -0.199,0.069 L 30.656,9.87 C 30.547,9.728 30.311,9.613 30.133,9.613 h -1.097 c -0.179,0 -0.324,0.146 -0.324,0.324 v 11.059 c 0,0.178 0.145,0.324 0.324,0.324 h 1.123 c 0.178,0 0.324,-0.146 0.324,-0.324 v -8.112 c 0,-0.179 0.089,-0.21 0.2,-0.069 l 6.445,8.249 c 0.11,0.142 0.345,0.254 0.524,0.254 h 1.097 c 0.178,0 0.324,-0.145 0.324,-0.323 V 9.938 c 0,-0.179 -0.146,-0.324 -0.324,-0.324 h -1.123 c -0.178,0 -0.323,0.146 -0.323,0.324 v 8.113 z" clip-path="url(#SVGID_2_)"/><path id="path296" d="m 57.928,13.937 h -0.002 -1.119 -0.001 c -0.179,0 -0.324,0.145 -0.324,0.324 v 6.734 c 0,0.179 0.147,0.325 0.325,0.325 h 0.05 1.021 0.049 c 0.18,0 0.326,-0.146 0.326,-0.325 v -6.734 c -10e-4,-0.18 -0.148,-0.324 -0.325,-0.324" clip-path="url(#SVGID_2_)"/><path id="path298" d="m 63.367,19.548 c -0.179,0 -0.324,-0.146 -0.324,-0.324 V 16.43 c 0,-0.179 0.146,-0.324 0.324,-0.324 h 4.439 c 0.178,0 0.324,-0.146 0.324,-0.323 v -1.126 c 0,-0.177 -0.146,-0.324 -0.324,-0.324 h -4.439 c -0.179,0 -0.324,-0.145 -0.324,-0.323 v -2.3 c 0,-0.177 0.146,-0.323 0.324,-0.323 h 6.758 c 0.176,0 0.322,-0.146 0.322,-0.324 V 9.938 c 0,-0.179 -0.146,-0.324 -0.322,-0.324 h -8.528 c -0.179,0 -0.324,0.146 -0.324,0.324 v 11.058 c 0,0.179 0.146,0.325 0.324,0.325 h 8.821 c 0.178,0 0.324,-0.146 0.324,-0.325 v -1.124 c 0,-0.179 -0.146,-0.323 -0.324,-0.323 h -7.051 z" clip-path="url(#SVGID_2_)"/><path id="path300" d="m 48.339,11.089 c 1.733,0 2.63,0.728 3.213,1.295 0.118,0.113 0.126,0.12 0.126,0.12 0.126,0.127 0.331,0.125 0.456,-0.002 l 0.779,-0.801 c 0.124,-0.127 0.12,-0.335 -0.007,-0.457 L 52.783,11.133 C 52.005,10.417 50.58,9.316 48.168,9.316 c -1.867,0 -3.467,0.686 -4.602,1.791 -1.135,1.104 -1.801,2.626 -1.801,4.295 0,1.985 0.814,3.517 2.021,4.549 1.202,1.031 2.794,1.564 4.351,1.564 3.446,-0.004 4.87,-1.529 5.186,-1.931 l 0.045,-0.056 c 0.014,-0.021 0.033,-0.048 0.043,-0.06 0.009,-0.011 0.02,-0.023 0.023,-0.026 0.004,-0.004 0.006,-0.024 0.006,-0.046 v -0.362 -3.62 c 0,-0.177 -0.146,-0.323 -0.324,-0.323 h -4.131 c -0.179,0 -0.324,0.146 -0.324,0.323 v 1.078 c 0,0.179 0.146,0.324 0.324,0.324 h 2.353 c 0.179,0 0.325,0.146 0.325,0.323 v 1.244 c 0,0.18 -0.038,0.356 -0.084,0.396 l -0.064,0.048 c -0.025,0.02 -0.053,0.04 -0.08,0.058 -0.468,0.338 -1.373,0.858 -3.218,0.858 -2.913,-10e-4 -4.678,-2.016 -4.679,-4.264 0.001,-2.405 1.75,-4.388 4.801,-4.39" clip-path="url(#SVGID_2_)"/><path style="fill:#00a3e3" id="path302" d="m 57.367,9.506 c -0.921,0 -1.665,0.746 -1.665,1.666 0,0.92 0.744,1.665 1.665,1.665 0.919,0 1.665,-0.745 1.665,-1.665 0,-0.92 -0.746,-1.666 -1.665,-1.666" clip-path="url(#SVGID_2_)"/><path id="path304" d="m 72.162,10.151 c 0.088,0 0.152,0.009 0.193,0.026 0.073,0.029 0.109,0.09 0.109,0.18 0,0.063 -0.023,0.111 -0.069,0.141 -0.024,0.017 -0.06,0.027 -0.103,0.034 0.056,0.009 0.097,0.032 0.123,0.07 0.025,0.038 0.037,0.074 0.037,0.11 v 0.053 c 0,0.017 0.002,0.033 0.002,0.053 0.002,0.019 0.004,0.031 0.006,0.037 l 0.006,0.009 H 72.35 C 72.349,10.861 72.349,10.859 72.348,10.857 72.347,10.855 72.347,10.852 72.347,10.849 L 72.344,10.826 V 10.77 c 0,-0.082 -0.023,-0.138 -0.067,-0.163 -0.026,-0.017 -0.073,-0.023 -0.139,-0.023 h -0.099 v 0.281 h -0.125 v -0.713 h 0.248 z m 0.133,0.113 c -0.03,-0.018 -0.08,-0.026 -0.149,-0.026 H 72.04 v 0.258 h 0.112 c 0.054,0 0.093,-0.005 0.119,-0.016 0.049,-0.02 0.073,-0.057 0.073,-0.111 0,-0.053 -0.016,-0.088 -0.049,-0.105 m 0.336,0.707 c -0.125,0.127 -0.277,0.19 -0.457,0.19 -0.178,0 -0.33,-0.063 -0.455,-0.19 -0.125,-0.127 -0.188,-0.28 -0.188,-0.461 0,-0.179 0.063,-0.331 0.189,-0.458 0.125,-0.126 0.275,-0.189 0.453,-0.189 0.18,0 0.332,0.063 0.457,0.189 0.127,0.127 0.189,0.278 0.189,0.458 0,0.18 -0.061,0.333 -0.188,0.461 m -0.848,-0.857 c -0.109,0.109 -0.162,0.241 -0.162,0.396 0,0.155 0.053,0.287 0.16,0.397 0.108,0.11 0.239,0.165 0.393,0.165 0.154,0 0.285,-0.055 0.394,-0.165 0.109,-0.11 0.161,-0.242 0.161,-0.397 0,-0.154 -0.053,-0.286 -0.161,-0.396 -0.108,-0.11 -0.239,-0.165 -0.394,-0.165 -0.153,0 -0.282,0.055 -0.391,0.165" clip-path="url(#SVGID_2_)"/></g></svg>

================
File: docs/public/img/providers/click-up.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" viewBox="0 0 185 185"><g filter="url(#a)"><rect width="125" height="125" x="30" y="20" fill="#fff" rx="62.5"/><rect width="125" height="125" x="30" y="20" fill="#fff" rx="62.5"/><path fill="url(#b)" fill-rule="evenodd" d="m55.9 105.7 13.5-10.3c7.2 9.3 14.8 13.7 23.3 13.7 8.4 0 15.9-4.3 22.7-13.6l13.7 10c-9.9 13.5-22.2 20.6-36.4 20.6s-26.6-7-36.8-20.4Z" clip-rule="evenodd"/><path fill="url(#c)" fill-rule="evenodd" d="m92.6 60.7-24 20.7-11.1-12.9 35.2-30.3 35 30.4-11.2 12.8-23.9-20.7Z" clip-rule="evenodd"/></g><defs><linearGradient id="b" x1="55.9" x2="129.1" y1="116.3" y2="116.3" gradientUnits="userSpaceOnUse"><stop stop-color="#8930FD"/><stop offset="1" stop-color="#49CCF9"/></linearGradient><linearGradient id="c" x1="57.5" x2="127.6" y1="67.6" y2="67.6" gradientUnits="userSpaceOnUse"><stop stop-color="#FF02F0"/><stop offset="1" stop-color="#FFC800"/></linearGradient><filter id="a" width="185" height="185" x="0" y="0" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="10"/><feGaussianBlur stdDeviation="15"/><feColorMatrix values="0 0 0 0 0.0627451 0 0 0 0 0.117647 0 0 0 0 0.211765 0 0 0 0.1 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>

================
File: docs/public/img/providers/cognito.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 299"><path fill="#7A3E65" d="m208.8 58 25.7-6.6.2.3.7 155.6-.9.9-5.3.2-20.1-3.2-.3-.7V58M59.7 219h.1l68 19.7.2.2.3.2-.1 59.2-.2.3-68.3-33.2V219"/><path fill="#CFB2C1" d="M208.8 204.5 128 223.8 87.6 214l-27.9 5 68.3 19.9 105.4-28.6 1.1-2.1-25.7-3.7"/><path fill="#512843" d="m196.3 79.6-.7-.7-66.9-19.5-.7.3-.7-.3L22.1 89.7l-.6.7.8.5 24.1 3.5.8-.3L128 74.8l40.5 9.8 27.9-5"/><path fill="#C17B9E" d="m47.2 240.5-25.7 6.3v-.2l-1-155 1-1.2 25.7 3.7v146.4"/><path fill="#7A3E65" d="m82 180.4 46 5.4.3-.5.2-72-.5-.5-46 5.4v62.2"/><path fill="#C17B9E" d="m174 180.4-46 5.4v-73l46 5.4v62.2m22.3-100.8L128 59.7V0l68.3 33.2v46.4"/><path fill="#7A3E65" d="M128 0 0 61.8v175l21.5 10V90.4L128 59.7V0"/><path fill="#C17B9E" d="M234.5 51.4v156.8L128 238.9v59.7l128-61.8v-175l-21.5-10.4"/></svg>

================
File: docs/public/img/providers/coinbase.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.2" viewBox="0 0 1527 1551"><defs><clipPath id="cp1" clipPathUnits="userSpaceOnUse"><path d="M0-600.5h12041.2V1551H0z"/></clipPath></defs><style>.s0{fill:#0052ff}</style><g id="Clip-Path" clip-path="url(#cp1)"><path id="Layer" d="M350.4 777.1c0 259.8 176.7 453.3 428.7 453.3 182.5 0 327.4-115.5 379.5-283h365.1c-66.7 361-367.9 603.6-744.5 603.6C333.2 1551 0 1221.8 0 777.1 0 332.3 341.8.2 779.2.2c385.2 0 680.6 242.6 747.3 600.6h-367.9c-55-167.5-199.8-280.1-382.3-280.1-252 0-425.8 193.5-425.9 456.4z" class="s0"/></g></svg>

================
File: docs/public/img/providers/concept2.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="2500" height="2500" viewBox="0 0 192.756 192.756"><path fill-rule="evenodd" clip-rule="evenodd" fill="#fff" d="M0 0h192.756v192.756H0V0z"/><path d="M176.883 92.439c-1.789 1.375-2.793 2.164-4.236 3.237l-1.07.766c1.512.537 3.752 1.172 7.623-.81l-1.02 3.257c-7.293 3.217-7.531-1.374-13.777.095 2.049-1.577 3.842-3.412 5.133-4.386a312.862 312.862 0 0 0 4.068-3.127c.861-.667 1.254-1.09 1.393-1.938.098-.746-.674-1.437-1.904-1.458-1.336-.003-2.465.381-2.652 1.727-.012.086-.021.17-.031.258-1.262-.036-4.053.006-4.053.006l-.014-.06c.008-.085.018-.167.029-.256.357-2.541 3.658-4.184 7.037-4.213 3.346.018 6.012 1.591 5.795 3.864-.167 1.221-1.091 2.08-2.321 3.038zM119.225 105.321c.373 0 .545.051.545.301v.454c0 .248-.172.3-.545.3h-2.721v-1.055h2.721zm-3.911 3.131h1.189v-1.431h1.146l2.098 1.431h1.734l-2.398-1.431h.686c.797 0 1.168-.206 1.168-.73v-.89c0-.527-.371-.732-1.168-.732h-4.455v3.783zM124.496 105.343h3.992v2.396h-3.992v-2.396zm-1.209.22v1.994c0 .712.314.895 1.291.895h3.83c.979 0 1.289-.183 1.289-.895v-1.994c0-.713-.311-.895-1.289-.895h-3.83c-.976.001-1.291.183-1.291.895zM131.311 104.669h1.25l1.322 2.538 1.381-2.538h.845l1.412 2.538 1.26-2.538h1.078l-2.005 3.783h-.817l-1.432-2.617-1.451 2.617h-.838l-2.005-3.783zM141.584 104.669h1.209v3.783h-1.209v-3.783zM145.443 104.669h.828l4.252 2.639-.004-2.639h1.041v3.783h-.824s-4.113-2.529-4.254-2.647l.004 2.651-1.043-.004v-3.783zM155.312 105.343v2.396h3.781v-.793h-1.979v-.645h3.158v1.256c0 .712-.312.895-1.291.895h-3.59c-.977 0-1.289-.183-1.289-.895v-1.994c0-.713.312-.895 1.289-.895h3.59c.947 0 1.291.176 1.291.857v.088l-1.18-.008v-.264h-3.78v.002zM39.484 84.303c-.007-.006-21.713 0-21.713 0v.007c-4.952.078-8.942 4.108-8.942 9.076 0 4.972 3.99 9.003 8.942 9.081v.007h21.713c0 .001.002-18.17 0-18.171zm-11.713 17.903a8.812 8.812 0 1 1 0-17.625 8.812 8.812 0 0 1 0 17.625zM51.462 102.206a8.813 8.813 0 0 1 0-17.624c.273 0 .81-.001.809-.003v-.275c-.001-.002-11.865.005-11.864 0l-.019 18.173c0-.005 11.882.002 11.882 0l.001-.272-.809.001zM134.275 86.934l-3.463 14.071h4.695l.805-3.076c.59.974 1.959 1.532 4.203 1.283 3.492-.39 7.754-3.43 7.754-7.937 0-2.775-2.576-4.846-5.83-4.365-1.553.23-2.912.743-4.164 2.305l.52-2.281h-4.52zm4.469 11.136c-1.66-.11-1.807-1.35-1.807-2.633 0-1.522.43-3.044 1.111-4.417.678-1.344 2.117-3.045 4.156-3.119 4.046-.145.714 10.448-3.46 10.169zM110.076 89.894c0 .985.934 1.642 2.08 1.642 1.359 0 2.219-.806 2.219-1.909 0-2.062-3.008-2.747-4.943-2.747-4.512 0-9.633 3.522-9.633 7.461 0 2.894 2.863 4.983 6.197 4.983 5.104 0 7.65-3.495 7.879-3.774h-3.576s-1.002 2.939-3.658 2.939c-1.039 0-1.971-.39-1.971-1.402 0-2.538 1.896-7.671 2.756-8.596.611-.657 1.004-.776 2.006-.776.574 0 1.004.388 1.004.717 0 .089-.072.298-.18.597-.108.268-.18.567-.18.865z" fill-rule="evenodd" clip-rule="evenodd" fill="#00678c"/><path d="M59.567 89.894c0 .985.93 1.642 2.077 1.642 1.359 0 2.22-.806 2.22-1.909 0-2.062-3.009-2.747-4.943-2.747-4.512 0-9.633 3.522-9.633 7.461 0 2.894 2.865 4.983 6.196 4.983 5.104 0 7.652-3.495 7.879-3.774h-3.576s-.516 2.939-3.658 2.939c-1.04 0-1.97-.39-1.97-1.402 0-2.538 1.896-7.671 2.756-8.596.61-.657 1.004-.776 2.006-.776.574 0 1.003.388 1.003.717 0 .089-.072.298-.179.597a2.387 2.387 0 0 0-.178.865zM126.645 95.554c-.002.026-1.357 2.936-4.266 2.936-1.148 0-1.9-.329-1.9-1.402 0-1.015.393-2.061.607-3.074h2.9c4.777 0 6.926-1.938 6.926-3.933 0-2.328-3.234-3.201-5.49-3.201-4.621 0-9.885 3.701-9.885 7.729 0 2.984 2.865 4.716 6.23 4.716 3.572 0 6.465-1.275 8.471-3.771h-3.593zm-4.125-5.72c.609-1.701 1.504-2.119 2.578-2.119 1.434 0 1.936.567 1.936 1.701 0 2.805-1.746 3.76-3.619 3.76h-2.076l1.181-3.342zM157.549 95.54c-.391 1.126-1.184 2.799-2.863 2.799-.469 0-.756-.209-.469-1.194l2.256-7.868h2.389c1.154 0 1.381-1.681 1.381-1.681h-3.23l.361-1.513-4.502.016-.445 1.498h-1.158c-1.176 0-1.383 1.681-1.383 1.681h1.971l-1.613 5.869c-.25.896-.5 1.791-.5 2.149 0 1.432 1.756 2.058 3.223 2.058 3.52 0 5.764-1.632 7.047-3.813h-2.465v-.001zM75.476 86.923c-4.62 0-10.421 3.222-10.421 7.431 0 2.598 2.077 5.014 6.338 5.014 1.146 0 1.97-.061 3.116-.299 3.652-.746 7.521-3.761 7.521-7.103.001-2.984-3.153-5.043-6.554-5.043zm-.229.835c1.29 0 2.062.389 2.026 1.432-.057 1.643-1.695 6.537-2.503 8.119-.54 1.104-1.44 1.225-2.835 1.225-.896 0-2.217-.062-2.186-.985.031-.897 1.671-6.865 2.213-8.03.58-1.223 1.638-1.761 3.285-1.761zM97.588 98.278c-.661.234-1.412.035-1.311-.337l2.077-7.682c.645-2.355-1.791-3.104-3.366-3.104-2.757 0-4.903 1.796-5.969 3.376l.963-3.314-4.267.005s-2.695 9.063-3.155 10.751c-.609 2.239 3.92 1.604 3.92 1.604l1.628-5.839c.155-.538.338-1.102.716-1.66 1.199-1.774 3.365-3.521 4.375-3.291.421.095.825.418.466 1.671l-1.687 5.712c-.716 2.478 1.075 3.382 2.901 3.382.721 0 1.93-.049 2.591-.445l.118-.829z" fill-rule="evenodd" clip-rule="evenodd" fill="#00678c"/><path d="M112.682 105.446H8.504v-.711h104.178v.711zm0 1.495H8.504v-.71h104.178v.71zm0 1.496H8.504v-.71h104.178v.71zM163.125 104.735v.711h16.193v-.711h-16.193zM163.125 106.231v.71h16.193v-.71h-16.193zM163.125 107.727v.71h16.193v-.71h-16.193z" fill="#00678c"/><path d="M182.387 100.878c.314 0 .619.08.918.24.299.161.531.391.697.69.166.299.25.611.25.937 0 .321-.082.631-.246.927a1.742 1.742 0 0 1-.689.691 1.882 1.882 0 0 1-1.858 0 1.734 1.734 0 0 1-.691-.691 1.868 1.868 0 0 1-.248-.927c0-.325.084-.638.252-.937.166-.3.4-.529.699-.69.297-.16.603-.24.916-.24zm0 .309c-.262 0-.518.067-.766.202a1.45 1.45 0 0 0-.582.575c-.141.25-.211.51-.211.781 0 .268.07.525.207.771.139.247.33.439.578.577s.504.207.773.207.527-.069.775-.207c.246-.138.438-.33.574-.577a1.565 1.565 0 0 0-.002-1.552 1.443 1.443 0 0 0-.584-.575 1.575 1.575 0 0 0-.762-.202zm-.819 2.588v-2.007h.689c.236 0 .406.018.512.055a.52.52 0 0 1 .348.488.538.538 0 0 1-.158.384.623.623 0 0 1-.416.183.55.55 0 0 1 .17.106c.082.08.18.212.297.398l.246.393h-.396l-.178-.316c-.141-.248-.254-.404-.34-.467-.059-.046-.145-.069-.26-.069h-.189v.853h-.325v-.001zm.325-1.129h.393c.188 0 .316-.028.385-.084s.104-.13.104-.223a.283.283 0 0 0-.188-.263c-.059-.024-.166-.035-.326-.035h-.367v.605h-.001z" fill-rule="evenodd" clip-rule="evenodd" fill="#00678c"/></svg>

================
File: docs/public/img/providers/descope.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="Layer_1" x="0" y="0" version="1.1" viewBox="0 0 194.7 215.2"><style>.st0{fill:url(#SVGID_1_)}</style><linearGradient id="SVGID_1_" x1="68.39" x2="185.03" y1="222.15" y2="41.03" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0083b5"/><stop offset=".42" stop-color="#0ff"/><stop offset="1" stop-color="#6ff12d"/></linearGradient><path d="M129.8 174.7c7.6-1.6 14-4.8 19.2-9.7 7.7-7.3 8.8-17.1 8.8-29.4V80.7c0-12.3-1.1-22.1-8.8-29.4-5.2-4.9-11.6-8.1-19.2-9.7V15.4c12.5 1.8 22.9 6.5 31 14.2 10.6 10 19.9 23.5 19.9 40.5v75c0 17-9.3 30.5-19.9 40.5-8.1 7.7-18.5 12.4-31 14.2v-25.1z" class="st0"/><linearGradient id="SVGID_00000040544740507634666800000017273841385603649669_" x1="5.04" x2="121.67" y1="181.36" y2=".23" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0083b5"/><stop offset=".42" stop-color="#0ff"/><stop offset="1" stop-color="#6ff12d"/></linearGradient><path fill="url(#SVGID_00000040544740507634666800000017273841385603649669_)" d="M33.9 29.6c8.1-7.7 18.5-12.4 31-14.2v26.3c-7.6 1.6-14 4.8-19.2 9.7-7.7 7.3-8.8 17-8.8 29.2v55.1c0 12.3 1.1 22.1 8.8 29.4 5.2 4.9 11.6 8.1 19.2 9.7v25.1c-12.5-1.8-22.9-6.5-31-14.2-10.6-10-19.9-23.5-19.9-40.5V69.8c-.1-16.8 9.2-30.2 19.9-40.2z"/><linearGradient id="SVGID_00000060713993868866928010000000698955780952733088_" x1="22.03" x2="138.66" y1="192.3" y2="11.17" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0083b5"/><stop offset=".42" stop-color="#0ff"/><stop offset="1" stop-color="#6ff12d"/></linearGradient><path fill="url(#SVGID_00000060713993868866928010000000698955780952733088_)" d="m120.2 87.8 8.5-13.7-17.8-9.4-7.5 14.2a6.02 6.02 0 0 1-5.5 3.3c-2.3 0-4.4-1.2-5.5-3.3L85 64.7 67.3 74l12.3 19.7 40.6-5.9z"/><linearGradient id="SVGID_00000115475840050352750520000000840372054167564949_" x1="37.97" x2="154.6" y1="202.56" y2="21.43" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0083b5"/><stop offset=".42" stop-color="#0ff"/><stop offset="1" stop-color="#6ff12d"/></linearGradient><path fill="url(#SVGID_00000115475840050352750520000000840372054167564949_)" d="m142.4 97.7-87.8.8v17.7l27.5-.1-14.8 23.8 17.7 9.3 7.5-14.2c1.1-2.1 3.1-3.3 5.5-3.3 2.3 0 4.4 1.2 5.5 3.3l7.5 14.2 17.8-9.4-12-19.3-23.1-4.5 48.7-.2V97.7z"/></svg>

================
File: docs/public/img/providers/discord.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 199"><path fill="#5865F2" d="M216.9 16.6A208.5 208.5 0 0 0 164 0c-2.2 4.1-4.9 9.6-6.7 14a194 194 0 0 0-58.6 0C97 9.6 94.2 4.1 92 0a207.8 207.8 0 0 0-53 16.6A221.5 221.5 0 0 0 1 165a211.2 211.2 0 0 0 65 33 161 161 0 0 0 13.8-22.8c-7.6-2.9-15-6.5-21.8-10.6l5.3-4.3a149.3 149.3 0 0 0 129.6 0c1.7 1.5 3.5 3 5.3 4.3a136 136 0 0 1-21.9 10.6c4 8 8.7 15.7 13.9 22.9a210.7 210.7 0 0 0 64.8-33.2c5.3-56.3-9-105.1-38-148.4ZM85.5 135.1c-12.7 0-23-11.8-23-26.2 0-14.4 10.1-26.2 23-26.2 12.8 0 23.2 11.8 23 26.2 0 14.4-10.2 26.2-23 26.2Zm85 0c-12.6 0-23-11.8-23-26.2 0-14.4 10.2-26.2 23-26.2 12.9 0 23.3 11.8 23 26.2 0 14.4-10.1 26.2-23 26.2Z"/></svg>

================
File: docs/public/img/providers/dribbble.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#E74D89" d="M128 8.5a119.3 119.3 0 1 1 .2 238.6A119.3 119.3 0 0 1 128 8.5Z"/><path fill="#B2215A" d="M128 255.7A128 128 0 0 1 0 127.9a128 128 0 0 1 256-.1c0 70.5-57.4 127.9-128 127.9Zm107.9-110.4a161.2 161.2 0 0 0-68.1-4.7 466.5 466.5 0 0 1 21.2 77.8 108.6 108.6 0 0 0 46.9-73.1Zm-65.2 83.2c-1.6-9.6-8-43-23.3-82.8l-.7.2c-61.7 21.5-83.8 64.2-85.8 68.2a108.9 108.9 0 0 0 109.8 14.4ZM46.8 201c2.5-4.2 32.5-53.8 88.9-72.1l4.3-1.3c-2.7-6.2-5.7-12.4-8.9-18.5a403.9 403.9 0 0 1-112.4 15.5l-.1 3.3c.1 28.1 10.7 53.7 28.2 73.1ZM21 105.6c4.9.1 49.9.3 101.1-13.3C104 60.1 84.4 33.1 81.6 29.2A109.5 109.5 0 0 0 21 105.6Zm81.4-83.8c3 4 22.9 31 40.8 63.9 38.9-14.6 55.3-36.6 57.3-39.4a109 109 0 0 0-98.1-24.5Zm110.2 37.1c-2.3 3.1-20.6 26.6-61 43.1a451.8 451.8 0 0 1 9.7 21.4c36.4-4.6 72.5 2.8 76.1 3.5-.3-25.7-9.5-49.4-24.8-68Z"/></svg>

================
File: docs/public/img/providers/dropbox.svg
================
<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 42.4 39.5"><style>.st0{fill:#0062ff}</style><path d="M10.6 1.7 0 8.5l10.6 6.7 10.6-6.7zm21.2 0L21.2 8.5l10.6 6.7 10.6-6.7zM0 22l10.6 6.8L21.2 22l-10.6-6.8zm31.8-6.8L21.2 22l10.6 6.8L42.4 22zM10.6 31l10.6 6.8L31.8 31l-10.6-6.7z" class="st0"/></svg>

================
File: docs/public/img/providers/duende-identityserver-6.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100.2 111.8"><defs><style>.cls-1{fill:#633e9e}.cls-2{fill:#43257c}.cls-3{fill:#8361c5}.cls-4{fill:#764fc1}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><rect width="22.2" height="73.9" x="64.7" y="-3.7" class="cls-1" rx="11.1" transform="rotate(31.1 75.8 33.2)"/><rect width="22.2" height="73.9" x="63.8" y="41.2" class="cls-2" rx="11.1" transform="rotate(-28.9 74.9 78.1)"/><rect width="22.2" height="73.9" x="25.8" y="18.6" class="cls-3" rx="11.1" transform="rotate(-90 37 55.6)"/><path d="M75.2 55.6A11.2 11.2 0 0 0 64 44.3h-8l-3 5.2a12.2 12.2 0 0 0-.8 1.6l-.1.4v.1a11 11 0 0 0 .7 9.2l3.1 5.8h8.2a11.2 11.2 0 0 0 11.1-11.2Z" class="cls-4"/></g></g></svg>

================
File: docs/public/img/providers/eventbrite.svg
================
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="192" height="192" viewBox="0 0 192 192">
<g transform="translate(0.000000,192.000000) scale(0.100000,-0.100000)"
fill="#F05537" stroke="none">
<path d="M828 1830 c-295 -47 -548 -238 -669 -505 -97 -215 -104 -464 -19
-683 104 -267 339 -471 621 -539 108 -26 299 -24 405 5 210 56 395 184 511
353 33 48 76 129 71 134 -2 1 -90 23 -197 48 l-194 45 -61 -62 c-33 -34 -84
-73 -112 -88 -142 -76 -316 -76 -458 0 -59 31 -173 139 -160 151 5 4 292 73
638 152 l628 144 -6 65 c-31 356 -300 669 -655 761 -87 23 -259 32 -343 19z
m247 -405 c32 -9 81 -28 109 -43 49 -26 173 -138 164 -148 -3 -2 -191 -47
-419 -100 -228 -52 -422 -97 -431 -100 -15 -4 -17 0 -12 28 3 18 21 66 40 106
94 204 329 314 549 257z"/>
</g>
</svg>

================
File: docs/public/img/providers/eveonline.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" viewBox="0 0 198.4 78.7"><path d="M0 0v13.9h11v-3.6h49.7V0H0zm65.8 0 33.4 58 33.4-58h-11.9L99.2 37.2 77.7 0H65.9zm72 0v13.9h10.9v-3.6h49.7V0h-60.6zM0 19.1v10.4h60.7V19H0zm137.8 0v10.4h60.6V19h-60.6zM0 34.7v13.9h60.7V38.2H11v-3.5H0zm137.8 0v13.9h60.6V38.2h-49.7v-3.5h-10.9zm-95.6 35c-.9 0-1.5.2-1.8.5-.3.3-.4.8-.4 1.6v4.8c0 .8.1 1.3.4 1.6.3.3 1 .5 1.8.5h6.5c.9 0 1.5-.2 1.8-.5.3-.3.5-.8.5-1.6v-4.8c0-.8-.2-1.3-.5-1.6-.3-.3-1-.5-1.8-.5h-6.5zm22.2 0v9h1.8v-6.3l.3.4.4.4 6.6 5.5h1.4v-9H73V75l.1 1-.4-.4-.6-.5-6.3-5.3h-1.4zm24.1 0v9h8.8V77h-6.7v-7.3h-2zm20.9 0v9h2.1v-9h-2.1zm15.7 0v9h1.9v-4.9l-.1-.6v-.8l.3.4.4.4 6.6 5.5h1.4v-9h-1.8V76l-.4-.4-.6-.5-6.3-5.3h-1.4zm24.2 0v9h9.2V77h-7.2v-2.2h4.1v-1.5h-4.1v-2h7.1v-1.6h-9.1zM42 71.3h7V77h-7v-5.7z"/></svg>

================
File: docs/public/img/providers/facebook.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#1877F2" d="M256 128a128 128 0 1 0-148 126.4V165H75.5v-37H108V99.8c0-32 19.1-49.8 48.3-49.8 14 0 28.7 2.5 28.7 2.5V84h-16.1c-16 0-20.9 9.9-20.9 20v24h35.5l-5.7 37H148v89.4A128 128 0 0 0 256 128"/><path fill="#FFFFFF" d="m177.8 165 5.7-37H148v-24c0-10.1 5-20 20.9-20H185V52.5S170.4 50 156.3 50C127.1 50 108 67.7 108 99.8V128H75.5v37H108v89.4a129 129 0 0 0 40 0V165h29.8"/></svg>

================
File: docs/public/img/providers/faceit.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="29.3 101.1 451.7 357.9"><path fill="#fd5a00" d="M481 104.8c0-1.8-1.9-3.7-1.9-3.7-1.8 0-1.8 0-3.7 1.9-37.5 58.1-76.8 116.2-114.3 176.2H34.9c-3.7 0-5.6 5.6-1.8 7.5a29062.2 29062.2 0 0 1 440.4 170.4c3.7 1.9 7.5-1.9 7.5-3.7z"/><path fill="#ff690a" d="M481 104.8c0-1.8-1.9-3.7-1.9-3.7-1.8 0-1.8 0-3.7 1.9-37.5 58.1-76.8 116.2-114.3 176.2l119.9 1.2z"/></svg>

================
File: docs/public/img/providers/figma.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="figma">
  <path fill="#0ACF83" d="M8 24c2.208 0 4-1.792 4-4v-4H8c-2.208 0-4 1.792-4 4s1.792 4 4 4z"></path>
  <path fill="#A259FF" d="M4 12c0-2.208 1.792-4 4-4h4v8H8c-2.208 0-4-1.792-4-4z"></path>
  <path fill="#F24E1E" d="M4 4c0-2.208 1.792-4 4-4h4v8H8C5.792 8 4 6.208 4 4z"></path>
  <path fill="#FF7262" d="M12 0h4c2.208 0 4 1.792 4 4s-1.792 4-4 4h-4V0z"></path>
  <path fill="#1ABCFE" d="M20 12c0 2.208-1.792 4-4 4s-4-1.792-4-4 1.792-4 4-4 4 1.792 4 4z"></path>
</svg>

================
File: docs/public/img/providers/forwardemail.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="400px" height="400px" viewBox="0 0 400 400" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Group 2</title>
    <defs>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-1"></path>
        <linearGradient x1="50%" y1="-2.782%" x2="50%" y2="99.64%" id="linearGradient-3">
            <stop stop-color="#5EB8E6" offset="0%"></stop>
            <stop stop-color="#26A8DF" offset="100%"></stop>
        </linearGradient>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-4"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-6"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-8"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-10"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-12"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-14"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-16"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-18"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-20"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-22"></path>
        <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="path-24"></path>
        <polygon id="path-26" points="5.86552429 6.9108086 2.40337543 4.39120104 0 6.50429045 5.75682892 12.9240573 5.76890618 12.9160075 5.77695769 12.9240573 16.0989922 2.42300919 14.2592224 0"></polygon>
        <linearGradient x1="0.001%" y1="49.999%" x2="100.006%" y2="49.999%" id="linearGradient-28">
            <stop stop-color="#8CC63F" offset="0%"></stop>
            <stop stop-color="#38B549" offset="100%"></stop>
        </linearGradient>
        <path d="M4.90841846e-06,26.4116052 C-0.00319399401,33.4121287 2.77524906,40.1272013 7.72411308,45.0795835 C12.6729771,50.0319656 19.3868768,52.8159837 26.3888305,52.8191854 C40.9687226,52.8102963 52.7820996,40.9885213 52.777654,26.4116052 C52.7843232,11.8331175 40.9702953,0.0088891518 26.3888305,-2.84217094e-14 C19.3861789,0.00320145202 12.6716688,2.7877721 7.72268907,7.74102488 C2.77370932,12.6942777 -0.00426211611,19.4103845 4.90841846e-06,26.4116052 M11.8397538,18.0115716 L26.3888305,11.813176 L40.9338815,18.0115716 C40.9338815,18.0115716 39.9677004,41.0019844 26.3888305,41.0019844 C12.8099606,41.0019844 11.8397538,18.0115716 11.8397538,18.0115716" id="path-29"></path>
        <linearGradient x1="-0.001%" y1="49.999%" x2="100.001%" y2="49.999%" id="linearGradient-31">
            <stop stop-color="#8CC63F" offset="0%"></stop>
            <stop stop-color="#38B549" offset="100%"></stop>
        </linearGradient>
    </defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="logo-square" transform="translate(48.000000, 0.000000)">
            <g id="Clipped">
                <mask id="mask-2" fill="white">
                    <use xlink:href="#path-1"></use>
                </mask>
                <g id="a"></g>
                <path d="M151.500652,-1.13129991e-14 C151.218849,-0.0141431646 150.671346,0.074405344 150.671346,0.074405344 C-5.13742979,11.6823098 -2.96754812,159.968862 1.2232623,220.294546 C1.56142568,225.156664 24.5847156,399.919221 41.4002921,400 C64.6087667,400.108393 53.0065423,368.609273 53.0065423,368.609273 C53.0065423,368.609273 88.8357572,378.953349 150.671346,379.355842 L150.671346,379.371942 L151.500652,379.363892 L152.333983,379.371942 L152.333983,379.355842 C214.16152,378.953349 249.994761,368.609273 249.994761,368.609273 C249.994761,368.609273 238.392536,400.108393 261.601011,400 C278.412562,399.919221 301.435852,225.156664 301.778041,220.294546 C305.964825,159.968862 308.138733,11.6823098 152.333983,0.074405344 C152.333983,0.074405344 151.879072,-1.13129991e-14 151.585192,-1.13129991e-14 L151.500652,-1.13129991e-14" id="Path" fill="url(#linearGradient-3)" fill-rule="nonzero" mask="url(#mask-2)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-5" fill="white">
                    <use xlink:href="#path-4"></use>
                </mask>
                <g id="a"></g>
                <path d="M216.766183,154.941722 C224.421452,154.921781 230.619823,148.717479 230.630882,141.063756 C230.619815,133.410689 224.420801,127.207542 216.766183,127.189814 C209.11091,127.207535 202.910741,133.410037 202.897459,141.063756 C202.908526,148.719046 209.109342,154.923994 216.766183,154.941722" id="Path" fill="#1A1A1A" fill-rule="nonzero" mask="url(#mask-5)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-7" fill="white">
                    <use xlink:href="#path-6"></use>
                </mask>
                <g id="a"></g>
                <path d="M222.261338,139.357184 C224.503683,139.357184 226.331376,137.529865 226.331376,135.283953 C226.331376,133.046091 224.503683,131.214747 222.265364,131.214747 C220.102442,131.331482 218.40817,133.118431 218.407099,135.28406 C218.406028,137.449688 220.098532,139.238311 222.261338,139.357184" id="Path" fill="#FFFFFF" fill-rule="nonzero" mask="url(#mask-7)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-9" fill="white">
                    <use xlink:href="#path-8"></use>
                </mask>
                <g id="a"></g>
                <path d="M85.5225613,154.941722 C93.1778302,154.921781 99.3762007,148.717479 99.3872597,141.063756 C99.376193,133.410689 93.1771793,127.207542 85.5225613,127.189814 C77.8679432,127.207542 71.6689295,133.410689 71.6578628,141.063756 C71.6689218,148.717479 77.8672923,154.921781 85.5225613,154.941722" id="Path" fill="#1A1A1A" fill-rule="nonzero" mask="url(#mask-9)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-11" fill="white">
                    <use xlink:href="#path-10"></use>
                </mask>
                <g id="a"></g>
                <path d="M91.8268928,139.357184 C93.9897533,139.239375 95.683136,137.451591 95.683136,135.285965 C95.683136,133.12034 93.9897533,131.332556 91.8268928,131.214747 C89.6277908,131.283886 87.8808805,133.086226 87.8808805,135.285965 C87.8808805,137.485705 89.6277908,139.288045 91.8268928,139.357184" id="Path" fill="#FFFFFF" fill-rule="nonzero" mask="url(#mask-11)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-13" fill="white">
                    <use xlink:href="#path-12"></use>
                </mask>
                <g id="a"></g>
                <path d="M174.918465,181.17623 C173.392443,179.891904 171.11633,180.076902 169.817834,181.590798 C169.753422,181.663247 163.207546,189.008748 151.30339,189.008748 C138.598108,189.008748 133.529684,182.576906 133.026464,181.892668 C132.29295,180.823537 131.044664,180.226865 129.751823,180.327413 C128.458983,180.42796 127.318001,181.21045 126.758675,182.380128 C126.199348,183.549806 126.306653,184.928968 127.040167,185.998099 C127.325996,186.416692 134.161727,196.273751 151.30339,196.273751 C166.669694,196.273751 174.986903,186.714537 175.329092,186.316068 C176.630418,184.781791 176.446888,182.484529 174.918465,181.17623" id="Path" fill="#1A1A1A" fill-rule="nonzero" mask="url(#mask-13)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-15" fill="white">
                    <use xlink:href="#path-14"></use>
                </mask>
                <g id="a"></g>
                <path d="M224.531864,273.282779 L152.124643,316.019509 L79.7093718,273.282779 C79.7093718,273.242529 79.7093718,273.198255 79.721449,273.162031 C79.7778096,272.89236 83.7753838,269.551667 89.8744019,264.596975 L90.035432,264.456102 C110.031355,248.207451 152.124643,214.933337 152.124643,214.933337 C152.124643,214.933337 194.209881,248.207451 214.201778,264.456102 C220.397414,269.483243 224.467452,272.880286 224.523812,273.166056 C224.531864,273.198255 224.531864,273.246554 224.531864,273.282779" id="Path" fill="#A7A9AC" fill-rule="nonzero" mask="url(#mask-15)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-17" fill="white">
                    <use xlink:href="#path-16"></use>
                </mask>
                <g id="a"></g>
                <path d="M122.881563,322.262179 L201.013406,322.262179 C204.233209,322.262179 207.320654,320.981012 209.596266,318.703601 C211.871877,316.426189 213.149166,313.338103 213.147033,310.118958 L213.147033,223.856611 C213.149254,217.153889 207.717496,211.717835 201.013406,211.713391 L103.115108,211.713391 C99.8953056,211.713391 96.8078605,212.994557 94.5322488,215.271969 C92.2566371,217.54938 90.9793483,220.637467 90.9814817,223.856611 L90.9814817,290.336416 L122.881563,322.262179 Z" id="Path" fill="#FFFFFF" fill-rule="nonzero" mask="url(#mask-17)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-19" fill="white">
                    <use xlink:href="#path-18"></use>
                </mask>
                <g id="a"></g>
                <path d="M224.535889,273.697347 L224.535889,343.224026 C224.52484,348.093364 220.581757,352.039239 215.711436,352.054727 L88.5096711,352.054727 C83.6432736,352.039197 79.7071279,348.089453 79.7093708,343.224026 L79.7093708,273.697347 L152.120618,316.430052 L224.535889,273.697347 Z" id="Path" fill="#D1D3D4" fill-rule="nonzero" mask="url(#mask-19)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-21" fill="white">
                    <use xlink:href="#path-20"></use>
                </mask>
                <g id="a"></g>
                <path d="M222.072128,349.325823 L175.461942,302.680884 L152.104515,316.466276 L128.73501,302.676859 L82.1248245,349.325823 C83.7737698,351.089139 86.0791193,352.091514 88.4935681,352.094976 L215.691307,352.094976 C218.107554,352.088935 220.414416,351.087169 222.068102,349.325823" id="Path" fill="#F4F4F4" fill-rule="nonzero" mask="url(#mask-21)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-23" fill="white">
                    <use xlink:href="#path-22"></use>
                </mask>
                <g id="a"></g>
                <path d="M3.26431982,236.756519 C4.88267313,274.731754 18.8520412,318.857086 50.0234582,333.809709 C80.5346514,348.444363 129.825989,343.413198 130.160127,333.407216 C130.341286,327.985632 125.135985,329.531206 125.462072,325.011207 C125.904905,318.90136 136.013574,322.052882 135.313093,314.908628 C134.733384,309.1248 124.805874,312.775414 124.419401,307.047935 C123.924233,299.754758 133.541761,301.030661 128.887989,294.027279 C124.238242,287.023897 112.362266,305.965228 77.704546,296.220867 C46.4646912,287.44249 35.8648797,264.802247 31.3681119,231.282611 C26.8713441,197.758951 2.01633593,207.398663 3.26834558,236.756519 M300.356949,236.756519 C298.742622,274.731754 284.773254,318.857086 253.601837,333.809709 C223.086618,348.444363 173.79528,343.413198 173.465168,333.407216 C173.284009,327.985632 178.48931,329.531206 178.159198,325.011207 C177.716365,318.90136 167.607695,322.052882 168.312202,314.908628 C168.887885,309.1248 178.819421,312.775414 179.205894,307.047935 C179.697036,299.754758 170.083534,301.030661 174.733281,294.027279 C179.387053,287.023897 191.259003,305.965228 225.916723,296.220867 C257.156578,287.44249 267.75639,264.802247 272.253157,231.282611 C276.749925,197.758951 301.604933,207.398663 300.356949,236.756519" id="Shape" fill="#179BC9" fill-rule="nonzero" mask="url(#mask-23)"></path>
            </g>
            <g id="Clipped">
                <mask id="mask-25" fill="white">
                    <use xlink:href="#path-24"></use>
                </mask>
                <g id="a"></g>
                <path d="M3.26431982,233.536573 C4.88267313,271.511809 18.8520412,315.63714 50.0234582,330.589764 C80.5346514,345.224417 129.825989,340.193252 130.160127,330.18727 C130.341286,324.765687 125.135985,326.311261 125.462072,321.791262 C125.904905,315.681415 136.013574,318.832937 135.313093,311.688682 C134.733384,305.904854 124.805874,309.555468 124.419401,303.832014 C123.924233,296.534812 133.541761,297.810716 128.887989,290.807334 C124.238242,283.803952 112.362266,302.745282 77.704546,293.000922 C46.4646912,284.21852 35.8648797,261.582301 31.3681119,228.062665 C26.8713441,194.539005 2.01633593,204.178718 3.26834558,233.536573 M300.356949,233.536573 C298.742622,271.511809 284.773254,315.63714 253.601837,330.589764 C223.086618,345.224417 173.79528,340.193252 173.465168,330.18727 C173.284009,324.765687 178.48931,326.311261 178.159198,321.791262 C177.716365,315.681415 167.607695,318.832937 168.312202,311.688682 C168.887885,305.904854 178.819421,309.555468 179.205894,303.827989 C179.697036,296.534812 170.083534,297.810716 174.733281,290.807334 C179.387053,283.803952 191.259003,302.745282 225.916723,293.000922 C257.156578,284.21852 267.75639,261.582301 272.253157,228.062665 C276.749925,194.539005 301.604933,204.178718 300.356949,233.536573" id="Shape" fill="#27AAE1" fill-rule="nonzero" mask="url(#mask-25)"></path>
            </g>
            <g id="Clipped" transform="translate(144.926594, 255.182659)">
                <mask id="mask-27" fill="white">
                    <use xlink:href="#path-26"></use>
                </mask>
                <g id="d"></g>
                <polygon id="Path" fill="url(#linearGradient-28)" fill-rule="nonzero" mask="url(#mask-27)" points="5.86552429 6.9108086 2.40337543 4.39120104 0 6.50429045 5.75682892 12.9240573 5.76890618 12.9160075 5.77695769 12.9240573 16.0989922 2.42300919 14.2592224 0"></polygon>
            </g>
            <g id="Clipped" transform="translate(125.602963, 234.253011)">
                <mask id="mask-30" fill="white">
                    <use xlink:href="#path-29"></use>
                </mask>
                <g id="g"></g>
                <path d="M4.90841846e-06,26.4116052 C-0.00319399401,33.4121287 2.77524906,40.1272013 7.72411308,45.0795835 C12.6729771,50.0319656 19.3868768,52.8159837 26.3888305,52.8191854 C40.9687226,52.8102963 52.7820996,40.9885213 52.777654,26.4116052 C52.7843232,11.8331175 40.9702953,0.0088891518 26.3888305,-2.84217094e-14 C19.3861789,0.00320145202 12.6716688,2.7877721 7.72268907,7.74102488 C2.77370932,12.6942777 -0.00426211611,19.4103845 4.90841846e-06,26.4116052 M11.8397538,18.0115716 L26.3888305,11.813176 L40.9338815,18.0115716 C40.9338815,18.0115716 39.9677004,41.0019844 26.3888305,41.0019844 C12.8099606,41.0019844 11.8397538,18.0115716 11.8397538,18.0115716" id="Shape" fill="url(#linearGradient-31)" fill-rule="nonzero" mask="url(#mask-30)"></path>
            </g>
            <g id="Group" transform="translate(288.368253, 344.536154)" fill="#43B0E3" fill-rule="nonzero" font-family="Helvetica" font-size="8.04986442" font-weight="normal">
                <text id="TM">
                    <tspan x="0.00122577749" y="8">TM</tspan>
                </text>
            </g>
        </g>
    </g>
</svg>

================
File: docs/public/img/providers/foursquare.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 275.9 275.9"><style>.st0{enable-background:new}.st1{fill:#fff}</style><rect width="275.4" height="275.6" x=".1" y=".3"/><g class="st0"><path d="M69.2 50.1H121v8.5H77.8v23.8h38.4v8.5H77.8v34.4h-8.6V50.1z" class="st1"/><path d="m67.7 198.8 8.4-1.9c1.5 10.4 8.7 16.6 20.4 16.6 10.5 0 18.8-4.9 18.8-12.9 0-5.7-4.2-10.5-20.6-15.4-18.6-5.3-24.8-12.1-24.8-22.1 0-12.9 10.4-19.8 25.5-19.8 16.9 0 24.4 8.6 27 20.4l-8.4 1.9c-2.1-9.7-8.7-13.8-18.9-13.8-9.6 0-16.4 3.6-16.4 10.5 0 5.6 4.4 9.9 19.6 14.7 18.1 5.6 25.9 11.7 25.9 23.3 0 14.4-12.1 21.9-27.5 21.9-16.1-.1-27.1-8.4-29-23.4z" class="st1"/><path d="M134.5 182.9c0-22.3 14.6-39.7 37-39.7 22.3 0 36.7 17.5 36.7 39.7 0 11.1-3.7 20.7-9.9 27.7 3 3 5.9 6 8.8 9.2l-6.2 6-9.2-9.5a36.6 36.6 0 0 1-20.2 5.8c-21.6 0-37-16.5-37-39.2zm50.7 27a222 222 0 0 0-8.8-8.1l6-6.1c3.2 2.8 6.4 5.7 9.4 8.6a33.1 33.1 0 0 0 7.2-21.5c0-17.6-10.7-31-27.5-31s-27.6 13.4-27.6 31c0 18.1 11.7 30.8 27.6 30.8 5.1 0 9.7-1.2 13.7-3.7z" class="st1"/></g></svg>

================
File: docs/public/img/providers/freshbooks.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="1 1 253.7 253.7"><path fill="#0075dd" d="M108 1A107 107 0 0 0 1 108v146.7h146.7c59 0 107-47.9 107-107V1zm86.7 43.6a34.6 34.6 0 0 1-10.2 24.5A34.8 34.8 0 0 1 160 79.3h-37.2V109H173v34.8h-50v71.7H81.7v-180h41v32.7a34.7 34.7 0 0 1 34.7-32.6h37.3z"/></svg>

================
File: docs/public/img/providers/frontegg.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="24" height="24" rx="4" fill="#010101"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M7.40763 4.64403C8.95177 3.54492 10.4959 3.88223 11.9242 5.42988V5.43229C13.3526 6.98175 14.9353 10.0055 14.3924 13.2115C14.2818 13.9037 14.0468 14.5703 13.6988 15.1794C13.016 16.3285 11.8927 17.1504 10.5882 17.4552C9.1414 17.825 7.60647 17.6066 6.32131 16.8479C6.15835 16.7447 6.00202 16.6314 5.85324 16.5088C4.71533 15.5046 4.0295 14.087 3.94961 12.5741C3.88657 11.7325 3.94877 10.8861 4.13419 10.0626C4.30259 9.30607 4.55612 8.57088 4.88997 7.87102C5.44309 6.60112 6.30911 5.49111 7.40763 4.64403ZM6.19819 8.99926C6.37492 8.37094 6.99861 6.54069 8.47096 5.62015C8.54445 5.57504 8.58821 5.49428 8.58576 5.40828C8.58331 5.32229 8.53502 5.24414 8.45909 5.20325C8.38316 5.16237 8.29111 5.16498 8.21763 5.21009C7.35108 5.78903 6.66464 6.59848 6.23619 7.5466C6.02931 7.97185 5.86057 8.4145 5.73193 8.86939C5.71382 8.93369 5.72336 9.00261 5.75825 9.05963C5.79315 9.11665 5.85026 9.15664 5.9159 9.17002C6.04046 9.19625 6.16402 9.1215 6.19819 8.99926Z" fill="white"/>
    <path d="M10.375 18.601C12.2019 19.4356 14.3462 19.1593 15.9001 17.8891C18.5155 15.7114 19.2399 11.2626 19.2399 11.2626C19.2399 11.2626 19.7019 8.95795 18.8515 7.62796C18.001 6.29796 15.9001 6.30938 13.9778 6.96656C14.8368 8.7135 15.3099 10.6238 15.3651 12.5686C15.3407 15.5014 13.2599 18.0168 10.3762 18.5992" fill="white"/>
</svg>

================
File: docs/public/img/providers/fusionauth.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="Layer_1" x="0" y="0" version="1.1" viewBox="0 0 64 64"><metadata id="metadata49"/><style id="style2" type="text/css">.st0{fill:#ec8d53}.st1{fill:#fff}</style><g id="g906" transform="translate(-35.32 -50.46)scale(2.63977)"><g id="g6" fill="#ec8d53" fill-opacity="1" transform="translate(13.26 18.77)scale(.15723)"><path id="path4" fill="#ec8d53" fill-opacity="1" d="M77.7 2.2c-3.9 0-7.5 2.1-9.4 5.5a10.6 10.6 0 0 0 9.4 15.8c3.9 0 7.5-2.1 9.4-5.5 2.9-5.2 1-11.7-4.2-14.5-1.7-.8-3.5-1.3-5.2-1.3Z" class="st0"/></g><g id="g10" fill="#ec8d53" fill-opacity="1" transform="translate(13.26 18.77)scale(.15723)"><path id="path8" fill="#ec8d53" fill-opacity="1" d="M16 103.6c-3.9 0-7.5 2.1-9.4 5.5a10.6 10.6 0 0 0 9.4 15.8c3.9 0 7.5-2.1 9.4-5.5 2.9-5.2 1-11.7-4.2-14.5-1.6-.8-3.4-1.3-5.2-1.3z" class="st0"/></g><g id="g14" fill="#ec8d53" fill-opacity="1" transform="translate(13.26 18.77)scale(.15723)"><path id="path12" fill="#ec8d53" fill-opacity="1" d="M136.4 109.1c-3.9 0-7.5 2.1-9.4 5.5a10.6 10.6 0 0 0 9.4 15.8c3.9 0 7.5-2.1 9.4-5.5 2.9-5.2 1-11.7-4.2-14.5-1.6-.9-3.4-1.3-5.2-1.3z" class="st0"/></g><path id="path40" fill="#ec8d53" fill-opacity="1" stroke-width=".16" d="M29.66 20.9a.68.68 0 0 0-.85.37c-.13.33.05.7.38.85a10.27 10.27 0 0 1 6.08 6.3l-4.06 1.09a6.17 6.17 0 0 0-9.75-2.56L18.6 24.1a10.4 10.4 0 0 1 4.84-2.47c-.17-.4-.22-.86-.12-1.3-4.23.83-7.82 4-9.01 8.3a11.9 11.9 0 0 0-.37 4.4c.04.33.32.58.65.58h.08a.66.66 0 0 0 .58-.72 10.21 10.21 0 0 1 2.44-7.85l2.89 2.83a6.2 6.2 0 0 0 2.45 9.58l-1.2 3.93a10.16 10.16 0 0 1-4.38-3.2c-.3.34-.68.57-1.12.68a11.54 11.54 0 0 0 9.22 4.5c2.5 0 4.93-.82 7-2.38a.65.65 0 0 0-.8-1.03 10.26 10.26 0 0 1-8.65 1.8l1.19-3.94a5.58 5.58 0 0 0 1.18.1 6.21 6.21 0 0 0 6.12-7.16l4.05-1.09c.32 1.56.27 3.2-.17 4.83-.1.32-.19.63-.32.94.22.05.44.13.65.24.19.11.36.24.52.4a11.6 11.6 0 0 0-6.65-15.17zm-9.22 10.48a5.01 5.01 0 0 1 8.76-2.94 5 5 0 1 1-8.76 2.94z" class="st1"/><path id="path42" fill="#ec8d53" fill-opacity="1" stroke-width=".16" d="M29.22 28.42a4.98 4.98 0 0 0-3.45-1.73l-.34-.01a5.03 5.03 0 1 0 3.79 1.75zm-3.78 6.39c-.75 0-1.36.06-1.36-.35l.6-3.41a1.3 1.3 0 0 1-.57-1.09c0-.72.6-1.32 1.32-1.32.72 0 1.32.6 1.32 1.32 0 .44-.22.84-.57 1.09l.62 3.38v.03c.01.4-.6.35-1.36.35z" class="st0"/></g></svg>

================
File: docs/public/img/providers/github.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 .3a12 12 0 0 0-3.8 23.38c.6.12.83-.26.83-.57L9 21.07c-3.34.72-4.04-1.61-4.04-1.61-.55-1.39-1.34-1.76-1.34-1.76-1.08-.74.09-.73.09-.73 1.2.09 1.84 1.24 1.84 1.24 1.07 1.83 2.8 1.3 3.49 1 .1-.78.42-1.31.76-1.61-2.66-.3-5.47-1.33-5.47-5.93 0-1.31.47-2.38 1.24-3.22-.14-.3-.54-1.52.1-3.18 0 0 1-.32 3.3 1.23a11.5 11.5 0 0 1 6 0c2.28-1.55 3.29-1.23 3.29-1.23.64 1.66.24 2.88.12 3.18a4.65 4.65 0 0 1 1.23 3.22c0 4.61-2.8 5.63-5.48 5.92.42.36.81 1.1.81 2.22l-.01 3.29c0 .31.2.69.82.57A12 12 0 0 0 12 .3"/></svg>

================
File: docs/public/img/providers/gitlab.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="94 97.5 192.1 185"><defs><style>.cls-1{fill:#e24329}.cls-2{fill:#fc6d26}.cls-3{fill:#fca326}</style></defs><path d="m282.8 170.7-.2-.7-26.2-68.2a6.8 6.8 0 0 0-2.7-3.2 7 7 0 0 0-8 .4 7 7 0 0 0-2.3 3.5l-17.6 54h-71.5l-17.7-54a6.9 6.9 0 0 0-2.3-3.5 7 7 0 0 0-8-.4 6.9 6.9 0 0 0-2.7 3.2L97.4 170l-.2.7a48.5 48.5 0 0 0 16 56l.2.2.2.1 39.8 29.8 19.7 15 12 9a8 8 0 0 0 9.8 0l12-9 19.7-15 40-30h.1a48.6 48.6 0 0 0 16.1-56Z" class="cls-1"/><path d="m282.8 170.7-.2-.7a88.3 88.3 0 0 0-35.2 15.8L190 229.2a53007 53007 0 0 0 36.6 27.7l40-30h.1a48.6 48.6 0 0 0 16.1-56.2Z" class="cls-2"/><path d="m153.4 256.9 19.7 14.9 12 9a8 8 0 0 0 9.8 0l12-9 19.7-15-36.6-27.6-36.6 27.7Z" class="cls-3"/><path d="M132.6 185.8A88.2 88.2 0 0 0 97.4 170l-.2.7a48.5 48.5 0 0 0 16 56l.2.2.2.1 39.8 29.8 36.6-27.6Z" class="cls-2"/></svg>

================
File: docs/public/img/providers/google.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="#EA4335" d="M5.27 9.76A7.08 7.08 0 0 1 16.42 6.5L19.9 3A11.97 11.97 0 0 0 1.24 6.65l4.03 3.11Z"/><path fill="#34A853" d="M16.04 18.01A7.4 7.4 0 0 1 12 19.1a7.08 7.08 0 0 1-6.72-4.82l-4.04 3.06A11.96 11.96 0 0 0 12 24a11.4 11.4 0 0 0 7.83-3l-3.79-2.99Z"/><path fill="#4A90E2" d="M19.83 21c2.2-2.05 3.62-5.1 3.62-9 0-.7-.1-1.47-.27-2.18H12v4.63h6.44a5.4 5.4 0 0 1-2.4 3.56l3.8 2.99Z"/><path fill="#FBBC05" d="M5.28 14.27a7.12 7.12 0 0 1-.01-4.5L1.24 6.64A11.93 11.93 0 0 0 0 12c0 1.92.44 3.73 1.24 5.33l4.04-3.06Z"/></svg>

================
File: docs/public/img/providers/hubspot.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="6.21 0.64 244.27 251.25"><path fill="#ff7a59" d="M191.39 85.7V56.18a22.72 22.72 0 0 0 13.1-20.48v-.68a22.72 22.72 0 0 0-22.73-22.72h-.67a22.72 22.72 0 0 0-22.73 22.72v.68a22.72 22.72 0 0 0 13.1 20.48v29.5a64.34 64.34 0 0 0-30.59 13.47L59.95 36.13a25 25 0 0 0 .91-6.37A25.6 25.6 0 1 0 35.23 55.3a25.32 25.32 0 0 0 12.6-3.43l79.7 62a64.54 64.54 0 0 0 .98 72.7l-24.24 24.25c-1.96-.63-4-.96-6.06-.99a21.02 21.02 0 1 0 21.05 21.04 20.75 20.75 0 0 0-1-6.05l23.98-23.99A64.65 64.65 0 1 0 191.38 85.7m-9.93 97.05a33.17 33.17 0 1 1 0-66.32 33.17 33.17 0 0 1 .03 66.3"/></svg>

================
File: docs/public/img/providers/huggingface.svg
================
<svg width="256" height="256" viewBox="0 0 256 256" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M230.721 172.7C230.183 170.673 229.313 168.75 228.146 167.008C228.396 166.091 228.587 165.159 228.714 164.217C229.543 158.241 227.471 152.77 223.567 148.537C221.452 146.225 219.185 144.698 216.784 143.761C218.36 137.018 219.157 130.117 219.161 123.193C219.161 120.03 218.982 116.932 218.682 113.88C218.526 112.356 218.337 110.836 218.115 109.32C217.428 104.847 216.408 100.431 215.064 96.11C214.183 93.2707 213.164 90.476 212.01 87.736C210.281 83.6782 208.262 79.75 205.969 75.982C204.465 73.475 202.827 71.0508 201.062 68.72C200.197 67.543 199.296 66.3938 198.358 65.274C195.58 61.898 192.561 58.7277 189.325 55.788C188.25 54.7997 187.145 53.8453 186.01 52.926C184.893 51.9943 183.751 51.0927 182.586 50.222C180.241 48.4766 177.818 46.8392 175.324 45.315C161.543 36.945 145.382 32.145 128.109 32.145C77.817 32.145 37.057 72.907 37.057 123.196C37.055 130.208 37.867 137.196 39.477 144.02C37.317 144.958 35.247 146.42 33.327 148.535C29.424 152.766 27.351 158.217 28.18 164.193C28.306 165.142 28.495 166.082 28.747 167.006C27.5811 168.749 26.7117 170.673 26.174 172.7C24.974 177.261 25.369 181.374 26.894 184.978C25.236 189.688 25.65 194.704 27.809 199.065C29.379 202.25 31.626 204.714 34.396 206.916C37.689 209.534 41.811 211.758 46.783 213.892C52.715 216.422 59.956 218.799 63.249 219.671C71.755 221.873 79.911 223.269 88.177 223.337C99.954 223.446 110.096 220.677 117.357 213.59C120.924 214.027 124.515 214.246 128.109 214.244C131.906 214.236 135.699 213.997 139.467 213.529C146.711 220.661 156.892 223.455 168.712 223.343C176.977 223.277 185.133 221.881 193.617 219.676C196.932 218.804 204.17 216.427 210.105 213.897C215.077 211.76 219.199 209.536 222.514 206.922C225.263 204.719 227.508 202.256 229.079 199.071C231.26 194.709 231.652 189.693 230.017 184.983C231.527 181.379 231.92 177.257 230.721 172.7ZM222.281 184.673C223.952 187.844 224.059 191.427 222.585 194.764C220.349 199.821 214.795 203.805 204.008 208.082C197.3 210.742 191.158 212.443 191.104 212.458C182.232 214.759 174.208 215.928 167.262 215.928C155.76 215.928 147.201 212.754 141.773 206.486C132.594 208.05 123.222 208.103 114.026 206.644C108.591 212.808 100.081 215.928 88.676 215.928C81.729 215.928 73.706 214.759 64.833 212.458C64.779 212.443 58.639 210.742 51.929 208.082C41.143 203.805 35.587 199.824 33.352 194.764C31.878 191.427 31.985 187.844 33.656 184.673C33.81 184.378 33.976 184.091 34.153 183.813C33.1516 182.309 32.4799 180.61 32.182 178.827C31.8842 177.045 31.967 175.22 32.425 173.472C33.089 170.949 34.46 168.851 36.322 167.344C35.425 165.87 34.8365 164.23 34.592 162.522C34.056 158.808 35.289 155.1 38.062 152.076C40.222 149.723 43.275 148.428 46.655 148.428H46.745C44.1965 140.259 42.9044 131.75 42.913 123.193C42.913 76.522 80.749 38.683 127.427 38.683C174.104 38.683 211.94 76.518 211.94 123.193C211.947 131.773 210.646 140.304 208.081 148.492C208.489 148.452 208.889 148.432 209.282 148.431C212.662 148.431 215.716 149.726 217.874 152.079C220.647 155.1 221.881 158.811 221.344 162.525C221.1 164.233 220.511 165.873 219.615 167.347C221.477 168.854 222.849 170.952 223.512 173.475C223.97 175.223 224.053 177.048 223.755 178.831C223.458 180.613 222.786 182.312 221.784 183.816C221.961 184.091 222.129 184.378 222.281 184.673Z" fill="white"/>
<path d="M221.784 183.816C222.786 182.312 223.458 180.613 223.756 178.831C224.053 177.048 223.97 175.223 223.512 173.475C222.848 170.952 221.476 168.854 219.615 167.347C220.512 165.873 221.1 164.233 221.344 162.525C221.881 158.811 220.648 155.103 217.874 152.079C215.716 149.726 212.662 148.431 209.282 148.431C208.889 148.431 208.489 148.452 208.081 148.492C210.643 140.304 211.942 131.774 211.933 123.195C211.933 76.5231 174.097 38.6851 127.424 38.6851C80.75 38.6851 42.9099 76.5191 42.9099 123.195C42.9015 131.752 44.1936 140.261 46.742 148.43H46.6519C43.2719 148.43 40.219 149.724 38.06 152.077C35.287 155.098 34.0529 158.81 34.5899 162.523C34.8346 164.231 35.4231 165.872 36.3199 167.346C34.4579 168.852 33.086 170.95 32.422 173.473C31.9642 175.222 31.8817 177.047 32.1799 178.83C32.4781 180.612 33.1501 182.312 34.1519 183.816C33.9739 184.094 33.8099 184.381 33.6549 184.676C31.9849 187.847 31.877 191.43 33.352 194.767C35.588 199.824 41.1419 203.808 51.9289 208.085C58.6359 210.745 64.779 212.446 64.833 212.461C73.705 214.762 81.729 215.931 88.675 215.931C100.081 215.931 108.591 212.811 114.026 206.647C123.222 208.106 132.594 208.052 141.773 206.489C147.201 212.757 155.76 215.931 167.262 215.931C174.208 215.931 182.232 214.762 191.103 212.461C191.158 212.446 197.298 210.745 204.008 208.085C214.795 203.808 220.35 199.824 222.585 194.767C224.059 191.43 223.952 187.847 222.281 184.676C222.129 184.379 221.961 184.091 221.784 183.816ZM110.137 196.997C109.669 197.815 109.168 198.614 108.635 199.391C107.23 201.448 105.382 203.02 103.237 204.188C99.1369 206.424 93.947 207.205 88.675 207.205C80.346 207.205 71.808 205.256 67.023 204.015C66.787 203.954 37.689 195.735 41.373 188.739C41.993 187.562 43.0129 187.092 44.2979 187.092C49.4849 187.092 58.9299 194.816 62.9889 194.816C63.8959 194.816 64.5359 194.43 64.7969 193.488C66.5269 187.284 38.5039 184.676 40.8639 175.692C41.2799 174.102 42.41 173.456 43.998 173.456C50.856 173.455 66.248 185.516 69.467 185.516C69.714 185.516 69.8909 185.443 69.9869 185.291C70.0009 185.268 70.015 185.246 70.028 185.222C71.539 182.727 70.6719 180.913 60.3209 174.573L59.3269 173.968C47.9359 167.074 39.9409 162.925 44.4879 157.975C45.0109 157.404 45.7529 157.151 46.6539 157.151C47.7219 157.151 49.0149 157.508 50.4389 158.108C56.4549 160.645 64.793 167.564 68.276 170.581C68.8239 171.057 69.3683 171.538 69.9089 172.022C69.9089 172.022 74.319 176.608 76.985 176.608C77.599 176.608 78.1199 176.366 78.4729 175.768C80.364 172.58 60.9099 157.838 59.8129 151.755C59.0689 147.634 60.3349 145.546 62.6749 145.546C63.7879 145.546 65.1459 146.02 66.6449 146.971C71.2949 149.922 80.2729 165.35 83.5599 171.352C84.6619 173.363 86.5429 174.213 88.2379 174.213C91.6009 174.213 94.2299 170.87 88.5459 166.622C80.0029 160.23 83.001 149.782 87.078 149.139C87.252 149.111 87.4279 149.097 87.6029 149.097C91.3109 149.097 92.9459 155.486 92.9459 155.486C92.9459 155.486 97.7399 167.524 105.975 175.753C113.447 183.222 114.491 189.351 110.137 196.997ZM136.766 198.407L136.339 198.458L135.611 198.541C135.228 198.581 134.844 198.619 134.459 198.654L134.084 198.688L133.741 198.717L133.255 198.756L132.718 198.795L132.182 198.83L132.063 198.838C131.923 198.846 131.783 198.855 131.641 198.862L131.462 198.872C131.296 198.881 131.13 198.889 130.962 198.896L130.381 198.921L129.854 198.939L129.502 198.949H129.323C129.213 198.949 129.104 198.955 128.994 198.956H128.82C128.71 198.956 128.601 198.956 128.491 198.961L128.043 198.967H127.418C126.927 198.967 126.437 198.962 125.949 198.952L125.553 198.943C125.44 198.943 125.327 198.938 125.216 198.934L124.796 198.922L124.275 198.902L123.805 198.881L123.684 198.876L123.237 198.853C123.112 198.846 122.989 198.84 122.865 198.831L122.576 198.814C122.213 198.791 121.85 198.766 121.487 198.738L121.107 198.707C120.947 198.695 120.787 198.68 120.628 198.666C120.441 198.65 120.254 198.632 120.067 198.614C119.754 198.585 119.441 198.553 119.128 198.519H119.113C123.683 188.324 121.372 178.802 112.137 169.575C106.08 163.526 102.051 154.594 101.215 152.633C99.5229 146.828 95.045 140.375 87.608 140.375C86.979 140.375 86.351 140.425 85.73 140.523C82.472 141.036 79.624 142.911 77.592 145.733C75.396 143.002 73.262 140.831 71.332 139.605C68.422 137.76 65.5179 136.824 62.6889 136.824C59.1579 136.824 56.0019 138.274 53.8019 140.904L53.7459 140.971C53.7039 140.798 53.6639 140.625 53.6229 140.451L53.6179 140.428C53.1992 138.638 52.8477 136.833 52.5639 135.016C52.5639 135.004 52.5639 134.992 52.5579 134.98C52.5359 134.843 52.5159 134.705 52.4949 134.568C52.4334 134.162 52.3757 133.755 52.3219 133.348C52.2979 133.163 52.2719 132.978 52.2489 132.793L52.1809 132.238C52.1589 132.053 52.1409 131.885 52.1209 131.709L52.115 131.665C52.0351 130.945 51.9651 130.225 51.9049 129.503L51.8829 129.226L51.8479 128.754C51.8379 128.625 51.8279 128.495 51.8209 128.365C51.8209 128.334 51.8159 128.304 51.8149 128.275C51.7895 127.913 51.7678 127.55 51.7499 127.187C51.7399 126.998 51.7299 126.81 51.7219 126.62L51.7019 126.124L51.6969 125.974L51.6809 125.517L51.6709 125.128C51.6709 124.973 51.6629 124.818 51.6609 124.663C51.6579 124.508 51.6539 124.338 51.6529 124.174C51.6509 124.01 51.6529 123.848 51.6479 123.685C51.6439 123.521 51.6479 123.358 51.6479 123.195C51.6479 81.3421 85.5789 47.4111 127.436 47.4111C169.292 47.4111 203.222 81.3411 203.222 123.195V124.174C203.222 124.337 203.217 124.501 203.214 124.663C203.214 124.798 203.208 124.931 203.204 125.068C203.204 125.188 203.199 125.309 203.195 125.425C203.195 125.578 203.186 125.731 203.181 125.884V125.896L203.16 126.427C203.153 126.582 203.147 126.738 203.139 126.893L203.134 127.003L203.107 127.499C203.048 128.562 202.967 129.623 202.866 130.683V130.696C202.849 130.87 202.832 131.044 202.813 131.218L202.768 131.629L202.679 132.433L202.628 132.84L202.565 133.319C202.542 133.493 202.519 133.668 202.493 133.841C202.467 134.036 202.438 134.23 202.409 134.424L202.34 134.883L202.258 135.403C202.23 135.576 202.2 135.748 202.168 135.92C202.135 136.093 202.109 136.265 202.079 136.437C202.019 136.781 201.956 137.125 201.89 137.468C201.789 137.981 201.686 138.493 201.58 139.005L201.47 139.512C201.434 139.681 201.395 139.851 201.357 140.02C199.224 137.947 196.399 136.818 193.284 136.818C190.457 136.818 187.55 137.753 184.641 139.598C182.711 140.824 180.578 142.996 178.381 145.726C176.346 142.904 173.498 141.029 170.242 140.516C169.621 140.418 168.993 140.368 168.364 140.368C160.925 140.368 156.45 146.821 154.757 152.626C153.917 154.587 149.887 163.519 143.825 169.577C134.596 178.775 132.268 188.254 136.766 198.407ZM215.007 177.998L214.977 178.087C214.901 178.288 214.813 178.484 214.714 178.674C214.639 178.814 214.558 178.95 214.47 179.082C214.303 179.331 214.12 179.569 213.921 179.793C213.875 179.845 213.831 179.897 213.779 179.948C213.707 180.025 213.634 180.101 213.559 180.175C212.213 181.509 210.161 182.679 207.841 183.752C207.578 183.871 207.311 183.99 207.042 184.11L206.774 184.229C206.595 184.308 206.416 184.386 206.228 184.463C206.049 184.541 205.863 184.619 205.677 184.695L205.119 184.925C203.814 185.462 202.477 185.974 201.173 186.479L200.615 186.696L200.064 186.912C199.697 187.055 199.335 187.198 198.979 187.341L198.448 187.555L197.926 187.768L197.67 187.876C197.499 187.947 197.332 188.018 197.165 188.089C193.328 189.736 190.567 191.411 191.147 193.489C191.163 193.548 191.181 193.604 191.201 193.659C191.253 193.813 191.324 193.958 191.413 194.095C191.465 194.176 191.525 194.253 191.592 194.323C192.274 195.032 193.515 194.92 195.08 194.357C195.3 194.276 195.519 194.192 195.736 194.104L195.872 194.048C196.23 193.896 196.609 193.726 196.996 193.542C197.093 193.496 197.191 193.452 197.289 193.401C199.203 192.465 201.372 191.205 203.524 190.058C204.385 189.593 205.258 189.152 206.142 188.733C208.18 187.774 210.096 187.094 211.636 187.094C212.359 187.094 212.997 187.242 213.529 187.582L213.618 187.641C213.952 187.876 214.232 188.178 214.441 188.528C214.482 188.595 214.522 188.666 214.561 188.739C215.322 190.184 214.685 191.68 213.194 193.147C211.763 194.556 209.537 195.937 207.007 197.215C206.819 197.31 206.631 197.405 206.44 197.498C198.91 201.196 189.049 203.981 188.912 204.016C186.284 204.697 182.526 205.591 178.292 206.26L177.666 206.358L177.563 206.373C177.089 206.445 176.614 206.512 176.138 206.574C175.655 206.639 175.167 206.698 174.676 206.753L174.586 206.763C172.806 206.968 171.019 207.104 169.228 207.169H169.202C168.554 207.192 167.907 207.204 167.259 207.204H166.512C165.524 207.191 164.538 207.146 163.553 207.07C163.53 207.07 163.505 207.07 163.482 207.064C163.129 207.037 162.777 207.004 162.425 206.965C162.06 206.926 161.696 206.882 161.333 206.833C161.094 206.801 160.856 206.765 160.618 206.726C160.376 206.687 160.134 206.647 159.893 206.605L159.564 206.543L159.539 206.538C159.192 206.472 158.847 206.399 158.503 206.319C158.303 206.274 158.104 206.23 157.907 206.176L157.788 206.146C157.69 206.122 157.595 206.096 157.498 206.07L157.445 206.056L157.137 205.966C157.025 205.935 156.913 205.901 156.801 205.868L156.762 205.857L156.471 205.768C156.361 205.734 156.251 205.698 156.142 205.662L155.874 205.573L155.677 205.504C155.487 205.437 155.298 205.368 155.111 205.296L154.933 205.226L154.786 205.168C154.502 205.054 154.22 204.935 153.941 204.81L153.756 204.72L153.725 204.706C153.659 204.675 153.594 204.644 153.528 204.617C153.399 204.555 153.271 204.491 153.144 204.426L153.105 204.407L152.921 204.31C152.594 204.139 152.274 203.957 151.96 203.764L151.788 203.658C151.702 203.605 151.616 203.55 151.532 203.494L151.308 203.346L151.067 203.18L150.923 203.077C150.771 202.969 150.622 202.857 150.476 202.742L150.243 202.563C150.15 202.488 150.058 202.412 149.967 202.335C149.89 202.272 149.815 202.206 149.74 202.14L149.734 202.135C149.653 202.064 149.574 201.993 149.495 201.92C149.417 201.849 149.339 201.777 149.263 201.704L149.254 201.695C149.174 201.619 149.096 201.542 149.019 201.463C148.942 201.385 148.863 201.307 148.788 201.227C148.713 201.148 148.636 201.067 148.562 200.984C148.488 200.902 148.42 200.827 148.35 200.746L148.327 200.719C148.259 200.641 148.192 200.562 148.126 200.481C147.983 200.31 147.844 200.135 147.71 199.956C147.575 199.776 147.443 199.592 147.314 199.405L147.191 199.221C147.027 198.981 146.867 198.739 146.712 198.493C146.596 198.316 146.483 198.138 146.373 197.957C146.302 197.844 146.234 197.73 146.166 197.618L146.138 197.572C146.073 197.462 146.009 197.354 145.947 197.245C145.911 197.186 145.877 197.127 145.845 197.066C145.812 197.004 145.774 196.941 145.739 196.878L145.682 196.779L145.647 196.715C145.58 196.595 145.514 196.474 145.45 196.352C145.42 196.298 145.391 196.244 145.36 196.192L145.271 196.019L145.181 195.848C144.956 195.398 144.743 194.942 144.543 194.48L144.472 194.311C144.426 194.198 144.383 194.086 144.337 193.975C144.315 193.921 144.293 193.868 144.274 193.814C144.167 193.537 144.067 193.257 143.975 192.975C143.942 192.874 143.91 192.775 143.88 192.675C143.808 192.448 143.743 192.219 143.685 191.988C143.614 191.719 143.551 191.448 143.498 191.175C143.487 191.12 143.476 191.065 143.467 191.012C143.415 190.745 143.373 190.476 143.34 190.206C143.332 190.153 143.326 190.1 143.32 190.047L143.303 189.885C143.281 189.673 143.264 189.46 143.254 189.247C143.254 189.193 143.249 189.139 143.247 189.087C143.242 188.981 143.24 188.875 143.239 188.769C143.183 184.496 145.345 180.388 149.968 175.767C158.203 167.54 162.997 155.501 162.997 155.501C162.997 155.501 163.126 154.996 163.394 154.269C163.431 154.168 163.47 154.064 163.514 153.955C163.67 153.548 163.846 153.148 164.041 152.758L164.08 152.683C164.246 152.351 164.428 152.027 164.624 151.712C164.67 151.639 164.714 151.567 164.765 151.494C164.912 151.277 165.067 151.065 165.23 150.86C165.319 150.749 165.416 150.639 165.513 150.532C165.552 150.49 165.59 150.448 165.631 150.408C166.108 149.915 166.653 149.513 167.27 149.299L167.348 149.273C167.4 149.256 167.452 149.24 167.505 149.225C167.566 149.209 167.627 149.195 167.69 149.182L167.719 149.176C167.849 149.15 167.981 149.133 168.114 149.124H168.125C168.194 149.124 168.264 149.117 168.335 149.117C168.424 149.117 168.507 149.117 168.594 149.126C168.684 149.134 168.773 149.144 168.863 149.158C169.605 149.276 170.311 149.718 170.919 150.4C171.15 150.66 171.358 150.94 171.54 151.236C171.66 151.428 171.773 151.631 171.88 151.845C171.923 151.934 171.964 152.016 172.004 152.104C172.108 152.33 172.202 152.56 172.284 152.795C172.479 153.345 172.626 153.911 172.723 154.487C172.807 154.992 172.857 155.502 172.873 156.013C172.881 156.286 172.881 156.563 172.873 156.842C172.819 158.14 172.553 159.421 172.086 160.634C172.044 160.745 171.997 160.857 171.952 160.969C171.86 161.195 171.759 161.417 171.65 161.634C171.569 161.799 171.484 161.965 171.392 162.13C171.332 162.24 171.269 162.35 171.206 162.46C171.045 162.734 170.871 163.006 170.684 163.277L170.571 163.439C170.129 164.055 169.637 164.633 169.099 165.167C168.569 165.698 168.001 166.189 167.4 166.637C166.798 167.083 166.233 167.577 165.711 168.114C164.208 169.691 163.858 171.083 164.196 172.138C164.25 172.304 164.321 172.465 164.407 172.617C164.508 172.791 164.628 172.951 164.764 173.097L164.817 173.152L164.871 173.206C164.925 173.258 164.982 173.309 165.043 173.359L165.103 173.407C165.248 173.519 165.402 173.619 165.563 173.707C165.61 173.732 165.652 173.757 165.705 173.781C165.879 173.866 166.058 173.939 166.242 173.998C166.293 174.015 166.344 174.03 166.396 174.046L166.461 174.063L166.551 174.087L166.628 174.106L166.712 174.124L166.795 174.141L166.874 174.154C166.932 174.164 166.992 174.174 167.052 174.181L167.109 174.19L167.213 174.2L167.277 174.207L167.382 174.214H167.444L167.554 174.22H167.9L167.999 174.214L168.113 174.207L168.252 174.194L168.382 174.179C168.412 174.179 168.442 174.171 168.472 174.165C168.872 174.107 169.264 174.001 169.639 173.849L169.798 173.782C169.887 173.743 169.977 173.702 170.059 173.658C170.235 173.57 170.406 173.47 170.57 173.361C170.799 173.211 171.015 173.043 171.217 172.858C171.265 172.815 171.312 172.769 171.358 172.725C171.381 172.703 171.403 172.682 171.425 172.658C171.469 172.613 171.514 172.569 171.558 172.52C171.878 172.168 172.155 171.78 172.383 171.363C174.34 167.804 176.391 164.298 178.534 160.849L178.828 160.378L179.125 159.907C179.273 159.668 179.423 159.433 179.572 159.199L179.722 158.965C180.22 158.185 180.726 157.41 181.241 156.641L181.546 156.185C182.158 155.278 182.768 154.396 183.373 153.558L183.674 153.143C184.332 152.236 185.017 151.348 185.728 150.482L186.01 150.144C186.057 150.088 186.1 150.032 186.151 149.978C186.244 149.868 186.337 149.761 186.428 149.657C186.474 149.604 186.517 149.552 186.566 149.5L186.834 149.198L186.968 149.051C187.103 148.906 187.235 148.767 187.365 148.634C187.455 148.544 187.538 148.455 187.624 148.371C188.131 147.853 188.69 147.388 189.293 146.985L189.433 146.895C189.567 146.805 189.706 146.721 189.848 146.645C192.212 145.303 194.169 145.204 195.296 146.331C195.978 147.013 196.356 148.144 196.335 149.718C196.335 149.787 196.335 149.857 196.33 149.929V150.006C196.33 150.078 196.324 150.15 196.318 150.223C196.318 150.313 196.308 150.402 196.299 150.492C196.29 150.581 196.285 150.649 196.276 150.729C196.276 150.751 196.272 150.774 196.268 150.798C196.262 150.867 196.253 150.938 196.243 151.009C196.243 151.03 196.243 151.052 196.235 151.074C196.224 151.169 196.21 151.263 196.194 151.357C196.183 151.447 196.168 151.531 196.152 151.619L196.126 151.768C196.1 151.91 196.067 152.05 196.026 152.188C195.948 152.447 195.854 152.7 195.743 152.946C195.588 153.284 195.417 153.613 195.229 153.933C195.125 154.111 195.018 154.286 194.907 154.459C194.793 154.638 194.673 154.819 194.549 155.002C194.233 155.454 193.905 155.897 193.564 156.33L193.408 156.527C192.852 157.22 192.278 157.899 191.686 158.562L191.499 158.772C191.247 159.053 190.991 159.336 190.729 159.62L190.532 159.834C190.401 159.977 190.264 160.12 190.132 160.264C190.001 160.407 189.864 160.552 189.726 160.697L189.315 161.13L188.898 161.566L188.478 162.002C188.196 162.294 187.913 162.586 187.628 162.878C183.573 167.037 179.301 171.182 177.855 173.766C177.758 173.934 177.671 174.108 177.593 174.285C177.387 174.755 177.301 175.157 177.36 175.482C177.379 175.589 177.416 175.691 177.471 175.785C177.552 175.926 177.651 176.056 177.766 176.172C177.819 176.224 177.875 176.272 177.934 176.316C178.232 176.528 178.591 176.637 178.957 176.627H179.071L179.188 176.618L179.305 176.605L179.402 176.591C179.415 176.589 179.429 176.587 179.442 176.583L179.531 176.566L179.554 176.561L179.653 176.54L179.688 176.531C179.723 176.522 179.757 176.513 179.792 176.503C179.827 176.493 179.875 176.48 179.917 176.466C180.093 176.413 180.265 176.35 180.434 176.278C180.523 176.242 180.61 176.203 180.696 176.161C180.741 176.141 180.786 176.12 180.828 176.098L180.962 176.032C181.282 175.866 181.594 175.685 181.898 175.491L182.031 175.401C182.076 175.373 182.121 175.344 182.164 175.312L182.297 175.223L182.368 175.174L182.56 175.039C182.739 174.916 182.906 174.789 183.075 174.66L183.09 174.648L183.359 174.44C183.726 174.15 184.074 173.858 184.39 173.583L184.6 173.399L184.619 173.381L184.729 173.284C184.987 173.052 185.217 172.836 185.408 172.658L185.487 172.581C185.556 172.516 185.619 172.455 185.676 172.403L185.788 172.292L185.828 172.253L185.839 172.242L185.956 172.125L186.03 172.048L186.039 172.041L186.074 172.009L186.118 171.969L186.132 171.956L186.169 171.922L186.373 171.743L186.487 171.641C186.548 171.588 186.607 171.534 186.666 171.479L186.802 171.358C186.827 171.338 186.851 171.316 186.876 171.294L187.019 171.169L187.229 170.984L187.341 170.887C187.776 170.509 188.305 170.052 188.913 169.537L189.162 169.326L189.573 168.981L189.994 168.63C190.544 168.173 191.136 167.688 191.762 167.185L192.173 166.855C192.523 166.576 192.882 166.292 193.246 166.006C193.393 165.891 193.542 165.776 193.694 165.662C194.066 165.373 194.44 165.086 194.817 164.803C195.675 164.155 196.56 163.506 197.456 162.874L197.84 162.606C198.109 162.421 198.377 162.235 198.645 162.054L198.888 161.89C199.367 161.565 199.853 161.248 200.343 160.939L200.586 160.786L200.827 160.636C201.069 160.486 201.309 160.339 201.548 160.196L201.787 160.053L202.265 159.775L202.734 159.506L202.829 159.454L203.2 159.25C203.355 159.166 203.509 159.085 203.663 159.006L203.892 158.888L204.115 158.776C204.193 158.739 204.27 158.7 204.346 158.663C204.848 158.415 205.36 158.187 205.88 157.979C206.021 157.919 206.161 157.865 206.3 157.818L206.71 157.674C206.833 157.633 206.953 157.594 207.068 157.559L207.108 157.547C207.17 157.527 207.232 157.509 207.293 157.493L207.311 157.488C207.439 157.451 207.566 157.419 207.691 157.389H207.7C208.054 157.304 208.414 157.243 208.777 157.206C208.944 157.189 209.111 157.18 209.279 157.181H209.363C209.475 157.181 209.583 157.188 209.69 157.199C209.739 157.199 209.788 157.209 209.836 157.215H209.856C209.904 157.221 209.952 157.228 210 157.239C210.047 157.248 210.095 157.256 210.141 157.267H210.156C210.203 157.277 210.245 157.289 210.294 157.303C210.548 157.374 210.79 157.484 211.012 157.628C211.121 157.699 211.223 157.779 211.317 157.868L211.344 157.894C211.362 157.91 211.379 157.927 211.395 157.944L211.444 157.997C211.846 158.418 212.178 158.901 212.428 159.427L212.466 159.517C212.551 159.717 212.618 159.924 212.666 160.135C212.808 160.781 212.753 161.455 212.508 162.07C212.415 162.318 212.302 162.557 212.169 162.785C211.858 163.309 211.489 163.796 211.07 164.237L210.981 164.332C210.848 164.472 210.71 164.612 210.565 164.752C210.501 164.815 210.434 164.877 210.367 164.94L210.162 165.129L210.055 165.224C209.797 165.454 209.532 165.677 209.263 165.893C209.1 166.025 208.936 166.154 208.77 166.281C208.184 166.729 207.587 167.161 206.979 167.578C206.612 167.83 206.242 168.077 205.869 168.321C204.95 168.924 204.021 169.512 203.083 170.084C201.115 171.294 198.934 172.588 196.609 173.995L196.007 174.36C195.348 174.762 194.726 175.146 194.14 175.512L193.845 175.697L193.287 176.055C192.917 176.292 192.548 176.531 192.179 176.77L191.882 176.966C191.737 177.06 191.593 177.156 191.449 177.252L191.308 177.342L190.876 177.633L190.647 177.79L190.379 177.976L190.13 178.149C189.713 178.444 189.325 178.725 188.968 178.992L188.834 179.094C188.624 179.253 188.416 179.415 188.211 179.58C187.902 179.829 187.62 180.067 187.367 180.296L187.243 180.409C187.172 180.474 187.102 180.539 187.035 180.603C186.989 180.648 186.946 180.693 186.898 180.736L186.834 180.8C186.691 180.944 186.551 181.091 186.416 181.242L186.35 181.318C186.203 181.488 186.075 181.651 185.963 181.81L185.913 181.881C185.825 182.009 185.744 182.141 185.671 182.277C185.652 182.311 185.635 182.345 185.618 182.379L185.569 182.481L185.536 182.555L185.515 182.605L185.498 182.65L185.475 182.711C185.413 182.88 185.37 183.056 185.345 183.234L185.337 183.296L185.331 183.354V183.669C185.331 183.695 185.331 183.721 185.338 183.749L185.343 183.797C185.343 183.823 185.349 183.848 185.353 183.876C185.357 183.902 185.364 183.949 185.372 183.986V183.991C185.379 184.026 185.386 184.06 185.395 184.095C185.404 184.13 185.413 184.17 185.424 184.206C185.443 184.277 185.467 184.347 185.492 184.417C185.508 184.459 185.523 184.5 185.54 184.541C185.54 184.549 185.546 184.558 185.55 184.566L185.586 184.647L185.636 184.758C185.69 184.873 185.749 184.985 185.813 185.094L185.879 185.208L185.947 185.322C185.959 185.341 185.973 185.359 185.988 185.376L186.01 185.399L186.035 185.422L186.061 185.442C186.099 185.469 186.14 185.49 186.183 185.505C186.206 185.513 186.23 185.519 186.254 185.525C186.831 185.655 188.017 185.178 189.593 184.346C189.682 184.298 189.78 184.248 189.875 184.196L190.355 183.934L190.589 183.804C190.756 183.715 190.926 183.614 191.1 183.515L191.417 183.336C193.5 182.137 195.988 180.597 198.56 179.093C198.801 178.952 199.043 178.811 199.285 178.672L199.771 178.361C200.335 178.038 200.902 177.719 201.471 177.404C202.188 177.01 202.91 176.626 203.639 176.254L204.115 176.013C204.431 175.857 204.744 175.705 205.053 175.557C205.651 175.273 206.256 175.003 206.868 174.748L207.203 174.612L207.243 174.596C209.018 173.893 210.627 173.459 211.929 173.459C212.21 173.456 212.492 173.48 212.769 173.528H212.778C212.867 173.544 212.948 173.562 213.031 173.582H213.046C213.259 173.636 213.466 173.713 213.662 173.812C213.937 173.954 214.184 174.143 214.393 174.371C214.489 174.477 214.574 174.592 214.649 174.714C214.789 174.929 214.899 175.162 214.978 175.406C215.01 175.501 215.038 175.594 215.067 175.693C215.278 176.45 215.257 177.253 215.007 177.998Z" fill="#FF9D00"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M203.21 123.685V123.194C203.21 81.34 169.292 47.411 127.435 47.411C85.5791 47.411 51.648 81.342 51.648 123.194V123.358C51.646 123.467 51.645 123.576 51.648 123.685C51.6529 123.848 51.6546 124.011 51.653 124.174L51.6581 124.534L51.661 124.663C51.661 124.723 51.6631 124.782 51.6651 124.842C51.6681 124.937 51.67 125.033 51.67 125.128L51.681 125.517L51.697 125.974L51.702 126.124L51.722 126.597V126.62C51.73 126.805 51.7401 126.989 51.7491 127.173L51.75 127.187C51.76 127.375 51.7701 127.564 51.7821 127.753C51.7921 127.927 51.802 128.101 51.815 128.275L51.8171 128.306C51.8258 128.455 51.8358 128.605 51.847 128.754L51.85 128.794L51.883 129.226L51.8861 129.254C51.8921 129.338 51.898 129.422 51.906 129.503C51.9658 130.224 52.0355 130.945 52.1151 131.664L52.12 131.709L52.181 132.238L52.2491 132.793L52.299 133.17L52.322 133.347C52.3753 133.755 52.433 134.162 52.495 134.568L52.4991 134.595L52.558 134.979C52.8435 136.808 53.1971 138.626 53.618 140.429L53.6231 140.451L53.655 140.586L53.746 140.971L53.802 140.904C56.002 138.274 59.158 136.824 62.689 136.824C65.519 136.824 68.4221 137.76 71.3321 139.605C73.2621 140.831 75.3961 143.002 77.5921 145.733C79.6241 142.911 82.4721 141.035 85.7301 140.523C86.3513 140.425 86.9792 140.376 87.6081 140.375C95.0441 140.375 99.523 146.828 101.215 152.633C102.051 154.594 106.08 163.526 112.156 169.568C121.392 178.795 123.703 188.316 119.132 198.511H119.148C119.459 198.546 119.772 198.578 120.087 198.607C120.274 198.625 120.46 198.643 120.648 198.659L120.714 198.665L121.127 198.7L121.507 198.73C121.869 198.758 122.232 198.784 122.596 198.807L122.885 198.824L123.114 198.838L123.256 198.846L123.703 198.869L123.825 198.874L124.294 198.895L124.816 198.915L125.235 198.927L125.305 198.929C125.394 198.933 125.483 198.936 125.572 198.936L125.668 198.939C126.258 198.953 126.847 198.96 127.437 198.959H128.063L128.51 198.954C128.62 198.949 128.729 198.949 128.84 198.949H129.014L129.165 198.945C129.224 198.943 129.283 198.941 129.343 198.941H129.522L129.873 198.932L130.401 198.914L130.982 198.888C131.15 198.882 131.316 198.873 131.482 198.865L131.661 198.854L131.927 198.84L132.083 198.831L132.201 198.823L132.738 198.788L133.274 198.749L133.761 198.71L134.103 198.681L134.479 198.647C135.107 198.591 135.733 198.525 136.359 198.45L136.786 198.399C132.287 188.247 134.616 178.767 143.813 169.577C149.876 163.519 153.905 154.587 154.745 152.625C156.438 146.821 160.914 140.368 168.352 140.368C168.981 140.368 169.61 140.418 170.231 140.516C173.486 141.028 176.334 142.904 178.369 145.726C180.566 142.996 182.699 140.823 184.63 139.597C187.539 137.753 190.445 136.817 193.272 136.817C196.388 136.817 199.212 137.947 201.345 140.02C201.384 139.851 201.422 139.682 201.459 139.512L201.568 139.006C201.607 138.821 201.646 138.636 201.683 138.451C201.749 138.124 201.815 137.797 201.878 137.467C201.944 137.125 202.007 136.781 202.067 136.437L202.098 136.251C202.117 136.141 202.135 136.031 202.156 135.92C202.19 135.748 202.218 135.576 202.246 135.402L202.257 135.336L202.328 134.883L202.398 134.424V134.42C202.449 134.081 202.497 133.742 202.542 133.403L202.553 133.319L202.616 132.841L202.667 132.433L202.757 131.629L202.792 131.306L202.801 131.218C202.82 131.044 202.838 130.87 202.854 130.696V130.682C202.867 130.544 202.881 130.405 202.893 130.266C202.964 129.478 203.024 128.686 203.072 127.891C203.081 127.761 203.088 127.63 203.096 127.499V127.493L203.122 127.002L203.128 126.892C203.144 126.56 203.158 126.228 203.169 125.896V125.884L203.174 125.754C203.179 125.645 203.183 125.535 203.183 125.425L203.185 125.381C203.189 125.278 203.193 125.172 203.193 125.067L203.196 124.977C203.199 124.872 203.202 124.768 203.202 124.663L203.204 124.574C203.207 124.441 203.21 124.307 203.21 124.174V123.685ZM108.638 199.391C114.64 190.59 114.214 183.984 105.98 175.754C97.7441 167.523 92.951 155.487 92.951 155.487C92.951 155.487 91.1621 148.496 87.0821 149.138C83.0021 149.78 80.0091 160.227 88.5521 166.622C97.0941 173.017 86.8521 177.353 83.5641 171.352C80.2761 165.35 71.299 149.923 66.645 146.972C61.991 144.021 58.718 145.675 59.815 151.757C60.36 154.776 65.4281 159.929 70.1631 164.743C74.9671 169.627 79.428 174.163 78.474 175.768C76.581 178.955 69.9141 172.023 69.9141 172.023C69.9141 172.023 49.038 153.025 44.494 157.976C40.304 162.539 46.765 166.418 56.7211 172.397C57.5671 172.905 58.4391 173.429 59.3321 173.969C70.7231 180.865 71.609 182.684 69.992 185.293C69.395 186.257 65.582 183.968 60.892 181.153C52.897 176.352 42.3551 170.023 40.8661 175.688C39.5781 180.591 47.334 183.595 54.368 186.32C60.228 188.59 65.5881 190.666 64.7991 193.484C63.9821 196.406 59.5531 193.969 54.7121 191.305C49.2771 188.314 43.3221 185.038 41.3731 188.735C37.6901 195.725 66.7831 203.954 67.0231 204.015C76.4231 206.453 100.295 211.619 108.638 199.391ZM147.303 199.391C141.301 190.59 141.727 183.984 149.962 175.754C158.197 167.523 162.99 155.487 162.99 155.487C162.99 155.487 164.779 148.496 168.859 149.138C172.939 149.78 175.932 160.227 167.39 166.622C158.847 173.017 169.089 177.353 172.377 171.352C175.666 165.35 184.637 149.923 189.291 146.972C193.945 144.021 197.22 145.675 196.122 151.757C195.578 154.776 190.509 159.929 185.774 164.744C180.97 169.628 176.509 174.163 177.462 175.768C179.355 178.955 186.027 172.019 186.027 172.019C186.027 172.019 206.902 153.022 211.448 157.973C215.637 162.535 209.176 166.415 199.219 172.394C198.348 172.917 197.478 173.441 196.609 173.966C185.218 180.862 184.332 182.681 185.948 185.289C186.546 186.254 190.359 183.964 195.048 181.149C203.044 176.349 213.586 170.019 215.075 175.685C216.364 180.588 208.607 183.592 201.573 186.317C195.713 188.587 190.353 190.663 191.141 193.481C191.957 196.402 196.385 193.965 201.225 191.301C206.66 188.31 212.616 185.032 214.564 188.732C218.248 195.726 189.15 203.947 188.915 204.007C179.515 206.453 155.643 211.619 147.303 199.391Z" fill="#FFD21E"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M152.047 102.567C153.229 102.985 154.108 104.257 154.944 105.468C156.074 107.104 157.126 108.627 158.74 107.769C160.644 106.756 162.205 105.202 163.225 103.302C164.246 101.402 164.681 99.2427 164.475 97.096C164.321 95.4908 163.813 93.9398 162.987 92.5548C162.161 91.1697 161.038 89.985 159.7 89.0862C158.361 88.1874 156.839 87.5968 155.245 87.3569C153.65 87.117 152.022 87.2339 150.478 87.699C148.934 88.1639 147.513 88.9653 146.316 90.0455C145.119 91.1257 144.176 92.4578 143.556 93.946C142.936 95.4342 142.653 97.0415 142.728 98.652C142.804 100.263 143.235 101.836 143.992 103.26C144.74 104.667 146.4 104.003 148.152 103.302C149.525 102.753 150.956 102.181 152.047 102.567ZM100.672 102.567C99.49 102.985 98.611 104.258 97.775 105.468C96.645 107.105 95.592 108.627 93.979 107.769C91.5845 106.501 89.7482 104.386 88.8278 101.838C87.9075 99.2895 87.9692 96.4896 89.0008 93.9841C90.0324 91.4786 91.9601 89.4471 94.408 88.2855C96.856 87.1239 99.6488 86.9156 102.242 87.701C104.307 88.3228 106.141 89.5427 107.513 91.2065C108.885 92.8704 109.732 94.9035 109.949 97.049C110.165 99.1945 109.74 101.356 108.728 103.26C107.979 104.667 106.319 104.003 104.567 103.303C103.193 102.753 101.764 102.181 100.672 102.567ZM144.099 149.318C152.242 142.903 155.233 132.429 155.233 125.977C155.233 120.877 151.802 122.482 146.309 125.202L145.999 125.355C140.957 127.852 134.245 131.177 126.877 131.177C119.508 131.177 112.796 127.852 107.755 125.354C102.084 122.545 98.527 120.783 98.527 125.978C98.527 132.634 101.709 143.563 110.443 149.912C111.596 147.573 113.219 145.497 115.211 143.813C117.202 142.129 119.52 140.874 122.018 140.126C122.89 139.866 123.788 141.367 124.707 142.904C125.594 144.386 126.501 145.902 127.423 145.902C128.406 145.902 129.371 144.408 130.314 142.95C131.299 141.425 132.26 139.94 133.189 140.237C137.864 141.738 141.775 144.993 144.099 149.318Z" fill="#32343D"/>
<path d="M144.097 149.317C139.856 152.659 134.219 154.9 126.878 154.9C119.981 154.9 114.587 152.922 110.443 149.911C111.596 147.572 113.219 145.495 115.211 143.812C117.202 142.128 119.52 140.873 122.018 140.125C123.73 139.614 125.545 145.901 127.423 145.901C129.433 145.901 131.37 139.655 133.189 140.236C137.863 141.738 141.773 144.993 144.097 149.317Z" fill="#FF323D"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M81.2 111.64C80.2312 112.288 79.1173 112.687 77.9572 112.801C76.7971 112.916 75.6267 112.742 74.55 112.295C73.6893 111.94 72.9072 111.418 72.2488 110.759C71.5903 110.101 71.0684 109.319 70.713 108.458C70.267 107.381 70.0935 106.211 70.2082 105.051C70.3228 103.891 70.7219 102.777 71.37 101.808C72.1488 100.642 73.2558 99.7333 74.5512 99.1967C75.8466 98.6601 77.272 98.5197 78.6471 98.7935C80.0223 99.0672 81.2853 99.7427 82.2764 100.734C83.2675 101.726 83.9422 102.99 84.215 104.365C84.4883 105.74 84.3477 107.165 83.8113 108.46C83.2748 109.755 82.3654 110.861 81.2 111.64ZM182.613 111.64C181.644 112.288 180.53 112.687 179.37 112.801C178.209 112.916 177.039 112.742 175.962 112.295C175.101 111.939 174.319 111.418 173.661 110.759C173.003 110.101 172.481 109.319 172.125 108.458C171.68 107.381 171.507 106.211 171.621 105.051C171.736 103.891 172.135 102.777 172.782 101.808C173.364 100.936 174.133 100.205 175.032 99.6658C175.931 99.1269 176.938 98.7942 177.981 98.6917C179.025 98.5891 180.078 98.7193 181.064 99.0728C182.051 99.4264 182.947 99.9944 183.688 100.736C184.68 101.727 185.355 102.99 185.628 104.365C185.902 105.74 185.761 107.165 185.224 108.46C184.687 109.755 183.779 110.861 182.613 111.64Z" fill="#FFAD03"/>
</svg>

================
File: docs/public/img/providers/identity-server4.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" image-rendering="optimizeQuality" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" viewBox="0 0 598 602"><path fill="#231f20" d="M282.5-.5h36c105.9 9.8 186 60.1 240.5 151 22.3 41 35.2 84.7 38.5 131v38c-7.8 95.9-50.2 172.4-127 229.5a302 302 0 0 1-146 52.5h-48C176.4 590.7 98.9 543.4 44 459.5a309.2 309.2 0 0 1-44.5-138v-42c10.7-105.4 61-185.6 151-240.5a309.6 309.6 0 0 1 132-39.5Z"/><path fill="#fefefe" d="M277.5 35.5c82.7-4.7 153.2 22 211.5 80 67.7 77.1 88 165.4 61 265-28.8 87.1-86.6 145.3-173.5 174.5-94.8 25.2-179.5 6.2-254-57C52.9 431.1 25 349.6 39 253.5 58.2 163 109.4 97.8 192.5 58a297 297 0 0 1 85-22.5Z"/><path fill="#f8971d" d="M353.5 85.5c1 126.5 1.3 253.2 1 380a2272.3 2272.3 0 0 1-78 47v-64c-.2-108 0-216 .5-324a8192 8192 0 0 0 76.5-39Z"/><path fill="#fef6ec" d="M353.5 85.5c0-.5.4-.9 1-1 1.3 127.2 1.3 254.2 0 381 .3-126.8 0-253.5-1-380Z" opacity=".8"/><path fill="#231f20" d="M370.5 187.5c28.5 4 55.8 12 82 24a351 351 0 0 0 12.5-22c19 28.7 37.5 57.7 55.5 87-37 7-74 13.6-111 19.5 4.7-9.5 9.7-18.8 15-28a194 194 0 0 0-53.5-17.5c-.5-21-.7-42-.5-63Z"/><path fill="#231f20" d="M276.5 448.5v64a220.3 220.3 0 0 1-128.5-69c-39-49.7-44-102.7-15-159a195.2 195.2 0 0 1 88.5-75.5 235.8 235.8 0 0 1 39-13.5c.2 21.7 0 43.3-.5 65a146.9 146.9 0 0 0-72 54 69.5 69.5 0 0 0-1 75c15 22.7 35.2 39.2 60.5 49.5 9.4 4 19 7.2 29 9.5Z"/></svg>

================
File: docs/public/img/providers/instagram.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 3364.7 3364.7"><defs><radialGradient id="a" cx="217.8" cy="3291" r="4271.9" gradientUnits="userSpaceOnUse"><stop offset=".1" stop-color="#fa8f21"/><stop offset=".8" stop-color="#d82d7e"/></radialGradient><radialGradient id="b" cx="2330.6" cy="3182.9" r="3759.3" gradientUnits="userSpaceOnUse"><stop offset=".6" stop-color="#8c3aaa" stop-opacity="0"/><stop offset="1" stop-color="#8c3aaa"/></radialGradient></defs><path fill="url(#a)" d="M853.2 3352.8c-200.1-9.1-308.8-42.4-381.1-70.6-95.8-37.3-164.1-81.7-236-153.5s-116.4-140.1-153.5-235.9c-28.2-72.3-61.5-181-70.6-381.1-10-216.3-12-281.2-12-829.2s2.2-612.8 11.9-829.3C21 653.1 54.5 544.6 82.5 472.1A640 640 0 0 1 236 236 633.5 633.5 0 0 1 472 82.5C544.3 54.3 653 21 853.1 11.9 1069.5 2 1134.5 0 1682.3 0c548 0 612.8 2.2 829.3 11.9 200.1 9.1 308.6 42.6 381.1 70.6 95.8 37.1 164.1 81.7 236 153.5s116.2 140.2 153.5 236c28.2 72.3 61.5 181 70.6 381.1 9.9 216.5 11.9 281.3 11.9 829.3 0 547.8-2 612.8-11.9 829.3-9.1 200.1-42.6 308.8-70.6 381.1-37.3 95.8-81.7 164.1-153.5 235.9s-140.2 116.2-236 153.5c-72.3 28.2-181 61.5-381.1 70.6-216.3 9.9-281.3 11.9-829.3 11.9-547.8 0-612.8-1.9-829.1-11.9"/><path fill="url(#b)" d="M853.2 3352.8c-200.1-9.1-308.8-42.4-381.1-70.6-95.8-37.3-164.1-81.7-236-153.5s-116.4-140.1-153.5-235.9c-28.2-72.3-61.5-181-70.6-381.1-10-216.3-12-281.2-12-829.2s2.2-612.8 11.9-829.3C21 653.1 54.5 544.6 82.5 472.1A640 640 0 0 1 236 236 633.5 633.5 0 0 1 472 82.5C544.3 54.3 653 21 853.1 11.9 1069.5 2 1134.5 0 1682.3 0c548 0 612.8 2.2 829.3 11.9 200.1 9.1 308.6 42.6 381.1 70.6 95.8 37.1 164.1 81.7 236 153.5s116.2 140.2 153.5 236c28.2 72.3 61.5 181 70.6 381.1 9.9 216.5 11.9 281.3 11.9 829.3 0 547.8-2 612.8-11.9 829.3-9.1 200.1-42.6 308.8-70.6 381.1-37.3 95.8-81.7 164.1-153.5 235.9s-140.2 116.2-236 153.5c-72.3 28.2-181 61.5-381.1 70.6-216.3 9.9-281.3 11.9-829.3 11.9-547.8 0-612.8-1.9-829.1-11.9"/><path fill="#fff" d="M1269.3 1689.5a416.6 416.6 0 1 1 833.2 0 416.6 416.6 0 0 1-833.3 0m-225.2 0a641.8 641.8 0 1 0 1283.7 0 641.8 641.8 0 0 0-1283.7 0m1159.1-667.3a150 150 0 1 0 150-150 150 150 0 0 0-150 150M1181 2707c-122-5.5-188.2-25.8-232.2-43-58.3-22.7-100-49.8-143.8-93.5s-70.8-85.3-93.5-143.7c-17.1-44-37.4-110.2-43-232.1-6-131.8-7.2-171.3-7.2-505.2s1.3-373.2 7.2-505.1c5.6-121.9 26-188 43-232.1 22.8-58.4 49.8-100 93.5-143.8s85.4-70.9 143.8-93.5c44-17.2 110.3-37.5 232.1-43 131.8-6 171.4-7.3 505-7.3s373.3 1.3 505.2 7.3c121.9 5.6 188 26 232.1 43 58.4 22.6 100 49.8 143.8 93.5s70.8 85.4 93.5 143.8c17.2 44 37.5 110.2 43 232.1 6 131.9 7.3 171.3 7.3 505.2s-1.2 373.2-7.3 505.1c-5.5 121.9-26 188.1-43 232.1-22.7 58.4-49.8 100-93.5 143.7s-85.4 70.8-143.8 93.5c-44 17.2-110.2 37.5-232.1 43-131.8 6-171.3 7.3-505.1 7.3s-373.3-1.2-505-7.3m-10.4-2260c-133 6.2-224 27.3-303.4 58.2-82.2 31.9-151.9 74.7-221.4 144.1S533.4 788.5 501.5 870.8c-31 79.4-52 170.3-58 303.4-6.2 133.3-7.6 175.9-7.6 515.3s1.4 382 7.5 515.4c6 133 27.2 224 58 303.4 32 82.2 74.7 152 144.3 221.4S784.8 2842 867 2874c79.6 30.9 170.3 52 303.4 58 133.4 6.1 175.9 7.6 515.4 7.6s382-1.4 515.3-7.6c133-6 224-27.1 303.4-58 82.2-32 151.9-74.7 221.4-144.2s112.2-139.2 144.2-221.4c31-79.5 52.1-170.4 58-303.4 6.1-133.4 7.5-176 7.5-515.4s-1.4-382-7.4-515.3c-6-133.1-27.2-224-58-303.4-32-82.2-74.8-151.9-144.3-221.5s-139.2-112.2-221.3-144.2c-79.5-30.9-170.4-52-303.4-58-133.3-6.1-175.9-7.6-515.3-7.6s-382.1 1.4-515.4 7.6"/></svg>

================
File: docs/public/img/providers/kakao.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path fill="#FFE812" d="M256 236a20 20 0 0 1-20 20H20a20 20 0 0 1-20-20V20A20 20 0 0 1 20 0h216a20 20 0 0 1 20 20v216z"/><path d="M128 36C70.56 36 24 72.71 24 118c0 29.28 19.47 54.97 48.75 69.48-1.6 5.5-10.24 35.34-10.58 37.69 0 0-.21 1.76.93 2.43s2.48.15 2.48.15c3.28-.46 37.95-24.81 43.95-29.04 6 .85 12.17 1.29 18.47 1.29 57.44 0 104-36.71 104-82s-46.56-82-104-82z"/><path fill="#FFE812" d="M70.5 146.63c-3.3 0-6-2.57-6-5.73v-35.65h-9.36c-3.25 0-5.89-2.64-5.89-5.87s2.64-5.88 5.89-5.88h30.72a5.89 5.89 0 1 1 0 11.75H76.5v35.65c0 3.16-2.7 5.73-6 5.73zm52.61-.08c-2.5 0-4.41-1.02-5-2.65l-2.96-7.78h-18.3l-2.97 7.78c-.58 1.63-2.49 2.65-5 2.65a9.15 9.15 0 0 1-3.8-.83c-1.66-.76-3.25-2.86-1.43-8.52l14.36-37.78c1-2.87 4.08-5.83 7.99-5.92 3.91.09 6.99 3.05 8 5.93l14.34 37.76c1.83 5.67.24 7.77-1.41 8.53a9.18 9.18 0 0 1-3.82.83zM112 125.49l-6-17.02-6 17.02h12zm26 20.26a5.64 5.64 0 0 1-5.75-5.5V99.5c0-3.3 2.75-6 6.13-6s6.12 2.7 6.12 6v35.25h12.75c3.17 0 5.75 2.47 5.75 5.5s-2.58 5.5-5.75 5.5H138zm33.33.8a6 6 0 0 1-6-6V99.5a6 6 0 0 1 12 0v12.9l16.74-16.74a4.66 4.66 0 0 1 3.33-1.34c1.5 0 3 .65 4.13 1.77a5.91 5.91 0 0 1 1.77 3.8 4.68 4.68 0 0 1-1.33 3.66l-13.67 13.67 14.77 19.57a5.95 5.95 0 0 1 1.15 4.44 5.96 5.96 0 0 1-2.33 3.96 5.94 5.94 0 0 1-3.6 1.21 5.95 5.95 0 0 1-4.8-2.38l-14.07-18.65-2.08 2.08v13.1a6.01 6.01 0 0 1-6 6z"/></svg>

================
File: docs/public/img/providers/keycloak.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" data-name="Layer 1" version="1.1" viewBox="0 0 512 512"><defs id="defs10"><clipPath id="clip-path"><rect id="rect4" width="1881.2" height="1175.8" x="-1018.6" y="565.7" class="cls-1"/></clipPath><clipPath id="clip-path-2"><rect id="rect7" width="512" height="512" class="cls-1"/></clipPath><style id="style2">.cls-1{fill:none}.cls-2{clip-path:url(#clip-path)}.cls-3{fill:#b17c81;stroke:#b17c81}.cls-10,.cls-11,.cls-12,.cls-13,.cls-3,.cls-4,.cls-5,.cls-6,.cls-7,.cls-8,.cls-9{stroke-width:1.51px}.cls-4{fill:#a2747c;stroke:#a2747c}.cls-5{fill:#996976;stroke:#996976}.cls-6{fill:#aa787e;stroke:#aa787e}.cls-7{fill:#b2777e;stroke:#b2777e}.cls-8{fill:#b27a7f;stroke:#b27a7f}.cls-9{fill:#c78485;stroke:#c78485}.cls-10{fill:#c08184;stroke:#c08184}.cls-11{fill:#c48485;stroke:#c48485}.cls-12{fill:#d58b88;stroke:#d58b88}.cls-13{fill:#e09790;stroke:#e09790}.cls-14{clip-path:url(#clip-path-2)}.cls-15{fill:#4d4d4d}.cls-16{fill:#e1e1e1}.cls-17{fill:#c8c8c8}.cls-18{fill:#c2c2c2}.cls-19{fill:#c7c7c7}.cls-20{fill:#cecece}.cls-21{fill:#d3d3d3}.cls-22{fill:#c6c6c6}.cls-23{fill:#d5d5d5}.cls-24{fill:#d0d0d0}.cls-25{fill:#bfbfbf}.cls-26{fill:#d9d9d9}.cls-27{fill:#d4d4d4}.cls-28{fill:#d8d8d8}.cls-29{fill:#e2e2e2}.cls-30{fill:#e4e4e4}.cls-31{fill:#dedede}.cls-32{fill:#c5c5c5}.cls-33{fill:#d1d1d1}.cls-34{fill:#ddd}.cls-35{fill:#e3e3e3}.cls-36{fill:#00b8e3}.cls-37{fill:#33c6e9}.cls-38{fill:#008aaa}</style></defs><g id="g36" class="cls-2" clip-path="url(#clip-path)"><path id="path14" d="m-42.8 358 245 24.8 199.4 2Z" class="cls-3"/><path id="path16" d="m-42.8 358 444.4 26.8 227.2-2Z" class="cls-4"/><path id="path18" d="m401.6 384.7 163.7 139 63.5-141Z" class="cls-5"/><path id="path20" d="m202.2 382.8 54.6 14.8 144.8-12.9Z" class="cls-6"/><path id="path22" d="M401.6 384.7 356 537.5l209.3-13.9Z" class="cls-7"/><path id="path24" d="m256.8 397.6 99.2 140 45.6-152.9Z" class="cls-8"/><path id="path26" d="m256.8 397.6-92.3 136 191.5 4Z" class="cls-9"/><path id="path28" d="m202.2 382.8-37.7 150.7 92.3-135.9Z" class="cls-10"/><path id="path30" d="m-42.8 358 207.3 175.5 37.7-150.7Z" class="cls-11"/><path id="path32" d="m-42.8 358-51.6 137.9 259 37.7Z" class="cls-12"/><path id="path34" d="M-94.4 495.9-34 598l198.4-64.5Z" class="cls-13"/></g><g id="g110" class="cls-14" clip-path="url(#clip-path-2)"><path id="path38" d="M438.5 152c-1.4 0-2.7-.7-3.3-1.9L377.4 50a4 4 0 0 0-3.4-2H138.3a4 4 0 0 0-3.3 2L75 153.8 19.2 254a3.9 3.9 0 0 0 0 3.8L75 358l60 104c.7 1.2 2 1.9 3.3 1.9H374a4 4 0 0 0 3.4-1.9l57.8-100.1c.7-1.2 2-1.9 3.3-1.9h72c2.3 0 4.3-2 4.3-4.3V156.3c0-2.4-2-4.3-4.3-4.3h-72z" class="cls-15"/><path id="path27674" fill="#e2e2e2" fill-opacity="1" stroke="none" stroke-linecap="butt" stroke-linejoin="miter" stroke-opacity="1" stroke-width="1" d="M72.9 157.6 17.6 256l5.8 13 54.9 89.5 35.8 1.5H461l38.3-9.7 15.5-42.8v-95.1l-4.3-60.4H147.9l-75 5.6"/><path id="path40" d="M510.5 152H78.3a4 4 0 0 0-3.3 1.9l-2.1 3.7-26.5 45.9L17.2 254a3.8 3.8 0 0 0 0 3.8l6.3 11L75 358.1a3.8 3.8 0 0 0 3.3 1.9h432.2a4.3 4.3 0 0 0 4.3-4.3V156.3a4.3 4.3 0 0 0-4.3-4.3Z" class="cls-1"/><path id="path42" d="m88.1 245.5-64.6 23.4-6.3-11a3.8 3.8 0 0 1 0-3.8l29.2-50.6Z" class="cls-16"/><polygon id="polygon44" points="472.2 264.2 514.8 258.1 514.8 307.5 472.2 264.2" class="cls-17"/><path id="path46" d="m472.2 264.2 42.6 43.3v48.2a4.3 4.3 0 0 1-4.3 4.3H461Z" class="cls-18"/><polygon id="polygon48" points="472.2 264.2 461 360 401.5 360 383.4 316.5 472.2 264.2" class="cls-19"/><polygon id="polygon50" points="472.2 264.2 514.8 212.4 514.8 258.1 472.2 264.2" class="cls-20"/><path id="path52" d="M514.8 156.3v56.1l-42.6 51.8-32-112.2h70.3a4.3 4.3 0 0 1 4.3 4.3Z" class="cls-21"/><polygon id="polygon54" points="401.5 360 370.1 360 361.9 348.3 383.4 316.5 401.5 360" class="cls-22"/><polygon id="polygon56" points="472.2 264.2 354.4 214.4 416.4 152 440.1 152 472.2 264.2" class="cls-23"/><path id="path58" d="m354.4 214.4 29 102.1 88.8-52.3Z" class="cls-24"/><polygon id="polygon60" points="370.1 360 361.5 360 361.9 348.3 370.1 360" class="cls-25"/><polygon id="polygon62" points="416.4 152 354.4 214.4 343.2 158.6 367.2 152 416.4 152" class="cls-26"/><path id="path64" d="m354.4 214.4-143 33 150.5 101Z" class="cls-27"/><path id="path66" d="m354.4 214.4 7.5 134 21.5-31.9Z" class="cls-24"/><path id="path68" d="m343.2 158.6-131.7 88.8 143-33Z" class="cls-26"/><polygon id="polygon70" points="211.5 247.4 149.5 360 114.2 360 88.1 245.5 211.5 247.4" class="cls-28"/><path id="path72" d="m148 152-60 93.5-15.2-87.9L75 154a4 4 0 0 1 3.3-1.9H148Z" class="cls-29"/><path id="path74" d="M114.2 360H78.3a3.8 3.8 0 0 1-3.3-2l-51.5-89 64.6-23.5Z" class="cls-28"/><polygon id="polygon76" points="46.4 203.5 72.8 157.6 88.1 245.5" class="cls-30"/><polygon id="polygon78" points="276.8 152 235.5 152 172.4 152 211.5 247.4 343.2 158.6 303.5 152 276.8 152" class="cls-31"/><polygon id="polygon80" points="156.1 152 147.9 152 88.1 245.5 211.5 247.4 172.4 152 156.1 152" class="cls-31"/><polygon id="polygon82" points="333.2 360 356.2 360 361.5 360 361.9 348.3 333.2 360" class="cls-32"/><polygon id="polygon84" points="361.9 348.3 211.5 247.4 238.6 360 276.8 360 333.2 360 361.9 348.3" class="cls-24"/><polygon id="polygon86" points="149.5 360 156.1 360 235.5 360 238.6 360 211.5 247.4 149.5 360" class="cls-33"/><polygon id="polygon88" points="343.6 152 343.2 158.6 367.2 152 356.2 152 343.6 152" class="cls-34"/><polygon id="polygon90" points="303.5 152 343.2 158.6 339.6 152 303.5 152" class="cls-35"/><polygon id="polygon92" points="339.6 152 343.2 158.6 343.6 152 339.6 152" class="cls-29"/><path id="path94" d="M235.2 153.8 177 254.5a3.4 3.4 0 0 0-.4 1.6H136l79.7-138.2a3.1 3.1 0 0 1 1.2 1.2h.1l18 31.5a3.5 3.5 0 0 1 0 3.2Z" class="cls-36"/><path id="path96" d="m235 361.9-18 31.3a3.5 3.5 0 0 1-1.1 1.1L136 256.1h40.6a3 3 0 0 0 .4 1.6.4.4 0 0 0 0 .2l58 100.6a3.4 3.4 0 0 1 0 3.4Z" class="cls-37"/><path id="path98" d="m215.8 118-79.7 138-20 34.7L97 257.6a3 3 0 0 1-.4-1.5 3.4 3.4 0 0 1 .4-1.7l19.3-33.4 58.8-101.7a3.4 3.4 0 0 1 3-1.8h36a3.6 3.6 0 0 1 1.7.4Z" class="cls-38"/><path id="path100" d="M215.8 394.3a3.6 3.6 0 0 1-1.7.5H178a3.4 3.4 0 0 1-3-1.8l-53.7-93-5.3-9.2 20-34.7Z" class="cls-36"/><path id="path102" d="m376.2 256.1-79.8 138.2a3.7 3.7 0 0 1-1.2-1.1v-.1L277 361.7a3.5 3.5 0 0 1 0-3.2l58-100.6a3.4 3.4 0 0 0 .6-1.8H376Z" class="cls-38"/><path id="path104" d="M415.7 256.1a3.4 3.4 0 0 1-.5 1.8L337 393.2a3.4 3.4 0 0 1-3 1.6h-36a3.7 3.7 0 0 1-1.7-.5l79.8-138.2 20-34.6 19 32.9a3.4 3.4 0 0 1 .5 1.7Z" class="cls-36"/><path id="path106" d="M376.2 256.1h-40.6a3.4 3.4 0 0 0-.5-1.7l-58-100.6a3.4 3.4 0 0 1 0-3.4l18.1-31.3a3.7 3.7 0 0 1 1.2-1.2Z" class="cls-36"/><path id="path108" d="m396.2 221.4-20 34.7-79.8-138.2a3.7 3.7 0 0 1 1.7-.4h36a3.4 3.4 0 0 1 3 1.6Z" class="cls-37"/></g></svg>

================
File: docs/public/img/providers/kinde.svg
================
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="48" height="48" rx="8" fill="#F2F5F9"/>
<g clip-path="url(#clip0_2_436)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.5696 29.7649C13.8405 29.7649 13.1783 29.7698 12.5163 29.7581C12.4413 29.7568 12.3523 29.6764 12.2959 29.6101C10.8488 27.9087 9.40498 26.204 7.96051 24.5001C7.91377 24.445 7.86546 24.3913 7.77907 24.2923V29.7485H6V18.0165H7.76104V23.3985C7.85706 23.29 7.90992 23.2356 7.95674 23.1765C9.27247 21.5179 10.589 19.8601 11.8999 18.1977C12.0092 18.0592 12.1187 17.9966 12.3001 18.0002C12.9121 18.0124 13.5245 18.0049 14.2045 18.0049C12.5982 19.9589 11.0234 21.8744 9.44253 23.7975C11.1441 25.778 12.8355 27.7466 14.5696 29.7649Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M32.1128 25.6968C32.1092 25.1537 32.0241 24.7354 31.8475 24.3361C31.1325 22.7194 29.0737 22.3767 27.9363 23.6853C27.1265 24.6171 27.0263 26.1481 27.7076 27.1791C28.4161 28.2511 29.717 28.6104 30.7846 28.0011C31.7083 27.474 32.0734 26.6175 32.1128 25.6968ZM31.9262 22.1661V18.0337H33.5882V29.775C33.2068 29.775 32.8239 29.7793 32.4415 29.7688C32.4007 29.7677 32.3507 29.6858 32.3248 29.6318C32.2215 29.4161 32.1259 29.1966 32.0177 28.9568C31.5198 29.443 30.9386 29.7022 30.2848 29.8197C28.3256 30.1717 26.3958 29.0215 25.8184 27.1108C25.3373 25.5189 25.5075 24.0079 26.5791 22.6842C27.6844 21.3191 29.7041 20.8877 31.1918 21.6722C31.4445 21.8053 31.6695 21.9916 31.9262 22.1661Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M40.3747 24.919C40.3808 23.8517 39.3434 22.9023 38.1661 22.8831C36.9936 22.8639 35.9829 23.7901 35.9568 24.919H40.3747ZM35.9475 26.3361C35.9889 27.1759 36.6852 27.9866 37.5507 28.2025C38.4875 28.4362 39.2927 28.2113 39.9422 27.4762C39.9899 27.4222 40.0674 27.3619 40.132 27.3607C40.6774 27.3516 41.2232 27.3555 41.7979 27.3555C41.5875 27.9185 41.2909 28.3967 40.8887 28.8058C40.1202 29.5874 39.1676 29.8909 38.0928 29.8712C36.0819 29.8343 34.4494 28.3343 34.2059 26.3191C34.0662 25.1636 34.2118 24.066 34.856 23.0826C35.7108 21.7776 36.9397 21.1578 38.4899 21.3231C40.0162 21.4858 41.0548 22.3652 41.6429 23.7656C41.9733 24.5519 42.0991 25.3787 41.9178 26.231C41.9119 26.2585 41.9017 26.2851 41.8864 26.3361H35.9475Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.942 29.7676H23.2748V29.514C23.2743 27.9717 23.2799 26.4294 23.271 24.8872C23.2662 24.0343 22.6667 23.2265 21.8794 22.9738C20.7388 22.6075 19.4945 23.3866 19.2939 24.5969C19.2666 24.7618 19.2567 24.9313 19.2564 25.0987C19.2536 26.5606 19.2547 28.0225 19.2547 29.4843V29.7619H17.5984V21.3918C17.9756 21.3918 18.3521 21.3867 18.7281 21.3984C18.7749 21.3999 18.8336 21.4837 18.8617 21.5416C18.966 21.7561 19.0598 21.9756 19.1651 22.2099C19.9925 21.4264 20.9739 21.206 22.0377 21.3235C23.4176 21.4761 24.5713 22.5731 24.8437 23.9633C24.9066 24.2837 24.9439 24.6144 24.9462 24.9407C24.9567 26.4903 24.9511 28.04 24.9508 29.5895C24.9508 29.6403 24.9459 29.6912 24.942 29.7676Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.999 29.7674H16.6494V21.3976H14.999V29.7674Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.8479 19.0524C16.8465 19.616 16.3774 20.082 15.8161 20.0774C15.2706 20.0731 14.7995 19.6034 14.793 19.0576C14.7863 18.5085 15.2696 18.0209 15.8218 18.0196C16.3805 18.0181 16.8493 18.49 16.8479 19.0524Z" fill="black"/>
</g>
<defs>
<clipPath id="clip0_2_436">
<rect width="36" height="11.8828" fill="white" transform="translate(6 18)"/>
</clipPath>
</defs>
</svg>

================
File: docs/public/img/providers/line.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 377.8 377.8"><path fill="#00C300" fill-rule="evenodd" d="M77.3 0h223.1a77.5 77.5 0 0 1 77.4 77.3v223.1a77.5 77.5 0 0 1-77.4 77.4h-223A77.5 77.5 0 0 1 0 300.4v-223A77.5 77.5 0 0 1 77.3 0z" clip-rule="evenodd"/><path fill="#FFF" fill-rule="evenodd" d="M188.5 62.6c76.6 0 138.6 49.7 138.6 111A94.8 94.8 0 0 1 304 235l-.1.1a119 119 0 0 1-15.1 15c-38.3 35.5-101.4 77.6-109.7 71.1-7.3-5.6 11.9-33.3-10.2-37.9l-4.6-.6C99.3 273.5 50 228.1 50 173.5c0-61.3 62-111 138.6-111z" clip-rule="evenodd"/><path fill="#00C300" fill-rule="evenodd" d="M108.1 209h28c4 0 7.2-3.3 7.2-7.3v-.6c0-4-3.3-7.2-7.2-7.2h-20.2V148c0-4-3.2-7.2-7.2-7.2h-.6c-4 0-7.2 3.2-7.2 7.2v53.6c0 4 3.2 7.3 7.2 7.3zm173.2-33.6v-.7c0-4-3.2-7.2-7.2-7.2H254v-11.4h20c4 0 7.3-3.3 7.3-7.3v-.6c0-4-3.2-7.2-7.2-7.2h-28c-4 0-7.2 3.3-7.2 7.2V202c0 4 3.3 7.2 7.2 7.2h28c4 0 7.2-3.3 7.2-7.2v-.7c0-4-3.2-7.2-7.2-7.2H254v-11.4h20c4 0 7.3-3.3 7.3-7.2zm-53.7 31.4a7.2 7.2 0 0 0 2-5V148c0-4-3.2-7.2-7.2-7.2h-.6c-4 0-7.2 3.2-7.2 7.2v31.5l-26.1-35a7.2 7.2 0 0 0-6.3-3.7h-.6c-4 0-7.2 3.2-7.2 7.2v53.6c0 4 3.2 7.3 7.2 7.3h.6c4 0 7.2-3.3 7.2-7.3v-32l26.3 36 .6.6a6 6 0 0 0 2.8 2.1 6 6 0 0 0 2.7.6h.6a7.2 7.2 0 0 0 3.4-.9 5 5 0 0 0 1.8-1.3zm-71.3 2.2h.6c4 0 7.3-3.3 7.3-7.3v-53.6c0-4-3.3-7.2-7.3-7.2h-.6c-4 0-7.2 3.2-7.2 7.2v53.6c0 4 3.3 7.3 7.2 7.3z" clip-rule="evenodd"/></svg>

================
File: docs/public/img/providers/linkedin.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#0A66C2" d="M218.1 218.1h-38v-59.4c0-14.1-.2-32.4-19.6-32.4-19.8 0-22.8 15.5-22.8 31.4V218h-38V96h36.5v16.7h.5a40 40 0 0 1 36-19.8c38.4 0 45.4 25.3 45.4 58.2v67ZM57 79.3a22 22 0 1 1 0-44 22 22 0 0 1 0 44M76 218H38V96h38v122ZM237 .1H19A18.7 18.7 0 0 0 0 18.4v219A18.7 18.7 0 0 0 18.9 256H237c10.4.1 18.9-8.1 19-18.5v-219A18.7 18.7 0 0 0 237 0"/></svg>

================
File: docs/public/img/providers/logto.svg
================
<svg width="118" height="36" viewBox="0 0 118 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g clip-path="url(#clip0_3163_230)">
    <path fill-rule="evenodd" clip-rule="evenodd"
      d="M0 5.62127C0 4.58692 0 4.06975 0.189869 3.65348C0.357191 3.28664 0.626294 2.97572 0.96511 2.75777C1.34958 2.51044 1.86074 2.43703 2.88305 2.29021L17.463 0.196199C18.7865 0.00612588 19.4482 -0.0889106 19.9624 0.111751C20.4138 0.2879 20.7905 0.61494 21.0287 1.03745C21.3 1.51875 21.3 2.18826 21.3 3.52727L21.3 32.4727C21.3 33.8117 21.3 34.4812 21.0287 34.9626C20.7905 35.3851 20.4138 35.7121 19.9624 35.8882C19.4482 36.0889 18.7865 35.9939 17.463 35.8038L2.88305 33.7098C1.86074 33.563 1.34958 33.4896 0.96511 33.2422C0.626294 33.0243 0.357191 32.7134 0.189869 32.3465C0 31.9302 0 31.4131 0 30.3787L0 5.62127ZM14.7 15.4267C14.7 15.1172 14.7 14.9625 14.7582 14.8402C14.8094 14.7325 14.8916 14.6425 14.9942 14.5817C15.1108 14.5127 15.2649 14.4986 15.5731 14.4706L16.9531 14.3452C17.3162 14.3122 17.4978 14.2957 17.6379 14.3562C17.7611 14.4094 17.8629 14.5024 17.927 14.6202C18 14.7543 18 14.9366 18 15.3012L18 20.6988C18 21.0634 18 21.2457 17.927 21.3798C17.8629 21.4976 17.7611 21.5906 17.6379 21.6438C17.4978 21.7043 17.3162 21.6878 16.9531 21.6548L15.5731 21.5294H15.5731C15.2649 21.5014 15.1108 21.4873 14.9942 21.4183C14.8916 21.3575 14.8094 21.2675 14.7582 21.1598C14.7 21.0375 14.7 20.8828 14.7 20.5733L14.7 15.4267ZM25.44 3H23.4L23.4 33H25.44C26.6161 33 27.2042 33 27.6534 32.7711C28.0485 32.5698 28.3698 32.2485 28.5711 31.8534C28.8 31.4042 28.8 30.8161 28.8 29.64L28.8 6.36C28.8 5.18389 28.8 4.59583 28.5711 4.14662C28.3698 3.75148 28.0485 3.43022 27.6534 3.22889C27.2042 3 26.6161 3 25.44 3Z"
      fill="#191C1D" />
    <path fill-rule="evenodd" clip-rule="evenodd"
      d="M0 5.62127C0 4.58692 0 4.06975 0.189869 3.65348C0.357191 3.28664 0.626294 2.97572 0.96511 2.75777C1.34958 2.51044 1.86074 2.43703 2.88305 2.29021L17.463 0.196199C18.7865 0.00612588 19.4482 -0.0889106 19.9624 0.111751C20.4138 0.2879 20.7905 0.61494 21.0287 1.03745C21.3 1.51875 21.3 2.18826 21.3 3.52727L21.3 32.4727C21.3 33.8117 21.3 34.4812 21.0287 34.9626C20.7905 35.3851 20.4138 35.7121 19.9624 35.8882C19.4482 36.0889 18.7865 35.9939 17.463 35.8038L2.88305 33.7098C1.86074 33.563 1.34958 33.4896 0.96511 33.2422C0.626294 33.0243 0.357191 32.7134 0.189869 32.3465C0 31.9302 0 31.4131 0 30.3787L0 5.62127ZM14.7 15.4267C14.7 15.1172 14.7 14.9625 14.7582 14.8402C14.8094 14.7325 14.8916 14.6425 14.9942 14.5817C15.1108 14.5127 15.2649 14.4986 15.5731 14.4706L16.9531 14.3452C17.3162 14.3122 17.4978 14.2957 17.6379 14.3562C17.7611 14.4094 17.8629 14.5024 17.927 14.6202C18 14.7543 18 14.9366 18 15.3012L18 20.6988C18 21.0634 18 21.2457 17.927 21.3798C17.8629 21.4976 17.7611 21.5906 17.6379 21.6438C17.4978 21.7043 17.3162 21.6878 16.9531 21.6548L15.5731 21.5294H15.5731C15.2649 21.5014 15.1108 21.4873 14.9942 21.4183C14.8916 21.3575 14.8094 21.2675 14.7582 21.1598C14.7 21.0375 14.7 20.8828 14.7 20.5733L14.7 15.4267ZM25.44 3H23.4L23.4 33H25.44C26.6161 33 27.2042 33 27.6534 32.7711C28.0485 32.5698 28.3698 32.2485 28.5711 31.8534C28.8 31.4042 28.8 30.8161 28.8 29.64L28.8 6.36C28.8 5.18389 28.8 4.59583 28.5711 4.14662C28.3698 3.75148 28.0485 3.43022 27.6534 3.22889C27.2042 3 26.6161 3 25.44 3Z"
      fill="url(#paint0_linear_3163_230)" />
  </g>
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M55.0387 26.9999C55.1278 26.9999 55.2 26.9277 55.2 26.8386V24.0105C55.2 23.9214 55.1278 23.8492 55.0387 23.8492H47.3503C47.2612 23.8492 47.189 23.777 47.189 23.6879L47.189 7.96122C47.189 7.87214 47.1168 7.79993 47.0277 7.79993H43.6613C43.5722 7.79993 43.5 7.87214 43.5 7.96122L43.5 26.8386C43.5 26.9277 43.5722 26.9999 43.6613 26.9999H55.0387ZM86.25 27.5605L86.25 12.6112C86.25 12.5221 86.1778 12.4499 86.0887 12.4499L82.851 12.4499C82.7619 12.4499 82.6897 12.5221 82.6897 12.6112V12.8198C82.6897 12.9416 82.5596 13.0199 82.45 12.9669C82.1654 12.8295 81.8739 12.7142 81.5755 12.621C80.956 12.4087 80.387 12.2999 79.8703 12.2999C78.4215 12.2999 77.1565 12.6085 76.0818 13.2325C75.0094 13.855 74.18 14.7218 73.5956 15.8297L73.5951 15.8307L73.5946 15.8318C73.0296 16.9397 72.75 18.0642 72.75 19.5259C72.75 21.0248 73.0294 22.3412 73.594 23.4681H73.5945C74.1596 24.5763 74.9699 25.4443 76.0237 26.0674H76.0248C77.0996 26.6913 78.3645 26.9999 79.8133 26.9999C80.3666 26.9999 80.9361 26.8916 81.5209 26.6781C81.9197 26.5495 82.3093 26.3788 82.6897 26.1665L82.6897 27.5321C82.6897 28.2596 82.3508 29.0427 81.677 29.5381L81.6753 29.5394C81.0094 30.0422 80.1372 30.3099 79.045 30.3289C78.282 30.3101 77.5877 30.1986 76.9609 29.9963L76.9588 29.9956L76.9566 29.9949C76.3234 29.8091 75.6404 29.5294 74.9073 29.1542L74.8865 29.1436C74.8075 29.1032 74.7107 29.1341 74.6698 29.2128L73.538 31.3926C73.5017 31.4624 73.5212 31.5483 73.5841 31.5957L73.7933 31.7534C74.1485 32.0094 74.5696 32.2336 75.0546 32.4271C75.5366 32.6195 76.0284 32.7735 76.5299 32.8891C77.0478 33.023 77.5386 33.1191 78.0019 33.1769L78.0027 33.177L78.2093 33.202C78.6175 33.2518 79.0127 33.2999 79.2649 33.2999C80.8699 33.2999 81.8489 33.0995 82.9013 32.6329C83.9708 32.1671 84.7955 31.5036 85.3666 30.6394C85.9578 29.7738 86.25 28.7448 86.25 27.5605ZM79.8987 23.7032C79.1704 23.7032 78.5406 23.5223 78.0027 23.1653C77.4625 22.7744 76.9866 22.2608 76.7488 21.6912C76.4742 21.0338 76.3673 20.3983 76.3673 19.5259C76.3673 18.6923 76.5065 18.1209 76.7807 17.4825L76.7814 17.4809C77.055 16.8257 77.4535 16.3122 77.9758 15.9345C78.5131 15.5596 79.1515 15.3693 79.8988 15.3693C80.5955 15.3693 81.2232 15.5155 81.7855 15.805L81.7874 15.806C82.0455 15.9347 82.3073 16.1038 82.5727 16.3142C82.6476 16.3736 82.6897 16.4647 82.6897 16.5603L82.6897 22.6398C82.6897 22.7317 82.651 22.8198 82.5803 22.8786C82.3592 23.0625 82.1582 23.1858 81.894 23.312C81.217 23.6354 80.6287 23.7032 79.8987 23.7032ZM63.5601 26.9999L63.5579 26.9999C62.0934 26.9999 60.8189 26.695 59.741 26.0783C58.6653 25.4627 57.8378 24.6054 57.2615 23.5089L57.2609 23.5078C56.6853 22.3934 56.4 21.1106 56.4 19.664C56.4 18.1799 56.6946 16.8863 57.2906 15.789C57.8856 14.6936 58.7219 13.8368 59.7971 13.2216L59.7983 13.2209C60.8939 12.605 62.1677 12.2999 63.614 12.2999C65.0782 12.2999 66.3436 12.6047 67.4034 13.2219C68.4784 13.8371 69.3145 14.6937 69.9094 15.789C70.5052 16.886 70.8 18.1702 70.8 19.6359C70.8 21.0838 70.4955 22.3677 69.8814 23.4826C69.2867 24.5964 68.4505 25.4628 67.3748 26.0783L67.3738 26.0788L67.3728 26.0794C66.296 26.6762 65.0232 26.9809 63.5601 26.9999ZM66.745 21.8422L66.7458 21.8404C67.052 21.1912 67.2068 20.4574 67.2068 19.6359C67.2068 18.7936 67.0606 18.0493 66.7722 17.3997C66.4846 16.7515 66.0739 16.253 65.5416 15.8976L65.54 15.8965L65.5384 15.8954C65.0094 15.5246 64.3707 15.3357 63.614 15.3357C62.8968 15.3357 62.2659 15.5236 61.7156 15.8969C61.1626 16.272 60.733 16.7814 60.427 17.4296C60.1386 18.0801 59.9836 18.8152 59.9651 19.6377C59.9653 20.4792 60.1115 21.2229 60.3997 21.8721C60.6867 22.5188 61.1061 23.0272 61.6579 23.4019C62.2075 23.7565 62.8481 23.9361 63.586 23.9361C64.3426 23.9361 64.9813 23.7471 65.5103 23.3763C66.0447 23.0017 66.4562 22.4927 66.7442 21.844L66.745 21.8422ZM94.1988 15.3813C94.1988 15.2922 94.271 15.22 94.3601 15.22H97.0802C97.1693 15.22 97.2415 15.1478 97.2415 15.0587V12.6276C97.2415 12.5386 97.1693 12.4663 97.0802 12.4663H94.3601C94.271 12.4663 94.1988 12.3941 94.1988 12.3051V7.96122C94.1988 7.87214 94.1266 7.79993 94.0375 7.79993H90.8729C90.7838 7.79993 90.7116 7.87214 90.7116 7.96122V12.3051C90.7116 12.3941 90.6394 12.4663 90.5503 12.4663L88.5132 12.4663C88.4234 12.4663 88.3509 12.5397 88.3519 12.6295L88.3802 15.0606C88.3813 15.1489 88.4532 15.22 88.5415 15.22L90.5503 15.22C90.6394 15.22 90.7116 15.2922 90.7116 15.3813L90.7116 22.1743C90.7116 23.1996 90.9129 24.0817 91.3241 24.8131L91.3255 24.8155L91.3269 24.8178C91.7559 25.5266 92.3422 26.0689 93.0827 26.4426C93.824 26.8168 94.7137 26.9999 95.7453 26.9999C96.0412 26.9999 96.3538 26.9602 96.6828 26.8821C97.0269 26.8049 97.3442 26.708 97.6342 26.591C97.948 26.4719 98.5359 26.153 98.7137 26.0334L98.7213 26.0283C98.7932 25.9799 98.814 25.8834 98.7685 25.8097L97.4464 23.6692C97.4046 23.6016 97.3199 23.5744 97.2466 23.6052L97.2415 23.6074C97.0243 23.6988 96.8969 23.7421 96.6635 23.7965C96.4319 23.8504 96.2009 23.8773 95.9703 23.8773C95.355 23.8773 94.9245 23.6759 94.6448 23.2949C94.3516 22.8764 94.1988 22.3366 94.1988 21.6633L94.1988 15.3813ZM106.46 26.9999L106.458 26.9999C104.993 26.9999 103.719 26.695 102.641 26.0783C101.565 25.4627 100.738 24.6054 100.161 23.5089L100.161 23.5078C99.5853 22.3934 99.3 21.1106 99.3 19.664C99.3 18.1799 99.5946 16.8863 100.191 15.789C100.786 14.6936 101.622 13.8368 102.697 13.2216L102.698 13.2209C103.794 12.605 105.068 12.2999 106.514 12.2999C107.978 12.2999 109.244 12.6047 110.303 13.2219C111.378 13.8371 112.214 14.6937 112.809 15.789C113.405 16.886 113.7 18.1702 113.7 19.6359C113.7 21.0838 113.395 22.3677 112.781 23.4826C112.187 24.5964 111.351 25.4628 110.275 26.0783L110.274 26.0788L110.273 26.0794C109.196 26.6762 107.923 26.9809 106.46 26.9999ZM109.645 21.8422L109.646 21.8404C109.952 21.1912 110.107 20.4574 110.107 19.6359C110.107 18.7936 109.961 18.0493 109.672 17.3997C109.385 16.7515 108.974 16.253 108.442 15.8976L108.44 15.8965L108.438 15.8954C107.909 15.5246 107.271 15.3357 106.514 15.3357C105.797 15.3357 105.166 15.5236 104.616 15.8969C104.063 16.272 103.633 16.7814 103.327 17.4296C103.039 18.0801 102.884 18.8152 102.865 19.6377C102.865 20.4792 103.012 21.2229 103.3 21.8721C103.587 22.5188 104.006 23.0272 104.558 23.4019C105.107 23.7565 105.748 23.9361 106.486 23.9361C107.243 23.9361 107.881 23.7471 108.41 23.3763C108.945 23.0017 109.356 22.4927 109.644 21.844L109.645 21.8422Z"
    fill="white" />
  <defs>
    <linearGradient id="paint0_linear_3163_230" x1="-8.91429" y1="24.8965" x2="26.9632" y2="10.8165"
      gradientUnits="userSpaceOnUse">
      <stop stop-color="#4B2EFB" />
      <stop offset="1" stop-color="#E65FFC" />
    </linearGradient>
    <clipPath id="clip0_3163_230">
      <rect width="28.8" height="36" fill="white" />
    </clipPath>
  </defs>
</svg>

================
File: docs/public/img/providers/loops.svg
================
<svg viewBox="0 0 98 85" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M55.42 1.18797e-06H42.26C31.0543 0.0132386 20.3115 4.47093 12.3888 12.3955C4.46609 20.3201 0.0105861 31.0643 0 42.27C0.0132325 53.474 4.46991 64.2153 12.3923 72.1377C20.3148 80.0601 31.056 84.5166 42.26 84.5298H55.47C66.6757 84.5192 77.4197 80.0638 85.3442 72.1411C93.2688 64.2184 97.7268 53.4757 97.74 42.27C97.7294 31.0539 93.2658 20.3008 85.3301 12.3745C77.3944 4.44821 66.6362 -0.00265476 55.42 1.18797e-06ZM5.22998 42.27C5.22998 32.457 9.12817 23.0458 16.067 16.1069C23.0059 9.16809 32.417 5.27002 42.23 5.27002C44.2972 5.26926 46.361 5.43961 48.4 5.77979C57.0318 7.20742 64.8734 11.6613 70.5206 18.3438C76.1678 25.0262 79.2517 33.501 79.22 42.25C79.2097 47.8682 77.214 53.3016 73.5853 57.5908C69.9567 61.88 64.9288 64.7489 59.39 65.6899C63.0796 62.9963 66.0805 59.4688 68.1484 55.3955C70.2164 51.3222 71.2929 46.8182 71.29 42.25C71.3013 35.8051 69.1652 29.5401 65.2194 24.4443C61.2735 19.3486 55.7426 15.7122 49.5 14.1099C47.1255 13.4962 44.6825 13.1871 42.23 13.1899C34.5356 13.2137 27.1641 16.2851 21.729 21.7314C16.2939 27.1778 13.2379 34.5556 13.23 42.25C13.2105 49.3902 15.0052 56.4181 18.4458 62.6748C21.8864 68.9315 26.86 74.2119 32.9 78.02C24.9949 75.9442 17.9979 71.3127 12.9988 64.8467C7.99962 58.3807 5.27879 50.4432 5.26001 42.27H5.22998ZM48.8201 19.4399C53.7721 20.8661 58.1255 23.8649 61.223 27.9834C64.3205 32.1019 65.9937 37.1167 65.99 42.27C65.9916 47.4216 64.3174 52.4338 61.2201 56.5503C58.1228 60.6668 53.7705 63.6641 48.8201 65.0898C43.8697 63.6641 39.5172 60.6668 36.4199 56.5503C33.3226 52.4338 31.6485 47.4216 31.65 42.27C31.6463 37.1167 33.3195 32.1019 36.417 27.9834C39.5145 23.8649 43.868 20.8661 48.8201 19.4399ZM55.42 79.25H55.27C53.2597 79.239 51.2534 79.0682 49.27 78.7397C40.852 77.3437 33.18 73.0675 27.5658 66.6416C21.9515 60.2157 18.7435 52.039 18.49 43.5098C18.49 43.0898 18.49 42.68 18.49 42.27C18.4963 36.6507 20.4906 31.2148 24.1199 26.9248C27.7492 22.6348 32.7795 19.7674 38.3201 18.8301C34.6287 21.5227 31.6258 25.0492 29.556 29.1226C27.4863 33.196 26.4083 37.701 26.41 42.27C26.401 48.7132 28.5379 54.9756 32.4836 60.0693C36.4294 65.1631 41.9591 68.798 48.2 70.3999C50.5735 71.0185 53.0171 71.3276 55.47 71.3198C63.173 71.3119 70.5584 68.2491 76.0062 62.8032C81.454 57.3573 84.5194 49.973 84.53 42.27C84.5523 35.1292 82.7588 28.0999 79.318 21.8428C75.8772 15.5856 70.902 10.306 64.86 6.5C72.7634 8.57837 79.7564 13.2146 84.7476 19.6855C89.7387 26.1564 92.447 34.0979 92.45 42.27C92.4473 47.1298 91.4875 51.9415 89.625 56.4302C87.7625 60.9189 85.034 64.9966 81.5953 68.4307C78.1567 71.8647 74.0751 74.5874 69.5839 76.4438C65.0927 78.3003 60.2798 79.2539 55.42 79.25Z" fill="#FC5200"/>
</svg>

================
File: docs/public/img/providers/mailchimp.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40"><path fill="#000000" fill-rule="evenodd" d="M37.03 25.32c.57 0 1.47.66 1.47 2.26 0 1.58-.65 3.38-.8 3.77-2.38 5.68-8 8.85-14.7 8.65-6.24-.19-11.57-3.5-13.9-8.9a6.13 6.13 0 0 1-3.97-1.6 5.9 5.9 0 0 1-2.02-3.78 6.5 6.5 0 0 1 .37-2.99l-1.31-1.11c-6-5.1 12.75-26.04 18.73-20.78l2.04 2.01 1.12-.47c5.26-2.2 9.52-1.14 9.53 2.36 0 1.81-1.15 3.93-3 5.85a6 6 0 0 1 1.52 2.7c.25.83.3 1.67.32 2.2l.07 2.5.74.2c1.42.4 2.42.93 2.91 1.45.5.52.73 1.02.82 1.6a3.1 3.1 0 0 1-.55 2.26s.16.35.32.85l.28.97zm-14.56 2.63zm14.63.16c.15-.95-.06-1.31-.35-1.49-.3-.19-.66-.12-.66-.12s-.17-1.13-.63-2.16a13.83 13.83 0 0 1-4.53 2.26c-1.56.45-3.68.8-6.04.65-1.31-.1-2.18-.49-2.5.58 2.99 1.1 6.16.63 6.16.63.06 0 .11.04.12.1 0 .05-.02.1-.07.12 0 0-2.43 1.13-6.3-.07.1.91.99 1.32 1.41 1.49.53.2 1.12.3 1.12.3 4.79.83 9.27-1.92 10.28-2.62.07-.05.12 0 .06.1l-.1.13c-1.23 1.6-4.55 3.46-8.87 3.46-1.88 0-3.76-.67-4.45-1.7-1.08-1.58-.06-3.9 1.73-3.66l.78.09a16.3 16.3 0 0 0 8.13-1.31c2.44-1.14 3.36-2.4 3.22-3.4a1.46 1.46 0 0 0-.42-.83 5.25 5.25 0 0 0-2.3-1.1c-.39-.1-.65-.18-.93-.27-.5-.17-.76-.3-.81-1.25l-.13-2.47c-.04-1.05-.17-2.48-1.05-3.07a1.48 1.48 0 0 0-.76-.25c-.26 0-.4.04-.45.05-.5.08-.8.35-1.18.67A4.04 4.04 0 0 1 24.51 14c-.62-.03-1.28-.13-2.03-.17l-.44-.03c-1.73-.08-3.6 1.42-3.9 3.56-.44 2.98 1.7 4.52 2.33 5.43.08.1.17.26.17.4 0 .17-.11.31-.22.43a7.66 7.66 0 0 0-1.36 8.03c1.57 3.68 6.43 5.4 11.18 3.84.63-.21 1.23-.47 1.8-.77 1.07-.52 2-1.24 2.76-2.07a8.27 8.27 0 0 0 2.3-4.54zm-7.9-9.2a3.23 3.23 0 0 1-.52-1.28c-.2-.96-.18-1.65.37-1.74.56-.09.82.49 1.02 1.44.14.64.11 1.23-.04 1.57a3.2 3.2 0 0 0-.82 0zm-4.74.75c-.4-.18-.91-.37-1.53-.34-.88.06-1.65.45-1.87.42-.09-.01-.13-.05-.14-.1-.04-.17.22-.44.48-.63.8-.58 1.84-.71 2.72-.33.42.18.82.5 1.02.83.1.15.11.27.05.33-.1.1-.34-.01-.73-.18zm-.8.45c.71-.08 1.23.25 1.35.45.05.08.03.14.02.16-.06.1-.18.08-.44.05a3.27 3.27 0 0 0-1.66.17s-.26.1-.38.1a.12.12 0 0 1-.12-.12c0-.1.1-.26.25-.4.18-.16.46-.33.98-.4zm3.94 1.68c-.35-.17-.53-.52-.4-.78.12-.26.5-.32.86-.15.35.17.53.52.4.78-.12.25-.5.32-.86.15zm2.25-1.98c.29 0 .51.33.5.72 0 .4-.23.7-.52.7-.28 0-.5-.32-.5-.72 0-.39.24-.7.52-.7zm-14.77-8.58c-.06.06.02.15.09.1A15.1 15.1 0 0 1 27.1 8.94c.07.02.12-.11.05-.15-1-.57-2.54-.95-3.63-.96-.06 0-.09-.06-.05-.1.19-.26.44-.51.68-.7.05-.04.02-.12-.05-.12-1.55.1-3.32.84-4.34 1.54-.05.04-.12 0-.1-.07.07-.38.32-.89.45-1.13.04-.05-.03-.11-.08-.08a17.67 17.67 0 0 0-4.95 4.06zm-7.72 8.2c1.71-4.61 4.57-8.87 8.35-11.8 2.81-2.35 5.84-4.04 5.84-4.04s-1.63-1.9-2.12-2.04C16.4.73 9.85 5.26 5.67 11.25c-1.69 2.43-4.1 6.73-2.95 8.94.14.27.95.97 1.38 1.34a5.15 5.15 0 0 1 3.26-2.1zm2.26 10.14c2.19-.37 2.76-2.76 2.4-5.1-.4-2.66-2.2-3.6-3.4-3.66-.34-.02-.65.01-.9.06-2.17.44-3.39 2.29-3.15 4.7.22 2.16 2.4 4 4.43 4.05.2 0 .41-.01.62-.05zm.83-2.72c.1-.03.22-.06.3.03.02.03.06.1.01.21-.08.19-.4.44-.85.43-.47-.04-1-.38-1.06-1.23a3 3 0 0 1 .22-1.2 1.12 1.12 0 0 0-1.3-1.52c-.3.07-.54.24-.7.5a2.64 2.64 0 0 0-.3.7c-.1.27-.25.35-.36.33-.05 0-.12-.04-.17-.16-.12-.34-.02-1.29.61-1.98a1.9 1.9 0 0 1 1.63-.6c.63.09 1.16.47 1.48 1.09.43.82.05 1.68-.18 2.2l-.06.15c-.15.34-.16.64-.03.84.1.15.28.24.49.24.1 0 .19-.02.27-.03z"/></svg>

================
File: docs/public/img/providers/mailgun.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="800" viewBox="-0.5 0 257 257" preserveAspectRatio="xMidYMid" xmlns:v="https://vecta.io/nano"><path d="M128.418 80.526c-26.511 0-48.885 21.475-48.885 48.728-.118 12.957 4.994 25.417 14.188 34.579s21.696 14.257 34.697 14.139c26.511 0 48.875-21.475 48.875-48.718 0-27.253-22.364-48.728-48.875-48.728h0zm-76.221 47.896c0-41.286 33.969-75.138 75.396-75.138 41.417 0 75.385 33.853 75.385 75.138 0 2.478 0 5.788-.825 8.265-.835 7.422 4.972 13.2 12.43 13.2 12.43 0 14.081-15.678 14.081-21.465 0-55.328-45.574-100.746-101.071-100.746-55.518 0-101.071 45.418-101.071 100.746 0 55.338 45.553 100.746 101.071 100.746 29.822 0 56.333-12.388 74.56-33.03l20.703 17.343c-22.364 26.43-57.158 42.951-94.448 42.951-34.097.105-66.827-13.35-90.932-37.383S-.118 162.392.001 128.411C.001 58.228 57.159.432 128.418.432 198.832.432 256 58.238 256 128.432c0 28.075-13.255 51.206-40.591 51.206-11.605 0-19.053-5.788-23.199-11.565-13.255 21.475-37.29 35.508-64.626 35.508-20.017.068-39.234-7.827-53.388-21.933s-22.076-33.257-22.008-53.206l.01-.02zm76.211-22.298c12.43 0 22.374 9.91 22.374 22.298s-9.944 22.298-22.364 22.298c-5.941.024-11.647-2.317-15.848-6.504a22.17 22.17 0 0 1-6.526-15.794c0-12.388 9.944-22.298 22.374-22.298h-.01z" fill="#c02428"/></svg>

================
File: docs/public/img/providers/mailru.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32"><defs><path id="a" d="M82.26 23.48h-3v-1.1a6.64 6.64 0 0 1-4.46 1.61 7.72 7.72 0 1 1 0-15.42c1.78 0 3.3.6 4.46 1.62v-1.1h3v14.39Zm-38.1 0h-3V9.08h3v.8a5.23 5.23 0 0 1 3.47-1.31c2 0 3.8.9 4.98 2.33a6.47 6.47 0 0 1 11.46 4.14v8.44h-3v-8.44a3.48 3.48 0 0 0-6.96 0v8.44h-3v-8.44a3.48 3.48 0 0 0-6.95 0v8.44Zm41.69 0h3V9.08h-3v14.4Zm6.59 0h3V2.9h-3v20.57ZM74.8 11.53a4.7 4.7 0 0 1 4.7 4.75 4.7 4.7 0 0 1-4.7 4.76 4.76 4.76 0 1 1 0-9.51ZM87.35 2.4a2.06 2.06 0 1 1 0 4.12 2.06 2.06 0 0 1 0-4.12Z"/></defs><g fill="none" fill-rule="evenodd"><path fill="#FF9E00" d="M16.08 0c-8.82 0-16 7.18-16 16A16.02 16.02 0 0 0 25.1 29.22L23 26.78A12.82 12.82 0 0 1 3.27 16c0-7.06 5.75-12.81 12.81-12.81A12.82 12.82 0 0 1 28.6 18.75c-.4 1.69-1.58 2.2-2.48 2.14-.9-.07-1.95-.7-1.96-2.27V16a8.08 8.08 0 0 0-16.13 0 8.08 8.08 0 0 0 13.82 5.64 5.15 5.15 0 0 0 4.44 2.45c1.16 0 2.29-.38 3.22-1.1a5.97 5.97 0 0 0 2.24-3.7A16.02 16.02 0 0 0 16.08 0Zm-4.87 16a4.88 4.88 0 1 1 9.76.01 4.88 4.88 0 0 1-9.76-.01Z"/><use xlink:href="#a" fill="#FFFFFF"/></g></svg>

================
File: docs/public/img/providers/mastodon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" viewBox="0 0 75 79"><path fill="url(#a)" d="M73.8 17.5A20.1 20.1 0 0 0 56.5 1c-1.5-.2-7-1-20-1h-.1C23.4 0 20.6.8 19 1A21.5 21.5 0 0 0 1 17a47 47 0 0 0-.9 13c.2 6.2.3 12.3.8 18.5.4 4 1 8.1 2 12 1.8 7.4 9.1 13.6 16.2 16a43.4 43.4 0 0 0 26.3.6c1.9-.6 4.1-1.3 5.8-2.5a.2.2 0 0 0 0-.1v-6a.2.2 0 0 0-.2-.1 66 66 0 0 1-15.3 1.8c-9 0-11.4-4.3-12-6a18.6 18.6 0 0 1-1-4.9.2.2 0 0 1 .1 0c5 1.2 10 1.8 15.2 1.8h3.6c5.1-.2 10.5-.5 15.6-1.4l.3-.1c8-1.5 15.5-6.3 16.3-18.5l.1-5.5c0-1.6.6-12 0-18.2Z"/><path fill="white" d="M61.2 27v21.1H53V27.6c0-4.3-1.8-6.5-5.5-6.5-4 0-6 2.6-6 7.8V40h-8.3V28.9c0-5.2-2-7.8-6-7.8-3.6 0-5.5 2.2-5.5 6.5v20.5h-8.3v-21c0-4.4 1-7.8 3.3-10.3 2.3-2.6 5.2-3.9 9-3.9 4.2 0 7.4 1.7 9.6 5l2 3.4 2.2-3.4c2.1-3.3 5.3-5 9.6-5 3.7 0 6.7 1.3 9 3.9 2.2 2.5 3.3 6 3.2 10.2Z"/><defs><linearGradient id="a" x1="37.1" x2="37.1" y1="0" y2="79" gradientUnits="userSpaceOnUse"><stop stop-color="#6364FF"/><stop offset="1" stop-color="#563ACC"/></linearGradient></defs></svg>

================
File: docs/public/img/providers/mattermost.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#0058CC" d="M6.8 87A128 128 0 0 1 131.4 0L114 20.7a91.8 91.8 0 0 0-71.4 60.5c-16.4 48.4 11 101.3 61.3 118.3 50.2 17 104.2-8.4 120.5-56.7a91.8 91.8 0 0 0-19.7-91.2l-1.4-27.2A128 128 0 1 1 6.8 87Zm158.4-75a3 3 0 0 1 3.7 1.2h.1v.2l.5 1.2.2 5v6.2l.5 19 .7 21.8 1 38v.2c0 2.2-.5 18-11.8 29.1a35 35 0 0 1-36.6 7.5 35 35 0 0 1-24.6-28.2 43.2 43.2 0 0 1 7.8-29.5l.2-.3.5-.6 23.8-29.6 13.9-17L157 21.6l3.5-4.6.4-.5 1.7-2.1.3-.4 1-1.2 1-.6.2-.2Z"/></svg>

================
File: docs/public/img/providers/medium.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 -55 256 256"><path fill="#000000" d="M72.2 0a72.4 72.4 0 0 1 72.2 72.7 72.4 72.4 0 0 1-72.2 72.7A72.5 72.5 0 0 1 0 72.7 72.5 72.5 0 0 1 72.2 0Zm115.3 4.3c20 0 36.1 30.6 36.1 68.4 0 37.8-16.2 68.4-36.1 68.4-20 0-36.1-30.6-36.1-68.4 0-37.8 16.2-68.4 36.1-68.4Zm55.8 7c7 0 12.7 27.5 12.7 61.4 0 33.8-5.7 61.3-12.7 61.3-7 0-12.7-27.4-12.7-61.3s5.7-61.3 12.7-61.3Z"/></svg>

================
File: docs/public/img/providers/microsoft-entra-id.svg
================
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 18 18"><path fill="#225086" d="M3.8 14.03a3.1 3.1 0 0 0 3.4.02L9 12.93V17c-.29 0-.57-.08-.82-.23L3.8 14.03Z"/><path fill="#6df" d="M7.85 1.5.35 9.98c-.58.65-.43 1.64.33 2.1l3.12 1.96a3.1 3.1 0 0 0 3.4.02L9 12.94 4.64 10.2 9 5.28V1c-.42 0-.85.17-1.15.5Z"/><polygon fill="#cbf8ff" points="4.64 10.2 4.69 10.23 9 12.93 9 12.93 9 12.93 9 5.28 9 5.28 4.64 10.2"/><path fill="#074793" d="M17.32 12.08c.76-.47.9-1.46.33-2.11l-4.92-5.55a3.1 3.1 0 0 0-3.62.73l-.1.12 4.36 4.93L9 12.93V17c.29 0 .57-.08.82-.24l7.5-4.68Z"/><path fill="#0294e4" d="M9 1v4.28l.11-.13a3.05 3.05 0 0 1 3.62-.73L10.15 1.5C9.85 1.17 9.42 1 9 1Z"/><polygon fill="#96bcc2" points="13.37 10.2 13.37 10.2 13.37 10.2 9 5.28 9 12.93 13.37 10.2"/></svg>

================
File: docs/public/img/providers/naver.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="圖層_1" x="0" y="0" version="1.1" viewBox="0 0 521.1 100"><style>.st0{fill:#03cf5d}</style><path d="m150 0-39.2 100H144l4.8-13.2h37.5l4.8 13.2h33.3L185.3 0H150zm6.5 62.7 11.1-31.2 11.2 31.2h-22.3z" class="st0"/><polygon points="363.2 62 408.8 62 408.8 38 363.2 38 363.2 24.5 409.3 24.5 409.3 0 331.4 0 331.4 100 410.3 100 410.3 75.5 363.2 75.5" class="st0"/><polygon points="264.2 65.8 240.7 0 207.4 0 246.6 100 281.9 100 321.1 0 287.7 0" class="st0"/><polygon points="68.1 53.5 30.9 0 0 0 0 100 32.4 100 32.4 46.5 69.6 100 100.5 100 100.5 0 68.1 0" class="st0"/><path d="m495.8 65.7 3-1.3c11.7-4.8 17.6-15.4 17.6-28.7 0-12.7-4.6-22-13.7-27.8A62.4 62.4 0 0 0 468.2 0H426v100h31.4V72h11.2l19.1 28h33.4l-25.3-34.3zM474 46.6h-17V25.5h17a10.5 10.5 0 0 1 0 21z" class="st0"/></svg>

================
File: docs/public/img/providers/netlify.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 226"><polygon fill="#05BDBA" points="69.2 188.1 66.8 188.1 54.7 176 54.7 173.6 73.1 155.2 85.9 155.2 87.6 156.9 87.6 169.6"/><polygon fill="#05BDBA" points="54.7 51.6 54.7 49.2 66.8 37.1 69.2 37.1 87.6 55.6 87.6 68.4 85.9 70.1 73.1 70.1"/><path fill="#014847" d="M161 149.2h-17.6l-1.5-1.5v-41c0-7.4-2.9-13-11.7-13.2-4.5-.1-9.7 0-15.3.2l-.8.8v53.2l-1.5 1.5H95.1l-1.5-1.5V77.5l1.5-1.4h39.5a27.8 27.8 0 0 1 27.8 27.8v43.8l-1.5 1.5Z"/><polygon fill="#05BDBA" points="71.7 122.9 1.5 122.9 0 121.4 0 103.8 1.5 102.4 71.7 102.4 73.1 103.8 73.1 121.4"/><polygon fill="#05BDBA" points="254.5 122.9 184.3 122.9 182.9 121.4 182.9 103.8 184.3 102.4 254.5 102.4 256 103.8 256 121.4"/><polygon fill="#05BDBA" points="117.9 54.1 117.9 1.5 119.3 0 136.9 0 138.4 1.5 138.4 54.1 136.9 55.6 119.3 55.6"/><polygon fill="#05BDBA" points="117.9 223.8 117.9 171.1 119.3 169.7 136.9 169.7 138.4 171.1 138.4 223.8 136.9 225.3 119.3 225.3"/></svg>

================
File: docs/public/img/providers/netsuite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 199.4 192.2"><path fill="#b1c2d2" d="M132 10h58l.4 129.2h-39.2V46H132z"/><path fill="#014372" d="M124 107V0H0v45.6h74.5z"/><path fill="#b1c2d2" d="M67.4 182.2h-58L9 53h39.2v93.2h19.2z"/><path fill="#014372" d="M75.4 85.2v107h124v-45.7h-74.5z"/></svg>

================
File: docs/public/img/providers/nextcloud.svg
================
<svg width="256" height="128" version="1.1" viewBox="0 0 256 128" xmlns="http://www.w3.org/2000/svg"><path d="m128 7c-25.871 0-47.817 17.485-54.713 41.209-5.9795-12.461-18.642-21.209-33.287-21.209-20.304 0-37 16.696-37 37s16.696 37 37 37c14.645 0 27.308-8.7481 33.287-21.209 6.8957 23.724 28.842 41.209 54.713 41.209s47.817-17.485 54.713-41.209c5.9795 12.461 18.642 21.209 33.287 21.209 20.304 0 37-16.696 37-37s-16.696-37-37-37c-14.645 0-27.308 8.7481-33.287 21.209-6.8957-23.724-28.842-41.209-54.713-41.209zm0 22c19.46 0 35 15.54 35 35s-15.54 35-35 35-35-15.54-35-35 15.54-35 35-35zm-88 20c8.4146 0 15 6.5854 15 15s-6.5854 15-15 15-15-6.5854-15-15 6.5854-15 15-15zm176 0c8.4146 0 15 6.5854 15 15s-6.5854 15-15 15-15-6.5854-15-15 6.5854-15 15-15z" color="#000000" fill="#0082C9" style="-inkscape-stroke:none"/></svg>

================
File: docs/public/img/providers/nodemailer.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" image-rendering="optimizeQuality" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" viewBox="0 0 200 136"><path fill="#22b572" d="M-.5-.5h1l80 93v2h-81v-95Z"/><path fill="#28aae1" d="M80.5-.5h1l59 68c.2 1.4.7 2.8 1.5 4 7.1 7.3 13.6 15 19.5 23h-81v-95Z"/><path fill="#0e9ccd" d="M198.5-.5h1v95h-38c-5.9-8-12.4-15.7-19.5-23a9.7 9.7 0 0 1-1.5-4c19.7-22.4 39-45 58-68Z"/></svg>

================
File: docs/public/img/providers/notion.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 268"><path fill="#FFFFFF" d="M16 11.5 164 .6c18.3-1.6 23-.5 34.4 7.8l47.2 33.3c7.8 5.7 10.4 7.3 10.4 13.5v182.5c0 11.5-4.2 18.2-18.7 19.3L65.4 267.4c-10.9.5-16-1-21.8-8.3L8.8 213.8C2.6 205.5 0 199.3 0 192V29.7c0-9.3 4.2-17.1 16-18.2Z"/><path fill="#000000" d="m164 .6-148 11c-11.8 1-16 8.8-16 18.1V192c0 7.3 2.6 13.5 8.8 21.8l34.8 45.3c5.7 7.2 11 8.8 21.8 8.3L237.3 257c14.5-1 18.7-7.8 18.7-19.3V55.2c0-5.9-2.3-7.6-9.2-12.7l-1.2-.8-47.2-33.3C186.9.1 182.3-1 164 .6ZM69.4 52.2c-14 1-17.2 1.2-25.2-5.3L24 30.8c-2-2.1-1-4.7 4.1-5.2l142.3-10.4c12-1 18.2 3.1 22.9 6.7l24.4 17.7c1 .5 3.6 3.7.5 3.7L71 52l-1.8.1ZM53 236.2v-155c0-6.7 2-9.9 8.3-10.4L230 61c5.7-.5 8.3 3.2 8.3 10v153.8c0 6.8-1 12.5-10.4 13l-161.4 9.4c-9.4.5-13.5-2.6-13.5-11ZM212.4 89.5c1 4.7 0 9.4-4.7 10l-7.8 1.5v114.4c-6.7 3.6-13 5.7-18.2 5.7-8.3 0-10.4-2.6-16.6-10.4l-50.9-80V208l16.1 3.6s0 9.4-13 9.4l-35.8 2c-1-2 0-7.2 3.7-8.2l9.3-2.6V109.8l-13-1c-1-4.7 1.6-11.5 8.8-12l38.5-2.6 53 81.1v-71.7l-13.6-1.6c-1-5.7 3.1-9.9 8.3-10.4l35.9-2Z"/></svg>

================
File: docs/public/img/providers/okta.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#000000" d="m140.8 1.8-5.2 64.8a66.1 66.1 0 0 0-17 .3l-3-31.4c0-1 .8-1.9 1.8-1.9h5.3l-2.6-31.8c0-1 .7-1.8 1.7-1.8h17.4c1 0 1.8.9 1.6 1.8ZM96.8 5c-.2-1-1.2-1.5-2.1-1.2l-16.4 6c-1 .4-1.4 1.4-1 2.3l13.4 29-5 1.9c-1 .3-1.4 1.4-1 2.2l13.6 28.5a61 61 0 0 1 15.9-6L96.9 5Zm-40 18 37.6 53a61.7 61.7 0 0 0-12.8 11.2L59 65c-.7-.7-.6-1.9 0-2.5l4.2-3.4-22.4-22.7c-.7-.7-.6-1.8.1-2.5l13.3-11.1c.8-.7 1.9-.5 2.5.2ZM25 53.8c-.7-.6-1.9-.3-2.4.5L14 69.4c-.5.9-.1 2 .7 2.4l29 13.6-2.8 4.6c-.5.9-.1 2 .8 2.4l28.8 13.1c2-5.3 4.8-10.3 8.2-14.8l-53.6-37Zm-21 41c.1-1 1.1-1.6 2-1.4l63 16.4c-1.6 5.3-2.6 11-2.7 16.8L34.7 124c-1 0-1.7-1-1.5-2l1-5.2-31.9-3c-1 0-1.6-1-1.5-2l3-17.2v.1Zm-2.4 42.4c-1 .1-1.6 1-1.5 2l3 17.2c.2 1 1.2 1.5 2.1 1.3l31-8 .9 5.3c0 1 1 1.5 2 1.3l30.5-8.4c-1.8-5.3-3-10.9-3.2-16.6l-64.9 6h.1Zm10.1 45.1c-.5-.8-.1-1.9.7-2.3l58.7-28a60.6 60.6 0 0 0 8.8 14.6L54 185c-.8.6-2 .4-2.4-.5l-2.7-4.7L22.7 198c-.8.5-1.9.3-2.4-.6l-8.8-15h.1Zm71.2-12.2-45.7 46.3c-.7.7-.6 1.8.1 2.5L50.6 230c.8.7 1.9.5 2.4-.2l18.5-26 4.2 3.4c.7.7 1.9.5 2.5-.3l17.9-26A64 64 0 0 1 82.9 170Zm-9 74.3c-1-.3-1.3-1.4-1-2.3L100 183c5 2.5 10.4 4.4 16 5.5l-8 30.6c-.2 1-1.2 1.5-2.2 1.1l-5-1.8-8.5 30.8c-.3.9-1.3 1.5-2.2 1.1l-16.4-6 .1.1Zm46.7-55.1-5.3 64.9c0 1 .7 1.8 1.7 1.8h17.4c1 0 1.8-.9 1.6-1.8l-2.5-31.8h5.3c1 0 1.8-.9 1.7-1.9l-3-31.4a58.4 58.4 0 0 1-17 .2Zm62.8-175.6c.4-.9 0-1.9-1-2.3l-16.3-6c-1-.3-2 .3-2.2 1.2l-8.5 30.8-5-1.8c-1-.4-2 .2-2.3 1l-8 30.7c5.8 1.1 11 3 16 5.5l27.3-59ZM219 39.5l-45.8 46.3a62.1 62.1 0 0 0-13.1-10.7L178 49c.6-.8 1.7-1 2.5-.4l4.1 3.5 18.5-26c.6-.8 1.7-1 2.4-.3L219 37c.8.7.8 1.8.1 2.5ZM243.7 76c1-.4 1.3-1.4.8-2.3l-8.8-15c-.5-1-1.6-1.1-2.4-.6L207 76l-2.7-4.5c-.5-.9-1.6-1.2-2.4-.5l-25.8 18.3A63 63 0 0 1 185 104l58.7-28Zm9.3 23.7 3 17c.1 1-.5 2-1.5 2l-64.8 6.1a61 61 0 0 0-3.2-16.6l30.4-8.4c1-.3 2 .4 2 1.3l1 5.3 30.9-8c1-.2 2 .3 2 1.3h.2Zm-3 62.9c1 .2 2-.4 2.1-1.4l3-17.1c.2-1-.5-1.8-1.5-2l-31.8-3 1-5.2c0-1-.5-1.9-1.5-2l-31.6-2.6c-.1 5.8-1 11.5-2.7 16.8l63 16.4Zm-16.7 39.1c-.5.9-1.7 1-2.4.6l-53.6-37c3.4-4.5 6.2-9.5 8.2-14.8l28.8 13.2c1 .4 1.3 1.4.8 2.3l-2.7 4.6 28.9 13.7c.8.4 1.2 1.5.7 2.3l-8.7 15.1Zm-71.7-21.8 37.7 53c.5.8 1.7 1 2.4.3L215 222c.8-.6.8-1.7.1-2.5l-22.4-22.6 4.1-3.4c.8-.7.8-1.8.1-2.5l-22.5-22.2a61 61 0 0 1-12.8 11Zm-.3 72.2c-1 .4-2-.2-2.2-1.1l-17.3-62.7a61 61 0 0 0 16-6l13.5 28.4c.4 1 0 2-1 2.3l-5 1.9 13.3 29c.5.9 0 1.9-.9 2.2l-16.4 6Z"/></svg>

================
File: docs/public/img/providers/onelogin.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="Layer_1" x="0" y="0" version="1.1" viewBox="0 0 323.9 108.8"><style>.st0{fill:#1c1f2a}.st1{fill:#40535d}.st2{fill:#04aada}</style><path d="M107.2 36.1c.7-4.7 4.7-10.3 12.6-10.3 7.2 0 11.4 5.2 11.9 10.3h-24.5zm-9.9 3.6c0 12.8 9.2 21.3 22.6 21.3 8.7 0 14.6-4.3 17.9-8.1.4-.4.4-.9.2-1.3l-.2-.2-4.7-4.5c-.4-.4-1.1-.4-1.6 0-2.5 2.2-6.1 5.4-11.9 5.4-6.7 0-11.4-4-12.6-9.2h32.7c.7 0 1.3-.4 1.6-1.1v-2.2c0-12.1-7.8-22.2-21.3-22.2-14.2.1-22.7 10-22.7 22.1zm50.2 19.5c0 .4.2 1.1.9 1.1h7.2c.4 0 1.1-.2 1.1-.9V.9c0-.4-.2-.9-.9-.9h-7.4c-.7 0-.9.4-.9.9v58.3zm-64.8 0c0 .4.2 1.1.9 1.1h7.2c.4 0 1.1-.2 1.1-.9V35.9c0-9.9-5.8-18.2-18.4-18.2h-.2a20 20 0 0 0-13.5 4.5V20c0-.7-.4-1.1-.9-1.1h-7c-.4 0-1.1.2-1.1.9v39.7c0 .4.2 1.1.9 1.1H59c.4 0 1.1-.2 1.1-.9V37.5c0-6.7 3.6-11.9 11.7-11.9S83 30.5 83 37.4l-.3 21.8zm132.5 12.3c3.1 3.8 9.9 8.3 19.5 8.3 13.2 0 21.3-8.1 21.3-21.1V20c0-.4-.2-1.1-.9-1.1h-6.9c-.4 0-1.1.2-1.1.9v2.4a18.5 18.5 0 0 0-13-4.5c-11.9 0-22.4 8.7-22.4 21.7s10.1 21.7 22.4 21.7c4.7 0 9.2-1.6 12.8-4.3v2.7c0 7.4-4.3 12.1-12.3 12.1-6.5 0-11-3.6-13.7-6.3-.4-.4-1.3-.4-1.8 0l-3.8 4.5c-.5.4-.5 1.1-.1 1.7zm-179.8-32c0 7.4-5.6 13.2-12.8 13.2-7.4 0-12.6-6.3-12.6-13.2V39c0-7 5.2-12.8 12.6-12.8 7.2-.2 12.8 5.9 12.8 13.3zM0 39.5c0 11.9 9.6 21.7 22.4 21.7 13 0 22.4-9.9 22.4-21.7V39c0-11.9-9.6-21.3-22.4-21.3A21.6 21.6 0 0 0 0 39.5zm197.5 0c0 7.4-5.6 13.2-12.8 13.2-7.2 0-12.6-6.3-12.6-13.2V39c0-7 5.2-12.8 12.6-12.8 7.4-.2 12.8 5.9 12.8 13.3zm-35.4 0c0 11.9 9.6 21.7 22.4 21.7 12.8 0 22.4-9.9 22.4-21.7V39c0-11.9-9.6-21.3-22.4-21.3a21.6 21.6 0 0 0-22.4 21.8zm102.7 19.7c0 .4.2 1.1.9 1.1h7.2c.4 0 1.1-.2 1.1-.9V19.7c0-.4-.2-.9-.9-.9h-7.4c-.7 0-.9.4-.9.9v39.5zm0-50.9c0 .4.2 1.1.9 1.1h7.2c.4 0 1.1-.2 1.1-.9V.9c0-.4-.2-.9-.9-.9h-7.4c-.7 0-.9.4-.9.9v7.4zm49.8 50.9c0 .4.2 1.1.9 1.1h7.2c.4 0 1.1-.2 1.1-.9V35.9c0-9.9-5.8-18.2-18.4-18.2h-.2a20 20 0 0 0-13.5 4.5V20c0-.7-.4-1.1-.9-1.1h-7c-.4 0-1.1.2-1.1.9v39.7c0 .4.2 1.1.9 1.1h7.2c.4 0 1.1-.2 1.1-.9V37.5c0-6.7 3.6-11.9 11.7-11.9s11.2 4.9 11.2 11.9l-.2 21.7zm-67.5-19.7c0 7.4-5.6 13.2-12.8 13.2-7.4 0-12.6-6.3-12.6-13.2V39c0-7 5.2-12.8 12.6-12.8 7.2-.2 12.8 5.9 12.8 13.3z" class="st0"/><path d="M133 87.2h1.7v6.3c.9-1.3 2.4-2 3.9-2 3 0 5.2 2.4 5.2 6.1s-2.2 6.1-5.2 6.1a5 5 0 0 1-3.9-2v1.7H133V87.2zm5.2 14.7c2.4 0 3.7-2 3.7-4.6 0-2.6-1.3-4.6-3.7-4.6-1.5 0-2.8.9-3.5 2v5.2c.7 1.2 2.2 2 3.5 2z" class="st1"/><path d="M147.6 106.3c.9 0 1.3-.2 1.7-1.3l.9-1.7-4.8-11.7h2l3.9 9.5 3.9-9.5h2l-5.9 14.1c-.7 1.7-2 2.4-3.5 2.4-.4 0-1.1 0-1.3-.2l.2-1.7.9.1z" class="st1"/><path d="M187.2 87.4c0-.2.2-.4.4-.4h.3l.6.3 8.7 8.4v-8c0-.2.2-.4.4-.4h2.7c.2 0 .4.2.4.4v15.2c0 .3-.2.4-.4.4h-.2l-.6-.2-8.8-8.9v8.4c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4V87.4" class="st2"/><path d="M203.6 87.6c0-.2.2-.4.4-.4h9.4c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-6.3v2.8h5.2c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-5.2v3.1h6.3c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4H204a.4.4 0 0 1-.4-.4v-15" class="st2"/><path d="M225.1 87.6c0-.2.2-.4.4-.4h2.7c.2 0 .4.2.4.4v15c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4v-15" class="st1"/><path d="M231.5 87.6c0-.2.2-.4.4-.4h5.5a8 8 0 0 1 0 15.8h-5.5a.4.4 0 0 1-.4-.4v-15m5.9 12.1c2.6 0 4.2-2 4.2-4.6 0-2.6-1.7-4.6-4.2-4.6H235v9.2h2.4z" class="st1"/><path d="M247.8 87.6c0-.2.2-.4.4-.4h9.4c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-6.3v2.8h5.2c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-5.2v3.1h6.3c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-9.4a.4.4 0 0 1-.4-.4v-15" class="st1"/><path d="M260.5 87.3c0-.2.2-.4.4-.4h.3l.6.3 8.7 8.4v-8c0-.2.2-.4.4-.4h2.7c.2 0 .4.2.4.4v15.2c0 .3-.2.4-.4.4h-.2l-.6-.2-8.8-8.9v8.4c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4V87.3" class="st1"/><path d="M280.7 90.5h-3.2a.4.4 0 0 1-.4-.4v-2.5c0-.2.2-.4.4-.4h10.1c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-3.2v12.1c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4V90.5" class="st1"/><path d="M290.9 87.6c0-.2.2-.4.4-.4h2.7c.2 0 .4.2.4.4v15c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4v-15" class="st1"/><path d="M301 90.5h-3.2a.4.4 0 0 1-.4-.4v-2.5c0-.2.2-.4.4-.4h10.1c.2 0 .4.2.4.4v2.5c0 .2-.2.4-.4.4h-3.2v12.1c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4V90.5" class="st1"/><path d="m315.2 95.4-5-7.6c-.2-.3 0-.7.4-.7h2.9l.4.2 3.1 4.6 3.1-4.6.4-.2h2.9c.4 0 .5.4.4.7l-5.1 7.5v7.2c0 .2-.2.4-.4.4h-2.7a.4.4 0 0 1-.4-.4v-7.1" class="st1"/><path d="M176.1 83.3c4 0 7.8 2.2 9.8 5.7l-1.2.7a9.8 9.8 0 0 0-8.6-4.9v-1.5z" class="st2"/><path d="M183.1 106.9a14.2 14.2 0 0 1-21.2-12.2 14.2 14.2 0 0 1 21.2-12.2l-.7 1.2a12.6 12.6 0 0 0-12.7 0 12.7 12.7 0 0 0 0 22c3.9 2.3 8.8 2.3 12.7 0l.7 1.2z" class="st2"/><path d="M176.1 86.2a8.5 8.5 0 1 1 0 17 8.5 8.5 0 0 1 0-17zm-5 8.5a5 5 0 1 0 9.8 0 5 5 0 0 0-9.8 0z" class="st2"/><path d="M184.6 99.6a10 10 0 0 1-17.2 0 9.8 9.8 0 0 1 0-9.9l-1.2-.7a11.4 11.4 0 0 0 9.8 17c4 0 7.8-2.2 9.8-5.7l-1.2-.7z" class="st2"/></svg>

================
File: docs/public/img/providers/osso.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 104 104"><path stroke="white" stroke-linecap="round" stroke-width="4.9" d="M26.8 32.5s52-20.3 52-3.3S27.6 57 27.6 75.5c0 18.6 51.2-3.3 51.2-3.3"/><path fill="#FFCD83" fill-rule="evenodd" d="M26.8 11.4a20.3 20.3 0 1 1 0 40.6 20.3 20.3 0 0 1 0-40.6Zm.4 10.1c5.4 0 9.8 4.4 9.8 9.8v.8c0 5.4-4.4 9.7-9.8 9.7h-.8a9.8 9.8 0 0 1-9.7-9.7v-.8c0-5.4 4.3-9.8 9.7-9.8h.8Z" clip-rule="evenodd"/><path fill="#FFCD83" fill-rule="evenodd" d="M78.8 92.6a20.3 20.3 0 1 1 0-40.6 20.3 20.3 0 0 1 0 40.6Zm-.4-10.1a9.8 9.8 0 0 1-9.7-9.8V72c0-5.4 4.3-9.7 9.7-9.7h.8c5.4 0 9.8 4.3 9.8 9.7v.8c0 5.4-4.4 9.8-9.8 9.8h-.8Z" clip-rule="evenodd"/></svg>

================
File: docs/public/img/providers/osu.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="25 25 300 300"><style>.st1{opacity:.15}.st3{fill:#f1f1f2}.st4{fill:#231f20}.st5{fill:#808184}.st8{fill:#59595c}.st9{fill:#a7a8ab}.st10{fill:#6d6e70}.st11{fill:#221f1f}.st12{fill:#404041}.st13{fill:#58595b}.st14{fill:#bbbdbf}.st15{fill:#fff}.st16{fill:#a6a8ab}</style><circle cx="175" cy="175" r="143.7" fill="#f6a"/><g class="st1" id="Triangles"><defs><circle id="a" class="st1" cx="175" cy="175" r="150"/></defs><clipPath id="b"><use xlink:href="#a" overflow="visible"/></clipPath><g clip-path="url(#b)"><path class="st3" d="M-81.2 336.9 175-106.9l256.2 443.8z"/><path class="st4" d="M68.8 443.7 325 0l256.2 443.7z"/><path class="st5" d="m-409.8 363.4 256.2-443.7 256.2 443.7z"/><path d="m61.4 158.2 256.2-443.8 256.2 443.8z" fill="#929497"/><path d="M-222.4 380 33.8-63.7 290 380z" fill="#636466"/><path class="st8" d="m-100.1 646.9 256.2-443.8 256.2 443.8z"/><path class="st9" d="m-164.9 147.2 97.3-168.5 97.3 168.5zm81.5 376.6 97.3-168.5 97.3 168.5z"/><path class="st10" d="m134.3 220.8 97.3-168.5 97.3 168.5z"/><path class="st9" d="M298.7 485.7 396 317.2l97.2 168.5z"/><path class="st8" d="m108.4 621.4 48.6-84.2 48.7 84.2z"/><path class="st11" d="m278.7 305.9 48.6-84.2 48.6 84.2zM46.2 400l97.3-168.5L240.8 400z"/><path class="st5" d="M108.8-86.6 36.5 38.6h194.6L158.8-86.6zm213.2 0-23.6 40.9h97.3L372-86.6z"/><path class="st12" d="M35.3 332.5 132.6 164l97.3 168.5z"/><path class="st5" d="m236.1 369.2 97.2-168.5 97.3 168.5z"/><path class="st8" d="m-51.9 428.8 48.1-83.3 48.1 83.3z"/><path class="st13" d="m123.2 104.8 48.1-83.3 48.1 83.3z"/><path class="st11" d="m283 90.2 48.1-83.3 48.1 83.3z"/><path class="st5" d="m-61.9 331.6 24.1-41.7 24 41.7z"/><path class="st8" d="m132.5 621.6 24-41.7 24.1 41.7zm84.2-156 24-41.7 24 41.7z"/><path class="st12" d="m197.1 259.7 48.1-83.3 48.1 83.3z"/><path class="st3" d="m283 239.3 48.1-83.3 48.1 83.3z"/><path class="st9" d="M-49.5 78.8-1.4-4.5l48.1 83.3zm-48.4 146.6 48.1-83.3 48.1 83.3z"/><path class="st5" d="m288.2-20 24-41.6L336.3-20z"/><path class="st14" d="m187.2 116.2 24.1-41.6 24 41.6z"/><path class="st15" d="m231.9 63.8 6.4-11 6.4 11z"/><path class="st10" d="M28.9 117.8 77 34.5l48.1 83.3z"/><path class="st16" d="m110.8 331.9 48.1-83.3 48.1 83.3z"/><path class="st4" d="m107 263.1 18.1-31.4 18 31.4z"/><path class="st9" d="m214 285.3 24-41.7 24.1 41.7zm-5.4-118.1 24-41.6 24.1 41.6z"/><path class="st3" d="m226 102.8 48.1-83.3 48 83.3z"/><path class="st16" d="m1.2 143.6 48.1-83.3 48.1 83.3z"/><path class="st8" d="m14 272.2 18.3-31.8 18.3 31.8z"/><path class="st16" d="m265.4 230.6 18.3-31.8 18.3 31.8z"/><path class="st15" d="M156.7 84.8 175 53.1l18.3 31.7z"/><path class="st13" d="m156.7 282.1 18.3-31.8 18.3 31.8z"/><path class="st8" d="m-19.7 88 18.3-31.8L17 88zm258.1 272.2 18.3-31.7 18.3 31.7z"/><path class="st5" d="m307.5 135.6 18.3-31.8 18.3 31.8z"/><path class="st14" d="m45.3 233.1 18.3-31.8L82 233.1z"/><path class="st3" d="m72.3 295.1 18.3-31.8 18.4 31.8zM27.6 167.7 46 136l18.3 31.7z"/><path class="st8" d="m113.7 123.7 9.1-15.8 9.2 15.8z"/><path class="st14" d="m50.8 152.9 9.1-15.8 9.2 15.8z"/><path d="m107.7 84.4 9.2-15.9 9.2 15.9z" fill="#e6e7e8"/><path class="st11" d="m69 360.2 18.3-31.7 18.3 31.7z"/><path class="st8" d="m112.2 419.2 18.3-31.8 18.3 31.8zm404.5-131.1 18.4-31.8 18.3 31.8z"/><path class="st5" d="M187.7 61.9 206 30.1l18.4 31.8z"/><path class="st15" d="m283.4 128.2 18.3-31.7 18.3 31.7z"/><path class="st8" d="m316.6 622.1 9.2-15.9 9.2 15.9z"/><path class="st9" d="m262.4 411.2 9.2-15.8 9.1 15.8z"/><path class="st8" d="m577.5 394.4 9.2-15.9 9.2 15.9z"/><path class="st5" d="m-97.4 339.9 18.3-31.7 18.4 31.7zm375.1-24.4 18.4-31.8 18.3 31.8z"/><path class="st9" d="m286.9 268.6 9.2-15.9 9.1 15.9z"/><path d="m210.1 128.5 10.9-18.9 10.9 18.9z" fill="#d0d2d3"/><path class="st5" d="M94.9-41.1 104-57l9.2 15.9z"/><path class="st8" d="M386.7 121.9 405 90.2l18.4 31.7zM463 336.8l9.2-15.9 9.2 15.9z"/></g></g><path class="st15" d="M100.1 206.4c-4.7 0-8.8-.8-12.3-2.3-3.5-1.5-6.4-3.7-8.6-6.4-2.3-2.7-4-5.9-5.2-9.6-1.2-3.7-1.7-7.6-1.7-11.9 0-4.3.6-8.3 1.7-12 1.2-3.7 2.9-7 5.2-9.7 2.3-2.7 5.2-4.9 8.6-6.5 3.5-1.6 7.6-2.4 12.3-2.4s8.8.8 12.3 2.4c3.5 1.6 6.4 3.7 8.8 6.5 2.3 2.7 4 6 5.2 9.7 1.1 3.7 1.7 7.7 1.7 12s-.6 8.2-1.7 11.9c-1.1 3.7-2.8 6.9-5.2 9.6-2.3 2.7-5.2 4.9-8.8 6.4-3.4 1.6-7.6 2.3-12.3 2.3zm0-12.1c4.2 0 7.2-1.6 9-4.7 1.8-3.1 2.7-7.6 2.7-13.4 0-5.8-.9-10.3-2.7-13.4-1.8-3.1-4.8-4.7-9-4.7-4.1 0-7.1 1.6-8.9 4.7-1.8 3.1-2.8 7.6-2.8 13.4 0 5.8.9 10.3 2.8 13.4 1.8 3.2 4.8 4.7 8.9 4.7zm51.8-14.5c-4.2-1.2-7.5-3-9.8-5.3-2.4-2.4-3.5-5.9-3.5-10.6 0-5.7 2-10.1 6.1-13.4 4.1-3.2 9.6-4.8 16.7-4.8a49.13 49.13 0 0 1 17.2 3.2c-.2 1.9-.5 4-1.1 6.1-.6 2.1-1.3 3.9-2.1 5.5-1.8-.7-3.8-1.4-5.9-2-2.2-.6-4.5-.8-6.8-.8-2.5 0-4.5.4-5.9 1.2-1.4.8-2.1 2-2.1 3.8 0 1.6.5 2.8 1.5 3.5 1 .7 2.4 1.3 4.3 1.9l6.4 1.9c2.1.6 4 1.3 5.7 2.2 1.7.9 3.1 1.9 4.3 3.2 1.2 1.3 2.1 2.8 2.8 4.7.7 1.9 1 4.2 1 6.8 0 2.8-.6 5.3-1.7 7.7a17.6 17.6 0 0 1-5 6.2c-2.2 1.8-4.9 3.1-8 4.2a35 35 0 0 1-10.7 1.5c-1.8 0-3.4-.1-4.9-.2-1.5-.1-2.9-.3-4.3-.6s-2.7-.6-4.1-1c-1.3-.4-2.8-.9-4.4-1.5.1-2 .5-4.1 1.1-6.1.6-2.1 1.3-4.1 2.2-6 2.5 1 4.8 1.7 7 2.2 2.2.5 4.5.7 6.9.7 1 0 2.2-.1 3.4-.3 1.2-.2 2.4-.5 3.4-1s1.9-1.1 2.6-1.9c.7-.8 1.1-1.8 1.1-3.1 0-1.8-.5-3.1-1.6-3.9-1.1-.8-2.6-1.5-4.5-2.1l-7.3-1.9zm39.3-32.7c2.7-.4 5.3-.7 8-.7 2.6 0 5.3.2 8 .7v30.7c0 3.1.2 5.6.7 7.6.5 2 1.2 3.6 2.2 4.7 1 1.2 2.3 2 3.8 2.5s3.3.7 5.3.7c2.8 0 5.1-.3 7-.8v-45.4c2.7-.4 5.3-.7 7.9-.7 2.6 0 5.3.2 8 .7v55.8c-2.4.8-5.6 1.6-9.5 2.4a65.33 65.33 0 0 1-23.3.3c-3.5-.6-6.6-1.9-9.3-3.8-2.7-1.9-4.8-4.8-6.3-8.5-1.6-3.7-2.4-8.7-2.4-14.9v-31.3zm65.9 58c-.4-2.8-.7-5.5-.7-8.2 0-2.7.2-5.5.7-8.3 2.8-.4 5.5-.7 8.2-.7 2.7 0 5.5.2 8.3.7.4 2.8.7 5.6.7 8.2 0 2.8-.2 5.5-.7 8.3-2.8.4-5.6.7-8.2.7-2.8-.1-5.5-.3-8.3-.7zm-.4-80.7c2.9-.4 5.8-.7 8.6-.7 2.9 0 5.8.2 8.8.7l-1.1 54.9c-2.6.4-5.1.7-7.5.7-2.5 0-5.1-.2-7.6-.7l-1.2-54.9z"/><path class="st15" d="M175 25C92.2 25 25 92.2 25 175s67.2 150 150 150 150-67.2 150-150S257.8 25 175 25zm0 285c-74.6 0-135-60.4-135-135S100.4 40 175 40s135 60.4 135 135-60.4 135-135 135z"/></svg>

================
File: docs/public/img/providers/passage.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 250 250"><path fill="#3D53F6" d="m37.84 71.7 27.3 15.75A44.14 44.14 0 0 1 77.76 153l-65.14-37.6a25.21 25.21 0 1 1 25.22-43.7Z" opacity=".8"/><path fill="#3D53F6" d="m37.84 180.05 27.3-15.76a44.14 44.14 0 0 0 12.62-65.54l-65.14 37.61a25.21 25.21 0 1 0 25.22 43.69Z" opacity=".5"/><path fill="#3D53F6" d="m212.75 71.7-27.3 15.75A44.14 44.14 0 0 0 172.84 153l65.14-37.6a25.21 25.21 0 1 0-25.22-43.69Z" opacity=".5"/><path fill="#3D53F6" d="m212.75 180.05-27.3-15.76a44.14 44.14 0 0 1-12.61-65.54l65.14 37.61a25.21 25.21 0 1 1-25.22 43.69Z" opacity=".8"/><path fill="#FF2F1D" d="M125.3 150.53a25.22 25.22 0 1 0 0-50.45 25.22 25.22 0 0 0 0 50.45Z"/><path fill="#FF2F1D" d="m71.12 212.75 15.76-27.3a44.14 44.14 0 0 1 65.54-12.61l-37.61 65.14a25.21 25.21 0 1 1-43.69-25.22Z" opacity=".8"/><path fill="#FF2F1D" d="m179.48 212.75-15.76-27.3a44.14 44.14 0 0 0-65.54-12.61l37.6 65.14a25.21 25.21 0 1 0 43.69-25.22Z" opacity=".5"/><path fill="#3D53F6" d="m71.12 37.84 15.76 27.3a44.14 44.14 0 0 0 65.54 12.62L114.8 12.62a25.21 25.21 0 1 0-43.69 25.22Z" opacity=".5"/><path fill="#3D53F6" d="m179.48 37.84-15.76 27.3a44.14 44.14 0 0 1-65.54 12.62l37.6-65.14a25.21 25.21 0 1 1 43.69 25.22Z" opacity=".8"/></svg>

================
File: docs/public/img/providers/passkey.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" data-name="Isolation Mode" viewBox="0 0 100 100"><defs><path id="a" d="M60.9 18.2h-24c-12.8 0-23 10.5-23 23.4V66a23.2 23.2 0 0 0 23 23.4h24c12.7 0 23-10.5 23-23.4V41.6c0-13-10.3-23.4-23-23.4Z"/></defs><use xlink:href="#a" fill="#ebac21" stroke-width="0"/><g mask="url(#mask)"><use xlink:href="#a" stroke-width="0" opacity=".1"/></g><path fill="#353535" fill-rule="evenodd" d="M73.2 50.8c0 4.6-2.8 8.5-6.7 9.9l2.3 4-3.5 4.2 3.5 4.3-5.6 7.5-4-4.2V60.4c-3.6-1.6-6-5.3-6-9.6 0-5.8 4.4-10.5 10-10.5s10 4.7 10 10.5Zm-10 1.6c1.3 0 2.4-1.1 2.4-2.5s-1-2.6-2.4-2.6-2.4 1.2-2.4 2.6 1 2.5 2.4 2.5Z"/><path fill-rule="evenodd" d="M73.2 50.8c0 4.6-2.7 8.4-6.5 9.9l2.1 4-3.2 4.2 3.2 4.3-5.6 7.6V52.4c1.3 0 2.4-1.1 2.4-2.5s-1-2.6-2.4-2.6v-7c5.5 0 10 4.7 10 10.5Z"/><path fill-rule="evenodd" d="M56 62.3a14 14 0 0 1-5.8-11.4H32.8c-3.6 0-6.5 3-6.5 6.7V66c0 1.8 1.4 3.3 3.2 3.3h23.1c1.8 0 3.3-1.5 3.3-3.3v-3.7Z"/><path fill="#141313" d="m40.3 49-2.4-.7a8.2 8.2 0 0 1-5-6.6c-.4-2.1-.3-4.2.6-6.2a8 8 0 0 1 6.4-5c1.7-.3 3.4-.2 5.1.4a8 8 0 0 1 5 5.4c.8 2.7.7 5.3-.5 7.9a8.1 8.1 0 0 1-6.1 4.6l-.7.1h-2.4Z"/></svg>

================
File: docs/public/img/providers/patreon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" class="logomark" viewBox="0 0 38 42"><path fill="currentColor" d="M36.98 12.4c0 .3.02.62 0 .93-.04.36-.1.72-.16 1.08a22.54 22.54 0 0 1-.33 1.51 8.59 8.59 0 0 1-.36 1.08c-.31.77-.66 1.52-1.12 2.21-.28.43-.56.85-.86 1.27a4.12 4.12 0 0 1-.37.43c-.22.24-.44.49-.68.7a13.5 13.5 0 0 1-1.13.9c-.35.25-.75.43-1.12.68-.4.26-.86.38-1.3.58-.38.18-.79.24-1.18.38-.5.18-1.02.23-1.53.33-.54.12-1.1.2-1.64.32-.45.09-.9.2-1.34.3-.26.05-.51.1-.76.17l-.9.32c-.2.08-.4.13-.6.22-.28.14-.54.32-.82.47a4.5 4.5 0 0 0-1.19.96c-.29.32-.54.68-.8 1.03a8.5 8.5 0 0 0-.96 1.92l-.73 1.99-.65 1.87a63.99 63.99 0 0 1-.62 1.62 13.45 13.45 0 0 1-1.12 2.21 7.2 7.2 0 0 1-1.14 1.48c-.37.34-.72.7-1.17.94-.45.24-.9.45-1.4.56a6.64 6.64 0 0 1-1.8.13c-.24-.01-.46-.08-.7-.12a2.88 2.88 0 0 1-.4-.09c-.11-.03-.22-.1-.32-.15-.3-.15-.63-.26-.9-.45a8.8 8.8 0 0 1-.96-.77c-.56-.5-.97-1.1-1.34-1.74a13.04 13.04 0 0 1-.69-1.32c-.19-.44-.33-.9-.49-1.35a24.92 24.92 0 0 1-.34-1.06l-.24-.96-.21-.9-.32-1.6a35.83 35.83 0 0 1-.14-.69l-.17-1.02-.13-.76-.12-.84-.11-.72-.1-.68a70 70 0 0 1-.09-.73l-.08-.7-.1-.83-.02-.29-.1-1.2a20.67 20.67 0 0 1-.05-.76c-.02-.39-.05-.77-.05-1.16A94.45 94.45 0 0 1 1 18.18c0-.38 0-.75.03-1.13.02-.4.08-.78.12-1.18l.1-.93.1-.52c.1-.43.18-.86.29-1.3.07-.3.18-.6.26-.9.16-.58.4-1.12.63-1.66.1-.25.23-.5.36-.73.19-.32.37-.66.58-.97.26-.37.53-.74.82-1.1a12.9 12.9 0 0 1 .87-.96c.24-.24.52-.45.77-.66.26-.22.5-.44.77-.63.42-.3.84-.57 1.27-.85.25-.15.51-.3.77-.43l1.22-.65c.26-.13.53-.24.8-.35.68-.28 1.36-.56 2.05-.82.46-.17.93-.3 1.4-.45l.72-.23c.2-.06.4-.09.6-.13.22-.05.43-.12.66-.16l.9-.15 1.02-.15c.14-.02.29-.02.43-.03l1.41-.08c.19 0 .38-.05.57-.02.44.08.89.02 1.33.05.43.03.85.08 1.28.13l.91.15.8.1.65.13c.46.1.92.2 1.37.32.4.11.8.28 1.2.37.48.11.9.33 1.36.48.46.15.86.42 1.3.6.51.23.96.55 1.42.87.34.23.68.49 1 .77.46.4.92.83 1.35 1.28.26.26.48.56.71.85.38.46.66.99.93 1.52.22.42.4.87.54 1.33.12.37.16.77.24 1.15.1.42.1.85.08 1.27l-.02.01z"/></svg>

================
File: docs/public/img/providers/ping-id.svg
================
<?xml version="1.0" encoding="UTF-8"?>

<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 48 48" id="b" xmlns="http://www.w3.org/2000/svg">

<defs>

<style>.e{fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:1px;}</style>

</defs>

<g id="c">

<path id="d" class="e" d="m12.8561,8.4312v8.1103H4.5v-8.1103h8.3561m4.3709,30.8964V8.4312h9.6417c3.3507,0,6.6101-.0122,9.6417,1.6562,8.7842,4.8343,9.422,21.1447,1.157,26.7905-5.6019,3.8269-14.0315,2.4497-20.4403,2.4497m8.3561-24.7171v18.7953c2.2097,0,4.5122.0191,6.2942-1.4958,3.0686-2.6084,3.0874-8.284,2.2349-11.8926-.3072-1.3004-.881-2.6416-1.8558-3.5822-1.8153-1.7517-4.3046-1.8247-6.6733-1.8247m-12.727,6.0505v18.6665H4.5v-18.6665h8.3561Z"/>

</g>

</svg>

================
File: docs/public/img/providers/pinterest.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path fill="#bd081c" d="M16.1 0a16 16 0 0 0-5.7 31 18 18 0 0 1 0-4.6l1.8-8a5.8 5.8 0 0 1-.5-2.4c0-2.2 1.3-4 2.9-4s2 1.1 2 2.3-1 3.4-1.4 5.4.8 2.8 2.4 2.8 5-3 5-7.3-2.8-6.6-6.7-6.6-7.1 3.6-7.1 7.1c0 1.3.5 3 1.2 3.7a.5.5 0 0 1 .1.4l-.4 1.8c-.1.3-.3.4-.5.3-2-1-3.3-3.8-3.3-6.2 0-5 3.7-9.7 10.6-9.7s9.9 4 9.9 9.2-3.6 10-8.3 10c-1.6 0-3.2-.8-3.7-1.9l-1 3.8c-.4 1.5-1.3 3.2-2 4.2A16 16 0 1 0 16.1 0z"/></svg>

================
File: docs/public/img/providers/pipedrive.svg
================
<?xml version="1.0" encoding="UTF-8"?><!--Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)--><svg xmlns="http://www.w3.org/2000/svg" width="940" height="250" version="1.1" viewBox="0 0 940 250" xml:space="preserve" xmlns:xlink="http://www.w3.org/1999/xlink"><style type="text/css">.st0{clip-path:url(#SVGID_2_);fill:#203232;}</style><g transform="matrix(1.4291 0 0 1.4291 -77.63 -55.768)"><defs><rect id="SVGID_1_" width="755.8" height="253.2"/></defs><clipPath id="SVGID_2_"><use width="100%" height="100%" xlink:href="#SVGID_1_"/></clipPath><g fill="#203232"><path class="st0" d="m128.3 87.8c-11.9 0-18.8 5.4-22.1 9-0.4-3.2-2.5-7.3-10.7-7.3h-17.9v18.6h7.3c1.2 0 1.6 0.4 1.6 1.6v85.1h21.2v-31.8-2.4c3.3 3 9.6 7.2 19.5 7.2 20.7 0 35.2-16.4 35.2-40 0.1-23.9-13.7-40-34.1-40m-4.3 61.5c-11.4 0-16.6-10.9-16.6-21.1 0-16 8.7-21.7 16.9-21.7 10 0 16.8 8.6 16.8 21.5-0.1 14.8-8.7 21.3-17.1 21.3" clip-path="url(#SVGID_2_)"/><path class="st0" d="m191 146v-45.1c0-7.6-3.7-11.3-11.2-11.3h-19v18.6h7.3c1.2 0 1.6 0.4 1.6 1.6v44.9c0 7.7 3.6 11.3 11.2 11.3h19v-18.5h-7.3c-1.1 0.1-1.6-0.4-1.6-1.5" clip-path="url(#SVGID_2_)"/><path class="st0" d="m246.4 87.8c-11.9 0-18.8 5.4-22.2 9-0.4-3.2-2.5-7.3-10.7-7.3h-17.8v18.6h7.3c1.2 0 1.6 0.4 1.6 1.6v85.1h21.4v-31.8-2.4c3.3 3 9.7 7.2 19.5 7.2 20.7 0 35.2-16.4 35.2-40 0-23.9-13.8-40-34.3-40m-4.3 61.5c-11.4 0-16.6-10.9-16.6-21.1 0-16 8.7-21.7 16.9-21.7 10 0 16.8 8.6 16.8 21.5 0 14.8-8.6 21.3-17.1 21.3" clip-path="url(#SVGID_2_)"/><path class="st0" d="m320.6 87.8c-22.9 0-38.8 16.5-38.8 40 0 23.2 17.2 40 41 40 18.7 0 30.1-11.1 30.6-11.5l0.9-0.8-9.2-15.3-1.4 1.3c-0.1 0.1-8.5 7.8-19.6 7.8-10.6 0-18.4-6.5-20.3-16.7h50.3l0.1-1.4c0-0.2 0.5-4.7 0.5-6.9 0-21.8-13.7-36.5-34.1-36.5m-16 29c2.3-7.5 8.1-11.8 16-11.8 6.4 0 11.3 4.9 12.2 11.8z" clip-path="url(#SVGID_2_)"/><path class="st0" d="m431.9 146v-73.9c0-7.6-3.7-11.3-11.3-11.3h-19v18.6h7.3c1.2 0 1.6 0.4 1.6 1.6v13.4c-3.1-2.8-9.2-6.5-19.8-6.5-20.6 0-35 16.5-35 40 0 23.9 13.8 40 34.2 40 11.7 0 18.5-5.4 21.8-9.2 0.4 3.3 2.6 7.5 10.5 7.5h18.4v-18.5h-7.1c-1.2-0.1-1.6-0.6-1.6-1.7m-37.9 3.3c-10.1 0-16.6-8.4-16.6-21.5 0-12.7 6.8-21.2 16.9-21.2 11.5 0 16.6 10.6 16.6 21.1 0 16-8.7 21.6-16.9 21.6" clip-path="url(#SVGID_2_)"/><path class="st0" d="m487.9 88.5c-8.8 0-17 5.1-21.8 13.2v-1.7c0-6.9-3.8-10.5-11.3-10.5h-18.2v18.6h7.3c1.2 0 1.6 0.4 1.6 1.6v56.3h21.2v-30.6c0-4 0.5-7.9 1.5-11.5 3.2-10.6 11.7-14.3 18.5-14.3 2.4 0 4.2 0.3 4.2 0.3l1.8 0.3v-21.1l-1.3-0.2c0-0.1-1.8-0.4-3.5-0.4" clip-path="url(#SVGID_2_)"/><path class="st0" d="m522.9 146v-45.1c0-7.6-3.7-11.3-11.2-11.3h-17.2v18.6h5.5c1.2 0 1.6 0.4 1.6 1.6v44.9c0 7.7 3.6 11.3 11.2 11.3h19v-18.5h-7.3c-1.1 0.1-1.6-0.4-1.6-1.5" clip-path="url(#SVGID_2_)"/><path class="st0" d="m603 89.6h-11.3c-6.6 0-10.2 2.3-12.3 7.9l-13.8 38.6c-0.5 1.4-0.9 3-1.3 4.6-0.4-1.5-0.9-3.2-1.4-4.6l-13.8-38.6c-2.1-5.7-5.5-7.9-12.3-7.9h-12v18.6h3.1c1.7 0 2.2 0.6 2.6 1.6l21.4 56.3h23.9l21.4-56.3c0.4-1 0.9-1.6 2.6-1.6h3.3v-18.6z" clip-path="url(#SVGID_2_)"/><path class="st0" d="m639.6 87.8c-22.9 0-38.8 16.5-38.8 40 0 23.2 17.2 40 41 40 18.7 0 30.1-11.1 30.6-11.5l0.9-0.8-9.2-15.3-1.4 1.3c-0.1 0.1-8.5 7.8-19.5 7.8-10.6 0-18.4-6.5-20.3-16.7h50.3l0.1-1.4c0-0.2 0.4-4.7 0.4-6.9 0-21.8-13.7-36.5-34.1-36.5m-16 29c2.3-7.5 8.1-11.8 16-11.8 6.4 0 11.3 4.9 12.2 11.8z" clip-path="url(#SVGID_2_)"/><rect class="st0" x="170.6" y="60.7" width="18.9" height="19.9" clip-path="url(#SVGID_2_)"/><rect class="st0" x="502.6" y="60.7" width="18.9" height="19.9" clip-path="url(#SVGID_2_)"/><polygon class="st0" points="673.3 89.6 676.1 89.6 676.1 97.2 678.2 97.2 678.2 89.6 681 89.6 681 87.8 673.3 87.8" clip-path="url(#SVGID_2_)"/><polygon class="st0" points="689.3 87.8 687.2 94.3 685 87.8 682.1 87.8 682.1 97.2 684 97.2 684 90.6 684.1 90.6 686.4 97.2 688 97.2 690.3 90.6 690.3 97.2 692.2 97.2 692.2 87.8" clip-path="url(#SVGID_2_)"/></g></g></svg>

================
File: docs/public/img/providers/postmark.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 240 240"><path fill="#fff" fill-rule="evenodd" d="M238.2 217.8V229a9.2 9.2 0 0 0-9.3 9.3h-11a9.2 9.2 0 0 0-18.5 0h-11a9.2 9.2 0 0 0-18.6 0h-11a9.2 9.2 0 0 0-9.3-9.3 9.2 9.2 0 0 0-9.2 9.3h-11a9.2 9.2 0 0 0-18.5 0H99.7a9.2 9.2 0 1 0-18.5 0h-11a9.2 9.2 0 0 0-18.5 0h-11a9.2 9.2 0 1 0-18.5 0H11a9.2 9.2 0 0 0-9.3-9.3v-11a9.2 9.2 0 0 0 0-18.5v-11a9.2 9.2 0 0 0 0-18.6v-11a9.2 9.2 0 0 0 9.3-9.3 9.2 9.2 0 0 0-9.3-9.2v-11a9.2 9.2 0 0 0 0-18.5V99.7a9.2 9.2 0 1 0 0-18.5v-11a9.2 9.2 0 0 0 0-18.5v-11a9.2 9.2 0 1 0 0-18.5V11A9.2 9.2 0 0 0 11 1.7h11a9.2 9.2 0 1 0 18.5 0h11a9.2 9.2 0 0 0 18.6 0h11a9.2 9.2 0 0 0 18.5 0h11a9.2 9.2 0 0 0 18.5 0h11.1a9.2 9.2 0 0 0 9.2 9.3 9.2 9.2 0 0 0 9.3-9.3h11a9.2 9.2 0 0 0 18.5 0h11a9.2 9.2 0 0 0 18.5 0H229a9.2 9.2 0 0 0 9.3 9.3v11a9.2 9.2 0 1 0 0 18.5v11a9.2 9.2 0 0 0 0 18.6v11a9.2 9.2 0 0 0 0 18.5v11a9.2 9.2 0 0 0 0 18.5v11.1a9.2 9.2 0 0 0-9.3 9.2 9.2 9.2 0 0 0 9.3 9.3v11a9.2 9.2 0 0 0 0 18.5v11a9.2 9.2 0 1 0 0 18.5Z" clip-rule="evenodd"/><rect width="177.2" height="177.2" x="31.4" y="31.4" fill="#FFDE00" rx="2"/><path fill="#000" d="M81.2 160h5.9c3 0 4.9-1.9 4.9-5V86.7c0-3-2-5-5-5h-5.8V66.5h42.4c22.7 0 40.7 11.7 40.7 34.2 0 22.6-18 34.3-40.7 34.3H109v20c0 3.1 2 5 5 5h12v15.4H81.1V160Zm41-40.8c15.1 0 23.8-6.4 23.8-18.2 0-12.1-8.7-18.2-23.7-18.2H109v36.6h13.3v-.2Z"/></svg>

================
File: docs/public/img/providers/reddit.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><path fill="#FFF" d="M16.67 10a1.46 1.46 0 0 0-2.47-1 7.12 7.12 0 0 0-3.85-1.23L11 4.65l2.14.45a1 1 0 1 0 .13-.61L10.82 4a.31.31 0 0 0-.37.24l-.74 3.47a7.14 7.14 0 0 0-3.9 1.23 1.46 1.46 0 1 0-1.61 2.39 2.87 2.87 0 0 0 0 .44c0 2.24 2.61 4.06 5.83 4.06s5.83-1.82 5.83-4.06a2.87 2.87 0 0 0 0-.44 1.46 1.46 0 0 0 .81-1.33Zm-10 1a1 1 0 1 1 1 1 1 1 0 0 1-1-1Zm5.81 2.75a3.84 3.84 0 0 1-2.47.77 3.84 3.84 0 0 1-2.47-.77.27.27 0 0 1 .38-.38A3.27 3.27 0 0 0 10 14a3.28 3.28 0 0 0 2.09-.61.27.27 0 1 1 .39.4Zm-.18-1.71a1 1 0 1 1 1-1 1 1 0 0 1-1.01 1.04Z"/></svg>

================
File: docs/public/img/providers/resend.svg
================
<svg xmlns="http://www.w3.org/2000/svg" version="1.0" viewBox="0 0 400 400"><g fill="#000000" transform="matrix(.1 0 0 -.1 0 400)"><path d="M0 2000V0h4000v4000H0V2000zm2269 1069c254-41 455-188 550-402 87-196 70-457-41-645-45-76-161-192-230-232-32-17-58-37-58-42 0-6 71-133 157-282s185-319 219-377c33-59 68-117 78-130 9-13 16-27 16-31 0-5-134-7-297-6l-297 3-31 55c-18 30-114 200-214 378l-183 322h-268V920h-500v2160h518c312 0 543-4 581-11z"/><path d="M1670 2361v-281h233c269 0 311 8 372 67 60 58 80 112 80 218 0 80-3 95-28 137-28 48-64 81-127 114-31 17-64 19-282 22l-248 4v-281z"/></g></svg>

================
File: docs/public/img/providers/roblox.svg
================
<svg width="800px" height="800px" viewBox="0 0 192 192" xmlns="http://www.w3.org/2000/svg" fill="none"><path stroke="#000000" stroke-linejoin="round" stroke-width="12" d="M29.88 57.549 133.845 29.69l27.857 103.967-103.966 27.857z"/><path stroke="#000000" stroke-linejoin="round" stroke-width="12" d="m80 87 25.114-6.73 6.73 25.115-25.115 6.73z"/></svg>

================
File: docs/public/img/providers/sailpoint.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="Layer_1" x="0" y="0" style="enable-background:new 0 0 109.5 107;" version="1.1" viewBox="0 0 109.5 107"><style>.st0{fill:#0033A1;}
	.st1{fill:#CC27B0;}
	.st2{fill:#0071CE;}
	.st3{fill:#E17FD2;}</style><metadata/><g><path d="m63 0 13.2 78.6H0L63 0z" class="st0"/><path d="m62.9 0 46.7 78.6H76L62.9 0z" class="st1"/><path d="M0 78.6h76.2L81 107 0 78.6z" class="st2"/><path d="M76 78.6h33.5L80.8 107 76 78.6z" class="st3"/></g></svg>

================
File: docs/public/img/providers/salesforce.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 180"><path fill="#00A1E0" d="M106.6 19.7a44.8 44.8 0 0 1 71.8 9.4A55.4 55.4 0 0 1 255.8 80a55.4 55.4 0 0 1-66 54.5 40.3 40.3 0 0 1-52.7 16.6 46 46 0 0 1-85.5-2A43 43 0 0 1 0 106.8c0-16 8.6-30 21.4-37.4a49.6 49.6 0 0 1 85-49.8"/><path fill="#FFFFFF" d="M37.2 93c-.2.4 0 .5 0 .5l1.5 1c2.6 1.3 5.1 1.7 7.7 1.7 5.2 0 8.5-2.8 8.5-7.3 0-4.2-3.7-5.7-7.1-6.8l-.5-.2c-2.6-.8-4.8-1.5-4.8-3.2v-.1c0-1.5 1.3-2.6 3.3-2.6 2.3 0 5 .8 6.7 1.7 0 0 .5.4.7-.1l1-3c.1-.2 0-.4-.2-.5a15 15 0 0 0-7.5-2h-.6c-4.8 0-8.1 2.9-8.1 7v.1c0 4.4 3.7 5.8 7.2 6.8l.5.2c2.5.8 4.7 1.4 4.7 3.2v.1c0 1.6-1.4 2.8-3.7 2.8-.9 0-3.7 0-6.7-2l-1-.5s-.4-.2-.6.3l-1 2.9Z"/><path fill="#FFFFFF" d="M114 93c-.2.4 0 .5 0 .5l1.5 1c2.6 1.3 5.1 1.7 7.7 1.7 5.2 0 8.5-2.8 8.5-7.3 0-4.2-3.7-5.7-7.1-6.8l-.5-.2c-2.6-.8-4.8-1.5-4.8-3.2v-.1c0-1.5 1.3-2.6 3.3-2.6 2.3 0 5 .8 6.7 1.7 0 0 .5.4.7-.1l1-3c.1-.2 0-.4-.2-.5a15 15 0 0 0-7.5-2h-.6c-4.8 0-8.1 2.9-8.1 7v.1c0 4.4 3.7 5.8 7.2 6.8l.5.2c2.5.8 4.7 1.4 4.7 3.2v.1c0 1.6-1.4 2.8-3.7 2.8-.9 0-3.7 0-6.7-2-.4-.1-.6-.3-.9-.5-.1 0-.5-.2-.7.3l-1 2.9Z"/><path fill="#FFFFFF" d="M166.4 84.2c0 2.5-.5 4.5-1.4 6-1 1.3-2.3 2-4.3 2s-3.3-.7-4.2-2a11 11 0 0 1-1.4-6c0-2.6.5-4.6 1.4-6 .9-1.4 2.3-2 4.2-2 2 0 3.4.6 4.3 2 1 1.4 1.4 3.4 1.4 6m4.4-4.7a9.6 9.6 0 0 0-5.4-6.4c-1.3-.6-2.9-1-4.7-1a11 11 0 0 0-4.7 1 9.7 9.7 0 0 0-5.3 6.4 16.6 16.6 0 0 0 0 9.4c.4 1.4 1 2.7 2 3.8a10.3 10.3 0 0 0 8 3.5c1.8 0 3.4-.4 4.7-1a9.4 9.4 0 0 0 3.4-2.5c.9-1.1 1.5-2.4 2-3.8a16.5 16.5 0 0 0 0-9.4"/><path fill="#FFFFFF" d="M206.7 91.5c-.1-.4-.5-.3-.5-.3a10 10 0 0 1-4.5.8c-2 0-3.8-.6-5-1.9-1.2-1.2-1.9-3.2-1.8-6 0-2.4.6-4.3 1.6-5.7a5.9 5.9 0 0 1 4.9-2.2c1.8 0 3.2.2 4.6.7 0 0 .4.1.5-.3l1.1-3c.1-.3-.2-.5-.3-.5a17 17 0 0 0-11 0 10.1 10.1 0 0 0-5.7 6.3c-.5 1.5-.7 3-.7 4.7 0 3.7 1 6.6 2.9 8.8 2 2.1 4.8 3.2 8.6 3.2 2.3 0 4.6-.4 6.2-1.1 0 0 .4-.2.2-.5l-1-3Z"/><path fill="#FFFFFF" d="M214.4 81.7c.2-1.4.6-2.6 1.2-3.5.9-1.4 2.3-2.1 4.2-2.1 2 0 3.3.7 4.2 2.1a8 8 0 0 1 1 3.5h-10.6Zm14.7-3a9.2 9.2 0 0 0-4.7-5.7 13.1 13.1 0 0 0-9.2.1 9.7 9.7 0 0 0-5.3 6.5 16.6 16.6 0 0 0 0 9.4 9.7 9.7 0 0 0 5.9 6.2c1.5.6 3.3 1 5.3 1 4.3 0 6.6-1 7.5-1.6.2 0 .3-.2.1-.7l-1-2.7c0-.4-.5-.2-.5-.2-1 .4-2.6 1-6 1-2.4 0-4-.6-5.1-1.7-1.1-1-1.7-2.7-1.8-5l14.9.1s.3 0 .4-.4c0-.1.5-3-.5-6.4Z"/><path fill="#FFFFFF" d="M95.7 81.7c.2-1.4.6-2.6 1.2-3.5.9-1.4 2.3-2.1 4.2-2.1 2 0 3.2.7 4.2 2.1.6 1 .8 2.2 1 3.5H95.7Zm14.7-3a9.2 9.2 0 0 0-4.7-5.7 12.8 12.8 0 0 0-9.2.1 9.7 9.7 0 0 0-5.3 6.5 16.8 16.8 0 0 0 0 9.4 9.7 9.7 0 0 0 5.9 6.2c1.4.6 3.3 1 5.3 1 4.3 0 6.6-1 7.5-1.6.2 0 .3-.2.1-.7l-1-2.7c0-.4-.5-.2-.5-.2-1 .4-2.6 1-6 1-2.4 0-4-.6-5.2-1.7-1-1-1.6-2.7-1.7-5l14.8.1s.4 0 .5-.4c0-.1.5-3-.5-6.4Z"/><path fill="#FFFFFF" d="M63.6 91.4a3 3 0 0 1-.8-.8 4 4 0 0 1-.5-2c0-1.3.5-2.2 1.4-2.8 0 0 1.2-1.2 4.3-1.1 2 0 4 .3 4 .3v6.8s-1.9.4-4 .5c-3 .2-4.4-.9-4.4-.9m6-10.4h-2.4a14 14 0 0 0-3.6.4c-1.2.3-2.2.8-3.1 1.5-1 .6-1.6 1.4-2.2 2.4-.5 1-.8 2.1-.8 3.4 0 1.3.3 2.5.7 3.4.5 1 1.1 1.7 2 2.3.8.6 1.8 1 3 1.3a26.8 26.8 0 0 0 8.4 0l3.7-.7 1-.2c.4-.1.4-.5.4-.5V80.7c0-3-.8-5.2-2.4-6.5-1.5-1.4-3.8-2-6.8-2-1 0-2.9 0-4 .3 0 0-3.2.6-4.5 1.7 0 0-.3.1-.1.6l1 2.8c.1.3.5.2.5.2l.2-.1c2.9-1.6 6.5-1.5 6.5-1.5a6 6 0 0 1 3.7 1c.8.6 1.2 1.5 1.2 3.5v.6l-2.5-.3"/><path fill="#FFFFFF" d="M189.1 73.4a.4.4 0 0 0-.2-.6l-2.5-.4A7.4 7.4 0 0 0 180 75v-2c0-.3-.2-.5-.5-.5h-3.8c-.2 0-.4.2-.4.5v22c0 .3.2.5.5.5h3.9c.2 0 .4-.2.4-.4v-11c0-1.5.2-3 .5-4 .3-.9.8-1.6 1.3-2.1.5-.6 1.2-1 1.8-1.1l2-.3 1.6.2c.3 0 .5-.2.6-.4l1.1-3.1"/><path fill="#FFFFFF" d="M152.5 63.1a12.7 12.7 0 0 0-3.4-.5c-2.7 0-4.8.8-6.3 2.3a12.2 12.2 0 0 0-3 6.7l-.2 1h-3.3s-.4 0-.5.4l-.6 3.1c0 .3.1.5.5.5h3.3l-3.4 18.5a23 23 0 0 1-.8 3.7l-1 2.1c-.5.5-.8.9-1.4 1a5.5 5.5 0 0 1-3.8 0s-.3-.2-.5.2l-1.1 3c-.1.3 0 .5.2.6l1.4.4a10.9 10.9 0 0 0 5.8-.4c1-.4 2-1 2.7-2 .9-.9 1.4-1.9 2-3.2.5-1.4 1-3 1.3-5l3.3-18.9h4.9s.4 0 .5-.4l.5-3.1c0-.3 0-.5-.5-.5h-4.7c0-.1.2-1.8.8-3.3.2-.7.7-1.2 1-1.6.4-.4.8-.6 1.3-.8l1.6-.2a6.2 6.2 0 0 1 2 .3c.4.1.5 0 .6-.2l1.1-3.2c.1-.3-.2-.4-.3-.5"/><path fill="#FFFFFF" d="M86.3 95.2c0 .2-.2.4-.4.4h-4a.4.4 0 0 1-.4-.4V63.6c0-.3.2-.5.5-.5h3.9c.2 0 .4.2.4.5v31.6Z"/></svg>

================
File: docs/public/img/providers/sendgrid.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#9DD6E3" d="M256 0v170.7h-85.3V256H0V85.3h85.3V0H256Z"/><polygon fill="#3F72AB" points="0 256 85.3 256 85.3 170.7 0 170.7"/><polygon fill="#00A9D1" points="170.7 170.7 256 170.7 256 85.3 170.7 85.3"/><polygon fill="#00A9D1" points="85.3 85.3 170.7 85.3 170.7 0 85.3 0"/><polygon fill="#2191C4" points="85.3 170.7 170.7 170.7 170.7 85.3 85.3 85.3"/><polygon fill="#3F72AB" points="170.7 85.3 256 85.3 256 0 170.7 0"/></svg>

================
File: docs/public/img/providers/simplelogin.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="164.434" height="121.486" viewBox="0 0 164.434 121.486">
  <defs>
    <linearGradient id="linear-gradient" y1="0.5" x2="1" y2="0.5" gradientUnits="objectBoundingBox">
      <stop offset="0" stop-color="#e3156a"/>
      <stop offset="1" stop-color="#91187f"/>
    </linearGradient>
  </defs>
  <g id="Group_46" data-name="Group 46" transform="translate(0)">
    <g id="Group_45" data-name="Group 45" transform="translate(0 0)">
      <g id="Group_42" data-name="Group 42" transform="translate(13.064 34.188)">
        <path id="Path_170" data-name="Path 170" d="M-1461.505,851.181a70.211,70.211,0,0,1-30.587-17.439,70.253,70.253,0,0,1-30.74,17.481,49.776,49.776,0,0,0-.882,9.351,49.745,49.745,0,0,0,30.936,45.848,49.54,49.54,0,0,0,32.08-46.3A49.912,49.912,0,0,0-1461.505,851.181Zm-32.907,36.595h-.009l-18.858-18.857,5.8-5.813,13.07,13.07,20.44-20.446,5.805,5.8Zm32.907-36.595a70.211,70.211,0,0,1-30.587-17.439,70.253,70.253,0,0,1-30.74,17.481,49.776,49.776,0,0,0-.882,9.351,49.745,49.745,0,0,0,30.936,45.848,49.54,49.54,0,0,0,32.08-46.3A49.912,49.912,0,0,0-1461.505,851.181Zm-32.907,36.595h-.009l-18.858-18.857,5.8-5.813,13.07,13.07,20.44-20.446,5.805,5.8Zm2.319-54.034a70.253,70.253,0,0,1-30.74,17.481,49.776,49.776,0,0,0-.882,9.351,49.745,49.745,0,0,0,30.936,45.848,49.54,49.54,0,0,0,32.08-46.3,49.912,49.912,0,0,0-.807-8.94A70.211,70.211,0,0,1-1492.092,833.742Zm-2.319,54.034h-.009l-18.858-18.857,5.8-5.813,13.07,13.07,20.44-20.446,5.805,5.8Zm32.907-36.595a70.211,70.211,0,0,1-30.587-17.439,70.253,70.253,0,0,1-30.74,17.481,49.776,49.776,0,0,0-.882,9.351,49.745,49.745,0,0,0,30.936,45.848,49.54,49.54,0,0,0,32.08-46.3A49.912,49.912,0,0,0-1461.505,851.181Zm-32.907,36.595h-.009l-18.858-18.857,5.8-5.813,13.07,13.07,20.44-20.446,5.805,5.8Zm32.907-36.595a70.211,70.211,0,0,1-30.587-17.439,70.253,70.253,0,0,1-30.74,17.481,49.776,49.776,0,0,0-.882,9.351,49.745,49.745,0,0,0,30.936,45.848,49.54,49.54,0,0,0,32.08-46.3A49.912,49.912,0,0,0-1461.505,851.181Zm-32.907,36.595h-.009l-18.858-18.857,5.8-5.813,13.07,13.07,20.44-20.446,5.805,5.8Z" transform="translate(1523.715 -833.742)" fill="url(#linear-gradient)"/>
      </g>
      <g id="Group_44" data-name="Group 44">
        <g id="Group_43" data-name="Group 43">
          <path id="Path_171" data-name="Path 171" d="M-1365.831,827.564a13.031,13.031,0,0,0-1.9-2.387c-.221-.224-.458-.436-.7-.64a12.572,12.572,0,0,0-7.488-3.04h-95.881a12.571,12.571,0,0,0-7.488,3.04,6.589,6.589,0,0,0-.687.64,12.315,12.315,0,0,0-1.9,2.37,12.682,12.682,0,0,0-1.879,6.662v5l-1.589,1.639-.274.29a82.04,82.04,0,0,1-38.151,22.35c-.366.1-.737.2-1.111.29l-1.617.4-.357,1.622c-.125.586-.246,1.181-.363,1.778a67.17,67.17,0,0,0-1.192,12.612,66.477,66.477,0,0,0,12.037,38.276,66.735,66.735,0,0,0,27.909,22.956c.96.424,1.929.824,2.915,1.206l.927.357.932-.34c1.268-.449,2.516-.943,3.75-1.46a66.933,66.933,0,0,0,31.877-28.445h71.364a12.628,12.628,0,0,0,8.225-3.035c.257-.212.486-.425.723-.662a13.245,13.245,0,0,0,1.9-2.382,12.65,12.65,0,0,0,1.879-6.654v-65.8A12.741,12.741,0,0,0-1365.831,827.564Zm-105.859.009c.22-.017.443-.025.673-.025h94.334c.229,0,.45.008.67.025h1l-.161.145-46.692,41.311a2.983,2.983,0,0,1-3.946,0l-46.691-41.311-.162-.145Zm-5.975,6.636a6.509,6.509,0,0,1,.494-2.516l40.03,35.431-2.857,2.524q-.218-1.478-.511-2.932c-.05-.315-.109-.619-.178-.935l-.346-1.639-1.626-.4c-.391-.1-.781-.2-1.173-.3a82.218,82.218,0,0,1-33.833-18.366Zm-6.874,103.054a61.95,61.95,0,0,1-38.5-57.075,61.877,61.877,0,0,1,1.105-11.634,87.3,87.3,0,0,0,38.251-21.767,87.316,87.316,0,0,0,38.066,21.713,61.8,61.8,0,0,1,1.01,11.135A61.673,61.673,0,0,1-1484.539,937.263Zm39.56-30.6a66.556,66.556,0,0,0,5.73-27.024c0-.835-.017-1.658-.051-2.49l6.737-5.967,6.748,5.967a2.983,2.983,0,0,0,3.946,0l6.746-5.967,39.92,35.311.187.171Zm74.941-6.654a6.525,6.525,0,0,1-.492,2.507l-40-35.389,40.012-35.406a6.568,6.568,0,0,1,.483,2.49Z" transform="translate(1528.394 -821.497)" fill="url(#linear-gradient)"/>
        </g>
      </g>
    </g>
  </g>
</svg>

================
File: docs/public/img/providers/slack.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2447.6 2452.5"><g fill-rule="evenodd" clip-rule="evenodd"><path fill="#36c5f0" d="M897.4 0a245 245 0 0 0-244.7 245.2 245 245 0 0 0 244.8 245.2h244.8V245.3A245.2 245.2 0 0 0 897.4 0c.1 0 .1 0 0 0m0 654H244.8A245 245 0 0 0 0 899.2a245 245 0 0 0 244.7 245.3h652.7a245 245 0 0 0 244.8-245.2A245 245 0 0 0 897.4 654z"/><path fill="#2eb67d" d="M2447.6 899.2A245 245 0 0 0 2202.8 654 245 245 0 0 0 1958 899.2v245.3h244.8a245 245 0 0 0 244.8-245.3zm-652.7 0v-654A245 245 0 0 0 1550.2 0a245 245 0 0 0-244.8 245.2v654a245 245 0 0 0 244.7 245.3 245 245 0 0 0 244.8-245.3z"/><path fill="#ecb22e" d="M1550.1 2452.5a245 245 0 0 0 244.8-245.2 245 245 0 0 0-244.8-245.2h-244.8v245.2a245.1 245.1 0 0 0 244.8 245.2zm0-654.1h652.7a245 245 0 0 0 244.8-245.2 245 245 0 0 0-244.7-245.3h-652.7a245 245 0 0 0-244.8 245.2 245 245 0 0 0 244.7 245.3z"/><path fill="#e01e5a" d="M0 1553.2a245 245 0 0 0 244.8 245.2 245 245 0 0 0 244.8-245.2V1308H244.8A245 245 0 0 0 0 1553.2zm652.7 0v654a245 245 0 0 0 244.7 245.3 245 245 0 0 0 244.8-245.2v-653.9a244.8 244.8 0 1 0-489.5-.2s0 .1 0 0"/></g></svg>

================
File: docs/public/img/providers/spotify.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2931 2931"><style>.st0{fill:#2ebd59}</style><path d="M1465.5 0C656.1 0 0 656.1 0 1465.5S656.1 2931 1465.5 2931 2931 2274.9 2931 1465.5C2931 656.2 2274.9.1 1465.5 0zm672.1 2113.6A91.3 91.3 0 0 1 2012 2144c-344.1-210.3-777.3-257.8-1287.4-141.3a91.3 91.3 0 1 1-40.7-178.1C1242.1 1697.1 1721 1752 2107.3 1988a91.4 91.4 0 0 1 30.3 125.6zm179.3-398.9a114.3 114.3 0 0 1-157.2 37.6c-393.8-242.1-994.4-312.2-1460.3-170.8a114.4 114.4 0 0 1-142.6-76.1 114.5 114.5 0 0 1 76.2-142.5c532.2-161.5 1193.9-83.3 1646.2 194.7a114.2 114.2 0 0 1 37.7 157.1zm15.4-415.6c-472.4-280.5-1251.6-306.3-1702.6-169.5a137 137 0 1 1-79.5-262.3c517.7-157.1 1378.2-126.8 1922 196a137.1 137.1 0 0 1-139.9 235.8z" class="st0"/></svg>

================
File: docs/public/img/providers/strava.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 432 91"><style>.st0{fill:#fc4c02}</style><path d="M74.5 49.5c1.6 2.8 2.5 6.3 2.5 10.4v.2c0 4.2-.8 8-2.5 11.4a25.6 25.6 0 0 1-7.1 8.6 35.4 35.4 0 0 1-11.2 5.4 51.8 51.8 0 0 1-14.7 1.9c-8.2 0-15.9-1.1-23-3.4A51 51 0 0 1 .2 73.8l14.4-17.1a48 48 0 0 0 28.2 9.4c2.5 0 4.2-.3 5.3-.9 1.1-.6 1.6-1.5 1.6-2.5v-.2c0-1.2-.8-2.1-2.4-2.9-1.6-.8-4.5-1.6-8.8-2.4-4.5-.9-8.8-2-12.9-3.2a44.5 44.5 0 0 1-10.8-4.7 22.2 22.2 0 0 1-7.4-7.2c-2-3.1-2.9-6.7-2.9-10.9V31a24 24 0 0 1 8.8-19.3c2.9-2.5 6.5-4.4 10.7-5.8a66.4 66.4 0 0 1 35.2.7A47.8 47.8 0 0 1 75 14.9L61.9 33a40.6 40.6 0 0 0-24.1-8c-2 0-3.5.3-4.4.9-1 .6-1.4 1.4-1.4 2.4v.2c0 1.1.7 2 2.2 2.8 1.5.8 4.3 1.6 8.5 2.4 5.1.9 9.8 2 14 3.3 4.2 1.3 7.8 3 10.9 5 2.9 2.2 5.3 4.6 6.9 7.5zm1-21.4h23.7v57.8h26.9V28.1h23.7V5.3H75.5v22.8zM387.9.3l-43.3 85.6h25.8l17.5-34.6 17.6 34.6h25.8L387.9.3zM267.3.3l43.4 85.6h-25.8l-17.5-34.6-17.5 34.6h-48.2l-15.2-23h-5.7v23h-26.9V5.3H193a53 53 0 0 1 17.8 2.5c4.6 1.6 8.4 3.9 11.2 6.7 2.5 2.4 4.3 5.2 5.5 8.3 1.2 3.1 1.8 6.7 1.8 10.8v.2c0 5.9-1.4 10.9-4.3 14.9a29.2 29.2 0 0 1-11.6 9.7l14 20.4L267.3.3zm-64.8 35.3c0-2.6-.9-4.5-2.8-5.8a12.6 12.6 0 0 0-7.5-1.9h-11.7v15.8h11.6c3.2 0 5.8-.7 7.6-2.1a7 7 0 0 0 2.8-5.8v-.2zM345.2 5.3 327.6 40 310 5.3h-25.8l43.4 85.6 43.3-85.6h-25.7z" class="st0"/></svg>

================
File: docs/public/img/providers/threads.svg
================
<svg aria-label="Threads" fill="var(--barcelona-primary-icon)" height="100%" role="img" viewBox="0 0 192 192" width="100%" xmlns="http://www.w3.org/2000/svg"><path d="M141.537 88.9883C140.71 88.5919 139.87 88.2104 139.019 87.8451C137.537 60.5382 122.616 44.905 97.5619 44.745C97.4484 44.7443 97.3355 44.7443 97.222 44.7443C82.2364 44.7443 69.7731 51.1409 62.102 62.7807L75.881 72.2328C81.6116 63.5383 90.6052 61.6848 97.2286 61.6848C97.3051 61.6848 97.3819 61.6848 97.4576 61.6855C105.707 61.7381 111.932 64.1366 115.961 68.814C118.893 72.2193 120.854 76.925 121.825 82.8638C114.511 81.6207 106.601 81.2385 98.145 81.7233C74.3247 83.0954 59.0111 96.9879 60.0396 116.292C60.5615 126.084 65.4397 134.508 73.775 140.011C80.8224 144.663 89.899 146.938 99.3323 146.423C111.79 145.74 121.563 140.987 128.381 132.296C133.559 125.696 136.834 117.143 138.28 106.366C144.217 109.949 148.617 114.664 151.047 120.332C155.179 129.967 155.42 145.8 142.501 158.708C131.182 170.016 117.576 174.908 97.0135 175.059C74.2042 174.89 56.9538 167.575 45.7381 153.317C35.2355 139.966 29.8077 120.682 29.6052 96C29.8077 71.3178 35.2355 52.0336 45.7381 38.6827C56.9538 24.4249 74.2039 17.11 97.0132 16.9405C119.988 17.1113 137.539 24.4614 149.184 38.788C154.894 45.8136 159.199 54.6488 162.037 64.9503L178.184 60.6422C174.744 47.9622 169.331 37.0357 161.965 27.974C147.036 9.60668 125.202 0.195148 97.0695 0H96.9569C68.8816 0.19447 47.2921 9.6418 32.7883 28.0793C19.8819 44.4864 13.2244 67.3157 13.0007 95.9325L13 96L13.0007 96.0675C13.2244 124.684 19.8819 147.514 32.7883 163.921C47.2921 182.358 68.8816 191.806 96.9569 192H97.0695C122.03 191.827 139.624 185.292 154.118 170.811C173.081 151.866 172.51 128.119 166.26 113.541C161.776 103.087 153.227 94.5962 141.537 88.9883ZM98.4405 129.507C88.0005 130.095 77.1544 125.409 76.6196 115.372C76.2232 107.93 81.9158 99.626 99.0812 98.6368C101.047 98.5234 102.976 98.468 104.871 98.468C111.106 98.468 116.939 99.0737 122.242 100.233C120.264 124.935 108.662 128.946 98.4405 129.507Z"></path></svg>

================
File: docs/public/img/providers/tiktok.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" stroke="#000000" stroke-width="0" aria-label="TikTok" viewBox="0 0 512 512"><rect width="512" height="512" fill="#ffffff" stroke="none" rx="15%"/><defs><path id="a" d="M219 200a117 117 0 1 0 101 115V187a150 150 0 0 0 88 28v-63a88 88 0 0 1-88-88h-64v252a54 54 0 1 1-37-51z" style="mix-blend-mode:multiply"/></defs><use x="18" y="15" fill="#f05" href="#a"/><use fill="#0ee" href="#a"/></svg>

================
File: docs/public/img/providers/todoist.svg
================
<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#E44332" d="M224 0H32A32 32 0 0 0 0 32v192a32 32 0 0 0 32 32h192a32 32 0 0 0 32-32V32a32 32 0 0 0-32-32"/><path fill="#FFFFFF" d="m54.1 120.8 102.6-59.6c2.2-1.3 2.3-5.2-.2-6.6l-8.8-5.1a8 8 0 0 0-8 0c-1.2.8-83.1 48.3-85.8 50a11 11 0 0 1-10.6 0L0 74v21.6l43 25.2c3.8 2.2 7.5 2.1 11.1 0"/><path fill="#FFFFFF" d="M54.1 161.6 156.7 102c2.2-1.3 2.3-5.2-.2-6.6l-8.8-5.1a8 8 0 0 0-8 0l-85.8 50a11 11 0 0 1-10.6 0L0 114.7v21.6l43 25.2c3.8 2.2 7.5 2.1 11.1 0"/><path fill="#FFFFFF" d="m54.1 205 102.6-59.6c2.2-1.3 2.3-5.2-.2-6.7l-8.8-5a8 8 0 0 0-8 0L54 183.6a10.6 10.6 0 0 1-10.6 0L0 158.2v21.6L43 205c3.8 2.1 7.5 2 11.1 0"/></svg>

================
File: docs/public/img/providers/trakt.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 144.8 144.8"><circle cx="72.4" cy="72.4" r="72.4" fill="#FFFFFF"/><path fill="#ED2224" d="M29.5 111.8c10.6 11.6 25.9 18.8 42.9 18.8 8.7 0 16.9-1.9 24.3-5.3L56.3 85l-26.8 26.8z"/><path fill="#ED2224" d="M56.1 60.6 25.5 91.1 21.4 87l32.2-32.2 37.6-37.6c-5.9-2-12.2-3.1-18.8-3.1-32.2 0-58.3 26.1-58.3 58.3 0 13.1 4.3 25.2 11.7 35l30.5-30.5 2.1 2 43.7 43.7c.9-.5 1.7-1 2.5-1.6L56.3 72.7 27 102l-4.1-4.1 33.4-33.4 2.1 2 51 50.9c.8-.6 1.5-1.3 2.2-1.9l-55-55-.5.1z"/><path fill="#ED1C24" d="M115.7 111.4c9.3-10.3 15-24 15-39 0-23.4-13.8-43.5-33.6-52.8L60.4 56.2l55.3 55.2zM74.5 66.8l-4.1-4.1 28.9-28.9 4.1 4.1-28.9 28.9zm27.4-39.7L68.6 60.4l-4.1-4.1L97.8 23l4.1 4.1z"/><path fill="#ED2224" d="M72.4 144.8C32.5 144.8 0 112.3 0 72.4 0 32.5 32.5 0 72.4 0s72.4 32.5 72.4 72.4c0 39.9-32.5 72.4-72.4 72.4zm0-137.5C36.5 7.3 7.3 36.5 7.3 72.4s29.2 65.1 65.1 65.1 65.1-29.2 65.1-65.1S108.3 7.3 72.4 7.3z"/></svg>

================
File: docs/public/img/providers/twitch.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 300"><path fill="#65459B" fill-rule="evenodd" d="M215.2 260.8h-58.7L117.4 300H78.3v-39.2H6.6V52.2L26.1 0h267.3v182.6l-78.2 78.2zm52.2-91.2V26.1H52.2v189.1h58.7v39.1l39.1-39.1h71.7l45.7-45.6z" clip-rule="evenodd"/><path fill="#65459B" d="M195.6 78.3v78.3h26.1V78.3h-26.1zm-71.7 78.2H150V78.3h-26.1v78.2z"/></svg>

================
File: docs/public/img/providers/twitter.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30"><path d="M26.37,26l-8.795-12.822l0.015,0.012L25.52,4h-2.65l-6.46,7.48L11.28,4H4.33l8.211,11.971L12.54,15.97L3.88,26h2.65 l7.182-8.322L19.42,26H26.37z M10.23,6l12.34,18h-2.1L8.12,6H10.23z"/></svg>

================
File: docs/public/img/providers/united-effects.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" image-rendering="optimizeQuality" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" viewBox="0 0 105 80"><path fill="#ff3534" d="M-.5-.5h15C9.9 6.3 4.9 13-.5 19.5v-20Z"/><path fill="#ff3b35" d="M14.5-.5h8v7a6.9 6.9 0 0 0-4.5 3c-2.1 4.1-5 7.6-8.5 10.5l1 1a44.1 44.1 0 0 0-11 12.5v-14C4.9 13 9.9 6.3 14.5-.5Z"/><path fill="#ff4837" d="M42.5-.5h6a31.4 31.4 0 0 0-7 12 37 37 0 0 1 1-12Z" opacity=".7"/><path fill="#ff4e37" d="M48.5-.5h12a7 7 0 0 1-2 2.5l1 1c-2.4 2.6-4.9 5.1-7.5 7.5-1 2.5-2.1 4.8-3.5 7-2 1.7-3.9 3.7-5.5 6-.2 2.2-.7 4.2-1.5 6v-18c1.4-4.4 3.7-8.4 7-12Z" opacity=".9"/><path fill="#ff5538" d="M65.5-.5h6c.1 1 0 2-.5 3A439 439 0 0 0 58.5 16c2.8 2.2 2.6 2.7-.5 1.5-4.4 6.4-9.4 13-15 20-.2-2.2-.7-4.2-1.5-6v-2c.8-1.8 1.3-3.8 1.5-6 1.6-2.3 3.5-4.3 5.5-6 2.2.7 4.2 0 6-2l-1-2c1.8-2 4.1-4.2 7-6.5a8 8 0 0 1 0-4L62 1.5c3.2 2.7 3.7 2.5 1.5-.5 1-.3 1.6-.8 2-1.5Z"/><path fill="#ff5a39" d="M71.5-.5h12a143 143 0 0 1-14 17.5c.6.4.9.9 1 1.5h-4v4a262 262 0 0 0-23.5 30 8.8 8.8 0 0 0-1.5-4v-17c.8 1.8 1.3 3.8 1.5 6 5.6-7 10.6-13.6 15-20 3.1 1.2 3.3.7.5-1.5 4-4.6 8.2-9 12.5-13.5.5-1 .6-2 .5-3Z"/><path fill="#ff6039" d="M83.5-.5h12a14.4 14.4 0 0 1-6 5.5c.6 1.6-.1 2.9-2 4l1 1c-2.7 2-5 4.3-7 7 1 .3 1.6.8 2 1.5h-13c-.1-.6-.4-1.1-1-1.5 4.8-5 9.5-10.9 14-17.5Z"/><path fill="#ff673a" d="M95.5-.5h9v6c-2 .7-3.7 1.8-5 3.5l1 1a55.1 55.1 0 0 1-6 6.5 31 31 0 0 1 2 2h-13c-.4-.7-1-1.2-2-1.5 2-2.7 4.3-5 7-7l-1-1c1.9-1.1 2.6-2.4 2-4 2.5-1.3 4.5-3.1 6-5.5Z"/><path fill="#ff5238" d="M60.5-.5h5c-.4.7-1 1.2-2 1.5 2.2 3 1.7 3.2-1.5.5L60.5 3a8 8 0 0 0 0 4 51.6 51.6 0 0 0-7 6.5l1 2c-1.8 2-3.8 2.7-6 2 1.4-2.2 2.5-4.5 3.5-7 2.6-2.4 5.1-4.9 7.5-7.5l-1-1a7 7 0 0 0 2-2.5Z"/><path fill="#ff6c3b" d="M104.5 5.5v13h-8a31 31 0 0 0-2-2c2.2-2 4.2-4.2 6-6.5l-1-1c1.3-1.7 3-2.8 5-3.5Z" opacity=".9"/><path fill="#ff4136" d="M22.5 6.5v14c-1.2.5-2.4 1.2-3.5 2-2.5 5.4-6.4 10-11.5 14-1.3 4.6-4 8-8 10v-13c2.8-4.8 6.5-9 11-12.5l-1-1A32 32 0 0 0 18 9.5a6.9 6.9 0 0 1 4.5-3Z"/><path fill="#ff4737" d="M22.5 20.5v14a14 14 0 0 0-4 2.5l1 1a5 5 0 0 1-3 .5c-.1 3-1.6 5-4.5 6a90.6 90.6 0 0 1-9 14c-.7.8-1.5 1-2.5 1h-1v-13c4-2 6.7-5.4 8-10 5.1-4 9-8.6 11.5-14 1.1-.8 2.3-1.5 3.5-2Z"/><path fill="#ff6039" d="M66.5 22.5v7h5a9039.9 9039.9 0 0 1-39 50h-11a184 184 0 0 0 13-18c6.2-2.2 8.5-6.5 7-13a8.8 8.8 0 0 1 1.5 4 262 262 0 0 1 23.5-30Z"/><path fill="#ff663a" d="M71.5 29.5h12a99 99 0 0 0-13 19h-4v4a1497 1497 0 0 0-22 27h-12l39-50Z"/><path fill="#ff6d3b" d="M83.5 29.5c7-1.7 9.7 1 8 8a4 4 0 0 0-3.5 2c-2 3-3.8 6-5.5 9h-12a99 99 0 0 1 13-19Z"/><path fill="#ff4d37" d="M22.5 34.5v15a29.1 29.1 0 0 0-3 4.5l-3 1c1.1.8 1.1 1.6 0 2.5a10.1 10.1 0 0 1-6 5c-.9 2.9-2.2 5.5-4 8a14.2 14.2 0 0 1-6-11c1 0 1.8-.2 2.5-1 3.5-4.4 6.5-9.1 9-14 2.9-1 4.4-3 4.5-6 1 .1 2 0 3-.5l-1-1c1.2-1 2.6-2 4-2.5Z"/><path fill="#ff723c" d="M91.5 37.5a48 48 0 0 1-.5 10 20 20 0 0 1-8.5 1c1.7-3 3.6-6 5.5-9a4 4 0 0 1 3.5-2Z" opacity=".8"/><path fill="#ff6d3b" d="M66.5 52.5v8h6c-3 1.9-5.2 4.5-6.5 8l-1-1c-.5 1.2-1.3 2-2.5 2.5v3l-3 1 1 1a6.9 6.9 0 0 0-3 4.5h-13a1497 1497 0 0 1 22-27Z"/><path fill="#ff5538" d="M22.5 49.5a12 12 0 0 0 3 10c-1.3 2-2.4 4-3.5 6l-1-2c-.7 2.4-1.9 4.6-3.5 6.5 1.2 1 1 1.7-.5 2.5l-1-1a37.8 37.8 0 0 1-3.5 4c-1.5 0-2.5-.6-3-2 1.4-2.5 2.4-5.1 3-8 2 .3 3.6-.2 5-1.5a11 11 0 0 1-1-6.5c1.1-.9 1.1-1.7 0-2.5l3-1c.9-1.7 1.9-3.2 3-4.5Z"/><path fill="#ff5238" d="M16.5 57.5a11 11 0 0 0 1 6.5 5.9 5.9 0 0 1-5 1.5c-.6 2.9-1.6 5.5-3 8a6.5 6.5 0 0 1-3-3c1.8-2.5 3.1-5.1 4-8 2.6-.8 4.6-2.5 6-5Z"/><path fill="#ff5a39" d="M25.5 59.5c2.7 1.6 5.7 2.3 9 2a184 184 0 0 1-13 18h-2c-2.5-1-4.8-2.4-7-4 1.2-1.2 2.4-2.6 3.5-4l1 1c1.5-.8 1.7-1.6.5-2.5 1.6-2 2.8-4.1 3.5-6.5l1 2c1-2 2.2-4 3.5-6Z"/><path fill="#ff733c" d="M72.5 60.5h8c1.3 1 1.3 2 0 3-4.2 5.5-8.5 10.8-13 16h-10a6.9 6.9 0 0 1 3-4.5l-1-1 3-1v-3c1.2-.5 2-1.3 2.5-2.5l1 1c1.3-3.5 3.5-6.1 6.5-8Z"/><path fill="#ff793c" d="M80.5 60.5h14a70 70 0 0 0-5 3.5c.8 1.6.2 2.6-2 3l1 1c-3.2 3.7-6.2 7.5-9 11.5h-12c4.5-5.2 8.8-10.5 13-16 1.3-1 1.3-2 0-3Z"/><path fill="#ff803d" d="M94.5 60.5h10v4c-1.1.4-2.1 1-3 2-2.8 4.6-5.8 9-9 13h-13c2.8-4 5.8-7.8 9-11.5l-1-1c2.2-.4 2.8-1.4 2-3a70 70 0 0 1 5-3.5Z"/><path fill="#ff873e" d="M104.5 73.5v6h-7c2.3-1.9 4.1-4.2 5.5-7 .4.6.9.9 1.5 1Z"/><path fill="#ff853e" d="M104.5 64.5v9c-.6-.1-1.1-.4-1.5-1a20.7 20.7 0 0 1-5.5 7h-5c3.2-4 6.2-8.4 9-13 .9-1 1.9-1.6 3-2Z"/></svg>

================
File: docs/public/img/providers/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 76 65"><path fill="#fff" d="m37.5 0 37.6 65H0L37.5 0Z"/></svg>

================
File: docs/public/img/providers/vipps-mobilepay.svg
================
<svg width="116" height="50" viewBox="0 0 116 50" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_638_4)">
<g clip-path="url(#clip1_638_4)">
<mask id="mask0_638_4" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="50" height="50">
<path d="M50 0H0V50H50V0Z" fill="white"/>
</mask>
<g mask="url(#mask0_638_4)">
<mask id="mask1_638_4" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="50" height="50">
<path d="M50 0H0V50H50V0Z" fill="white"/>
</mask>
<g mask="url(#mask1_638_4)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M49.999 15.8369C49.999 15.2305 49.999 14.624 49.9952 14.0244C49.9921 13.5117 49.9862 13.0059 49.9727 12.4932C49.9579 11.3789 49.8604 10.2676 49.6806 9.16796C49.4921 8.06836 49.1406 7.00196 48.6387 6.00586C47.6173 4.00684 45.9902 2.38184 43.9902 1.3623C42.9952 0.857421 41.9296 0.505859 40.83 0.318359C39.7296 0.139648 38.6181 0.0410157 37.504 0.024414C36.9952 0.0117187 36.4854 0.00585937 35.9765 0.00585937C35.3721 4.85064e-10 34.7667 0 34.1642 0H15.835C15.2305 0 14.626 4.85064e-10 14.0225 0.00585937C13.5127 0.00585937 13.0039 0.0117187 12.4941 0.024414C11.3799 0.0410157 10.2686 0.139648 9.16796 0.318359C8.06835 0.505859 7.00294 0.857421 6.00781 1.3623C4.00781 2.38184 2.38183 4.00782 1.36035 6.00586C0.857421 7.00196 0.506835 8.06836 0.318358 9.16796C0.137695 10.2676 0.0400392 11.3789 0.0263673 12.4932C0.0126953 13.0059 0.00683594 13.5117 0.00390625 14.0244C0 14.624 0 15.2305 0 15.8369V34.1611C0 34.7676 0 35.374 0.00390625 35.9736C0.00390625 36.4863 0.0126953 36.9932 0.0263673 37.5049C0.0400392 38.619 0.137695 39.7305 0.318358 40.8301C0.506835 41.9307 0.857421 42.9961 1.36035 43.9932C2.38183 45.9911 4.00879 47.6161 6.00781 48.6368C7.00294 49.1415 8.06835 49.4932 9.16796 49.6807C10.2676 49.8624 11.3789 49.9609 12.4941 49.9736C13.0029 49.9863 13.5127 49.9932 14.0225 49.9932C14.627 49.999 15.2314 49.999 15.835 49.999H34.1631C34.7675 49.999 35.3731 49.999 35.9756 49.9932C36.4854 49.9932 36.9952 49.9863 37.504 49.9736C38.6181 49.9609 39.7304 49.8624 40.83 49.6807C41.9296 49.4932 42.9952 49.1415 43.9902 48.6368C45.9892 47.6172 47.6162 45.9911 48.6377 43.9932C49.1406 42.9961 49.4912 41.9307 49.6798 40.8301C49.8604 39.7305 49.9579 38.619 49.9727 37.5049C49.9862 36.9932 49.9921 36.4863 49.9952 35.9736C49.999 35.374 49.999 34.7676 49.999 34.1611V15.8369Z" fill="#FF5B24"/>
</g>
<path d="M25.76 31.7969C30.1358 31.7969 32.6202 29.668 34.9856 26.5928C36.2873 24.9365 37.9425 24.5821 39.1263 25.5284C40.3088 26.4746 40.4269 28.249 39.1263 29.9042C35.6954 34.3994 31.3196 37.12 25.76 37.12C19.7277 37.12 14.4055 33.8075 10.7385 28.0117C9.67401 26.4746 9.91034 24.8184 11.093 23.9903C12.2756 23.1621 14.05 23.5175 15.1144 25.1738C17.717 29.0761 21.2648 31.7969 25.76 31.7969ZM33.921 17.249C33.921 19.3779 32.2648 20.7969 30.3723 20.7969C28.4796 20.7969 26.8233 19.3779 26.8233 17.249C26.8233 15.1201 28.4796 13.7002 30.3723 13.7002C32.2648 13.7002 33.921 15.2373 33.921 17.249Z" fill="white"/>
</g>
</g>
<g clip-path="url(#clip2_638_4)">
<mask id="mask2_638_4" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="66" y="0" width="50" height="50">
<path d="M116 0H66V50H116V0Z" fill="white"/>
</mask>
<g mask="url(#mask2_638_4)">
<mask id="mask3_638_4" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="66" y="-1" width="50" height="51">
<path d="M116 -0.000976562H66V49.999H116V-0.000976562Z" fill="white"/>
</mask>
<g mask="url(#mask3_638_4)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M115.999 15.8369C115.999 15.2305 115.999 14.624 115.995 14.0244C115.992 13.5117 115.986 13.0049 115.973 12.4932C115.958 11.3789 115.86 10.2676 115.681 9.16796C115.492 8.06738 115.141 7.00196 114.639 6.00488C113.617 4.00684 111.99 2.38086 109.99 1.36133C108.995 0.856446 107.93 0.504882 106.83 0.317382C105.73 0.138672 104.618 0.0410155 103.504 0.0244141C102.995 0.0117187 102.485 0.00488281 101.976 0.00488281C101.372 -0.000976562 100.767 -0.000976562 100.164 -0.000976562H81.835C81.2305 -0.000976562 80.626 -0.000976562 80.0225 0.00488281C79.5127 0.00488281 79.0039 0.0117187 78.4941 0.0244141C77.3799 0.0410155 76.2686 0.138672 75.168 0.317382C74.0684 0.504882 73.0029 0.856446 72.0078 1.36133C70.0078 2.38184 68.3818 4.00684 67.3604 6.00488C66.8574 7.00196 66.5068 8.06738 66.3184 9.16796C66.1377 10.2676 66.04 11.3789 66.0264 12.4932C66.0127 13.0049 66.0068 13.5117 66.0039 14.0244C66 14.624 66 15.2305 66 15.8369V34.1611C66 34.7676 66 35.374 66.0039 35.9736C66.0039 36.4863 66.0127 36.9932 66.0264 37.5049C66.04 38.6192 66.1377 39.7305 66.3184 40.8301C66.5068 41.9307 66.8574 42.9961 67.3604 43.9932C68.3818 45.9913 70.0088 47.6161 72.0078 48.6367C73.0029 49.1415 74.0684 49.4932 75.168 49.6807C76.2676 49.8624 77.3789 49.9609 78.4941 49.9736C79.0029 49.9863 79.5127 49.9932 80.0225 49.9932C80.627 49.999 81.2314 49.999 81.835 49.999H100.163C100.767 49.999 101.373 49.999 101.976 49.9932C102.485 49.9932 102.995 49.9863 103.504 49.9736C104.618 49.9609 105.73 49.8624 106.83 49.6807C107.93 49.4932 108.995 49.1415 109.99 48.6367C111.989 47.6171 113.616 45.9913 114.638 43.9932C115.141 42.9961 115.491 41.9307 115.68 40.8301C115.86 39.7305 115.958 38.6192 115.973 37.5049C115.986 36.9932 115.992 36.4863 115.995 35.9736C115.999 35.374 115.999 34.7676 115.999 34.1611V15.8369Z" fill="#5A78FF"/>
</g>
<path fill-rule="evenodd" clip-rule="evenodd" d="M88.5035 11.2404C88.3531 11.2404 88.2016 11.2687 88.0551 11.3302L78.8413 15.1632C78.5513 15.2843 78.3247 15.5109 78.2046 15.8029C78.0845 16.0939 78.0845 16.4142 78.2046 16.7062L87.0024 38.0372C87.2506 38.6397 87.941 38.926 88.5376 38.677L97.7514 34.8428C98.3512 34.5939 98.6362 33.9024 98.3883 33.2999L89.5903 11.9689C89.4028 11.5148 88.9653 11.2404 88.5035 11.2404ZM88.0922 40.1437C87.0922 40.1437 86.1411 39.5489 85.7358 38.5645L76.939 17.2326C76.6792 16.6017 76.6792 15.9064 76.939 15.2756C77.1997 14.6437 77.689 14.1525 78.3179 13.8908L87.5318 10.0578C88.8287 9.5187 90.3218 10.1388 90.8599 11.4416L99.6576 32.7737C100.195 34.0764 99.5766 35.5764 98.2797 36.1153L89.066 39.9485C88.7485 40.0812 88.4185 40.1437 88.0943 40.1437H88.0922Z" fill="url(#paint0_radial_638_4)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M96.3085 25.6246C93.6396 26.7273 91.4121 28.2517 89.9521 30.0857L86.1904 21.0192C87.786 19.1022 89.8769 17.6618 92.5458 16.5593C95.2158 15.4568 97.911 14.9196 100.202 15.2312L103.964 24.2975C101.585 24.0486 98.9783 24.5221 96.3085 25.6246Z" fill="url(#paint1_linear_638_4)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M96.3085 25.6246C93.6396 26.7273 91.4121 28.2517 89.9521 30.0857L86.1904 21.0192C87.786 19.1022 89.8769 17.6618 92.5458 16.5593C95.2158 15.4568 97.911 14.9196 100.202 15.2312L103.964 24.2975C101.585 24.0486 98.9783 24.5221 96.3085 25.6246Z" fill="url(#paint2_radial_638_4)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M97.5665 28.4073C94.6836 28.4073 92.0459 28.9581 89.999 30.082V21.0177C92.2051 19.8691 94.6857 19.3418 97.5684 19.3428C100.451 19.3428 103.143 19.8711 105.136 21.0206V30.085C103.036 28.9589 100.449 28.4083 97.5665 28.4073Z" fill="white"/>
</g>
</g>
</g>
<defs>
<radialGradient id="paint0_radial_638_4" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(93.9841 23.7939) rotate(-78.91) scale(8.71581 6.82715)">
<stop stop-color="#626262"/>
<stop offset="1" stop-color="white"/>
</radialGradient>
<linearGradient id="paint1_linear_638_4" x1="87.9658" y1="27.2369" x2="96.0585" y2="21.6707" gradientUnits="userSpaceOnUse">
<stop stop-color="#D3D0DD"/>
<stop offset="1" stop-color="white"/>
</linearGradient>
<radialGradient id="paint2_radial_638_4" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(97.431 22.8898) rotate(90) scale(5.72754 13.2061)">
<stop stop-color="#DAD7E2"/>
<stop offset="0.58" stop-color="#D9D6E2"/>
<stop offset="1" stop-color="white" stop-opacity="0"/>
</radialGradient>
<clipPath id="clip0_638_4">
<rect width="116" height="50" fill="white"/>
</clipPath>
<clipPath id="clip1_638_4">
<rect width="50" height="50" fill="white"/>
</clipPath>
<clipPath id="clip2_638_4">
<rect width="50" height="50" fill="white" transform="translate(66)"/>
</clipPath>
</defs>
</svg>

================
File: docs/public/img/providers/vipps.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 21.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 163.5 66.1" style="enable-background:new 0 0 163.5 66.1;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#FF5B24;}
	.st1{fill:none;}
</style>
<path class="st0" d="M28,22l5.1,14.9l5-14.9H44l-8.8,22.1h-4.4L22,22H28z"/>
<path class="st1" d="M141.4,38.1l14.9-5.1l-14.9-5v-6l22.1,8.8v4.4L141.4,44V38.1z"/>
<path class="st1" d="M28,44l5.1,14.9l5-14.9H44l-8.8,22.1h-4.4L22,44H28z"/>
<path class="st1" d="M38.1,22.1L33,7.2l-5,14.9h-6L30.9,0h4.4l8.8,22.1H38.1z"/>
<path class="st1" d="M22.1,28L7.2,33.1l14.9,5.1v5.9L0,35.3v-4.4L22.1,22V28z"/>
<path class="st0" d="M57.3,40.6c3.7,0,5.8-1.8,7.8-4.4c1.1-1.4,2.5-1.7,3.5-0.9s1.1,2.3,0,3.7c-2.9,3.8-6.6,6.1-11.3,6.1
	c-5.1,0-9.6-2.8-12.7-7.7c-0.9-1.3-0.7-2.7,0.3-3.4s2.5-0.4,3.4,1C50.5,38.3,53.5,40.6,57.3,40.6z M64.2,28.3c0,1.8-1.4,3-3,3
	s-3-1.2-3-3s1.4-3,3-3C62.8,25.3,64.2,26.6,64.2,28.3z"/>
<path class="st0" d="M78.3,22v3c1.5-2.1,3.8-3.6,7.2-3.6c4.3,0,9.3,3.6,9.3,11.3c0,8.1-4.8,12-9.8,12c-2.6,0-5-1-6.8-3.5v10.6h-5.4
	V22H78.3z M78.3,33c0,4.5,2.6,6.9,5.5,6.9c2.8,0,5.6-2.2,5.6-6.9c0-4.6-2.8-6.8-5.6-6.8C81,26.2,78.3,28.3,78.3,33z"/>
<path class="st0" d="M104.3,22v3c1.5-2.1,3.8-3.6,7.2-3.6c4.3,0,9.3,3.6,9.3,11.3c0,8.1-4.8,12-9.8,12c-2.6,0-5-1-6.8-3.5v10.6h-5.4
	V22H104.3z M104.3,33c0,4.5,2.6,6.9,5.5,6.9c2.8,0,5.6-2.2,5.6-6.9c0-4.6-2.8-6.8-5.6-6.8C106.9,26.2,104.3,28.3,104.3,33z"/>
<path class="st0" d="M132.3,21.4c4.5,0,7.7,2.1,9.1,7.3l-4.9,0.8c-0.1-2.6-1.7-3.5-4.1-3.5c-1.8,0-3.2,0.8-3.2,2.1
	c0,1,0.7,2,2.8,2.4l3.7,0.7c3.6,0.7,5.6,3.1,5.6,6.3c0,4.8-4.3,7.2-8.4,7.2c-4.3,0-9.1-2.2-9.8-7.6l4.9-0.8c0.3,2.8,2,3.8,4.8,3.8
	c2.1,0,3.5-0.8,3.5-2.1c0-1.2-0.7-2.1-3-2.5l-3.4-0.6c-3.6-0.7-5.8-3.2-5.8-6.4C124.2,23.5,128.7,21.4,132.3,21.4z"/>
</svg>

================
File: docs/public/img/providers/vk.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 30 30"><path fill="#fff" d="M0 14.4C0 7.6 0 4.2 2.1 2.1 4.2 0 7.6 0 14.4 0h1.2c6.8 0 10.2 0 12.3 2.1C30 4.2 30 7.6 30 14.4v1.2c0 6.8 0 10.2-2.1 12.3C25.8 30 22.4 30 15.6 30h-1.2c-6.8 0-10.2 0-12.3-2.1C0 25.8 0 22.4 0 15.6v-1.2Z"/><path fill="#07F" d="M16 21.6C9 21.6 5.2 17 5 9.1h3.5c.1 5.7 2.6 8.2 4.6 8.7V9h3.3v5c2-.2 4-2.5 4.7-5h3.2a9.5 9.5 0 0 1-4.4 6.3 9.9 9.9 0 0 1 5.2 6.2h-3.6a6.2 6.2 0 0 0-5.1-4.5v4.5H16Z"/></svg>

================
File: docs/public/img/providers/webex.svg
================
<svg xmlns="http://www.w3.org/2000/svg" baseProfile="basic" viewBox="0 0 48 48"><linearGradient id="a" x1="25.503" x2=".665" y1="26.5" y2="26.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#0c63ad"/><stop offset="1" stop-color="#50e6ff"/></linearGradient><path fill="url(#a)" d="m26.6 31-2.5 5.5a11 11 0 0 1-8.2 4c-6.6.2-9.7-5.8-9.7-5.8A44 44 0 0 1 1 17c0-.8.2-1.6.7-2.3a4.2 4.2 0 0 1 4-2.1 4.7 4.7 0 0 1 3.6 1.8c.5 1 .8 2 .8 3a41.3 41.3 0 0 0 3.5 12c.3.8.8 1.4 1.5 2l.4.1c1 .2 1.6-.6 2-1.4l1.4-3.7c0-.3 0-.5.2-.8l.3-1.3 2-5.7L26.7 31z"/><radialGradient id="b" cx="26.403" cy="22.574" r="21.814" gradientTransform="matrix(1 0 0 1.1255 0 -2.8)" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#185c37"/><stop offset=".661" stop-color="#30dc80"/><stop offset="1" stop-color="#5eee5c"/></radialGradient><path fill="url(#b)" d="M32.3 7.5a11.2 11.2 0 0 0-4.7 1 10.3 10.3 0 0 0-3.6 3l-3 8 5.8 11 2-6.2.1-1a30.3 30.3 0 0 1 1.6-4.9 3.6 3.6 0 0 1 1.1-1.6 1.3 1.3 0 0 1 1.5.1l.6.7.5.7.8 1.7a8.7 8.7 0 0 0 .9 1.4c.4.5 1 .9 1.6 1.2.5.3 1.2.4 1.8.4a5.2 5.2 0 0 0 1.8-.3 4.1 4.1 0 0 0 1.5-1c.4-.4.7-1 1-1.5a5.8 5.8 0 0 0 .3-1.7 4.8 4.8 0 0 0-.4-2s-1.7-4.5-4.8-6.8a10.5 10.5 0 0 0-6.4-2.2z"/><linearGradient id="c" x1="1.591" x2="52.822" y1="27.9" y2="18.867" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#103f8d"/><stop offset=".494" stop-color="#2f64f7"/><stop offset="1" stop-color="#11408b"/></linearGradient><path fill="url(#c)" d="m15 7.5-1.1.1a11 11 0 0 0-7.2 5c.4 0 .9.3 1.2.5.6.3 1 .7 1.4 1.2.5.9.8 2 .8 3a47.3 47.3 0 0 0 1.3 6.7 21.7 21.7 0 0 1 3-6.8l.7-.6a1 1 0 0 1 .5-.1c.2 0 .5 0 .8.2l.7.7a17.6 17.6 0 0 1 1.9 5.2l1.3 5.3a37.3 37.3 0 0 0 1.7 5.3c2 4.6 5.1 6 5.1 6a11.6 11.6 0 0 0 5 1.2 9.6 9.6 0 0 0 4.6-1 12.7 12.7 0 0 0 4.2-3.3 22.6 22.6 0 0 0 1.8-3 35.4 35.4 0 0 0 2.8-7.5 42.5 42.5 0 0 0 1-5l.4-2.5a5.6 5.6 0 0 0 0-2.3l-.2-.4a4.6 4.6 0 0 0-2-2.3 3.9 3.9 0 0 0-2.2-.7 5.6 5.6 0 0 0-1.1.2 23 23 0 0 1 2.1 3.9 4.8 4.8 0 0 1 .4 1.9 5.8 5.8 0 0 1-.3 1.7 7.7 7.7 0 0 1-1 1.6 3.4 3.4 0 0 1-1.5 1 5.2 5.2 0 0 1-1.8.3 4 4 0 0 1-2.3-.7l-.4 1.8A21.3 21.3 0 0 1 35 28a14.1 14.1 0 0 1-1.1 2.2 3 3 0 0 1-1.3 1.1 1.8 1.8 0 0 1-.6 0 1 1 0 0 1-.5-.1 3.3 3.3 0 0 1-.9-1 13 13 0 0 1-.7-1.4c-.4-1-1-3.4-1-3.4l-.7-2.6-.6-2.5-.5-1.7a19.5 19.5 0 0 0-2.8-6.6A11 11 0 0 0 19 8a9 9 0 0 0-2.6-.5H15z"/></svg>

================
File: docs/public/img/providers/wechat.svg
================
<svg version="1.1" viewBox="0 0 512 512" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="_x33_71-wechat"><g><g><path d="M342.248,169.517c8.712,0,17.221,0.724,25.616,1.759C352.687,104.625,282.682,54.21,198.503,54.21     c-95.28,0-172.502,64.541-172.502,144.134c0,45.889,25.819,86.602,65.866,112.945l-22.742,45.605l61.953-26.608     c13.285,4.731,27.09,8.627,41.835,10.44c-2.015-8.796-3.16-17.813-3.16-27.068C169.753,234.178,247.115,169.517,342.248,169.517z      M256.003,119.066c11.905,0,21.56,9.685,21.56,21.623c0,11.942-9.654,21.62-21.56,21.62c-11.912,0-21.563-9.678-21.563-21.62     C234.44,128.75,244.091,119.066,256.003,119.066z M141.001,162.309c-11.907,0-21.562-9.678-21.562-21.62     c0-11.938,9.656-21.623,21.562-21.623s21.563,9.685,21.563,21.623C162.563,152.631,152.906,162.309,141.001,162.309z" style="fill:#51C332;"/><path d="M485.999,313.656c0-63.684-64.376-115.312-143.751-115.312     c-79.378,0-143.745,51.628-143.745,115.312c0,63.679,64.367,115.308,143.745,115.308c13.054,0,25.471-1.845,37.519-4.465     l77.483,33.291l-26.798-53.701C464.035,382.983,485.999,350.527,485.999,313.656z M299.125,306.448     c-11.906,0-21.563-9.681-21.563-21.625c0-11.938,9.656-21.616,21.563-21.616c11.91,0,21.561,9.682,21.561,21.616     C320.686,296.768,311.033,306.448,299.125,306.448z M385.373,306.448c-11.912,0-21.561-9.681-21.561-21.625     c0-11.938,9.648-21.616,21.561-21.616c11.911,0,21.563,9.682,21.563,21.616C406.936,296.768,397.284,306.448,385.373,306.448z" style="fill:#51C332;"/></g></g></g><g id="Layer_1"/></svg>

================
File: docs/public/img/providers/wikimedia.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="-16 -16 32 32"><clipPath id="a"><path d="M1-2v12h-2V-2l-15-15v33h32v-33z"/></clipPath><g clip-path="url(#a)"><circle r="9"/><circle r="13" fill="none" stroke="#000" stroke-width="4"/></g><circle cy="-10" r="5"/></svg>

================
File: docs/public/img/providers/wordpress.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.5 122.5"><g fill="#464342"><path d="M8.7 61.3a52.7 52.7 0 0 0 29.6 47.3l-25-68.7c-3 6.5-4.6 13.7-4.6 21.4z"/><path d="M96.7 58.6c0-6.5-2.3-11-4.3-14.5-2.7-4.3-5.2-8-5.2-12.3 0-4.8 3.7-9.3 8.9-9.3h.7a52.4 52.4 0 0 0-79.4 9.9h3.3c5.5 0 14-.6 14-.6 2.9-.2 3.2 4 .4 4.3 0 0-2.9.4-6 .5l19.1 57L59.7 59l-8.2-22.5c-2.8-.1-5.5-.5-5.5-.5-2.8-.1-2.5-4.5.3-4.3 0 0 8.7.7 13.9.7 5.5 0 14-.7 14-.7 2.8-.2 3.2 4 .3 4.3 0 0-2.8.4-6 .5l19 56.5 5.2-17.5c2.3-7.3 4-12.5 4-17z"/><path d="m62.2 65.9-15.8 45.8a52.6 52.6 0 0 0 32.3-.9l-.4-.7z"/><path d="M107.4 36a49.6 49.6 0 0 1-3.6 24.2l-16.1 46.5A52.5 52.5 0 0 0 107.4 36z"/><path d="M61.3 0a61.3 61.3 0 1 0 .1 122.7A61.3 61.3 0 0 0 61.3 0zm0 119.7a58.5 58.5 0 1 1 .1-117 58.5 58.5 0 0 1-.1 117z"/></g></svg>

================
File: docs/public/img/providers/workos.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 59 51"><path fill="#6363f1" d="M0 25.4c0 1.1.3 2.2.9 3.2L11 46.4a8.3 8.3 0 0 0 14.6.2l2.5-4.3-9.8-16.9 10.3-18 2.5-4.2C32 1.9 33 .8 34.2 0H18a7.8 7.8 0 0 0-6.7 4L1 22.1a6 6 0 0 0-.9 3.2Z"/><path fill="#6363f1" d="M58.6 25.4c0-1.1-.3-2.2-.8-3.2l-10.5-18c-1.9-3.4-6-5-9.9-3.8-2 .7-3.6 2.2-4.6 4l-2.4 4 9.8 17-10.3 18-2.5 4.2a9.2 9.2 0 0 1-3 3.2h16c2.8 0 5.4-1.5 6.8-4l10.6-18.2c.5-1 .8-2 .8-3.2Z"/></svg>

================
File: docs/public/img/providers/yandex.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><g transform="matrix(.75 0 0 .75 32 32)"><g fill="#ff0000" fill-opacity="0" stroke-miterlimit="10" font-family="none" font-size="none" font-weight="none" style="mix-blend-mode: normal" text-anchor="none"><path fill="none" d="M-42.7 298.7V-42.7h341.4v341.4z"/></g><g fill="#ff0000" stroke-miterlimit="10" font-family="none" font-size="none" font-weight="none" style="mix-blend-mode: normal" text-anchor="none"><path d="M128 292.6a164.6 164.6 0 0 1 0-329.1 164.6 164.6 0 1 1 0 329.1z"/></g><g fill="#ffffff" stroke-miterlimit="10" font-family="none" font-size="none" font-weight="none" style="mix-blend-mode: normal" text-anchor="none"><g transform="scale(5.33333)"><path d="M21.4 47.3h4.9c-.4-4 .7-8.4.3-12.5a17.9 17.9 0 0 1 1.7-8.6c3.5-8.8 5.8-15.8 9-24.7H32c-3 7.5-6 15.2-8 22.9-3.7-6.1-5.2-12.2-7.1-18.4-.1-.4-.3-.9-.7-1.1-.2-.2-.5-.2-.8-.2-1.6-.1-3.1-.2-4.7-.1A185.7 185.7 0 0 1 21 33.4c.2 1.4.4 2.7.4 4.2v9.7z"/><path d="M37.2 1H32c-.3 0-.4.2-.5.4a252 252 0 0 0-7.7 21.7 61.7 61.7 0 0 1-4.9-12l-1-3.3c-.2-1-.4-2-.9-2.8-.5-.8-1.5-.8-2.3-.9a43 43 0 0 0-4 0c-.4 0-.6.4-.4.7 2.5 5.5 4.7 11 6.7 16.7 1.8 5.4 4 11 4 16.9v9l.1.3.3.1h4.9c.3 0 .5-.2.5-.5-.3-3.3.3-6.7.4-10 0-1.5-.2-3 0-4.5 0-1.3.1-2.5.5-3.7l3.2-8 3.2-9 3.6-10.4c.1-.3-.2-.7-.5-.7zm-7 18.7L27 28c-.4 1.1-.7 2.3-.8 3.5l-.1 2V36c.2 3.7-.5 7.3-.3 11h-3.9c0-5.4.5-10.9-1-16.1A162 162 0 0 0 11.6 5h3c.4 0 1.1 0 1.5.2.3.3.4.9.6 1.3l1.8 6c1.3 4.2 2.9 8.3 5.1 12 .2.4.8.3 1 0A241 241 0 0 1 32.2 2h4.2c-2 6-4 11.8-6.2 17.7z"/></g></g></g></svg>

================
File: docs/public/img/providers/zitadel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 511 512"><path fill="#252525" d="M348.3 139.2c4.9 5 7.3 10.5 7.8 17.5a31.4 31.4 0 0 1-7.8 18 15 15 0 0 0-1.7 11.6c2.5 8.5 2.5 8.5 8.4 14.7l5 2.4a27 27 0 0 1 12.9 13c2 6.6 1.9 11.5-1 17.8a25 25 0 0 1-8.9 9.8l-2.6 1.8c-6 2-12 2.4-18 .3-7-3.6-11.4-8.5-13.9-16-2.2-8.7 1-14.6 5.5-22.1l2-2c1-7.9 0-16.4-4.4-23.2-1.6-2-1.6-2-4.4-2.7-5.7-.1-9.5 3-13.6 6.7l-1.5 1.4-3.1 3-1.6 1.5-5.7 5c-3.1 2.7-6 5.6-8.8 8.5a98.4 98.4 0 0 1-5.4 4.8c-5.4 4.7-10.4 9.8-15.4 14.8A10312.3 10312.3 0 0 1 261 237l-8.2 8.2a22863.4 22863.4 0 0 0-19.5 19.5c-2.3 2.2-2.3 2.2-4 4.6L228 271h-2l-.7 1.7a30.2 30.2 0 0 1-5.8 7l-2.8 2.7-2.9 2.9c-8 7.8-15.7 15.5-22.2 24.6l-2 2.8c-2.7 4-3.1 6.4-2.6 11.3 8.6 13 36.4 15.8 50.5 19.6l18.2 5a185873397.3 185873397.3 0 0 0 34.4 9.4l2.3.6a47587.3 47587.3 0 0 1 66.1 18.4c10.2 2.8 10.2 2.8 20.4 1.2 2-1.3 2-1.3 4.1-4.2a37.9 37.9 0 0 0-4-21c-2.5-3-4.7-4.6-8.4-6a25 25 0 0 1-13.8-12 24.7 24.7 0 0 1 .2-19c4-6.8 8.5-10.5 16-13 8.2-.7 14.2.6 20.8 5.8 5.2 4.7 7 10 7.4 17a24.6 24.6 0 0 1-6.4 16.2c-2.4 3.2-3.6 5.4-3.2 9.6l.4 2.4.5 3.4c1.4 7.5 1.4 7.5 6.6 12.8a108 108 0 0 0 9.9 3.8l3 2v2h2c4.2 7 6.4 12.8 4.5 21-2 6-5.2 10.9-10.5 14.3-6.5 3.3-12.7 4-19.6 1.9A25.4 25.4 0 0 1 375 403c-.5-1.6-1-3.2-1.3-4.7-1-3.2-1-3.2-3.3-5.4-7-3-14.2-5-21.6-6.8l-9.8-2.6a5490.8 5490.8 0 0 0-30.1-8.2l-12.5-3.4-2.5-.7a14547.8 14547.8 0 0 0-56.4-15.4c-32-11.2-32-11.2-63.6-7.9l-2.6 1.7A20.4 20.4 0 0 1 158 352a30 30 0 0 1-18-15c-2.1-7-1.3-13.6 2-20 3.9-6.3 8.9-9.2 16-11 3.3-.4 6.6-.6 10-.8 9.4-.7 14.3-5.9 21-12.2l4.4-3.7c2.9-2.6 5.3-5.2 7.6-8.3l5-5 2.5-2.5 2.5-2.5 2.5-2.6c2.5-2.4 2.5-2.4 4.9-4.2 2.2-1.9 4-3.7 5.8-5.9 3.5-4 7-7.7 10.8-11.4l2-2a3916.8 3916.8 0 0 1 30.2-30 8164.6 8164.6 0 0 0 16.3-16.2c18.2-16.3 18.2-16.3 25.9-37.9.3-9 2.2-15.9 9-22.3 9.4-7.2 20.6-5.5 29.9.7Z"/><path fill="#F932A0" d="M367 12h2a5488 5488 0 0 1 18.8 69.6l.7 2.8 3.6 13.6c2.8 11 5.8 22 8.9 33l.9 3 .7 2.6.6 2.3 1.3 4.4c1.5 5.5 1.5 5.5 1.5 7.7a142 142 0 0 1-25.4-5l-6-1.4-3.6-.9c-3.9-2.2-4.3-4-5.4-8.1a317837293.2 317837293.2 0 0 1-2.1-8l-1.6-5.8-.8-3.1a8183.3 8183.3 0 0 1-7-26l-.7-2.8-.7-2.4A187 187 0 0 0 350 79l-1.6 1.7A1738.9 1738.9 0 0 1 325 105a529.4 529.4 0 0 1-10.6 11c-7.5 8-7.5 8-12.4 8.3-2.8-.5-5.4-1.2-8.1-2.2l-3.6-.9-3.2-.8-3.4-1-3.5-1A14753508161.7 14753508161.7 0 0 0 268 115c0-4 0-4 1.4-5.7 1.6-1.3 1.6-1.3 3.6-1.3l.7-1.7c1.7-3 3.8-5 6.3-7.3h2l.8-1.9c1.4-2.5 2.6-2.8 5.2-4.1l.8-1.7c1.6-3 3.8-5.1 6.2-7.5l2.7-2.8c2.3-2 2.3-2 4.3-2l.7-1.7c1.7-3 3.8-5 6.3-7.3h2l.8-1.9c1.4-2.5 2.6-2.8 5.2-4.1l1-2c1.2-2.5 2.5-3 5-4v-2h2l.8-1.9c1.4-2.5 2.6-2.8 5.2-4.1l1-2c1.3-2.5 2.5-2.8 5-4l1-3h2l.8-1.9c1.4-2.5 2.6-2.8 5.2-4.1l1-2c1.2-2.5 2.5-3 5-4v-2h2l2-4h2v-2h2l.8-1.9c1.4-2.5 2.6-2.9 5.2-4.1l1-3Z"/><path fill="#FB18D1" d="m463 362 6.8 25.4 1 3.8c5 18.4 9.8 36.7 14.6 55.1 3.2 12.5 6.6 24.9 10.2 37.2l.6 2.2c.4 1.5.8 3 1.3 4.3 1 3.8 1.6 7 1.5 11a14227 14227 0 0 1-21.6-5.4c-9.7-2.4-19.5-4.9-29.2-7.6l-20.3-5.5-3.6-1-14.5-3.8c-16.6-4.5-33.2-9-49.8-13.7a375.3 375.3 0 0 1 21.8-23.7l2.5-2.6c3.2-2 5-1.9 8.6-1.2l2.1.5 3.7.9 3.9 1 2 .6a6403 6403 0 0 0 35.8 9.6l2.4.6c3.5 1 3.5 1 7.2 1.3l-.6-2.3a2084 2084 0 0 1-12-42.7l-1-4c-3.1-10.4-3.1-10.4-1.4-14.2a33 33 0 0 1 5-4.8l2.6-2.7 6.7-6.8 4.4-4.4 2.7-2.8 2.5-2.5c2.1-1.8 2.1-1.8 4.1-1.8Z"/><path fill="#FC7B20" d="M114 268a1378.7 1378.7 0 0 1 8.7 30.5l.6 2c.5 2 .5 2 .7 5.5-2.3 2.8-2.3 2.8-5 5l-2.5 2.6a99.6 99.6 0 0 1-7.5 6.4 62.2 62.2 0 0 0-6.8 7.4c-2.5 3-5.3 5.4-8.2 7.9A85.1 85.1 0 0 0 83 347l-4 4a907.6 907.6 0 0 0 10.6 3.2c6 1.8 11.7 3 17.9 4 29 4.3 29 4.3 35 11.7 6.1 10.2 8 23.4 8.5 35.1l-1 2a14352.8 14352.8 0 0 1-45.7-12l-31-8.3C53 381.2 32.5 375.7 12 370c1.5-3.4 3.3-5.6 6-8.2l2.4-2.5 2.8-2.8a4820.2 4820.2 0 0 0 10.7-10.7l8.2-8.2a13590 13590 0 0 1 59.3-59.2l4.2-4.2 2.5-2.5 2.1-2.2c1.8-1.5 1.8-1.5 3.8-1.5Z"/><path fill="#F75C52" d="M154 160c18.9 7.5 37.2 16.3 55.6 24.8l2.5 1.2a4808.1 4808.1 0 0 1 19.9 9 25 25 0 0 1-5.8 8l-2.3 2.4-2.5 2.5-2.6 2.6a2763.8 2763.8 0 0 1-19 19.1l-2.6 2.6-2.3 2.3-2 2C191 238 191 238 188 238l-1.3-2.9a1528.8 1528.8 0 0 0-15.5-34.7l-9.7-20.9-1.5-3.4-2.9-6-1.3-2.8-1-2.3c-.8-2-.8-2-.8-5Z"/><path fill="#F91CC6" d="M393 238c45.6 4 45.6 4 65 6 7 .8 14 1.4 21 2v2a163.6 163.6 0 0 1-12.1 8.6l-2.5 1.7-11.2 8a1458 1458 0 0 1-22 15.6L410 297c-2-1-2-1-2.8-3.2l-.8-3-1-3.4-.9-3.7-1-3.7a2260.3 2260.3 0 0 1-7.3-27.6l-1-3.7-.9-3.3-.7-3c-.6-2.4-.6-2.4-.6-4.4Z"/><path fill="#FA4A75" d="M239 396c7.2.6 14 2.4 21 4.3l6.1 1.6a774 774 0 0 1 23 6.3c2.6.7 5.2 1.3 7.9 1.8a38 38 0 0 1-4.8 9.2l-1.7 2.4-1.8 2.6-1.9 2.7a2518.8 2518.8 0 0 1-25.7 35.6l-1.6 2.3c-3.9 5.3-7.7 10.7-11.5 16.2-2.5-3.7-2.6-7-3-11.4a314370181.6 314370181.6 0 0 0-5.1-54.2c-.7-6.5-1-12.9-.9-19.4Z"/></svg>

================
File: docs/public/img/providers/zoho.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="Layer_1" x="0" y="0" style="enable-background:new 0 0 1024 450;" version="1.1" viewBox="0 0 1024 450"><style>.st0{fill:#089949;}
	.st1{fill:#F9B21D;}
	.st2{fill:#E42527;}
	.st3{fill:#226DB4;}</style><g><g><g><path d="M458.1 353a57 57 0 0 1-23-4.9l-160-71.3a57 57 0 0 1-28.8-75l71.3-160a57 57 0 0 1 75-28.8l160 71.3a57 57 0 0 1 28.8 75l-71.3 160a57 57 0 0 1-52 33.7zm-9.7-34.9a24 24 0 0 0 31.7-12.1l71.3-160a24 24 0 0 0-12.1-31.7L379.2 43a24 24 0 0 0-31.7 12.1l-71.3 160a24 24 0 0 0 12.1 31.7l160.1 71.3z" class="st0"/></g><g><path d="M960 353.1H784.8a56.9 56.9 0 0 1-56.8-56.8V121.1a56.9 56.9 0 0 1 56.8-56.8H960a56.9 56.9 0 0 1 56.8 56.8v175.2a56.9 56.9 0 0 1-56.8 56.8zm-175.2-256a24 24 0 0 0-24 24v175.2a24 24 0 0 0 24 24H960a24 24 0 0 0 24-24V121.1a24 24 0 0 0-24-24H784.8z" class="st1"/></g><path d="M303.9 153.2 280.3 206l-.9 1.6 9.2 56.8a24 24 0 0 1-19.8 27.5l-173 28c-6.3 1-12.7-.5-17.9-4.2a23.6 23.6 0 0 1-9.6-15.6l-28-173c-1-6.3.5-12.7 4.2-17.9 3.7-5.2 9.3-8.6 15.6-9.6l173-28 3.8-.3c11.5 0 21.8 8.4 23.7 20.2l9.3 57.2L294.3 94l-1.3-7.7c-5-30.9-34.2-52-65.1-47l-173 28a56.4 56.4 0 0 0-46.9 65l28 173a56.3 56.3 0 0 0 65.1 47l173-28c30.9-5 52-34.2 47-65.1l-17.2-106z" class="st2"/><g><path d="m511.4 235.8 25.4-56.9-7.2-52.9c-.9-6.3.8-12.6 4.7-17.7 3.9-5.1 9.5-8.4 15.9-9.2l173.6-23.6 3.3-.2c5.2 0 10.2 1.7 14.5 4.9l2.2 1.9a57.2 57.2 0 0 1 29.1-16.4 56.5 56.5 0 0 0-53.5-22.8L545.6 66.5a56.5 56.5 0 0 0-48.6 63.9l14.4 105.4z" class="st3"/><path d="M806.8 265.1 784 97.1a24 24 0 0 0-23.1 23.9v49.3l13.5 99.2c.9 6.3-.8 12.6-4.7 17.7s-9.5 8.4-15.9 9.2L580.2 320c-6.3.9-12.6-.8-17.7-4.7a23.5 23.5 0 0 1-9.2-15.9l-8-58.9-25.4 56.9.9 6.4a56 56 0 0 0 21.9 37.5 56.3 56.3 0 0 0 42.1 11.1L758.2 329a56.5 56.5 0 0 0 48.6-63.9z" class="st3"/></g></g><g><path d="m317 436.2 24.8-36.6h-20.4a2 2 0 0 1-2-2v-4.9c0-1.1.9-2 2-2h33.5a2 2 0 0 1 2 2v1.9c0 .4-.1.8-.3 1.1l-24.3 36.6h21.8a2 2 0 0 1 2 2v4.9a2 2 0 0 1-2 2h-35.4a2 2 0 0 1-2-2v-1.8c-.1-.5.1-.9.3-1.2z"/><path d="M421.4 415.6a25 25 0 0 1 26-25.8c15.5 0 26 10.6 26 25.9a25 25 0 0 1-26.2 26.2c-15.6 0-25.8-10.7-25.8-26.3zm40.1.2c0-9.1-4.4-16.9-14.3-16.9-10 0-13.8 8.1-13.8 17.3 0 8.7 4.7 16.7 14.3 16.7 9.9-.1 13.8-8.6 13.8-17.1z"/><path d="M544.5 390.6h7.4a2 2 0 0 1 2 2v18.6h21v-18.6c0-1.1.9-2 2-2h7.4a2 2 0 0 1 2 2v46.5a2 2 0 0 1-2 2H577a2 2 0 0 1-2-2v-18.8h-21v18.8a2 2 0 0 1-2 2h-7.4a2 2 0 0 1-2-2v-46.5c-.1-1.1.8-2 1.9-2z"/><path d="M655.4 415.6a25 25 0 0 1 26-25.8c15.5 0 26 10.6 26 25.9a25 25 0 0 1-26.2 26.2c-15.6 0-25.8-10.7-25.8-26.3zm40 .2c0-9.1-4.4-16.9-14.3-16.9-10 0-13.8 8.1-13.8 17.3 0 8.7 4.7 16.7 14.3 16.7 9.9-.1 13.8-8.6 13.8-17.1z"/></g></g></svg>

================
File: docs/public/img/providers/zoom.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><defs><linearGradient id="a" x1="23.666%" x2="76.334%" y1="95.6118%" y2="4.3882%"><stop offset="5.791949e-05%" stop-color="#0845BF"/><stop offset="19.11%" stop-color="#0950DE"/><stop offset="38.23%" stop-color="#0B59F6"/><stop offset="50%" stop-color="#0B5CFF"/><stop offset="67.32%" stop-color="#0E5EFE"/><stop offset="77.74%" stop-color="#1665FC"/><stop offset="86.33%" stop-color="#246FF9"/><stop offset="93.88%" stop-color="#387FF4"/><stop offset="100%" stop-color="#4F90EE"/></linearGradient></defs><g><path fill="url(#a)" d="M256 128c0 13.6-1 27.1-3.3 40.2-7 43.3-41.2 77.6-84.5 84.5A232 232 0 0 1 128 256c-13.6 0-27.1-1-40.2-3.3-43.3-7-77.6-41.2-84.5-84.5A232 232 0 0 1 0 128c0-13.6 1-27.1 3.3-40.2 7-43.3 41.2-77.6 84.5-84.5A232 232 0 0 1 128 0c13.6 0 27.1 1 40.2 3.3 43.3 7 77.6 41.2 84.5 84.5A232 232 0 0 1 256 128Z"/><path fill="#FFFFFF" d="M204 207.9H75c-8.4 0-16.6-4.6-20.5-12a22.2 22.2 0 0 1 4.1-26.2L148.5 80H84a32 32 0 0 1-32-32h118.8a23 23 0 0 1 20.4 12 22.2 22.2 0 0 1-4 26.1l-89.7 90.1H172c17.7 0 32 14.1 32 31.8Z"/></g></svg>

================
File: docs/utils/types.ts
================
export interface ChildrenProps {
  children: React.ReactNode
}

================
File: docs/utils/useCopyButton.ts
================
import {
  useState,
  useRef,
  useEffect,
  useCallback,
  type MouseEventHandler,
} from "react"
export function useCopyButton(
  onCopy: () => void
): [checked: boolean, onClick: MouseEventHandler]
⋮----
// Avoid updates after being unmounted

================
File: docs/utils/useInkeepSettings.ts
================
import type {
  InkeepAIChatSettings,
  InkeepWidgetBaseSettings,
  InkeepModalSettings,
  AIChatDisclaimerSettings,
} from "@inkeep/widgets"
import { useTheme } from "nextra-theme-docs"
type InkeepSharedSettings = {
  baseSettings: InkeepWidgetBaseSettings
  aiChatSettings: InkeepAIChatSettings
  modalSettings: InkeepModalSettings
}
const useInkeepSettings = (): InkeepSharedSettings =>
⋮----
primaryBrandColor: "#efe0ff", // your brand color, widget color scheme is derived from this
⋮----
forcedColorMode: resolvedTheme, // to sync dark mode with the widget

================
File: docs/.gitignore
================
.next
node_modules
.env*
tsconfig.tsbuildinfo

# Sitemap - Autogenerated
public/sitemap.xml
public/robots.txt

# Generated Typedoc
!pages/reference/_meta.js
!pages/reference/warnings.mdx
pages/reference/*

================
File: docs/LICENSE
================
ISC License

Copyright (c) 2022-2024, Balázs Orbán

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

================
File: docs/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />
// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

================
File: docs/next-sitemap.config.cjs
================
/** @type {import('next-sitemap').IConfig} */

================
File: docs/next.config.js
================
const withNextra = nextra({
⋮----
export default withNextra({
redirects: () => {

================
File: docs/package.json
================
{
  "name": "docs",
  "description": "Auth.js Documentation",
  "private": true,
  "type": "module",
  "scripts": {
    "typedoc": "typedoc",
    "dev": "TYPEDOC_SKIP_ADAPTERS=1 typedoc & next dev",
    "dev:adapters": "typedoc & next dev",
    "build": "typedoc && next build",
    "start": "next start",
    "lint": "eslint ./{components,pages,utils}",
    "lint:fix": "eslint ./{components,pages,utils} --fix",
    "build:sitemap": "next-sitemap --config next-sitemap.config.cjs",
    "clean": "rm -rf .next build pages/reference/*.mdx pages/reference/**/*"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nextauthjs/next-auth"
  },
  "author": "Auth.js Team (https://authjs.dev/contributors)",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "homepage": "https://authjs.dev",
  "dependencies": {
    "@ariakit/react": "^0.4.13",
    "@docsearch/react": "3",
    "@inkeep/widgets": "^0.2.289",
    "@next/third-parties": "^14.2.15",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@vercel/analytics": "^1.3.1",
    "@vercel/kv": "^1.0.1",
    "algoliasearch": "^4.24.0",
    "classnames": "^2.5.1",
    "framer-motion": "^11.11.8",
    "next": "14.2.21",
    "next-sitemap": "^4.2.3",
    "nextra": "3.0.15",
    "nextra-theme-docs": "3.0.15",
    "react": "18.3.1",
    "react-dom": "18.3.1"
  },
  "devDependencies": {
    "@types/node": "20.12.7",
    "@types/react": "18.2.78",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "shiki": "^1.22.0",
    "tailwindcss": "^3.4.13",
    "typedoc": "^0.27.6",
    "typedoc-plugin-markdown": "4.3.3",
    "typedoc-plugin-mdn-links": "4.0.11",
    "typedoc-plugin-no-inherit": "^1.5.0"
  }
}

================
File: docs/postcss.config.cjs
================


================
File: docs/README.md
================
<img src="public/img/logo-sm.png" alt="Logo" width="118" height="128" align="right" />

# Auth.js Docs

## Quick Start

First, run `pnpm i` to install the dependencies.

Then, run `pnpm dev` to start the development server and visit localhost:3000.

## License

This project is licensed under the MIT License.

================
File: docs/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */

================
File: docs/theme.config.tsx
================
import { DocsThemeConfig, ThemeSwitch } from "nextra-theme-docs"
import { Link } from "@/components/Link"
import { ChildrenProps } from "@/utils/types"
import Footer from "@/components/Footer"
import Docsearch from "@/components/DocSearch"
import dynamic from "next/dynamic"
import { usePathname } from "next/navigation"
import { useConfig } from "nextra-theme-docs"
⋮----
const pathname = usePathname()
⋮----
content={`https://authjs.dev/api/og?title=${encodeURIComponent(

================
File: docs/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["components/*"],
      "@/utils/*": ["utils/*"],
      "@/icons/*": ["components/Icons/*"],
      "@/icons": ["components/Icons"],
      "@/data/*": ["pages/data/*"],
      "@/hooks/*": ["hooks/*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ],
    "strictNullChecks": true
  },
  "include": [
    "next-env.d.ts",
    "types.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "tailwind.config.js",
    "pages/_meta.js",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}

================
File: docs/typedoc-nextauth.js
================
// @ts-check
⋮----
/**
 * Local plugin to tweak TypeDoc output for nextra docs
 *
 *  @param {import("typedoc-plugin-markdown").MarkdownApplication} app
 */
export function load(app) {
injectNextraCalloutImport(app)
parseOutput(app)
writeMetaJsFiles(app)
⋮----
/**
 * Add nextra Callout component import to the top of each page
 *
 *  @param {import("typedoc-plugin-markdown").MarkdownApplication} app
 */
function injectNextraCalloutImport(app) {
⋮----
app.renderer.markdownHooks.on("page.begin", () => nextraCalloutImport)
app.renderer.markdownHooks.on("index.page.begin", () => nextraCalloutImport)
⋮----
/**
 * - Parse Docusaurus style admonitions to Callout elements
 * - Parse Docusaurus style code block titles to MDX compatible code block titles
 *  @param {import("typedoc-plugin-markdown").MarkdownApplication} app
 */
function parseOutput(app) {
app.renderer.on(MarkdownPageEvent.END, (page) => {
⋮----
// map existing alert types to nextra
⋮----
const replaceCallout = (match, p1, p2, p3) => {
const calloutType = calloutTypeMap[p1.trim()] || p1.trim()
const title = p2 ? `**${p2.trim()}** ` : ""
⋮----
${title}${p3.trim()}
⋮----
// replace ```ts title="xx" with ```ts filename="xx"
const replaceCodeBlockTitle = (match, p1, p2, p3) => `${p1}filename="${p3}"`
⋮----
?.replace(calloutRegex, replaceCallout)
.replace(codeBlockRegex, replaceCodeBlockTitle)
⋮----
/**
 * Writes Nextra _meta.js files to fix-up navigation labels.
 *
 *  @param {import("typedoc-plugin-markdown").MarkdownApplication} app
 */
function writeMetaJsFiles(app) {
app.renderer.postRenderAsyncJobs.push(async (output) => {
/**
     *
     * @param {import("typedoc-plugin-markdown").NavigationItem[]} navigationItems
     * @param {string} outputDirectory
     * @param {Record<string,string>} defaultValue
     */
const writeMetaJs = (
⋮----
navigationItems.forEach((item) => {
const pageKey = item.path ? path.parse(item.path).name : null
⋮----
writeMetaJs(item.children, path.join(outputDirectory, pageKey), {})
⋮----
// Rename generated 'next-auth' dir to 'nextjs'
if (new RegExp(".*docs/pages/reference/nextjs$").test(outputDirectory)) {
if (fs.existsSync("./pages/reference/nextjs")) {
fs.rmdirSync("./pages/reference/nextjs", { recursive: true })
⋮----
fs.renameSync("./pages/reference/next-auth", "./pages/reference/nextjs")
⋮----
export default ${JSON.stringify(pages, null, 2)}`
if (new RegExp(".*docs/pages/reference$").test(outputDirectory)) return
fs.writeFileSync(path.join(outputDirectory, "_meta.js"), metaJString)
⋮----
/**
     * Recursively write _meta.js files for each page based on output.navigation
     */
⋮----
writeMetaJs(output.navigation, output.outputDirectory, {

================
File: docs/typedoc.config.cjs
================
// @ts-check
⋮----
const excludePackages = new RegExp(
⋮----
.readdirSync(path.resolve(__dirname, "../packages"))
.filter((dir) => excludePackages.test(dir))
.map((dir) => `../packages/${dir}`)
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').PluginOptions}
 */
⋮----
// typedoc options
⋮----
require.resolve("./typedoc-nextauth.js"),
⋮----
// typedoc-plugin-markdown options

================
File: docs/types.d.ts
================
type TODO = any

================
File: docs/vercel.json
================
{
  "$schema": "https://openapi.vercel.sh/vercel.json",
  "cleanUrls": true,
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        { "key": "X-Content-Type-Options", "value": "nosniff" },
        { "key": "X-Frame-Options", "value": "DENY" },
        { "key": "X-XSS-Protection", "value": "1; mode=block" },
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=31536000; includeSubDomains; preload"
        }
      ]
    }
  ],
  "crons": [
    {
      "path": "/api/cron",
      "schedule": "42 */2 * * *"
    }
  ]
}

================
File: packages/adapter-azure-tables/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>An official <a href="https://azure.microsoft.com/en-us/products/storage/tables">Azure Table Storage</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://azure.microsoft.com/en-us/products/storage/tables">
 *   <img style={{display: "block"}} src="/img/adapters/azure-tables.svg" width="48" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/azure-tables-adapter
 * ```
 *
 * @module @auth/azure-tables-adapter
 */
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  VerificationToken,
} from "@auth/core/adapters"
import {
  GetTableEntityResponse,
  TableClient,
  TableEntityResult,
} from "@azure/data-tables"
⋮----
export function withoutKeys<T>(
  entity: GetTableEntityResponse<TableEntityResult<T>>
): T
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
export const TableStorageAdapter = (client: TableClient): Adapter =>
⋮----
async createUser(user)
async getUser(id: string)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
async deleteUser(userId)
async linkAccount(account)
async unlinkAccount(
async createSession(session)
async getSessionAndUser(sessionToken)
async updateSession(session)
async deleteSession(sessionToken)
async createVerificationToken(token)
async useVerificationToken(

================
File: packages/adapter-azure-tables/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import {
  AzureNamedKeyCredential,
  TableServiceClient,
  TableClient,
} from "@azure/data-tables"
import { keys, TableStorageAdapter, withoutKeys } from "../src"
import type { AdapterUser, VerificationToken } from "@auth/core/adapters"
⋮----
// default constants used by a dev instance of azurite
⋮----
async connect()
async user(id)
async account(provider_providerAccountId)
async session(sessionToken)
async verificationToken(identifier_token)

================
File: packages/adapter-azure-tables/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-azure-tables-test
# Start db
docker run -d --rm \
  -p 10002:10002 \
  --name ${CONTAINER_NAME} \
  mcr.microsoft.com/azure-storage/azurite azurite-table -l /workspace -d /workspace/debug.log --tableHost 0.0.0.0 --loose
echo "Waiting 10s for db to start..."
sleep 10
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-azure-tables/package.json
================
{
  "name": "@auth/azure-tables-adapter",
  "version": "1.9.1",
  "description": "Azure Tables Storage adapter for next-auth.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Nikita Dmitrijev <nikitadmitry@gmail.com>",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "azure-tables",
    "adapter"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "files": [
    "*.d.ts*",
    "*.js",
    "src"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "@azure/data-tables": "^13.2.1"
  },
  "devDependencies": {
    "@azure/data-tables": "^13.2.1"
  }
}

================
File: packages/adapter-azure-tables/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://azure.microsoft.com/en-us/products/storage/tables" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/azure-tables.svg"/>
  </a>
  <h3 align="center"><b>Azure Table Storage Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/azure-tables-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/azure-tables-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/azure-tables-adapter?color=green&label=@auth/azure-tables-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/azure-tables-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/azure-tables-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/getting-started/adapters/azure-tables).

================
File: packages/adapter-azure-tables/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-azure-tables/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-d1/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>An official <a href="https://developers.cloudflare.com/d1/">Cloudflare D1</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://developers.cloudflare.com/d1/">
 *   <img style={{display: "block"}} src="/img/adapters/d1.svg" width="48" />
 *  </a>
 * </div>
 *
 * ## Warning
 * This adapter is not developed or maintained by Cloudflare and they haven't declared the D1 api stable.  The author will make an effort to keep this adapter up to date.
 * The adapter is compatible with the D1 api as of March 22, 2023.
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/d1-adapter
 * ```
 *
 * @module @auth/d1-adapter
 */
import type { D1Database as WorkerDatabase } from "@cloudflare/workers-types"
import type { D1Database as MiniflareD1Database } from "@miniflare/d1"
import {
  type Adapter,
  type AdapterSession,
  type AdapterUser,
  type AdapterAccount,
  type VerificationToken as AdapterVerificationToken,
  isDate,
} from "@auth/core/adapters"
import {
  CREATE_ACCOUNT_SQL,
  CREATE_SESSION_SQL,
  CREATE_USER_SQL,
  CREATE_VERIFICATION_TOKEN_SQL,
  DELETE_ACCOUNT_BY_PROVIDER_AND_PROVIDER_ACCOUNT_ID_SQL,
  DELETE_ACCOUNT_BY_USER_ID_SQL,
  DELETE_SESSION_BY_USER_ID_SQL,
  DELETE_SESSION_SQL,
  DELETE_USER_SQL,
  DELETE_VERIFICATION_TOKEN_SQL,
  GET_ACCOUNT_BY_ID_SQL,
  GET_SESSION_BY_TOKEN_SQL,
  GET_USER_BY_ACCOUNTL_SQL,
  GET_USER_BY_EMAIL_SQL,
  GET_USER_BY_ID_SQL,
  GET_VERIFICATION_TOKEN_BY_IDENTIFIER_AND_TOKEN_SQL,
  UPDATE_SESSION_BY_SESSION_TOKEN_SQL,
  UPDATE_USER_BY_ID_SQL,
} from "./queries.js"
⋮----
/**
 * @type @cloudflare/workers-types.D1Database | @miniflare/d1.D1Database
 */
export type D1Database = WorkerDatabase | MiniflareD1Database
// format is borrowed from the supabase adapter, graciously
function format<T>(obj: Record<string, any>): T
// D1 doesnt like undefined, it wants null when calling bind
function cleanBindings(bindings: any[])
export async function createRecord<RecordType>(
  db: D1Database,
  CREATE_SQL: string,
  bindings: any[],
  GET_SQL: string,
  getBindings: any[]
)
export async function getRecord<RecordType>(
  db: D1Database,
  SQL: string,
  bindings: any[]
): Promise<RecordType | null>
export async function updateRecord(
  db: D1Database,
  SQL: string,
  bindings: any[]
)
export async function deleteRecord(
  db: D1Database,
  SQL: string,
  bindings: any[]
)
export function D1Adapter(db: D1Database): Adapter
⋮----
// we need to run migrations if we dont have the right tables
⋮----
async createUser(user)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
⋮----
// copy any properties not in the update into the existing one and use that for bind params
// covers the scenario where the user arg doesnt have all of the current users properties
⋮----
async deleteUser(userId)
⋮----
// miniflare doesn't support batch operations or multiline sql statements
⋮----
async linkAccount(a)
⋮----
// convert user_id to userId and provider_account_id to providerAccountId
⋮----
async unlinkAccount(
async createSession(
async getSessionAndUser(sessionToken)
async updateSession(
async deleteSession(sessionToken)
async createVerificationToken(
async useVerificationToken(

================
File: packages/adapter-d1/src/migrations.ts
================
import type { D1Database } from "./index.js"
⋮----
async function up(db: D1Database)

================
File: packages/adapter-d1/src/queries.ts
================
// USER
⋮----
// SESSION
⋮----
// ACCOUNT
⋮----
// VERIFICATION_TOKEN

================
File: packages/adapter-d1/test/index.test.ts
================
import { beforeAll } from "vitest"
import { D1Adapter, up, getRecord } from "../src/"
import {
  GET_USER_BY_ID_SQL,
  GET_SESSION_BY_TOKEN_SQL,
  GET_ACCOUNT_BY_PROVIDER_AND_PROVIDER_ACCOUNT_ID_SQL,
  GET_VERIFICATION_TOKEN_BY_IDENTIFIER_AND_TOKEN_SQL,
} from "../src/queries"
import {
  AdapterSession,
  AdapterUser,
  AdapterAccount,
} from "@auth/core/adapters"
import { D1Database, D1DatabaseAPI } from "@miniflare/d1"
import { runBasicTests } from "utils/adapter"
import Database from "better-sqlite3"

================
File: packages/adapter-d1/package.json
================
{
  "name": "@auth/d1-adapter",
  "version": "1.9.1",
  "description": "A Cloudflare D1 adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Josh Schlesser <josh@schlesser.dev>",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "license": "ISC",
  "keywords": [
    "next-auth",
    "@auth",
    "Auth.js",
    "next.js",
    "oauth",
    "d1"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "files": [
    "*.d.ts*",
    "*.js",
    "src"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "test": "vitest -c ../utils/vitest.config.ts",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20230321.0",
    "@miniflare/d1": "^2.12.2",
    "better-sqlite3": "^9.6.0"
  }
}

================
File: packages/adapter-d1/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://developers.cloudflare.com/d1/" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/d1.svg"/>
  </a>
  <h3 align="center"><b>Cloudflare D1 Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/drizzle-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/d1-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/d1-adapter?color=green&label=@auth/d1-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/d1-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/d1-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/d1).

================
File: packages/adapter-d1/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-d1/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-dgraph/src/lib/graphql/fragments.ts
================
export const User = /* GraphQL */ `
⋮----
export const Account = /* GraphQL */ `
⋮----
export const Session = /* GraphQL */ `
⋮----
export const VerificationToken = /* GraphQL */ `

================
File: packages/adapter-dgraph/src/lib/graphql/schema.gql
================
type Account
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    query: { rule: "{$nextAuth: { eq: true } }" }
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
  id: ID
  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}
type Session
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    query: { rule: "{$nextAuth: { eq: true } }" }
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
  id: ID
  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}
type User
  @auth(
    query: {
      or: [
        {
          rule: """
          query ($userId: ID!) {queryUser(filter: { id: [$userId] } ) {id}}
          """
        }
        { rule: "{$nextAuth: { eq: true } }" }
      ]
    }
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    update: {
      or: [
        {
          rule: """
          query ($userId: ID!) {queryUser(filter: { id: [$userId] } ) {id}}
          """
        }
        { rule: "{$nextAuth: { eq: true } }" }
      ]
    }
  ) {
  id: ID
  name: String
  email: String @search(by: [hash])
  emailVerified: DateTime
  image: String
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
}

type VerificationToken
  @auth(
    delete: { rule: "{$nextAuth: { eq: true } }" }
    add: { rule: "{$nextAuth: { eq: true } }" }
    query: { rule: "{$nextAuth: { eq: true } }" }
    update: { rule: "{$nextAuth: { eq: true } }" }
  ) {
  id: ID
  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}

# Dgraph.Authorization {"VerificationKey":"<YOUR JWT SECRET HERE>","Header":"<YOUR AUTH HEADER HERE>","Namespace":"<YOUR CUSTOM NAMESPACE HERE>","Algo":"RS256"}

================
File: packages/adapter-dgraph/src/lib/client.ts
================
export interface DgraphClientParams {
  endpoint: string
  /**
   * `X-Auth-Token` header value
   *
   * [Dgraph Cloud Authentication](https://dgraph.io/docs/cloud/cloud-api/overview/#dgraph-cloud-authentication)
   */
  authToken: string
  /** [Using JWT and authorization claims](https://dgraph.io/docs/graphql/authorization/authorization-overview#using-jwts-and-authorization-claims) */
  jwtSecret?: string
  /**
   * @default "RS256"
   *
   * [Using JWT and authorization claims](https://dgraph.io/docs/graphql/authorization/authorization-overview#using-jwts-and-authorization-claims)
   */
  jwtAlgorithm?: "HS256" | "RS256"
  /**
   * @default "Authorization"
   *
   * [Using JWT and authorization claims](https://dgraph.io/docs/graphql/authorization/authorization-overview#using-jwts-and-authorization-claims)
   */
  authHeader?: string
}
⋮----
/**
   * `X-Auth-Token` header value
   *
   * [Dgraph Cloud Authentication](https://dgraph.io/docs/cloud/cloud-api/overview/#dgraph-cloud-authentication)
   */
⋮----
/** [Using JWT and authorization claims](https://dgraph.io/docs/graphql/authorization/authorization-overview#using-jwts-and-authorization-claims) */
⋮----
/**
   * @default "RS256"
   *
   * [Using JWT and authorization claims](https://dgraph.io/docs/graphql/authorization/authorization-overview#using-jwts-and-authorization-claims)
   */
⋮----
/**
   * @default "Authorization"
   *
   * [Using JWT and authorization claims](https://dgraph.io/docs/graphql/authorization/authorization-overview#using-jwts-and-authorization-claims)
   */
⋮----
export class DgraphClientError extends Error
⋮----
constructor(errors: any[], query: string, variables: any)
⋮----
export function client(params: DgraphClientParams)
⋮----
async run<T>(
      query: string,
      variables?: Record<string, any>
): Promise<T | null>

================
File: packages/adapter-dgraph/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p style={{fontWeight: "normal"}}>Official <a href="https://dgraph.io/docs">Dgraph</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://dgraph.io/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/dgraph.svg" width="100"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/dgraph-adapter
 * ```
 *
 * @module @auth/dgraph-adapter
 */
import { client as dgraphClient } from "./lib/client.js"
import { isDate, type Adapter } from "@auth/core/adapters"
import type { DgraphClientParams } from "./lib/client.js"
⋮----
import {
  AdapterAccount,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
⋮----
/** This is the interface of the Dgraph adapter options. */
export interface DgraphAdapterOptions {
  /**
   * The GraphQL {@link https://dgraph.io/docs/query-language/fragments/ Fragments} you can supply to the adapter
   * to define how the shapes of the `user`, `account`, `session`, `verificationToken` entities look.
   *
   * By default the adapter will uses the [default defined fragments](https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-dgraph/src/lib/graphql/fragments.ts)
   * , this config option allows to extend them.
   */
  fragments?: {
    User?: string
    Account?: string
    Session?: string
    VerificationToken?: string
  }
}
⋮----
/**
   * The GraphQL {@link https://dgraph.io/docs/query-language/fragments/ Fragments} you can supply to the adapter
   * to define how the shapes of the `user`, `account`, `session`, `verificationToken` entities look.
   *
   * By default the adapter will uses the [default defined fragments](https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-dgraph/src/lib/graphql/fragments.ts)
   * , this config option allows to extend them.
   */
⋮----
export function DgraphAdapter(
  client: DgraphClientParams,
  options?: DgraphAdapterOptions
): Adapter
⋮----
async createUser(input: AdapterUser)
⋮----
/* GraphQL */ `
⋮----
async getUser(id: string)
⋮----
/* GraphQL */ `
⋮----
async getUserByEmail(email: string)
⋮----
/* GraphQL */ `
⋮----
async getUserByAccount(provider_providerAccountId: {
      provider: string
      providerAccountId: string
})
⋮----
/* GraphQL */ `
⋮----
async updateUser(
⋮----
/* GraphQL */ `
⋮----
async deleteUser(id: string)
⋮----
/* GraphQL */ `
⋮----
/* GraphQL */ `
⋮----
async linkAccount(data: AdapterAccount)
⋮----
/* GraphQL */ `
⋮----
async unlinkAccount(provider_providerAccountId: {
      provider: string
      providerAccountId: string
})
⋮----
/* GraphQL */ `
⋮----
async getSessionAndUser(sessionToken: string)
⋮----
/* GraphQL */ `
⋮----
async createSession(data: AdapterSession)
⋮----
/* GraphQL */ `
⋮----
async updateSession(
⋮----
/* GraphQL */ `
⋮----
async deleteSession(sessionToken: string)
⋮----
/* GraphQL */ `
⋮----
async createVerificationToken(input: VerificationToken)
⋮----
/* GraphQL */ `
⋮----
async useVerificationToken(params:
⋮----
/* GraphQL */ `
⋮----
from<T>(object?: Record<string, any>): T | null

================
File: packages/adapter-dgraph/test/index.test.ts
================
import { DgraphAdapter, format } from "../src"
import { client as dgraphClient } from "../src/lib/client"
⋮----
import { runBasicTests } from "utils/adapter"
import fs from "fs"
import path from "path"
import type { DgraphClientParams } from "../src"
⋮----
/** TODO: Add test to `dgraphClient` */
⋮----
async disconnect()
⋮----
await c.run(/* GraphQL */ `
⋮----
async user(id)
⋮----
/* GraphQL */ `
⋮----
async session(sessionToken)
⋮----
/* GraphQL */ `
⋮----
async account(provider_providerAccountId)
⋮----
/* GraphQL */ `
⋮----
async verificationToken(identifier_token)
⋮----
/* GraphQL */ `

================
File: packages/adapter-dgraph/test/private.key
================
-----BEGIN RSA PRIVATE KEY-----
MIIJKQIBAAKCAgEAxqyvd82VacXMBLUADZt+euSNUNJ276XgvH4HW4ms5iQZDgYI
PKxyaZ+wk8EMYSB1dymJ3WQpm0JKHqgTW+z/edfYFQXkduHN/zoIpxMAMyZGsTBi
dGo0xJSHTCDCdYCCBlG9R1ljjhf0l9ChBP7W7lSXaRU/XS/tMH1qYMpsUwDav4G/
RDI3A4t29JRGqU4mnFa5o3XBCxU4ANCp1JaQevzAYox8EGPZ1YZGmhRgca51dBee
d9QKqWjfXP4wboC1ppglm+kPgFUaCiXB8KyfIixhlvzZiO4RLvZw+cILt586vXGz
Ny49eVUTiIOoTZuG/79pCeBS8BCbB4l6y274y42hUN83gHxQ32Y++DI40jz5iGN8
5Dj6yDDjKwvwqVhCx/kVJFrmyrTJz/E0cp38FeIi7D6e0eXj7G97K+wkNdc4oTs1
DsDPzhO/7wxQOZIjvNp+DJAfxin5MbM+UKoopvJj3sUMHVrTteWxZg94mmLjg2Kn
JYBuSn8kiFPYQ0F5MjE7df4tDDTGJ/VEFIG5EkQffaNYhW0Z5ORLvW1R1Yd1/ew3
UWo+mZ7XAUGLF6clsWSQvzSrrNMYzCk5Fa0LwvMtQdEVLL3q7/KsEHD7N78EVlmE
DlOtC21UidUqXnawCE1QIjAHqFsNNPR2j0lgOoEjrGdzrvUg6hNV9m6CbSECAwEA
AQKCAgAjr8kk/+yiv0DSZ6DG0PN7J6qqpeNvUKB5uzmfG6/O9xT5C+RW4bL7fg+9
uqN6ntX6vZ9iASfoF5QwxYgUrxGE1VyfChvrrsvN2KLNQAB9L5brJQHKX3lzBir3
ZbsIWDkC4ZPaSRg04eCxlGwX9Z6t2MwJuCNVndJBL4X4NOQYVML2O1wb59kx7c9E
R44Zw0v0MS/PSMuQLhONMe4Pnav+K4BzM0DlwMnULPZpntdkFC5M2CFC7PetToUw
swgIEV6PuiynQMnkB2VSBU486QT8onQ1Jt38VqcHhITumAh6x0NJ3C6Q7uFj9gA4
OU32AsXREpTPjVfYf2MZi3xfJmPR+1JTqmnhWY7g/v3K5MpFO9HGmcETNpV4YXRv
U18Bx+m5FsKp0tFASyS/6PJoDAJ/a6yQxVNc1nYL8AKTFqod/0pQz2w2yFGR2t1g
Ui+7HQrWRpdvp2vDJK2GJLs+thybtd73QwsKJ2LFHS91eQ1y1BsSI4z1Ph8/66xK
uQVWfeQqQIhbM8m/pzOYNw90jRx9raKZ6QpdmLqoKj4WF3a/KvLc0TO678wzVoSM
qBDH9FwmkebNHWEMR8rR5Fb1ZVHclSde6DqdPBTvcQzMk66ZGMHB746G68620iKs
YJ6dFDBt3XBnhhOjPhCCH4XR8ZIGTgwxC9hry17/sUMEU5iS8QKCAQEA7WnbfI+h
oLnfw0M6uxIrvl1MMip1Zq/f2/q3HIpE6qLuPoy4fzjONNYm8QBwdJSVPviMCsFx
rU2IIHLeQGUSvMIIcWzn+EWKl3XTzirdn9uYZPPqGr/YuoLW/uN2TCppBbzT1jtA
bbQYUfvyF+ysU+F9amLSdDsqM3MwaFMNChcf3XLMz7QFgoWIDSejq4Uhy6y22KEi
qg+VprX9OejzUQLb0I8ko9S3dKAHkhUZJ8kxowu5oqaaGpowBhko84zKpNrGbinG
bA0+LTxAUKaHhioWWgXya976DQRBdTkp7wOWuD/jnL3wnIHDYF0TKYuidu98d+zH
b/+EH/wPEK4DrwKCAQEA1jpwJm2CDkw41TNexLectOlAjVw9xMt+10hLZ2PYOuwd
kThLYU9zqYIp9thj9/Ddqkx286qHaX92W2q0SZmhuXeNLmcG71QGJp/6uC+up0Hk
7aFPoQ3uS7JQN5YwinUy/0vbTsxmko0Ie9y2gA0bWDV4Yu5zr/vYd/bLD55GPRD/
WWGWkDlzlQqedQkjaCSRskm6nyFdTSsruw6RMdNiZK6jBR2aY0SsFmJmOwrTrPCS
llg+zaUtqwgC4tLROx8R5rkJh8S+/KjRN46oXPphQLTJlNZu1uTjV5Ue/BqpHgor
hJLgZwfA7YXJFfiSfjYFYTj9vm9Wx50zJSKiEZxALwKCAQEA6Czcy8y/GKqN7Kwj
lGypwMoGyQyCsYCPoNZoGo4R5ZCfAyalCy2nYz6G6KswTqI77lAszBvvqramyGzt
cvYlQ9lRXnNNy5tedM5y6y06fanIN/ndWHmDXqqzzKLvvn6/JDBMzjY1xNMZ8Zs9
Xy5CPOnIt7Ca9bYiiBw/G9cUamjA7dTl/L2locYqjgrU4dkZetCWI/Y5KyyAgn95
fBeXVANCqoxCHcHaA0C5BqCBcEous6+0xB6/mAJvspcKWFu4lU2qPnO2K1csFhrV
HsoswQUJxNIKCHoP+YjO5u+XVbohvGAmnNOXqcaxJdz/72Ix6LQ9+h3h0GKGeK0M
opg62wKCAQEAnyRoXdOp8s8ixRbVRtOTwT0prBmi9UeqoWjeQx8D6bmvuUqVjOOF
6517aRmVIgI32SPWlerPj0qV9RFOfwJ3Bp1OLvNwTmgf7Z+YlC0v1KZ51yGnUuBT
br43IyQaSTEJQmfqsh3b8PB+Je1vUa7q6ltGZE/5dvli9LNMY/zS9thiqNZ7EAbt
2wE5d33jZKEN7uEglsglVIdGhD4tFFOQ23R0O/+iyi2gnTxZ73B6kRVh//fsJ76W
L2DTLAcqUX4iQUCiWM6Kho0uZtQ+NFv31Sa4PS4SxubgEBcCHov7qAosC99EfqVe
59Qj7oNq6AFfe7rnnQl+8OjRrruMpAJsFwKCAQBxq1apDQTav7QW9Sfe19POZas0
b0XIETL3mEh25uCqPTmoaKo45opgw0Cn7zpuy/NntKlG/cnPYneQh91bViqid/Iv
3M88vQJmS2e4abozqa7iNjd/XwmBcCgdR2yx51oJ9q9dfd2ejKfMDzm0uHs5U7ay
pOlUch5OT0s5utZC4FbeziZ8Th61DtmIHOxQpNYpPXogdkbGSaOhL6dezPOAwJnJ
B2zjH7N1c+dz+5HheVbN3M08aN9DdyD1xsmd8eZVTAi1wcp51GY6cb7G0gE2SzOp
UNtVbc17n82jJ5Qr4ggSRU1QWNBZT9KX4U2/nTe3U5C3+ni4p+opI9Q3vSYw
-----END RSA PRIVATE KEY-----

================
File: packages/adapter-dgraph/test/public.key
================
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxqyvd82VacXMBLUADZt+
euSNUNJ276XgvH4HW4ms5iQZDgYIPKxyaZ+wk8EMYSB1dymJ3WQpm0JKHqgTW+z/
edfYFQXkduHN/zoIpxMAMyZGsTBidGo0xJSHTCDCdYCCBlG9R1ljjhf0l9ChBP7W
7lSXaRU/XS/tMH1qYMpsUwDav4G/RDI3A4t29JRGqU4mnFa5o3XBCxU4ANCp1JaQ
evzAYox8EGPZ1YZGmhRgca51dBeed9QKqWjfXP4wboC1ppglm+kPgFUaCiXB8Kyf
IixhlvzZiO4RLvZw+cILt586vXGzNy49eVUTiIOoTZuG/79pCeBS8BCbB4l6y274
y42hUN83gHxQ32Y++DI40jz5iGN85Dj6yDDjKwvwqVhCx/kVJFrmyrTJz/E0cp38
FeIi7D6e0eXj7G97K+wkNdc4oTs1DsDPzhO/7wxQOZIjvNp+DJAfxin5MbM+UKoo
pvJj3sUMHVrTteWxZg94mmLjg2KnJYBuSn8kiFPYQ0F5MjE7df4tDDTGJ/VEFIG5
EkQffaNYhW0Z5ORLvW1R1Yd1/ew3UWo+mZ7XAUGLF6clsWSQvzSrrNMYzCk5Fa0L
wvMtQdEVLL3q7/KsEHD7N78EVlmEDlOtC21UidUqXnawCE1QIjAHqFsNNPR2j0lg
OoEjrGdzrvUg6hNV9m6CbSECAwEAAQ==
-----END PUBLIC KEY-----

================
File: packages/adapter-dgraph/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-dgraph
# Start db
docker run -d --rm \
  -p 8080:8080 \
  -p 9080:9080 \
  --name "${CONTAINER_NAME}" \
  dgraph/standalone:latest
echo "Waiting 15s for db to start..." && sleep 15
head -n -1 src/lib/graphql/schema.gql >test/test.schema.gql
PUBLIC_KEY=$(sed 's/$/\\n/' test/public.key | tr -d '\n')
echo "# Dgraph.Authorization {\"VerificationKey\":\"$PUBLIC_KEY\",\"Namespace\":\"https://dgraph.io/jwt/claims\",\"Header\":\"Authorization\",\"Algo\":\"RS256\"}" >>test/test.schema.gql
curl -X POST localhost:8080/admin/schema --data-binary '@test/test.schema.gql'
printf "\nWaiting 5s for schema to be uploaded..." && sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop "${CONTAINER_NAME}"
else
  docker stop "${CONTAINER_NAME}" && exit 1
fi
rm test/test.schema.gql

================
File: packages/adapter-dgraph/package.json
================
{
  "name": "@auth/dgraph-adapter",
  "version": "2.9.1",
  "description": "Dgraph adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Arnaud Derbey <arnaud@derbey.dev>",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "lib",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "dgraph",
    "graphql"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "test": "./test/test.sh",
    "clean": "rm -rf *.js *.d.ts* lib"
  },
  "devDependencies": {
    "@types/jsonwebtoken": "^8.5.5"
  },
  "dependencies": {
    "@auth/core": "workspace:*",
    "jsonwebtoken": "^9.0.0"
  }
}

================
File: packages/adapter-dgraph/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://dgraph.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/dgraph.svg"/>
  </a>
  <h3 align="center"><b>Dgraph Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/dgraph-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/dgraph-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/dgraph-adapter?color=green&label=@auth/dgraph-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/dgraph-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/dgraph-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/dgraph).

================
File: packages/adapter-dgraph/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-dgraph/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-drizzle/src/lib/mysql.ts
================
import { GeneratedColumnConfig, and, eq, getTableColumns } from "drizzle-orm"
import {
  MySqlColumn,
  MySqlDatabase,
  boolean,
  int,
  mysqlTable,
  primaryKey,
  timestamp,
  varchar,
  PreparedQueryHKTBase,
  MySqlTableWithColumns,
  MySqlQueryResultHKT,
} from "drizzle-orm/mysql-core"
import type {
  Adapter,
  AdapterAccount,
  AdapterAccountType,
  AdapterSession,
  AdapterUser,
  VerificationToken,
  AdapterAuthenticator,
} from "@auth/core/adapters"
import { Awaitable } from "@auth/core/types"
export function defineTables(
  schema: Partial<DefaultMySqlSchema> = {}
): Required<DefaultMySqlSchema>
export function MySqlDrizzleAdapter(
  client: MySqlDatabase<MySqlQueryResultHKT, PreparedQueryHKTBase, any>,
  schema?: DefaultMySqlSchema
): Adapter
⋮----
async createUser(data: AdapterUser)
async getUser(userId: string)
async getUserByEmail(email: string)
async createSession(data: {
      sessionToken: string
      userId: string
      expires: Date
})
async getSessionAndUser(sessionToken: string)
async updateUser(data: Partial<AdapterUser> & Pick<AdapterUser, "id">)
async updateSession(
      data: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
)
async linkAccount(data: AdapterAccount)
async getUserByAccount(
      account: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async deleteSession(sessionToken: string)
async createVerificationToken(data: VerificationToken)
async useVerificationToken(params:
async deleteUser(id: string)
async unlinkAccount(
      params: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async getAccount(providerAccountId: string, provider: string)
async createAuthenticator(data: AdapterAuthenticator)
async getAuthenticator(credentialID: string)
async listAuthenticatorsByUserId(userId: string)
async updateAuthenticatorCounter(credentialID: string, newCounter: number)
⋮----
type DefaultMyqlColumn<
  T extends {
    data: string | number | boolean | Date
    dataType: "string" | "number" | "boolean" | "date"
    notNull: boolean
    isPrimaryKey?: boolean
    columnType:
      | "MySqlVarChar"
      | "MySqlText"
      | "MySqlBoolean"
      | "MySqlTimestamp"
      | "MySqlInt"
  },
> = MySqlColumn<{
  isAutoincrement: boolean
  isPrimaryKey: T["isPrimaryKey"] extends true ? true : false
  hasRuntimeDefault: boolean
  generated: GeneratedColumnConfig<T["data"]> | undefined
  name: string
  columnType: T["columnType"]
  data: T["data"]
  driverParam: string | number | boolean
  notNull: T["notNull"]
  hasDefault: boolean
  enumValues: any
  dataType: T["dataType"]
  tableName: string
}>
export type DefaultMySqlUsersTable = MySqlTableWithColumns<{
  name: string
  columns: {
    id: DefaultMyqlColumn<{
      isPrimaryKey: true
      data: string
      dataType: "string"
      notNull: true
      columnType: "MySqlVarChar" | "MySqlText"
    }>
    name: DefaultMyqlColumn<{
      data: string
      dataType: "string"
      notNull: boolean
      columnType: "MySqlVarChar" | "MySqlText"
    }>
    email: DefaultMyqlColumn<{
      data: string
      dataType: "string"
      notNull: boolean
      columnType: "MySqlVarChar" | "MySqlText"
    }>
    emailVerified: DefaultMyqlColumn<{
      data: Date
      dataType: "date"
      notNull: boolean
      columnType: "MySqlTimestamp"
    }>
    image: DefaultMyqlColumn<{
      data: string
      dataType: "string"
      notNull: boolean
      columnType: "MySqlVarChar" | "MySqlText"
    }>
  }
  dialect: "mysql"
  schema: string | undefined
}>
export type DefaultMySqlAccountsTable = MySqlTableWithColumns<{
  name: string
  columns: {
    userId: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    type: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    provider: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    providerAccountId: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
    }>
    refresh_token: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: boolean
    }>
    access_token: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      driverParam: string | number
      notNull: boolean
    }>
    expires_at: DefaultMyqlColumn<{
      dataType: "number"
      columnType: "MySqlInt"
      data: number
      notNull: boolean
    }>
    token_type: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: boolean
    }>
    scope: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: boolean
    }>
    id_token: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: boolean
    }>
    session_state: DefaultMyqlColumn<{
      dataType: "string"
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: boolean
    }>
  }
  dialect: "mysql"
  schema: string | undefined
}>
export type DefaultMySqlSessionsTable = MySqlTableWithColumns<{
  name: string
  columns: {
    sessionToken: DefaultMyqlColumn<{
      isPrimaryKey: true
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    userId: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    expires: DefaultMyqlColumn<{
      dataType: "date"
      columnType: "MySqlTimestamp"
      data: Date
      notNull: true
    }>
  }
  dialect: "mysql"
  schema: string | undefined
}>
export type DefaultMySqlVerificationTokenTable = MySqlTableWithColumns<{
  name: string
  columns: {
    identifier: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    token: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    expires: DefaultMyqlColumn<{
      dataType: "date"
      columnType: "MySqlTimestamp"
      data: Date
      notNull: true
    }>
  }
  dialect: "mysql"
  schema: string | undefined
}>
export type DefaultMySqlAuthenticatorTable = MySqlTableWithColumns<{
  name: string
  columns: {
    credentialID: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    userId: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    providerAccountId: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    credentialPublicKey: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    counter: DefaultMyqlColumn<{
      columnType: "MySqlInt"
      data: number
      notNull: true
      dataType: "number"
    }>
    credentialDeviceType: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: true
      dataType: "string"
    }>
    credentialBackedUp: DefaultMyqlColumn<{
      columnType: "MySqlBoolean"
      data: boolean
      notNull: true
      dataType: "boolean"
    }>
    transports: DefaultMyqlColumn<{
      columnType: "MySqlVarChar" | "MySqlText"
      data: string
      notNull: false
      dataType: "string"
    }>
  }
  dialect: "mysql"
  schema: string | undefined
}>
export type DefaultMySqlSchema = {
  usersTable: DefaultMySqlUsersTable
  accountsTable: DefaultMySqlAccountsTable
  sessionsTable?: DefaultMySqlSessionsTable
  verificationTokensTable?: DefaultMySqlVerificationTokenTable
  authenticatorsTable?: DefaultMySqlAuthenticatorTable
}

================
File: packages/adapter-drizzle/src/lib/pg.ts
================
import { GeneratedColumnConfig, and, eq, getTableColumns } from "drizzle-orm"
import {
  PgColumn,
  PgDatabase,
  PgQueryResultHKT,
  PgTableWithColumns,
  boolean,
  integer,
  pgTable,
  primaryKey,
  text,
  timestamp,
} from "drizzle-orm/pg-core"
import type {
  Adapter,
  AdapterAccount,
  AdapterAccountType,
  AdapterAuthenticator,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
import { Awaitable } from "@auth/core/types"
export function defineTables(
  schema: Partial<DefaultPostgresSchema> = {}
): Required<DefaultPostgresSchema>
export function PostgresDrizzleAdapter(
  client: PgDatabase<PgQueryResultHKT, any>,
  schema?: DefaultPostgresSchema
): Adapter
⋮----
async createUser(data: AdapterUser)
async getUser(userId: string)
async getUserByEmail(email: string)
async createSession(data: {
      sessionToken: string
      userId: string
      expires: Date
})
async getSessionAndUser(sessionToken: string)
async updateUser(data: Partial<AdapterUser> & Pick<AdapterUser, "id">)
async updateSession(
      data: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
)
async linkAccount(data: AdapterAccount)
async getUserByAccount(
      account: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async deleteSession(sessionToken: string)
async createVerificationToken(data: VerificationToken)
async useVerificationToken(params:
async deleteUser(id: string)
async unlinkAccount(
      params: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async getAccount(providerAccountId: string, provider: string)
async createAuthenticator(data: AdapterAuthenticator)
async getAuthenticator(credentialID: string)
async listAuthenticatorsByUserId(userId: string)
async updateAuthenticatorCounter(credentialID: string, newCounter: number)
⋮----
type DefaultPostgresColumn<
  T extends {
    data: string | number | boolean | Date
    dataType: "string" | "number" | "boolean" | "date"
    notNull: boolean
    isPrimaryKey?: boolean
    columnType:
      | "PgVarchar"
      | "PgText"
      | "PgBoolean"
      | "PgTimestamp"
      | "PgInteger"
      | "PgUUID"
  },
> = PgColumn<{
  name: string
  isAutoincrement: boolean
  isPrimaryKey: T["isPrimaryKey"] extends true ? true : false
  hasRuntimeDefault: boolean
  generated: GeneratedColumnConfig<T["data"]> | undefined
  columnType: T["columnType"]
  data: T["data"]
  driverParam: string | number | boolean
  notNull: T["notNull"]
  hasDefault: boolean
  enumValues: any
  dataType: T["dataType"]
  tableName: string
}>
export type DefaultPostgresUsersTable = PgTableWithColumns<{
  name: string
  columns: {
    id: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText" | "PgUUID"
      isPrimaryKey: true
      data: string
      notNull: true
      dataType: "string"
    }>
    name: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
      dataType: "string"
    }>
    email: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
      dataType: "string"
    }>
    emailVerified: DefaultPostgresColumn<{
      dataType: "date"
      columnType: "PgTimestamp"
      data: Date
      notNull: boolean
    }>
    image: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
  }
  dialect: "pg"
  schema: string | undefined
}>
export type DefaultPostgresAccountsTable = PgTableWithColumns<{
  name: string
  columns: {
    userId: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText" | "PgUUID"
      data: string
      notNull: true
      dataType: "string"
    }>
    type: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    provider: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    providerAccountId: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
    }>
    refresh_token: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
    access_token: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
    expires_at: DefaultPostgresColumn<{
      dataType: "number"
      columnType: "PgInteger"
      data: number
      notNull: boolean
    }>
    token_type: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
    scope: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
    id_token: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
    session_state: DefaultPostgresColumn<{
      dataType: "string"
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: boolean
    }>
  }
  dialect: "pg"
  schema: string | undefined
}>
export type DefaultPostgresSessionsTable = PgTableWithColumns<{
  name: string
  columns: {
    sessionToken: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      isPrimaryKey: true
      notNull: true
      dataType: "string"
    }>
    userId: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText" | "PgUUID"
      data: string
      notNull: true
      dataType: "string"
    }>
    expires: DefaultPostgresColumn<{
      dataType: "date"
      columnType: "PgTimestamp"
      data: Date
      notNull: true
    }>
  }
  dialect: "pg"
  schema: string | undefined
}>
export type DefaultPostgresVerificationTokenTable = PgTableWithColumns<{
  name: string
  columns: {
    identifier: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    token: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    expires: DefaultPostgresColumn<{
      dataType: "date"
      columnType: "PgTimestamp"
      data: Date
      notNull: true
    }>
  }
  dialect: "pg"
  schema: string | undefined
}>
export type DefaultPostgresAuthenticatorTable = PgTableWithColumns<{
  name: string
  columns: {
    credentialID: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    userId: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText" | "PgUUID"
      data: string
      notNull: true
      dataType: "string"
    }>
    providerAccountId: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    credentialPublicKey: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    counter: DefaultPostgresColumn<{
      columnType: "PgInteger"
      data: number
      notNull: true
      dataType: "number"
    }>
    credentialDeviceType: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: true
      dataType: "string"
    }>
    credentialBackedUp: DefaultPostgresColumn<{
      columnType: "PgBoolean"
      data: boolean
      notNull: true
      dataType: "boolean"
    }>
    transports: DefaultPostgresColumn<{
      columnType: "PgVarchar" | "PgText"
      data: string
      notNull: false
      dataType: "string"
    }>
  }
  dialect: "pg"
  schema: string | undefined
}>
export type DefaultPostgresSchema = {
  usersTable: DefaultPostgresUsersTable
  accountsTable: DefaultPostgresAccountsTable
  sessionsTable?: DefaultPostgresSessionsTable
  verificationTokensTable?: DefaultPostgresVerificationTokenTable
  authenticatorsTable?: DefaultPostgresAuthenticatorTable
}

================
File: packages/adapter-drizzle/src/lib/sqlite.ts
================
import { GeneratedColumnConfig, and, eq, getTableColumns } from "drizzle-orm"
import {
  BaseSQLiteDatabase,
  SQLiteColumn,
  SQLiteTableWithColumns,
  integer,
  primaryKey,
  sqliteTable,
  text,
} from "drizzle-orm/sqlite-core"
import type {
  Adapter,
  AdapterAccount,
  AdapterAccountType,
  AdapterAuthenticator,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
import { Awaitable } from "@auth/core/types"
export function defineTables(
  schema: Partial<DefaultSQLiteSchema> = {}
): Required<DefaultSQLiteSchema>
export function SQLiteDrizzleAdapter(
  client: BaseSQLiteDatabase<"sync" | "async", any, any>,
  schema?: DefaultSQLiteSchema
): Adapter
⋮----
async createUser(data: AdapterUser)
async getUser(userId: string)
async getUserByEmail(email: string)
async createSession(data: {
      sessionToken: string
      userId: string
      expires: Date
})
async getSessionAndUser(sessionToken: string)
async updateUser(data: Partial<AdapterUser> & Pick<AdapterUser, "id">)
async updateSession(
      data: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
)
async linkAccount(data: AdapterAccount)
async getUserByAccount(
      account: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async deleteSession(sessionToken: string)
async createVerificationToken(data: VerificationToken)
async useVerificationToken(params:
async deleteUser(id: string)
async unlinkAccount(
      params: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async getAccount(providerAccountId: string, provider: string)
async createAuthenticator(data: AdapterAuthenticator)
async getAuthenticator(credentialID: string)
async listAuthenticatorsByUserId(userId: string)
async updateAuthenticatorCounter(credentialID: string, newCounter: number)
⋮----
type DefaultSQLiteColumn<
  T extends {
    data: string | boolean | number | Date
    dataType: "string" | "boolean" | "number" | "date"
    notNull: boolean
    isPrimaryKey?: boolean
    columnType:
      | "SQLiteText"
      | "SQLiteBoolean"
      | "SQLiteTimestamp"
      | "SQLiteInteger"
  },
> = SQLiteColumn<{
  name: string
  isAutoincrement: boolean
  isPrimaryKey: T["isPrimaryKey"] extends true ? true : false
  hasRuntimeDefault: boolean
  generated: GeneratedColumnConfig<T["data"]> | undefined
  columnType: T["columnType"]
  data: T["data"]
  driverParam: string | number | boolean
  notNull: T["notNull"]
  hasDefault: boolean
  enumValues: any
  dataType: T["dataType"]
  tableName: string
}>
export type DefaultSQLiteUsersTable = SQLiteTableWithColumns<{
  name: string
  columns: {
    id: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      isPrimaryKey: true
      notNull: true
      dataType: "string"
    }>
    name: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: boolean
      dataType: "string"
    }>
    email: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: boolean
      dataType: "string"
    }>
    emailVerified: DefaultSQLiteColumn<{
      dataType: "date"
      columnType: "SQLiteTimestamp"
      data: Date
      notNull: boolean
    }>
    image: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
  }
  dialect: "sqlite"
  schema: string | undefined
}>
export type DefaultSQLiteAccountsTable = SQLiteTableWithColumns<{
  name: string
  columns: {
    userId: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    type: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    provider: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    providerAccountId: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: true
    }>
    refresh_token: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
    access_token: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
    expires_at: DefaultSQLiteColumn<{
      dataType: "number"
      columnType: "SQLiteInteger"
      data: number
      notNull: boolean
    }>
    token_type: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
    scope: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
    id_token: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
    session_state: DefaultSQLiteColumn<{
      dataType: "string"
      columnType: "SQLiteText"
      data: string
      notNull: boolean
    }>
  }
  dialect: "sqlite"
  schema: string | undefined
}>
export type DefaultSQLiteSessionsTable = SQLiteTableWithColumns<{
  name: string
  columns: {
    sessionToken: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      isPrimaryKey: true
      notNull: true
      dataType: "string"
    }>
    userId: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    expires: DefaultSQLiteColumn<{
      dataType: "date"
      columnType: "SQLiteTimestamp"
      data: Date
      notNull: true
    }>
  }
  dialect: "sqlite"
  schema: string | undefined
}>
export type DefaultSQLiteVerificationTokenTable = SQLiteTableWithColumns<{
  name: string
  columns: {
    identifier: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    token: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    expires: DefaultSQLiteColumn<{
      dataType: "date"
      columnType: "SQLiteTimestamp"
      data: Date
      notNull: true
    }>
  }
  dialect: "sqlite"
  schema: string | undefined
}>
export type DefaultSQLiteAuthenticatorTable = SQLiteTableWithColumns<{
  name: string
  columns: {
    credentialID: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    userId: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    providerAccountId: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    credentialPublicKey: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    counter: DefaultSQLiteColumn<{
      columnType: "SQLiteInteger"
      data: number
      notNull: true
      dataType: "number"
    }>
    credentialDeviceType: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: true
      dataType: "string"
    }>
    credentialBackedUp: DefaultSQLiteColumn<{
      columnType: "SQLiteBoolean"
      data: boolean
      notNull: true
      dataType: "boolean"
    }>
    transports: DefaultSQLiteColumn<{
      columnType: "SQLiteText"
      data: string
      notNull: false
      dataType: "string"
    }>
  }
  dialect: "sqlite"
  schema: string | undefined
}>
export type DefaultSQLiteSchema = {
  usersTable: DefaultSQLiteUsersTable
  accountsTable: DefaultSQLiteAccountsTable
  sessionsTable?: DefaultSQLiteSessionsTable
  verificationTokensTable?: DefaultSQLiteVerificationTokenTable
  authenticatorsTable?: DefaultSQLiteAuthenticatorTable
}

================
File: packages/adapter-drizzle/src/lib/utils.ts
================
import type {
  MySqlQueryResultHKT,
  PreparedQueryHKTBase,
} from "drizzle-orm/mysql-core"
import { MySqlDatabase } from "drizzle-orm/mysql-core"
import { PgDatabase, PgQueryResultHKT } from "drizzle-orm/pg-core"
import { BaseSQLiteDatabase } from "drizzle-orm/sqlite-core"
import { DefaultMySqlSchema } from "./mysql.js"
import { DefaultPostgresSchema } from "./pg.js"
import { DefaultSQLiteSchema } from "./sqlite.js"
type AnyPostgresDatabase = PgDatabase<PgQueryResultHKT, any>
type AnyMySqlDatabase = MySqlDatabase<
  MySqlQueryResultHKT,
  PreparedQueryHKTBase,
  any
>
type AnySQLiteDatabase = BaseSQLiteDatabase<"sync" | "async", any, any>
export type SqlFlavorOptions =
  | AnyPostgresDatabase
  | AnyMySqlDatabase
  | AnySQLiteDatabase
export type DefaultSchema<Flavor extends SqlFlavorOptions> =
  Flavor extends AnyMySqlDatabase
    ? DefaultMySqlSchema
    : Flavor extends AnyPostgresDatabase
      ? DefaultPostgresSchema
      : Flavor extends AnySQLiteDatabase
        ? DefaultSQLiteSchema
        : never

================
File: packages/adapter-drizzle/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://orm.drizzle.team">Drizzle ORM</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://orm.drizzle.team">
 *   <img style={{display: "block"}} src="/img/adapters/drizzle.svg" width="38" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install drizzle-orm @auth/drizzle-adapter
 * npm install drizzle-kit --save-dev
 * ```
 *
 * @module @auth/drizzle-adapter
 */
import { is } from "drizzle-orm"
import { MySqlDatabase } from "drizzle-orm/mysql-core"
import { PgDatabase } from "drizzle-orm/pg-core"
import { BaseSQLiteDatabase } from "drizzle-orm/sqlite-core"
import { DefaultMySqlSchema, MySqlDrizzleAdapter } from "./lib/mysql.js"
import { DefaultPostgresSchema, PostgresDrizzleAdapter } from "./lib/pg.js"
import { DefaultSQLiteSchema, SQLiteDrizzleAdapter } from "./lib/sqlite.js"
import { DefaultSchema, SqlFlavorOptions } from "./lib/utils.js"
import type { Adapter } from "@auth/core/adapters"
export function DrizzleAdapter<SqlFlavor extends SqlFlavorOptions>(
  db: SqlFlavor,
  schema?: DefaultSchema<SqlFlavor>
): Adapter

================
File: packages/adapter-drizzle/test/mysql/drizzle.config.ts
================
import type { Config } from "drizzle-kit"

================
File: packages/adapter-drizzle/test/mysql/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { DrizzleAdapter } from "../../src"
import {
  db,
  sessionsTable as sessions,
  verificationTokensTable as verificationTokens,
  accountsTable as accounts,
  usersTable as users,
  authenticatorsTable as authenticators,
} from "./schema"
import { eq, and } from "drizzle-orm"
import { fixtures } from "../fixtures"

================
File: packages/adapter-drizzle/test/mysql/migrator.ts
================
import { migrate } from "drizzle-orm/mysql2/migrator"
import { db } from "./schema.ts"
const migrator = async () =>

================
File: packages/adapter-drizzle/test/mysql/schema.ts
================
import { drizzle } from "drizzle-orm/mysql2"
import { createPool } from "mysql2"
import { defineTables } from "../../src/lib/mysql"

================
File: packages/adapter-drizzle/test/mysql/test.sh
================
#!/usr/bin/env bash
echo "Initializing container for MySQL tests."
MYSQL_DATABASE=next-auth
MYSQL_ROOT_PASSWORD=password
MYSQL_CONTAINER_NAME=next-auth-mysql-test
docker run -d --rm \
  -e MYSQL_DATABASE=${MYSQL_DATABASE} \
  -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
  --name "${MYSQL_CONTAINER_NAME}" \
  -p 3306:3306 \
  mysql:8
echo "Waiting 15s for db to start..." && sleep 15
drizzle-kit generate --config=./test/mysql/drizzle.config.ts
drizzle-kit migrate --config=./test/mysql/drizzle.config.ts
# Run Tests
if vitest run -c ../utils/vitest.config.ts ./test/mysql/index.test.ts; then
  docker stop ${MYSQL_CONTAINER_NAME}
else
  docker stop ${MYSQL_CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-drizzle/test/mysql-multi-project-schema/drizzle.config.ts
================
import type { Config } from "drizzle-kit"

================
File: packages/adapter-drizzle/test/mysql-multi-project-schema/index.test.ts
================
import { and, eq } from "drizzle-orm"
import { runBasicTests } from "utils/adapter"
import { DrizzleAdapter } from "../../src"
import { fixtures } from "../fixtures"
import {
  accounts,
  authenticators,
  db,
  sessions,
  users,
  verificationTokens,
} from "./schema"

================
File: packages/adapter-drizzle/test/mysql-multi-project-schema/migrator.ts
================
import { migrate } from "drizzle-orm/mysql2/migrator"
import { db } from "./schema"
const migrator = async () =>

================
File: packages/adapter-drizzle/test/mysql-multi-project-schema/schema.ts
================
import type { AdapterAccountType } from "@auth/core/adapters"
import { sql } from "drizzle-orm"
import {
  boolean,
  int,
  mysqlTableCreator,
  primaryKey,
  timestamp,
  varchar,
} from "drizzle-orm/mysql-core"
import { drizzle } from "drizzle-orm/mysql2"
import { createPool } from "mysql2"

================
File: packages/adapter-drizzle/test/mysql-multi-project-schema/test.sh
================
#!/usr/bin/env bash
echo "Initializing container for MySQL tests."
MYSQL_DATABASE=next-auth
MYSQL_ROOT_PASSWORD=password
MYSQL_CONTAINER_NAME=next-auth-mysql-test
docker run -d --rm \
  -e MYSQL_DATABASE=${MYSQL_DATABASE} \
  -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
  --name "${MYSQL_CONTAINER_NAME}" \
  -p 3306:3306 \
  mysql:8
echo "Waiting 10s for db to start..." && sleep 10
drizzle-kit generate --config=./test/mysql-multi-project-schema/drizzle.config.ts
drizzle-kit migrate --config=./test/mysql-multi-project-schema/drizzle.config.ts
if vitest run -c ../utils/vitest.config.ts ./test/mysql-multi-project-schema/index.test.ts; then
  docker stop ${MYSQL_CONTAINER_NAME}
else
  docker stop ${MYSQL_CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-drizzle/test/pg/drizzle.config.ts
================
import type { Config } from "drizzle-kit"

================
File: packages/adapter-drizzle/test/pg/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { DrizzleAdapter } from "../../src"
import {
  db,
  accountsTable as accounts,
  sessionsTable as sessions,
  usersTable as users,
  verificationTokensTable as verificationTokens,
  authenticatorsTable as authenticators,
} from "./schema"
import { eq, and } from "drizzle-orm"
import { fixtures } from "../fixtures"

================
File: packages/adapter-drizzle/test/pg/migrator.ts
================
import { migrate } from "drizzle-orm/postgres-js/migrator"
import { drizzle } from "drizzle-orm/postgres-js"
import postgres from "postgres"
const migrator = async () =>

================
File: packages/adapter-drizzle/test/pg/schema.ts
================
import { pgTable } from "drizzle-orm/pg-core"
import { drizzle } from "drizzle-orm/postgres-js"
import postgres from "postgres"
import { defineTables } from "../../src/lib/pg"

================
File: packages/adapter-drizzle/test/pg/test.sh
================
#!/usr/bin/env bash
echo "Initializing container for PostgreSQL tests."
PGUSER=nextauth
PGPASSWORD=nextauth
PGDATABASE=nextauth
PGPORT=5432
PG_CONTAINER_NAME=next-auth-postgres-test
docker run -d --rm \
  -e POSTGRES_USER=${PGUSER} \
  -e POSTGRES_PASSWORD=${PGPASSWORD} \
  -e POSTGRES_DB=${PGDATABASE} \
  -e POSTGRES_HOST_AUTH_METHOD=trust \
  --name "${PG_CONTAINER_NAME}" \
  -p ${PGPORT}:5432 \
  postgres:15.3
echo "Waiting 15s for db to start..." && sleep 15
# Push schema and seed
drizzle-kit generate --config=./test/pg/drizzle.config.ts
drizzle-kit migrate --config=./test/pg/drizzle.config.ts
if vitest run -c ../utils/vitest.config.ts ./test/pg/index.test.ts; then
  docker stop ${PG_CONTAINER_NAME}
else
  docker stop ${PG_CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-drizzle/test/pg-multi-project-schema/drizzle.config.ts
================
import type { Config } from "drizzle-kit"

================
File: packages/adapter-drizzle/test/pg-multi-project-schema/index.test.ts
================
import { and, eq } from "drizzle-orm"
import { runBasicTests } from "utils/adapter"
import { DrizzleAdapter } from "../../src"
import { fixtures } from "../fixtures"
import {
  accounts,
  authenticators,
  db,
  sessions,
  users,
  verificationTokens,
} from "./schema"

================
File: packages/adapter-drizzle/test/pg-multi-project-schema/migrator.ts
================
import { migrate } from "drizzle-orm/postgres-js/migrator"
import { db } from "./schema"
const migrator = async () =>

================
File: packages/adapter-drizzle/test/pg-multi-project-schema/schema.ts
================
import type { AdapterAccountType } from "@auth/core/adapters"
import {
  boolean,
  integer,
  pgTableCreator,
  primaryKey,
  text,
  timestamp,
} from "drizzle-orm/pg-core"
import { drizzle } from "drizzle-orm/postgres-js"
import postgres from "postgres"

================
File: packages/adapter-drizzle/test/pg-multi-project-schema/test.sh
================
#!/usr/bin/env bash
echo "Initializing container for PostgreSQL tests."
PGUSER=nextauth
PGPASSWORD=nextauth
PGDATABASE=nextauth
PGPORT=5432
PG_CONTAINER_NAME=next-auth-postgres-test
docker run -d --rm \
  -e POSTGRES_USER=${PGUSER} \
  -e POSTGRES_PASSWORD=${PGPASSWORD} \
  -e POSTGRES_DB=${PGDATABASE} \
  -e POSTGRES_HOST_AUTH_METHOD=trust \
  --name "${PG_CONTAINER_NAME}" \
  -p ${PGPORT}:5432 \
  postgres:15.3
echo "Waiting 5s for db to start..." && sleep 5
drizzle-kit generate --config=./test/pg-multi-project-schema/drizzle.config.ts
drizzle-kit migrate --config=./test/pg-multi-project-schema/drizzle.config.ts
if vitest run -c ../utils/vitest.config.ts ./test/pg-multi-project-schema/index.test.ts; then
  docker stop ${PG_CONTAINER_NAME}
else
  docker stop ${PG_CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-drizzle/test/sqlite/drizzle.config.ts
================
import type { Config } from "drizzle-kit"

================
File: packages/adapter-drizzle/test/sqlite/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { DrizzleAdapter } from "../../src"
import {
  db,
  accountsTable as accounts,
  sessionsTable as sessions,
  usersTable as users,
  verificationTokensTable as verificationTokens,
  authenticatorsTable as authenticators,
} from "./schema"
import { eq, and } from "drizzle-orm"
import { fixtures } from "../fixtures"

================
File: packages/adapter-drizzle/test/sqlite/migrator.ts
================
import { migrate } from "drizzle-orm/better-sqlite3/migrator"
import { db } from "./schema.ts"

================
File: packages/adapter-drizzle/test/sqlite/schema.ts
================
import { drizzle } from "drizzle-orm/better-sqlite3"
import Database from "libsql"
import { defineTables } from "../../src/lib/sqlite.ts"

================
File: packages/adapter-drizzle/test/sqlite/test.sh
================
#!/usr/bin/env bash
set -eu
echo "Running SQLite tests."
rm -f db.sqlite
drizzle-kit generate --config=./test/sqlite/drizzle.config.ts
drizzle-kit migrate --config=./test/sqlite/drizzle.config.ts
if vitest run -c ../utils/vitest.config.ts ./test/sqlite/index.test.ts; then
  rm -f db.sqlite
else
  rm -f db.sqlite && exit 1
fi

================
File: packages/adapter-drizzle/test/sqlite-multi-project-schema/drizzle.config.ts
================
import type { Config } from "drizzle-kit"

================
File: packages/adapter-drizzle/test/sqlite-multi-project-schema/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { DrizzleAdapter } from "../../src"
import {
  db,
  accounts,
  sessions,
  users,
  verificationTokens,
  authenticators,
} from "./schema"
import { eq, and } from "drizzle-orm"
import { fixtures } from "../fixtures"

================
File: packages/adapter-drizzle/test/sqlite-multi-project-schema/migrator.ts
================
import { migrate } from "drizzle-orm/better-sqlite3/migrator"
import { db } from "./schema.ts"

================
File: packages/adapter-drizzle/test/sqlite-multi-project-schema/schema.ts
================
import { AdapterAccountType } from "@auth/core/adapters"
import { drizzle } from "drizzle-orm/better-sqlite3"
import Database from "libsql"
import {
  integer,
  primaryKey,
  sqliteTableCreator,
  text,
} from "drizzle-orm/sqlite-core"

================
File: packages/adapter-drizzle/test/sqlite-multi-project-schema/test.sh
================
#!/usr/bin/env bash
set -eu
echo "Running SQLite tests."
rm -f db.sqlite
drizzle-kit generate --config=./test/sqlite-multi-project-schema/drizzle.config.ts
drizzle-kit migrate --config=./test/sqlite-multi-project-schema/drizzle.config.ts
if vitest run -c ../utils/vitest.config.ts ./test/sqlite-multi-project-schema/index.test.ts; then
  rm -f db.sqlite
else
  rm -f db.sqlite && exit 1
fi

================
File: packages/adapter-drizzle/test/fixtures.ts
================
// This work is needed as workaround to Drizzle truncating millisecond precision.
// https://github.com/drizzle-team/drizzle-orm/pull/668
import { randomUUID } from "utils/adapter"

================
File: packages/adapter-drizzle/package.json
================
{
  "name": "@auth/drizzle-adapter",
  "version": "1.9.1",
  "description": "Drizzle adapter for Auth.js.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Anthony Shew",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.d.ts*",
    "*.js",
    "lib",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js",
      "require": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "@auth",
    "Auth.js",
    "next.js",
    "oauth",
    "drizzle"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rm -rf *.js *.d.ts* lib",
    "clean:drizzle": "find . -type d -name \".drizzle\" | xargs rm -rf",
    "test": "pnpm test:mysql && pnpm test:sqlite && pnpm test:pg",
    "test:mysql": "pnpm clean && ./test/mysql/test.sh",
    "test:sqlite": "pnpm clean && ./test/sqlite/test.sh",
    "test:pg": "pnpm clean && ./test/pg/test.sh",
    "build": "tsc",
    "dev": "drizzle-kit generate:mysql --schema=src/schema.ts --out=.drizzle && tsc -w"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "@types/uuid": "^8.3.3",
    "drizzle-kit": "^0.23.0",
    "drizzle-orm": "^0.32.0",
    "libsql": "^0.3.18",
    "mysql2": "^3.9.7",
    "postgres": "^3.4.3",
    "tsx": "^4.7.0"
  }
}

================
File: packages/adapter-drizzle/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://github.com/drizzle-team/drizzle-orm" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/drizzle.svg"/>
  </a>
  <h3 align="center"><b>Drizzle ORM Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/drizzle-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/drizzle-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/drizzle-adapter?color=green&label=@auth/drizzle-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/drizzle-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/drizzle-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/drizzle).

================
File: packages/adapter-drizzle/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-drizzle/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-dynamodb/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>Official <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html">DynamoDB</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://docs.aws.amazon.com/dynamodb/index.html">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/dynamodb.png" width="48"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/dynamodb-adapter
 * ```
 *
 * @module @auth/dynamodb-adapter
 */
import type {
  BatchWriteCommandInput,
  DynamoDBDocument,
} from "@aws-sdk/lib-dynamodb"
import {
  type Adapter,
  type AdapterSession,
  type AdapterAccount,
  type AdapterUser,
  type VerificationToken,
  isDate,
} from "@auth/core/adapters"
export interface DynamoDBAdapterOptions {
  tableName?: string
  partitionKey?: string
  sortKey?: string
  indexName?: string
  indexPartitionKey?: string
  indexSortKey?: string
}
export function DynamoDBAdapter(
  client: DynamoDBDocument,
  options?: DynamoDBAdapterOptions
): Adapter
⋮----
async createUser(data)
async getUser(userId)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
async deleteUser(userId)
⋮----
// query all the items related to the user to delete
⋮----
// find the user we want to delete to return at the end of the function call
⋮----
// batch write commands cannot handle more than 25 requests at once
⋮----
async linkAccount(data)
async unlinkAccount(
async getSessionAndUser(sessionToken)
async createSession(data)
async updateSession(session)
async deleteSession(sessionToken)
async createVerificationToken(data)
async useVerificationToken(
⋮----
/** Takes a plain old JavaScript object and turns it into a DynamoDB object */
to(object: Record<string, any>)
⋮----
// DynamoDB requires the TTL attribute be a UNIX timestamp (in secs).
⋮----
/** Takes a Dynamo object and returns a plain old JavaScript object */
from<T = Record<string, unknown>>(object?: Record<string, any>): T | null
⋮----
// Filter DynamoDB specific attributes so it doesn't get passed to core,
// to avoid revealing the type of database
⋮----
// hack to keep type property in account
⋮----
// The expires property is stored as a UNIX timestamp in seconds, but
// JavaScript needs it in milliseconds, so multiply by 1000.
⋮----
function generateUpdateExpression(object: Record<string, any>):

================
File: packages/adapter-dynamodb/test/format.test.ts
================
import { describe, expect, test } from "vitest"
import { format } from "../src"
⋮----
// DynamoDB requires that the property used for TTL is a UNIX timestamp.
⋮----
// AdapterSession["expires"] and VerificationToken["expires"] are both meant
// to be Date instances.
⋮----
// Due to a bug in an old version, some expires attributes were stored as
// ISO strings, so we need to handle those properly too.

================
File: packages/adapter-dynamodb/test/index.test.ts
================
import { DynamoDB } from "@aws-sdk/client-dynamodb"
import { DynamoDBDocument } from "@aws-sdk/lib-dynamodb"
import { DynamoDBAdapter, format } from "../src"
import { runBasicTests } from "utils/adapter"
⋮----
async user(id)
async session(token)
async account(
async verificationToken(

================
File: packages/adapter-dynamodb/jest-dynamodb-config.cjs
================
// etc

================
File: packages/adapter-dynamodb/package.json
================
{
  "name": "@auth/dynamodb-adapter",
  "repository": "https://github.com/nextauthjs/next-auth",
  "version": "2.9.1",
  "description": "AWS DynamoDB adapter for next-auth.",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "dynamodb"
  ],
  "homepage": "https://authjs.dev",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test:default": "vitest -c ../utils/vitest.config.ts",
    "test:custom": "CUSTOM_MODEL=1 vitest -c ../utils/vitest.config.ts",
    "test": "pnpm test:default && pnpm test:custom",
    "clean": "rm -rf index.*",
    "build": "pnpm clean && tsc"
  },
  "author": "Pol Marnette",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>"
  ],
  "license": "ISC",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "peerDependencies": {
    "@aws-sdk/client-dynamodb": "^3.36.1",
    "@aws-sdk/lib-dynamodb": "^3.36.1"
  },
  "devDependencies": {
    "@aws-sdk/client-dynamodb": "^3.36.1",
    "@aws-sdk/lib-dynamodb": "^3.36.1"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  }
}

================
File: packages/adapter-dynamodb/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://aws.amazon.com/dynamodb" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/dynamodb.svg"/>
  </a>
  <h3 align="center"><b>DynamoDB Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/dynamodb-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/dynamodb-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/dynamodb-adapter?color=green&label=@auth/dynamodb-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/dynamodb-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/dynamodb-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/dynamodb).

================
File: packages/adapter-dynamodb/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-dynamodb/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-edgedb/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>Official <a href="https://www.edgedb.com/">Edge DB</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://www.edgedb.com/">
 *   <img style={{display: "block"}} src="/img/adapters/edgedb.svg" width="38" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install edgedb @auth/edgedb-adapter
 * npm install @edgedb/generate --save-dev
 * ```
 *
 * @module @auth/edgedb-adapter
 */
import type {
  Adapter,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
import type { Client } from "edgedb"
export function EdgeDBAdapter(client: Client): Adapter
⋮----
async createUser(
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(
async deleteUser(id)
async linkAccount({
      userId,
      type,
      provider,
      providerAccountId,
      refresh_token,
      access_token,
      expires_at,
      token_type,
      scope,
      id_token,
      session_state,
})
async unlinkAccount(
async createSession(
async getSessionAndUser(sessionToken)
async updateSession(
async deleteSession(sessionToken)
async createVerificationToken(
async useVerificationToken(

================
File: packages/adapter-edgedb/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { EdgeDBAdapter } from "../src"
import { createClient } from "edgedb"
⋮----
async verificationToken(

================
File: packages/adapter-edgedb/logo.svg
================
<svg style="color:#1F8AED" width="140" height="114" viewBox="0 0 140 114" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M118.58 56.966C118.58 66.6274 114.706 68.3592 110.377 68.3592H101.171V45.5728H110.377C114.706 45.5728 118.58 47.3046 118.58 56.966ZM113.887 56.966C113.887 50.2212 111.836 49.9022 108.874 49.9022H106.003V64.0298H108.874C111.836 64.0298 113.887 63.7108 113.887 56.966ZM65.1234 68.3592V45.5728H79.6155V49.9022H69.9541V54.5507H77.2458V58.8345H69.9541V64.0298H79.6155V68.3592H65.1234ZM87.7282 113.932H92.5589V0H87.7282V113.932ZM128.242 58.242V64.0298H132.252C134.758 64.0298 135.396 62.3892 135.396 61.1587C135.396 60.2017 134.941 58.242 131.523 58.242H128.242ZM128.242 49.9022V54.2317H131.523C133.391 54.2317 134.485 53.4113 134.485 52.0442C134.485 50.677 133.391 49.9022 131.523 49.9022H128.242ZM123.411 45.5728H132.708C137.585 45.5728 139.043 48.9908 139.043 51.4517C139.043 53.7304 137.585 55.371 136.582 55.8267C139.499 57.2395 140 60.1105 140 61.5689C140 63.4829 139.043 68.3592 132.708 68.3592H123.411V45.5728ZM37.3702 56.966C37.3702 66.6274 33.4966 68.3592 29.1671 68.3592H19.9614V45.5728H29.1671C33.4966 45.5728 37.3702 47.3046 37.3702 56.966ZM51.5885 64.2121C54.0495 64.2121 55.3255 63.3918 55.7812 62.8449V60.3384H51.862V56.4191H59.6549V65.4881C58.9713 66.5363 55.2344 68.5871 51.8164 68.5871C46.211 68.5871 41.4714 66.3996 41.4714 56.7381C41.4714 47.0767 46.2565 45.345 50.5859 45.345C57.3763 45.345 59.0625 48.8996 59.6094 52.0442L55.5989 52.9556C55.3711 51.4973 54.095 49.6744 51.1784 49.6744C48.2162 49.6744 46.1654 49.9934 46.1654 56.7381C46.1654 63.4829 48.3073 64.2121 51.5885 64.2121ZM32.6756 56.966C32.6756 50.2212 30.6248 49.9022 27.6626 49.9022H24.7915V64.0298H27.6626C30.6248 64.0298 32.6756 63.7108 32.6756 56.966ZM0 68.3592V45.5728H14.4921V49.9022H4.83072V54.5507H12.1224V58.8345H4.83072V64.0298H14.4921V68.3592H0Z" fill="currentColor">
    </path>
</svg>

================
File: packages/adapter-edgedb/package.json
================
{
  "name": "@auth/edgedb-adapter",
  "version": "1.9.1",
  "description": "EdgeDB adapter for next-auth.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Bruno Crosier",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.d.ts*",
    "*.js",
    "lib",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "edgedb"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "test": "vitest -c ../utils/vitest.config.ts",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "edgedb": "^1.0.1"
  },
  "devDependencies": {
    "edgedb": "^1.0.1"
  }
}

================
File: packages/adapter-edgedb/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://www.edgedb.com/" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/edgedb.svg"/>
  </a>
  <h3 align="center"><b>Edge DB Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/edgedb-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/edgedb-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/edgedb-adapter?color=green&label=@auth/edgedb-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/edgedb-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/edgedb-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/edgedb).

================
File: packages/adapter-edgedb/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-edgedb/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-fauna/fauna/account.fsl
================
collection Account {
    index byUserId {
        terms [.userId]
    }
    index byProviderAndProviderAccountId {
        terms [.provider, .providerAccountId]
    }
}

collection CustomAccount {
    index byUserId {
        terms [.userId]
    }
    index byProviderAndProviderAccountId {
        terms [.provider, .providerAccountId]
    }
}

================
File: packages/adapter-fauna/fauna/session.fsl
================
collection Session {
    unique [.sessionToken]
    index bySessionToken {
        terms [.sessionToken]
    }
    index byUserId {
        terms [.userId]
    }
}

collection CustomSession {
    unique [.sessionToken]
    index bySessionToken {
        terms [.sessionToken]
    }
    index byUserId {
        terms [.userId]
    }
}

================
File: packages/adapter-fauna/fauna/user.fsl
================
collection User {
    unique [.email]
    index byEmail {
        terms [.email]
    }
}

collection CustomUser {
    unique [.email]
    index byEmail {
        terms [.email]
    }
}

================
File: packages/adapter-fauna/fauna/verificationToken.fsl
================
collection VerificationToken {
    index byIdentifierAndToken {
        terms [.identifier, .token]
    }
}

collection CustomVerificationToken {
    index byIdentifierAndToken {
        terms [.identifier, .token]
    }
}

================
File: packages/adapter-fauna/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>Official <a href="https://docs.fauna.com/fauna/current/">Fauna</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://fauna.com/features">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/fauna.svg" width="64" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/fauna-adapter fauna
 * ```
 *
 * @module @auth/fauna-adapter
 */
import {
  Client,
  TimeStub,
  fql,
  NullDocument,
  QueryValue,
  QueryValueObject,
} from "fauna"
import type {
  Adapter,
  AdapterUser,
  AdapterSession,
  VerificationToken,
  AdapterAccount,
} from "@auth/core/adapters"
type ToFauna<T> = {
  [P in keyof T]: T[P] extends Date | null
    ? TimeStub | null
    : T[P] extends undefined
      ? null
      : T[P] extends QueryValue
        ? T[P]
        : QueryValueObject
}
export type FaunaUser = ToFauna<AdapterUser>
export type FaunaSession = ToFauna<AdapterSession>
export type FaunaVerificationToken = ToFauna<VerificationToken> & { id: string }
export type FaunaAccount = ToFauna<AdapterAccount>
type AdapterConfig = {
  collectionNames: {
    user: string
    session: string
    account: string
    verificationToken: string
  }
}
⋮----
export function FaunaAdapter(client: Client, config?: AdapterConfig): Adapter
⋮----
async createUser(user)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
async deleteUser(userId)
async linkAccount(account)
async unlinkAccount(
async getSessionAndUser(sessionToken)
async createSession(session)
async updateSession(session)
async deleteSession(sessionToken)
async createVerificationToken(verificationToken)
async useVerificationToken(
⋮----
// Delete the verification token so it can only be used once
⋮----
/** Takes an object that's coming from the database and converts it to plain JavaScript. */
from<T>(object: Record<string, any> =
/** Takes an object that's coming from Auth.js and prepares it to be written to the database. */
to<T>(object: Record<string, any>): T

================
File: packages/adapter-fauna/test/index.test.ts
================
import { FaunaAdapter, format } from "../src"
import { runBasicTests } from "utils/adapter"
import { Client, fql, NullDocument } from "fauna"
import type {
  FaunaUser,
  FaunaAccount,
  FaunaSession,
  FaunaVerificationToken,
} from "../src"
⋮----
// UUID is not a valid ID in Fauna (see https://docs.fauna.com/fauna/current/reference/fql_reference/types#id)
⋮----
async session(sessionToken)
async account(
async verificationToken(
⋮----
// UUID is not a valid ID in Fauna (see https://docs.fauna.com/fauna/current/reference/fql_reference/types#id)

================
File: packages/adapter-fauna/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-fauna-test
FAUNADB_PORT=8443
FAUNA_ADMIN_KEY=secret
# Start Docker
docker run -d --rm \
  --name ${CONTAINER_NAME} \
  -p ${FAUNADB_PORT}:${FAUNADB_PORT} \
  fauna/faunadb
echo "Waiting 15s for db to start..."
sleep 15
# Create collections and indexes
fauna schema push --url=http://localhost:8443 --force --secret=${FAUNA_ADMIN_KEY}
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-fauna/.fauna-project
================
schema_directory=fauna

================
File: packages/adapter-fauna/package.json
================
{
  "name": "@auth/fauna-adapter",
  "version": "3.9.1",
  "description": "Fauna Adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Bhanu Teja P",
  "contributors": [
    "Nico Domino <yo@ndo.dev>",
    "Balázs Orbán <info@balazsorban.com>",
    "Aske Hippe Brun <mail@askehippebrun.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "fauna",
    "faunadb"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "fauna": "fauna",
    "build": "tsc",
    "dev": "tsc -w",
    "test": "./test/test.sh",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "fauna": "^1.3.1"
  },
  "devDependencies": {
    "fauna": "^1.3.1",
    "fauna-shell": "1.2.1"
  }
}

================
File: packages/adapter-fauna/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://fauna.com" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/fauna.svg"/>
  </a>
  <h3 align="center"><b>Fauna Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/fauna-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/fauna-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/fauna-adapter?color=green&label=@auth/fauna-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/fauna-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/fauna-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/fauna).

================
File: packages/adapter-fauna/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-fauna/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-firebase/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official **Firestore** adapter for Auth.js / NextAuth.js, using the [Firebase Admin SDK](https://firebase.google.com/docs/admin/setup)</p>
 *  <a href="https://firebase.google.com/docs/firestore/">
 *   <img style={{display: "block"}} src="/img/adapters/firebase.svg" width="48" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/firebase-adapter firebase-admin
 * ```
 *
 * @module @auth/firebase-adapter
 */
import { type AppOptions, getApps, initializeApp } from "firebase-admin/app"
import {
  Firestore,
  getFirestore,
  initializeFirestore,
  Timestamp,
} from "firebase-admin/firestore"
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  VerificationToken,
} from "@auth/core/adapters"
/** Configure the Firebase Adapter. */
export interface FirebaseAdapterConfig extends AppOptions {
  /**
   * The name of the app passed to {@link https://firebase.google.com/docs/reference/admin/node/firebase-admin.md#initializeapp `initializeApp()`}.
   */
  name?: string
  firestore?: Firestore
  /**
   * Use this option if mixed `snake_case` and `camelCase` field names in the database is an issue for you.
   * Passing `snake_case` will convert all field and collection names to `snake_case`.
   * E.g. the collection `verificationTokens` will be `verification_tokens`,
   * and fields like `emailVerified` will be `email_verified` instead.
   *
   *
   * @example
   * ```ts
   *  // This will convert all field and collection names to snake_case
   *  adapter: FirestoreAdapter({ namingStrategy: "snake_case" })
   *  // ...
   * })
   * ```
   */
  namingStrategy?: "snake_case" | "default"
  /**
   * Use this option if you already have one of the default collections in your Firestore database.
   *
   * @example
   * ```ts
   *  // This will use the collection name "authjs_users" instead of the default "users"
   *  adapter: FirestoreAdapter({ collections: { users: "authjs_users" } })
   *  // ...
   * ```
   */
  collections?: {
    users?: string
    sessions?: string
    accounts?: string
    verificationTokens?: string
  }
}
⋮----
/**
   * The name of the app passed to {@link https://firebase.google.com/docs/reference/admin/node/firebase-admin.md#initializeapp `initializeApp()`}.
   */
⋮----
/**
   * Use this option if mixed `snake_case` and `camelCase` field names in the database is an issue for you.
   * Passing `snake_case` will convert all field and collection names to `snake_case`.
   * E.g. the collection `verificationTokens` will be `verification_tokens`,
   * and fields like `emailVerified` will be `email_verified` instead.
   *
   *
   * @example
   * ```ts
   *  // This will convert all field and collection names to snake_case
   *  adapter: FirestoreAdapter({ namingStrategy: "snake_case" })
   *  // ...
   * })
   * ```
   */
⋮----
/**
   * Use this option if you already have one of the default collections in your Firestore database.
   *
   * @example
   * ```ts
   *  // This will use the collection name "authjs_users" instead of the default "users"
   *  adapter: FirestoreAdapter({ collections: { users: "authjs_users" } })
   *  // ...
   * ```
   */
⋮----
export function FirestoreAdapter(
  config?: FirebaseAdapterConfig | Firestore
): Adapter
⋮----
async createUser(userInit)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(partialUser)
async deleteUser(userId)
async linkAccount(accountInit)
async unlinkAccount(
async createSession(sessionInit)
async getSessionAndUser(sessionToken)
async updateSession(partialSession)
async deleteSession(sessionToken)
async createVerificationToken(verificationToken)
async useVerificationToken(
⋮----
// for consistency, store all fields as snake_case in the database
⋮----
const identity = <T>(x: T)
/** @internal */
export function mapFieldsFactory(preferSnakeCase?: boolean)
function getConverter<Document extends Record<string, any>>(options: {
  excludeId?: boolean
  preferSnakeCase?: boolean
}): FirebaseFirestore.FirestoreDataConverter<Document>
⋮----
toFirestore(object)
fromFirestore(
      snapshot: FirebaseFirestore.QueryDocumentSnapshot<Document>
): Document
⋮----
const document = snapshot.data()! // we can guarantee it exists
⋮----
/** @internal */
export async function getOneDoc<T>(
  querySnapshot: FirebaseFirestore.Query<T>
): Promise<T | null>
async function deleteDocs<T>(
  querySnapshot: FirebaseFirestore.Query<T>
): Promise<void>
/** @internal */
export async function getDoc<T>(
  docRef: FirebaseFirestore.DocumentReference<T>
): Promise<T | null>
/** @internal */
export function collectionsFactory(
  db: FirebaseFirestore.Firestore,
  preferSnakeCase = false,
  collections: Required<NonNullable<FirebaseAdapterConfig["collections"]>>
)
/**
 * Utility function that helps making sure that there is no duplicate app initialization issues in serverless environments.
 * If no parameter is passed, it will use the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to initialize a Firestore instance.
 *
 * @example
 * ```ts title="lib/firestore.ts"
 * import { initFirestore } from "@auth/firebase-adapter"
 * import { cert } from "firebase-admin/app"
 *
 * export const firestore = initFirestore({
 *  credential: cert({
 *    projectId: process.env.FIREBASE_PROJECT_ID,
 *    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
 *    privateKey: process.env.FIREBASE_PRIVATE_KEY,
 *  })
 * })
 * ```
 */
export function initFirestore(
  options: AppOptions & { name?: FirebaseAdapterConfig["name"] } = {}
)

================
File: packages/adapter-firebase/test/firestore.rules
================
rules_version = '2';

// Deny read/write access to all users under any conditions
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

================
File: packages/adapter-firebase/test/index.test.ts
================
import { describe, expect, test } from "vitest"
import { runBasicTests } from "utils/adapter"
import { FirestoreAdapter, type FirebaseAdapterConfig } from "../src"
import {
  collectionsFactory,
  initFirestore,
  getDoc,
  getOneDoc,
  mapFieldsFactory,
} from "../src"
// TODO: promises never resolve in tests, so currently we are skipping them

================
File: packages/adapter-firebase/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-firestore-test
# Start Docker
docker run -d --rm \
  --name ${CONTAINER_NAME} \
  -p 8080:8080 \
  -v "$(pwd)/test/firestore.rules":/firestore.rules \
  google/cloud-sdk:latest gcloud beta emulators firestore start \
  --host-port=0.0.0.0:8080 \
  --rules=/firestore.rules
echo "Waiting 5s for db to start..."
sleep 5
export FIRESTORE_EMULATOR_HOST=0.0.0.0:8080
# Always stop container, but exit with 1 when tests are failing
if pnpm exec vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-firebase/package.json
================
{
  "name": "@auth/firebase-adapter",
  "version": "2.9.1",
  "description": "Firebase adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Ron Houben <ron.houben85@gmail.com>",
  "contributors": [
    "Nico Domino <yo@ndo.dev>",
    "Alex Meuer <github@alexmeuer.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "firebase",
    "firebase-admin"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "test": "./test/test.sh",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "firebase-admin": "^12.0.0"
  },
  "devDependencies": {
    "firebase-admin": "^12.0.0"
  }
}

================
File: packages/adapter-firebase/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://firebase.google.com" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/firebase.svg"/>
  </a>
  <h3 align="center"><b>Firebase Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/firebase-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/firebase-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/firebase-adapter?color=green&label=@auth/firebase-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/firebase-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/firebase-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/firebase).

================
File: packages/adapter-firebase/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-firebase/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-hasura/hasura/metadata/databases/default/tables/public_accounts.yaml
================
table:
  name: accounts
  schema: public
object_relationships:
  - name: user
    using:
      foreign_key_constraint_on: userId

================
File: packages/adapter-hasura/hasura/metadata/databases/default/tables/public_provider_type.yaml
================
table:
  name: provider_type
  schema: public
is_enum: true

================
File: packages/adapter-hasura/hasura/metadata/databases/default/tables/public_sessions.yaml
================
table:
  name: sessions
  schema: public
object_relationships:
  - name: user
    using:
      foreign_key_constraint_on: userId

================
File: packages/adapter-hasura/hasura/metadata/databases/default/tables/public_users.yaml
================
table:
  name: users
  schema: public
array_relationships:
  - name: accounts
    using:
      foreign_key_constraint_on:
        column: userId
        table:
          name: accounts
          schema: public
  - name: sessions
    using:
      foreign_key_constraint_on:
        column: userId
        table:
          name: sessions
          schema: public

================
File: packages/adapter-hasura/hasura/metadata/databases/default/tables/public_verification_tokens.yaml
================
table:
  name: verification_tokens
  schema: public

================
File: packages/adapter-hasura/hasura/metadata/databases/default/tables/tables.yaml
================
- "!include public_accounts.yaml"
- "!include public_provider_type.yaml"
- "!include public_sessions.yaml"
- "!include public_users.yaml"
- "!include public_verification_tokens.yaml"

================
File: packages/adapter-hasura/hasura/metadata/databases/databases.yaml
================
- name: default
  kind: postgres
  configuration:
    connection_info:
      database_url:
        from_env: PG_DATABASE_URL
      isolation_level: read-committed
      use_prepared_statements: false
  customization:
    naming_convention: hasura-default
  tables: "!include default/tables/tables.yaml"

================
File: packages/adapter-hasura/hasura/metadata/actions.yaml
================
actions: []
custom_types:
  enums: []
  input_objects: []
  objects: []
  scalars: []

================
File: packages/adapter-hasura/hasura/metadata/allow_list.yaml
================
[]

================
File: packages/adapter-hasura/hasura/metadata/api_limits.yaml
================
{}

================
File: packages/adapter-hasura/hasura/metadata/cron_triggers.yaml
================
[]

================
File: packages/adapter-hasura/hasura/metadata/graphql_schema_introspection.yaml
================
disabled_for_roles: []

================
File: packages/adapter-hasura/hasura/metadata/inherited_roles.yaml
================
[]

================
File: packages/adapter-hasura/hasura/metadata/network.yaml
================
{}

================
File: packages/adapter-hasura/hasura/metadata/query_collections.yaml
================
[]

================
File: packages/adapter-hasura/hasura/metadata/remote_schemas.yaml
================
[]

================
File: packages/adapter-hasura/hasura/metadata/rest_endpoints.yaml
================
[]

================
File: packages/adapter-hasura/hasura/metadata/version.yaml
================
version: 3

================
File: packages/adapter-hasura/hasura/migrations/default/1666885939998_init_nextauth_models/up.sql
================
CREATE TABLE accounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type text NOT NULL,
    provider text NOT NULL,
    "providerAccountId" text NOT NULL,
    refresh_token text,
    access_token text,
    expires_at integer,
    token_type text,
    scope text,
    id_token text,
    session_state text,
    "userId" uuid NOT NULL
);
CREATE TABLE sessions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    "sessionToken" text NOT NULL,
    "userId" uuid NOT NULL,
    expires timestamptz NOT NULL
);
CREATE TABLE users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text,
    email text NOT NULL,
    "emailVerified" timestamptz,
    image text
);
CREATE TABLE verification_tokens (
    token text NOT NULL,
    identifier text NOT NULL,
    expires timestamptz NOT NULL
);
CREATE TABLE provider_type (
    value text NOT NULL
);
ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);
ALTER TABLE ONLY sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY ("sessionToken");
ALTER TABLE ONLY users
    ADD CONSTRAINT users_email_key UNIQUE (email);
ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);
ALTER TABLE ONLY verification_tokens
    ADD CONSTRAINT verification_tokens_pkey PRIMARY KEY (token);
ALTER TABLE ONLY provider_type
    ADD CONSTRAINT provider_type_pkey PRIMARY KEY (value);
ALTER TABLE ONLY accounts
    ADD CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId") REFERENCES public.users(id) ON UPDATE RESTRICT ON DELETE CASCADE;
ALTER TABLE ONLY sessions
    ADD CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId") REFERENCES public.users(id) ON UPDATE RESTRICT ON DELETE CASCADE;
INSERT INTO provider_type (value) VALUES ('credentials'), ('email'), ('oauth'), ('oidc');
ALTER TABLE ONLY accounts
    ADD CONSTRAINT "accounts_type_fkey" FOREIGN KEY ("type") REFERENCES public.provider_type(value) ON UPDATE RESTRICT ON DELETE RESTRICT;

================
File: packages/adapter-hasura/hasura/config.yaml
================
version: 3
endpoint: http://localhost:8080
metadata_directory: metadata
actions:
  kind: synchronous
  handler_webhook_baseurl: http://localhost:3000

================
File: packages/adapter-hasura/src/lib/client.ts
================
import type { TypedDocumentString } from "./generated/graphql.js"
export interface HasuraAdapterClient {
  endpoint: string
  /**
   * `x-hasura-admin-secret` header value
   *
   * [Hasura Authentication](https://hasura.io/docs/search/?q=x-hasura-admin-secret)
   */
  adminSecret: string
}
⋮----
/**
   * `x-hasura-admin-secret` header value
   *
   * [Hasura Authentication](https://hasura.io/docs/search/?q=x-hasura-admin-secret)
   */
⋮----
export class HasuraClientError extends Error
⋮----
constructor(
    errors: any[],
    query: TypedDocumentString<any, any>,
    variables: any
)
⋮----
export function client(
⋮----
async run<
      Q extends TypedDocumentString<any, any>,
      T extends Q extends TypedDocumentString<infer T, any> ? T : never,
      V extends Q extends TypedDocumentString<any, infer V> ? V : never,
>(query: Q, variables?: V): Promise<T>

================
File: packages/adapter-hasura/src/queries/account.graphql
================
mutation CreateAccount($data: accounts_insert_input!) {
  insert_accounts_one(object: $data) {
    ...Account
  }
}

mutation DeleteAccount($provider: String!, $providerAccountId: String!) {
  delete_accounts(
    where: {
      provider: { _eq: $provider }
      providerAccountId: { _eq: $providerAccountId }
    }
  ) {
    returning {
      ...Account
    }
  }
}

query GetAccount($provider: String!, $providerAccountId: String!) {
  accounts(
    where: {
      provider: { _eq: $provider }
      providerAccountId: { _eq: $providerAccountId }
    }
  ) {
    ...Account
  }
}

================
File: packages/adapter-hasura/src/queries/delete.graphql
================
mutation DeleteAll {
  delete_accounts(where: {}) {
    affected_rows
  }
  delete_sessions(where: {}) {
    affected_rows
  }
  delete_users(where: {}) {
    affected_rows
  }
  delete_verification_tokens(where: {}) {
    affected_rows
  }
}

================
File: packages/adapter-hasura/src/queries/fragments.graphql
================
fragment User on users {
  id
  name
  email
  image
  emailVerified
}

fragment Session on sessions {
  id
  userId
  expires
  sessionToken
}

fragment Account on accounts {
  id
  type
  scope
  userId
  id_token
  provider
  expires_at
  token_type
  access_token
  refresh_token
  session_state
  providerAccountId
}

fragment VerificationToken on verification_tokens {
  token
  expires
  identifier
}

================
File: packages/adapter-hasura/src/queries/session.graphql
================
query GetSessionAndUser($sessionToken: String!) {
  sessions(where: { sessionToken: { _eq: $sessionToken } }) {
    ...Session
    user {
      ...User
    }
  }
}

query GetSession($sessionToken: String!) {
  sessions_by_pk(sessionToken: $sessionToken) {
    ...Session
  }
}

mutation CreateSession($data: sessions_insert_input!) {
  insert_sessions_one(object: $data) {
    ...Session
  }
}

mutation UpdateSession($sessionToken: String, $data: sessions_set_input!) {
  update_sessions(
    where: { sessionToken: { _eq: $sessionToken } }
    _set: $data
  ) {
    returning {
      ...Session
    }
  }
}

mutation DeleteSession($sessionToken: String!) {
  delete_sessions(where: { sessionToken: { _eq: $sessionToken } }) {
    returning {
      ...Session
    }
  }
}

================
File: packages/adapter-hasura/src/queries/user.graphql
================
query GetUser($id: uuid!) {
  users_by_pk(id: $id) {
    ...User
  }
}

query GetUsers($where: users_bool_exp!) {
  users(where: $where) {
    ...User
  }
}

mutation CreateUser($data: users_insert_input!) {
  insert_users_one(object: $data) {
    ...User
  }
}

mutation UpdateUser($id: uuid!, $data: users_set_input!) {
  update_users_by_pk(pk_columns: { id: $id }, _set: $data) {
    ...User
  }
}

mutation DeleteUser($id: uuid!) {
  delete_users_by_pk(id: $id) {
    ...User
  }
}

================
File: packages/adapter-hasura/src/queries/verification-token.graphql
================
mutation CreateVerificationToken($data: verification_tokens_insert_input!) {
  insert_verification_tokens_one(object: $data) {
    ...VerificationToken
  }
}

mutation DeleteVerificationToken($identifier: String!, $token: String!) {
  delete_verification_tokens(
    where: { token: { _eq: $token }, identifier: { _eq: $identifier } }
  ) {
    returning {
      ...VerificationToken
    }
  }
}

query GetVerificationToken($identifier: String!, $token: String!) {
  verification_tokens(
    where: { token: { _eq: $token }, identifier: { _eq: $identifier } }
  ) {
    ...VerificationToken
  }
}

================
File: packages/adapter-hasura/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>Official <a href="https://hasura.io/">Hasura</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://hasura.io/">
 *   <img style={{display: "block"}} src="/img/adapters/hasura.svg" width="38" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/hasura-adapter
 * ```
 *
 * @module @auth/hasura-adapter
 */
import { isDate, type Adapter } from "@auth/core/adapters"
import {
  client as hasuraClient,
  type HasuraAdapterClient,
} from "./lib/client.js"
import { useFragment } from "./lib/generated/index.js"
import {
  AccountFragmentDoc,
  CreateAccountDocument,
  CreateSessionDocument,
  CreateUserDocument,
  CreateVerificationTokenDocument,
  DeleteAccountDocument,
  DeleteSessionDocument,
  DeleteUserDocument,
  DeleteVerificationTokenDocument,
  GetSessionAndUserDocument,
  GetUserDocument,
  GetUsersDocument,
  SessionFragmentDoc,
  UpdateSessionDocument,
  UpdateUserDocument,
  UserFragmentDoc,
  VerificationTokenFragmentDoc,
} from "./lib/generated/graphql.js"
export function HasuraAdapter(client: HasuraAdapterClient): Adapter
⋮----
async createUser(newUser)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(
async deleteUser(id)
async createSession(data)
async getSessionAndUser(sessionToken)
async updateSession(
async deleteSession(sessionToken)
async linkAccount(data)
async unlinkAccount(params)
async createVerificationToken(data)
async useVerificationToken(params)
⋮----
from<T, B extends boolean = false>(
    object?: Record<string, any> | null | undefined,
    throwIfNullish?: B
): B extends true ? T : T | null
to<T>(object: Record<string, any>): T

================
File: packages/adapter-hasura/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { HasuraAdapter, format } from "../src"
import { useFragment } from "../src/lib/generated"
import {
  AccountFragmentDoc,
  DeleteAllDocument,
  GetAccountDocument,
  GetSessionDocument,
  GetUserDocument,
  GetVerificationTokenDocument,
  SessionFragmentDoc,
  UserFragmentDoc,
  VerificationTokenFragmentDoc,
} from "../src/lib/generated/graphql"
import { client as hasuraClient } from "../src/lib/client"
⋮----
async connect()
async disconnect()
async user(id)
async account(params)
async session(sessionToken)
async verificationToken(params)

================
File: packages/adapter-hasura/test/test.sh
================
#!/usr/bin/env bash
# Start Hasura
docker compose up -d
echo "Waiting 5s for db to start..."
sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker compose down -v
else
  docker compose down -v && exit 1
fi

================
File: packages/adapter-hasura/codegen.ts
================
import type { CodegenConfig } from "@graphql-codegen/cli"

================
File: packages/adapter-hasura/docker-compose.yml
================
services:
  postgres:
    image: postgres:16
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v2.33.4.cli-migrations-v3
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata
volumes:
  db_data:

================
File: packages/adapter-hasura/package.json
================
{
  "name": "@auth/hasura-adapter",
  "version": "1.9.1",
  "description": "Hasura adapter for Auth.js.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "contributors": [
    "Hasura Team",
    "Amruth Pillai <im.amruth@gmail.com>",
    "Arjun Yelamanchili"
  ],
  "license": "ISC",
  "keywords": [
    "@auth",
    "authjs",
    "Auth.js",
    "next-auth",
    "next.js",
    "oauth",
    "hasura"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "lib",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "graphql-codegen-esm --config codegen.ts && tsc",
    "clean": "rm -rf *.js *.d.ts* lib"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "@graphql-codegen/cli": "^5.0.0",
    "@graphql-codegen/client-preset": "^4.1.0",
    "@graphql-typed-document-node/core": "^3.2.0"
  }
}

================
File: packages/adapter-hasura/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://hasura.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/hasura.svg"/>
  </a>
  <h3 align="center"><b>Hasura Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/hasura-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/hasura-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/hasura-adapter?color=green&label=@auth/hasura-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/hasura-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/hasura-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/hasura).

## Credit

Based on code from [Amruth Pillai](https://github.com/AmruthPillai)

================
File: packages/adapter-hasura/schema.gql
================
schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
columns and relationships of "accounts"
"""
type accounts {
  access_token: String
  expires_at: Int
  id: uuid!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: provider_type_enum!

  """
  An object relationship
  """
  user: users!
  userId: uuid!
}

"""
aggregated selection of "accounts"
"""
type accounts_aggregate {
  aggregate: accounts_aggregate_fields
  nodes: [accounts!]!
}

input accounts_aggregate_bool_exp {
  count: accounts_aggregate_bool_exp_count
}

input accounts_aggregate_bool_exp_count {
  arguments: [accounts_select_column!]
  distinct: Boolean
  filter: accounts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "accounts"
"""
type accounts_aggregate_fields {
  avg: accounts_avg_fields
  count(columns: [accounts_select_column!], distinct: Boolean): Int!
  max: accounts_max_fields
  min: accounts_min_fields
  stddev: accounts_stddev_fields
  stddev_pop: accounts_stddev_pop_fields
  stddev_samp: accounts_stddev_samp_fields
  sum: accounts_sum_fields
  var_pop: accounts_var_pop_fields
  var_samp: accounts_var_samp_fields
  variance: accounts_variance_fields
}

"""
order by aggregate values of table "accounts"
"""
input accounts_aggregate_order_by {
  avg: accounts_avg_order_by
  count: order_by
  max: accounts_max_order_by
  min: accounts_min_order_by
  stddev: accounts_stddev_order_by
  stddev_pop: accounts_stddev_pop_order_by
  stddev_samp: accounts_stddev_samp_order_by
  sum: accounts_sum_order_by
  var_pop: accounts_var_pop_order_by
  var_samp: accounts_var_samp_order_by
  variance: accounts_variance_order_by
}

"""
input type for inserting array relation for remote table "accounts"
"""
input accounts_arr_rel_insert_input {
  data: [accounts_insert_input!]!

  """
  upsert condition
  """
  on_conflict: accounts_on_conflict
}

"""
aggregate avg on columns
"""
type accounts_avg_fields {
  expires_at: Float
}

"""
order by avg() on columns of table "accounts"
"""
input accounts_avg_order_by {
  expires_at: order_by
}

"""
Boolean expression to filter rows from the table "accounts". All fields are combined with a logical 'AND'.
"""
input accounts_bool_exp {
  _and: [accounts_bool_exp!]
  _not: accounts_bool_exp
  _or: [accounts_bool_exp!]
  access_token: String_comparison_exp
  expires_at: Int_comparison_exp
  id: uuid_comparison_exp
  id_token: String_comparison_exp
  provider: String_comparison_exp
  providerAccountId: String_comparison_exp
  refresh_token: String_comparison_exp
  scope: String_comparison_exp
  session_state: String_comparison_exp
  token_type: String_comparison_exp
  type: provider_type_enum_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "accounts"
"""
enum accounts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  accounts_pkey
}

"""
input type for incrementing numeric columns in table "accounts"
"""
input accounts_inc_input {
  expires_at: Int
}

"""
input type for inserting data into table "accounts"
"""
input accounts_insert_input {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: provider_type_enum
  user: users_obj_rel_insert_input
  userId: uuid
}

"""
aggregate max on columns
"""
type accounts_max_fields {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  userId: uuid
}

"""
order by max() on columns of table "accounts"
"""
input accounts_max_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  provider: order_by
  providerAccountId: order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  userId: order_by
}

"""
aggregate min on columns
"""
type accounts_min_fields {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  userId: uuid
}

"""
order by min() on columns of table "accounts"
"""
input accounts_min_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  provider: order_by
  providerAccountId: order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  userId: order_by
}

"""
response of any mutation on the table "accounts"
"""
type accounts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [accounts!]!
}

"""
on_conflict condition type for table "accounts"
"""
input accounts_on_conflict {
  constraint: accounts_constraint!
  update_columns: [accounts_update_column!]! = []
  where: accounts_bool_exp
}

"""
Ordering options when selecting data from "accounts".
"""
input accounts_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  provider: order_by
  providerAccountId: order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

"""
primary key columns input for table: accounts
"""
input accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "accounts"
"""
enum accounts_select_column {
  """
  column name
  """
  access_token

  """
  column name
  """
  expires_at

  """
  column name
  """
  id

  """
  column name
  """
  id_token

  """
  column name
  """
  provider

  """
  column name
  """
  providerAccountId

  """
  column name
  """
  refresh_token

  """
  column name
  """
  scope

  """
  column name
  """
  session_state

  """
  column name
  """
  token_type

  """
  column name
  """
  type

  """
  column name
  """
  userId
}

"""
input type for updating data in table "accounts"
"""
input accounts_set_input {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: provider_type_enum
  userId: uuid
}

"""
aggregate stddev on columns
"""
type accounts_stddev_fields {
  expires_at: Float
}

"""
order by stddev() on columns of table "accounts"
"""
input accounts_stddev_order_by {
  expires_at: order_by
}

"""
aggregate stddev_pop on columns
"""
type accounts_stddev_pop_fields {
  expires_at: Float
}

"""
order by stddev_pop() on columns of table "accounts"
"""
input accounts_stddev_pop_order_by {
  expires_at: order_by
}

"""
aggregate stddev_samp on columns
"""
type accounts_stddev_samp_fields {
  expires_at: Float
}

"""
order by stddev_samp() on columns of table "accounts"
"""
input accounts_stddev_samp_order_by {
  expires_at: order_by
}

"""
Streaming cursor of the table "accounts"
"""
input accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input accounts_stream_cursor_value_input {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: provider_type_enum
  userId: uuid
}

"""
aggregate sum on columns
"""
type accounts_sum_fields {
  expires_at: Int
}

"""
order by sum() on columns of table "accounts"
"""
input accounts_sum_order_by {
  expires_at: order_by
}

"""
update columns of table "accounts"
"""
enum accounts_update_column {
  """
  column name
  """
  access_token

  """
  column name
  """
  expires_at

  """
  column name
  """
  id

  """
  column name
  """
  id_token

  """
  column name
  """
  provider

  """
  column name
  """
  providerAccountId

  """
  column name
  """
  refresh_token

  """
  column name
  """
  scope

  """
  column name
  """
  session_state

  """
  column name
  """
  token_type

  """
  column name
  """
  type

  """
  column name
  """
  userId
}

input accounts_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: accounts_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: accounts_set_input

  """
  filter the rows which have to be updated
  """
  where: accounts_bool_exp!
}

"""
aggregate var_pop on columns
"""
type accounts_var_pop_fields {
  expires_at: Float
}

"""
order by var_pop() on columns of table "accounts"
"""
input accounts_var_pop_order_by {
  expires_at: order_by
}

"""
aggregate var_samp on columns
"""
type accounts_var_samp_fields {
  expires_at: Float
}

"""
order by var_samp() on columns of table "accounts"
"""
input accounts_var_samp_order_by {
  expires_at: order_by
}

"""
aggregate variance on columns
"""
type accounts_variance_fields {
  expires_at: Float
}

"""
order by variance() on columns of table "accounts"
"""
input accounts_variance_order_by {
  expires_at: order_by
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "accounts"
  """
  delete_accounts(
    """
    filter the rows which have to be deleted
    """
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  delete single row from the table: "accounts"
  """
  delete_accounts_by_pk(id: uuid!): accounts

  """
  delete data from the table: "provider_type"
  """
  delete_provider_type(
    """
    filter the rows which have to be deleted
    """
    where: provider_type_bool_exp!
  ): provider_type_mutation_response

  """
  delete single row from the table: "provider_type"
  """
  delete_provider_type_by_pk(value: String!): provider_type

  """
  delete data from the table: "sessions"
  """
  delete_sessions(
    """
    filter the rows which have to be deleted
    """
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  delete single row from the table: "sessions"
  """
  delete_sessions_by_pk(sessionToken: String!): sessions

  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users

  """
  delete data from the table: "verification_tokens"
  """
  delete_verification_tokens(
    """
    filter the rows which have to be deleted
    """
    where: verification_tokens_bool_exp!
  ): verification_tokens_mutation_response

  """
  delete single row from the table: "verification_tokens"
  """
  delete_verification_tokens_by_pk(token: String!): verification_tokens

  """
  insert data into the table: "accounts"
  """
  insert_accounts(
    """
    the rows to be inserted
    """
    objects: [accounts_insert_input!]!

    """
    upsert condition
    """
    on_conflict: accounts_on_conflict
  ): accounts_mutation_response

  """
  insert a single row into the table: "accounts"
  """
  insert_accounts_one(
    """
    the row to be inserted
    """
    object: accounts_insert_input!

    """
    upsert condition
    """
    on_conflict: accounts_on_conflict
  ): accounts

  """
  insert data into the table: "provider_type"
  """
  insert_provider_type(
    """
    the rows to be inserted
    """
    objects: [provider_type_insert_input!]!

    """
    upsert condition
    """
    on_conflict: provider_type_on_conflict
  ): provider_type_mutation_response

  """
  insert a single row into the table: "provider_type"
  """
  insert_provider_type_one(
    """
    the row to be inserted
    """
    object: provider_type_insert_input!

    """
    upsert condition
    """
    on_conflict: provider_type_on_conflict
  ): provider_type

  """
  insert data into the table: "sessions"
  """
  insert_sessions(
    """
    the rows to be inserted
    """
    objects: [sessions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: sessions_on_conflict
  ): sessions_mutation_response

  """
  insert a single row into the table: "sessions"
  """
  insert_sessions_one(
    """
    the row to be inserted
    """
    object: sessions_insert_input!

    """
    upsert condition
    """
    on_conflict: sessions_on_conflict
  ): sessions

  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!

    """
    upsert condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """
    the row to be inserted
    """
    object: users_insert_input!

    """
    upsert condition
    """
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "verification_tokens"
  """
  insert_verification_tokens(
    """
    the rows to be inserted
    """
    objects: [verification_tokens_insert_input!]!

    """
    upsert condition
    """
    on_conflict: verification_tokens_on_conflict
  ): verification_tokens_mutation_response

  """
  insert a single row into the table: "verification_tokens"
  """
  insert_verification_tokens_one(
    """
    the row to be inserted
    """
    object: verification_tokens_insert_input!

    """
    upsert condition
    """
    on_conflict: verification_tokens_on_conflict
  ): verification_tokens

  """
  update data of the table: "accounts"
  """
  update_accounts(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: accounts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: accounts_set_input

    """
    filter the rows which have to be updated
    """
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  update single row of the table: "accounts"
  """
  update_accounts_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: accounts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: accounts_set_input
    pk_columns: accounts_pk_columns_input!
  ): accounts

  """
  update multiples rows of table: "accounts"
  """
  update_accounts_many(
    """
    updates to execute, in order
    """
    updates: [accounts_updates!]!
  ): [accounts_mutation_response]

  """
  update data of the table: "provider_type"
  """
  update_provider_type(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: provider_type_set_input

    """
    filter the rows which have to be updated
    """
    where: provider_type_bool_exp!
  ): provider_type_mutation_response

  """
  update single row of the table: "provider_type"
  """
  update_provider_type_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: provider_type_set_input
    pk_columns: provider_type_pk_columns_input!
  ): provider_type

  """
  update multiples rows of table: "provider_type"
  """
  update_provider_type_many(
    """
    updates to execute, in order
    """
    updates: [provider_type_updates!]!
  ): [provider_type_mutation_response]

  """
  update data of the table: "sessions"
  """
  update_sessions(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: sessions_set_input

    """
    filter the rows which have to be updated
    """
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  update single row of the table: "sessions"
  """
  update_sessions_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: sessions_set_input
    pk_columns: sessions_pk_columns_input!
  ): sessions

  """
  update multiples rows of table: "sessions"
  """
  update_sessions_many(
    """
    updates to execute, in order
    """
    updates: [sessions_updates!]!
  ): [sessions_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """
    updates to execute, in order
    """
    updates: [users_updates!]!
  ): [users_mutation_response]

  """
  update data of the table: "verification_tokens"
  """
  update_verification_tokens(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: verification_tokens_set_input

    """
    filter the rows which have to be updated
    """
    where: verification_tokens_bool_exp!
  ): verification_tokens_mutation_response

  """
  update single row of the table: "verification_tokens"
  """
  update_verification_tokens_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: verification_tokens_set_input
    pk_columns: verification_tokens_pk_columns_input!
  ): verification_tokens

  """
  update multiples rows of table: "verification_tokens"
  """
  update_verification_tokens_many(
    """
    updates to execute, in order
    """
    updates: [verification_tokens_updates!]!
  ): [verification_tokens_mutation_response]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "provider_type"
"""
type provider_type {
  value: String!
}

"""
aggregated selection of "provider_type"
"""
type provider_type_aggregate {
  aggregate: provider_type_aggregate_fields
  nodes: [provider_type!]!
}

"""
aggregate fields of "provider_type"
"""
type provider_type_aggregate_fields {
  count(columns: [provider_type_select_column!], distinct: Boolean): Int!
  max: provider_type_max_fields
  min: provider_type_min_fields
}

"""
Boolean expression to filter rows from the table "provider_type". All fields are combined with a logical 'AND'.
"""
input provider_type_bool_exp {
  _and: [provider_type_bool_exp!]
  _not: provider_type_bool_exp
  _or: [provider_type_bool_exp!]
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "provider_type"
"""
enum provider_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  provider_type_pkey
}

enum provider_type_enum {
  credentials
  email
  oauth
  oidc
  webauthn
}

"""
Boolean expression to compare columns of type "provider_type_enum". All fields are combined with logical 'AND'.
"""
input provider_type_enum_comparison_exp {
  _eq: provider_type_enum
  _in: [provider_type_enum!]
  _is_null: Boolean
  _neq: provider_type_enum
  _nin: [provider_type_enum!]
}

"""
input type for inserting data into table "provider_type"
"""
input provider_type_insert_input {
  value: String
}

"""
aggregate max on columns
"""
type provider_type_max_fields {
  value: String
}

"""
aggregate min on columns
"""
type provider_type_min_fields {
  value: String
}

"""
response of any mutation on the table "provider_type"
"""
type provider_type_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [provider_type!]!
}

"""
on_conflict condition type for table "provider_type"
"""
input provider_type_on_conflict {
  constraint: provider_type_constraint!
  update_columns: [provider_type_update_column!]! = []
  where: provider_type_bool_exp
}

"""
Ordering options when selecting data from "provider_type".
"""
input provider_type_order_by {
  value: order_by
}

"""
primary key columns input for table: provider_type
"""
input provider_type_pk_columns_input {
  value: String!
}

"""
select columns of table "provider_type"
"""
enum provider_type_select_column {
  """
  column name
  """
  value
}

"""
input type for updating data in table "provider_type"
"""
input provider_type_set_input {
  value: String
}

"""
Streaming cursor of the table "provider_type"
"""
input provider_type_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: provider_type_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input provider_type_stream_cursor_value_input {
  value: String
}

"""
update columns of table "provider_type"
"""
enum provider_type_update_column {
  """
  column name
  """
  value
}

input provider_type_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: provider_type_set_input

  """
  filter the rows which have to be updated
  """
  where: provider_type_bool_exp!
}

type query_root {
  """
  An array relationship
  """
  accounts(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!

  """
  An aggregate relationship
  """
  accounts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!

  """
  fetch data from the table: "accounts" using primary key columns
  """
  accounts_by_pk(id: uuid!): accounts

  """
  fetch data from the table: "provider_type"
  """
  provider_type(
    """
    distinct select on columns
    """
    distinct_on: [provider_type_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [provider_type_order_by!]

    """
    filter the rows returned
    """
    where: provider_type_bool_exp
  ): [provider_type!]!

  """
  fetch aggregated fields from the table: "provider_type"
  """
  provider_type_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [provider_type_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [provider_type_order_by!]

    """
    filter the rows returned
    """
    where: provider_type_bool_exp
  ): provider_type_aggregate!

  """
  fetch data from the table: "provider_type" using primary key columns
  """
  provider_type_by_pk(value: String!): provider_type

  """
  An array relationship
  """
  sessions(
    """
    distinct select on columns
    """
    distinct_on: [sessions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [sessions_order_by!]

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): [sessions!]!

  """
  An aggregate relationship
  """
  sessions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [sessions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [sessions_order_by!]

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): sessions_aggregate!

  """
  fetch data from the table: "sessions" using primary key columns
  """
  sessions_by_pk(sessionToken: String!): sessions

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "verification_tokens"
  """
  verification_tokens(
    """
    distinct select on columns
    """
    distinct_on: [verification_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [verification_tokens_order_by!]

    """
    filter the rows returned
    """
    where: verification_tokens_bool_exp
  ): [verification_tokens!]!

  """
  fetch aggregated fields from the table: "verification_tokens"
  """
  verification_tokens_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [verification_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [verification_tokens_order_by!]

    """
    filter the rows returned
    """
    where: verification_tokens_bool_exp
  ): verification_tokens_aggregate!

  """
  fetch data from the table: "verification_tokens" using primary key columns
  """
  verification_tokens_by_pk(token: String!): verification_tokens
}

"""
columns and relationships of "sessions"
"""
type sessions {
  expires: timestamptz!
  id: uuid!
  sessionToken: String!

  """
  An object relationship
  """
  user: users!
  userId: uuid!
}

"""
aggregated selection of "sessions"
"""
type sessions_aggregate {
  aggregate: sessions_aggregate_fields
  nodes: [sessions!]!
}

input sessions_aggregate_bool_exp {
  count: sessions_aggregate_bool_exp_count
}

input sessions_aggregate_bool_exp_count {
  arguments: [sessions_select_column!]
  distinct: Boolean
  filter: sessions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "sessions"
"""
type sessions_aggregate_fields {
  count(columns: [sessions_select_column!], distinct: Boolean): Int!
  max: sessions_max_fields
  min: sessions_min_fields
}

"""
order by aggregate values of table "sessions"
"""
input sessions_aggregate_order_by {
  count: order_by
  max: sessions_max_order_by
  min: sessions_min_order_by
}

"""
input type for inserting array relation for remote table "sessions"
"""
input sessions_arr_rel_insert_input {
  data: [sessions_insert_input!]!

  """
  upsert condition
  """
  on_conflict: sessions_on_conflict
}

"""
Boolean expression to filter rows from the table "sessions". All fields are combined with a logical 'AND'.
"""
input sessions_bool_exp {
  _and: [sessions_bool_exp!]
  _not: sessions_bool_exp
  _or: [sessions_bool_exp!]
  expires: timestamptz_comparison_exp
  id: uuid_comparison_exp
  sessionToken: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "sessions"
"""
enum sessions_constraint {
  """
  unique or primary key constraint on columns "sessionToken"
  """
  sessions_pkey
}

"""
input type for inserting data into table "sessions"
"""
input sessions_insert_input {
  expires: timestamptz
  id: uuid
  sessionToken: String
  user: users_obj_rel_insert_input
  userId: uuid
}

"""
aggregate max on columns
"""
type sessions_max_fields {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
order by max() on columns of table "sessions"
"""
input sessions_max_order_by {
  expires: order_by
  id: order_by
  sessionToken: order_by
  userId: order_by
}

"""
aggregate min on columns
"""
type sessions_min_fields {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
order by min() on columns of table "sessions"
"""
input sessions_min_order_by {
  expires: order_by
  id: order_by
  sessionToken: order_by
  userId: order_by
}

"""
response of any mutation on the table "sessions"
"""
type sessions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [sessions!]!
}

"""
on_conflict condition type for table "sessions"
"""
input sessions_on_conflict {
  constraint: sessions_constraint!
  update_columns: [sessions_update_column!]! = []
  where: sessions_bool_exp
}

"""
Ordering options when selecting data from "sessions".
"""
input sessions_order_by {
  expires: order_by
  id: order_by
  sessionToken: order_by
  user: users_order_by
  userId: order_by
}

"""
primary key columns input for table: sessions
"""
input sessions_pk_columns_input {
  sessionToken: String!
}

"""
select columns of table "sessions"
"""
enum sessions_select_column {
  """
  column name
  """
  expires

  """
  column name
  """
  id

  """
  column name
  """
  sessionToken

  """
  column name
  """
  userId
}

"""
input type for updating data in table "sessions"
"""
input sessions_set_input {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
Streaming cursor of the table "sessions"
"""
input sessions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: sessions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input sessions_stream_cursor_value_input {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
update columns of table "sessions"
"""
enum sessions_update_column {
  """
  column name
  """
  expires

  """
  column name
  """
  id

  """
  column name
  """
  sessionToken

  """
  column name
  """
  userId
}

input sessions_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: sessions_set_input

  """
  filter the rows which have to be updated
  """
  where: sessions_bool_exp!
}

type subscription_root {
  """
  An array relationship
  """
  accounts(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!

  """
  An aggregate relationship
  """
  accounts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!

  """
  fetch data from the table: "accounts" using primary key columns
  """
  accounts_by_pk(id: uuid!): accounts

  """
  fetch data from the table in a streaming manner: "accounts"
  """
  accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch data from the table: "provider_type"
  """
  provider_type(
    """
    distinct select on columns
    """
    distinct_on: [provider_type_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [provider_type_order_by!]

    """
    filter the rows returned
    """
    where: provider_type_bool_exp
  ): [provider_type!]!

  """
  fetch aggregated fields from the table: "provider_type"
  """
  provider_type_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [provider_type_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [provider_type_order_by!]

    """
    filter the rows returned
    """
    where: provider_type_bool_exp
  ): provider_type_aggregate!

  """
  fetch data from the table: "provider_type" using primary key columns
  """
  provider_type_by_pk(value: String!): provider_type

  """
  fetch data from the table in a streaming manner: "provider_type"
  """
  provider_type_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [provider_type_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: provider_type_bool_exp
  ): [provider_type!]!

  """
  An array relationship
  """
  sessions(
    """
    distinct select on columns
    """
    distinct_on: [sessions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [sessions_order_by!]

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): [sessions!]!

  """
  An aggregate relationship
  """
  sessions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [sessions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [sessions_order_by!]

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): sessions_aggregate!

  """
  fetch data from the table: "sessions" using primary key columns
  """
  sessions_by_pk(sessionToken: String!): sessions

  """
  fetch data from the table in a streaming manner: "sessions"
  """
  sessions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [sessions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): [sessions!]!

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "verification_tokens"
  """
  verification_tokens(
    """
    distinct select on columns
    """
    distinct_on: [verification_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [verification_tokens_order_by!]

    """
    filter the rows returned
    """
    where: verification_tokens_bool_exp
  ): [verification_tokens!]!

  """
  fetch aggregated fields from the table: "verification_tokens"
  """
  verification_tokens_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [verification_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [verification_tokens_order_by!]

    """
    filter the rows returned
    """
    where: verification_tokens_bool_exp
  ): verification_tokens_aggregate!

  """
  fetch data from the table: "verification_tokens" using primary key columns
  """
  verification_tokens_by_pk(token: String!): verification_tokens

  """
  fetch data from the table in a streaming manner: "verification_tokens"
  """
  verification_tokens_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [verification_tokens_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: verification_tokens_bool_exp
  ): [verification_tokens!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  """
  An array relationship
  """
  accounts(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!

  """
  An aggregate relationship
  """
  accounts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]

    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!
  email: String!
  emailVerified: timestamptz
  id: uuid!
  image: String
  name: String

  """
  An array relationship
  """
  sessions(
    """
    distinct select on columns
    """
    distinct_on: [sessions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [sessions_order_by!]

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): [sessions!]!

  """
  An aggregate relationship
  """
  sessions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [sessions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [sessions_order_by!]

    """
    filter the rows returned
    """
    where: sessions_bool_exp
  ): sessions_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  accounts: accounts_bool_exp
  accounts_aggregate: accounts_aggregate_bool_exp
  email: String_comparison_exp
  emailVerified: timestamptz_comparison_exp
  id: uuid_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  sessions: sessions_bool_exp
  sessions_aggregate: sessions_aggregate_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  accounts: accounts_arr_rel_insert_input
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
  sessions: sessions_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type users_max_fields {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
aggregate min on columns
"""
type users_min_fields {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """
  upsert condition
  """
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  accounts_aggregate: accounts_aggregate_order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  image: order_by
  name: order_by
  sessions_aggregate: sessions_aggregate_order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  email

  """
  column name
  """
  emailVerified

  """
  column name
  """
  id

  """
  column name
  """
  image

  """
  column name
  """
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  email

  """
  column name
  """
  emailVerified

  """
  column name
  """
  id

  """
  column name
  """
  image

  """
  column name
  """
  name
}

input users_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: users_set_input

  """
  filter the rows which have to be updated
  """
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "verification_tokens"
"""
type verification_tokens {
  expires: timestamptz!
  identifier: String!
  token: String!
}

"""
aggregated selection of "verification_tokens"
"""
type verification_tokens_aggregate {
  aggregate: verification_tokens_aggregate_fields
  nodes: [verification_tokens!]!
}

"""
aggregate fields of "verification_tokens"
"""
type verification_tokens_aggregate_fields {
  count(columns: [verification_tokens_select_column!], distinct: Boolean): Int!
  max: verification_tokens_max_fields
  min: verification_tokens_min_fields
}

"""
Boolean expression to filter rows from the table "verification_tokens". All fields are combined with a logical 'AND'.
"""
input verification_tokens_bool_exp {
  _and: [verification_tokens_bool_exp!]
  _not: verification_tokens_bool_exp
  _or: [verification_tokens_bool_exp!]
  expires: timestamptz_comparison_exp
  identifier: String_comparison_exp
  token: String_comparison_exp
}

"""
unique or primary key constraints on table "verification_tokens"
"""
enum verification_tokens_constraint {
  """
  unique or primary key constraint on columns "token"
  """
  verification_tokens_pkey
}

"""
input type for inserting data into table "verification_tokens"
"""
input verification_tokens_insert_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""
aggregate max on columns
"""
type verification_tokens_max_fields {
  expires: timestamptz
  identifier: String
  token: String
}

"""
aggregate min on columns
"""
type verification_tokens_min_fields {
  expires: timestamptz
  identifier: String
  token: String
}

"""
response of any mutation on the table "verification_tokens"
"""
type verification_tokens_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [verification_tokens!]!
}

"""
on_conflict condition type for table "verification_tokens"
"""
input verification_tokens_on_conflict {
  constraint: verification_tokens_constraint!
  update_columns: [verification_tokens_update_column!]! = []
  where: verification_tokens_bool_exp
}

"""
Ordering options when selecting data from "verification_tokens".
"""
input verification_tokens_order_by {
  expires: order_by
  identifier: order_by
  token: order_by
}

"""
primary key columns input for table: verification_tokens
"""
input verification_tokens_pk_columns_input {
  token: String!
}

"""
select columns of table "verification_tokens"
"""
enum verification_tokens_select_column {
  """
  column name
  """
  expires

  """
  column name
  """
  identifier

  """
  column name
  """
  token
}

"""
input type for updating data in table "verification_tokens"
"""
input verification_tokens_set_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""
Streaming cursor of the table "verification_tokens"
"""
input verification_tokens_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: verification_tokens_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input verification_tokens_stream_cursor_value_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""
update columns of table "verification_tokens"
"""
enum verification_tokens_update_column {
  """
  column name
  """
  expires

  """
  column name
  """
  identifier

  """
  column name
  """
  token
}

input verification_tokens_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: verification_tokens_set_input

  """
  filter the rows which have to be updated
  """
  where: verification_tokens_bool_exp!
}

================
File: packages/adapter-hasura/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-hasura/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-kysely/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://kysely.dev/">Kysely</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://kysely.dev/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/kysely.svg" width="30" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/kysely-adapter kysely
 * ```
 *
 * @module @auth/kysely-adapter
 */
import { Kysely, SqliteAdapter } from "kysely"
import {
  type Adapter,
  type AdapterUser,
  type AdapterAccount,
  type AdapterSession,
  type VerificationToken,
  isDate,
} from "@auth/core/adapters"
export interface Database {
  User: AdapterUser
  Account: AdapterAccount
  Session: AdapterSession
  VerificationToken: VerificationToken
}
⋮----
from<T>(object?: Record<string, any>): T
to<T>(object: Record<string, any>): T
⋮----
export function KyselyAdapter(db: Kysely<Database>): Adapter
⋮----
/** If the database is SQLite, turn dates into an ISO string  */
⋮----
/** If the database is SQLite, turn ISO strings into dates */
⋮----
async createUser(data)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(
async deleteUser(userId)
async linkAccount(account)
async unlinkAccount(
async createSession(session)
async getSessionAndUser(sessionToken)
async updateSession(session)
async deleteSession(sessionToken)
async createVerificationToken(data)
async useVerificationToken(
⋮----
/**
 * Wrapper over the original `Kysely` class in order to validate the passed in
 * database interface. A regular Kysely instance may also be used, but wrapping
 * it ensures the database interface implements the fields that Auth.js
 * requires. When used with `kysely-codegen`, the `Codegen` type can be passed as
 * the second generic argument. The generated types will be used, and
 * `KyselyAuth` will only verify that the correct fields exist.
 * @noInheritDoc
 */
export class KyselyAuth<DB extends T, T = Database> extends Kysely<DB>
export type Codegen = {
  [K in keyof Database]: { [J in keyof Database[K]]: unknown }
}

================
File: packages/adapter-kysely/test/scripts/mysql-init.sql
================
CREATE USER 'kysely'@'%' IDENTIFIED WITH mysql_native_password BY 'kysely';
GRANT ALL ON *.* TO 'kysely'@'%';
CREATE DATABASE kysely_test;

================
File: packages/adapter-kysely/test/index.test.ts
================
import { describe } from "vitest"
import { runBasicTests } from "utils/adapter"
import { Pool } from "pg"
import {
  MysqlDialect,
  PostgresDialect,
  SchemaModule,
  sql,
  SqliteAdapter,
  SqliteDialect,
} from "kysely"
import { createPool } from "mysql2"
import SqliteDatabase from "libsql"
import { KyselyAdapter, KyselyAuth } from "../src"
import type { Database } from "../src"
export function createTableWithId(
  schema: SchemaModule,
  dialect: string,
  tableName: string
)
⋮----
async connect()
async disconnect()
async user(userId)
async account(
async session(sessionToken)
async verificationToken(

================
File: packages/adapter-kysely/test/test.sh
================
#!/usr/bin/env bash
MYSQL_CONTAINER_NAME=authjs-kysely-mysql-test
PG_CONTAINER_NAME=authjs-kysely-pg-test
docker run -d --rm \
  --name ${MYSQL_CONTAINER_NAME} \
  -e MYSQL_ROOT_PASSWORD=root \
  -e MYSQL_DATABASE=kysely_test \
  -p 3308:3306 \
  -v "$(pwd)"/test/scripts/mysql-init.sql:/data/application/init.sql \
  mysql/mysql-server \
  --init-file /data/application/init.sql
docker run -d --rm \
  --name ${PG_CONTAINER_NAME} \
  -e POSTGRES_DB=kysely_test \
  -e POSTGRES_USER=kysely \
  -e POSTGRES_HOST_AUTH_METHOD=trust \
  -p 5434:5432 \
  postgres
echo "waiting 10s for db to start..."
sleep 10
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${MYSQL_CONTAINER_NAME} && docker stop ${PG_CONTAINER_NAME}
else
  docker stop ${MYSQL_CONTAINER_NAME} && docker stop ${PG_CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-kysely/package.json
================
{
  "name": "@auth/kysely-adapter",
  "version": "1.9.1",
  "description": "Kysely adapter for Auth.js",
  "homepage": "https://authjs.dev/reference/adapter/kysely",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "mwojtul <mark.wojtul@gmail.com> (https://github.com/mwojtul)",
  "license": "ISC",
  "keywords": [
    "authjs",
    "next-auth",
    "next.js",
    "oauth",
    "kysely"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "scripts": {
    "build": "tsc",
    "test": "./test/test.sh",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "kysely": "^0.27.5"
  },
  "devDependencies": {
    "@types/pg": "^8.6.5",
    "kysely": "^0.27.5",
    "libsql": "^0.3.18",
    "mysql2": "^3.9.7",
    "pg": "^8.10.0"
  }
}

================
File: packages/adapter-kysely/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://kysely.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/kysely.svg"/>
  </a>
  <h3 align="center"><b>Kysely Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/kysely-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/kysely-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/kysely-adapter?color=green&label=@auth/kysely-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/kysely-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/kysely-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/kysely).

================
File: packages/adapter-kysely/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-kysely/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-mikro-orm/src/lib/entities.ts
================
import {
  Property,
  Unique,
  PrimaryKey,
  Entity,
  OneToMany,
  Collection,
  ManyToOne,
  types,
} from "@mikro-orm/core"
import type {
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  VerificationToken as AdapterVerificationToken,
} from "@auth/core/adapters"
type RemoveIndex<T> = {
  // eslint-disable-next-line
  [K in keyof T as {} extends Record<K, 1> ? never : K]: T[K]
}
⋮----
// eslint-disable-next-line
⋮----
export class User implements RemoveIndex<AdapterUser>
⋮----
export class Session implements AdapterSession
⋮----
export class Account implements RemoveIndex<AdapterAccount>
⋮----
export class VerificationToken implements AdapterVerificationToken

================
File: packages/adapter-mikro-orm/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://mikro-orm.io/docs/installation">MikroORM</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://mikro-orm.io/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/mikro-orm.svg" width="64"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @mikro-orm/core @auth/mikro-orm-adapter
 * ```
 *
 * @module @auth/mikro-orm-adapter
 */
import type {
  Connection,
  IDatabaseDriver,
  Options as ORMOptions,
} from "@mikro-orm/core"
import type { Adapter } from "@auth/core/adapters"
import { MikroORM, wrap } from "@mikro-orm/core"
⋮----
export function MikroOrmAdapter<
  D extends IDatabaseDriver<Connection> = IDatabaseDriver<Connection>,
>(
  ormOptions: ORMOptions<D>,
  options?: {
    entities?: Partial<typeof defaultEntities>
  }
): Adapter
⋮----
const getEM = async () =>
⋮----
// filter out default entities from the passed entities
⋮----
// add the (un-)enhanced entities to the connection
⋮----
/**
     * Method used in testing. You won't need to call this in your app.
     * @internal
     */
async __disconnect()
async createUser(data)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(provider_providerAccountId)
async updateUser(data)
async deleteUser(id)
// @ts-expect-error
async linkAccount(data)
// @ts-expect-error
async unlinkAccount(provider_providerAccountId)
async getSessionAndUser(sessionToken)
async createSession(data)
async updateSession(data)
async deleteSession(sessionToken)
async createVerificationToken(data)
async useVerificationToken(params)

================
File: packages/adapter-mikro-orm/test/__snapshots__/schema.test.ts.snap
================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`run migrations > createSchemaSQL 1`] = `
"pragma foreign_keys = off;

create table \`user\` (\`id\` text not null, \`name\` text null, \`email\` text null default '', \`email_verified\` datetime null, \`image\` text null, primary key (\`id\`));
create unique index \`user_email_unique\` on \`user\` (\`email\`);

create table \`session\` (\`id\` text not null, \`user_id\` text not null, \`expires\` datetime not null, \`session_token\` text not null, constraint \`session_user_id_foreign\` foreign key(\`user_id\`) references \`user\`(\`id\`) on delete cascade on update cascade, primary key (\`id\`));
create index \`session_user_id_index\` on \`session\` (\`user_id\`);
create unique index \`session_session_token_unique\` on \`session\` (\`session_token\`);

create table \`account\` (\`id\` text not null, \`user_id\` text not null, \`type\` text not null, \`provider\` text not null, \`provider_account_id\` text not null, \`refresh_token\` text null, \`access_token\` text null, \`expires_at\` integer null, \`token_type\` text null, \`scope\` text null, \`id_token\` text null, \`session_state\` text null, constraint \`account_user_id_foreign\` foreign key(\`user_id\`) references \`user\`(\`id\`) on delete cascade on update cascade, primary key (\`id\`));
create index \`account_user_id_index\` on \`account\` (\`user_id\`);
create unique index \`account_provider_provider_account_id_unique\` on \`account\` (\`provider\`, \`provider_account_id\`);

create table \`verification_token\` (\`token\` text not null, \`expires\` datetime not null, \`identifier\` text not null, primary key (\`token\`));
create unique index \`verification_token_token_identifier_unique\` on \`verification_token\` (\`token\`, \`identifier\`);

pragma foreign_keys = on;
"
`;

exports[`run migrations > targetSchema 1`] = `
{
  "name": undefined,
  "namespaces": [],
  "tables": [
    {
      "checks": [],
      "columns": {
        "email": {
          "autoincrement": false,
          "comment": undefined,
          "default": "''",
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "email",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "email_verified": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": 0,
          "mappedType": "datetime",
          "name": "email_verified",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "datetime",
          "unsigned": false,
        },
        "id": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "id",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "image": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "image",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "name": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "name",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
      },
      "comment": undefined,
      "foreignKeys": {},
      "indexes": [
        {
          "columnNames": [
            "email",
          ],
          "composite": false,
          "keyName": "user_email_unique",
          "primary": false,
          "unique": true,
        },
        {
          "columnNames": [
            "id",
          ],
          "composite": false,
          "expression": undefined,
          "keyName": "primary",
          "primary": true,
          "type": undefined,
          "unique": true,
        },
      ],
      "name": "user",
      "schema": undefined,
    },
    {
      "checks": [],
      "columns": {
        "expires": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": 0,
          "mappedType": "datetime",
          "name": "expires",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "datetime",
          "unsigned": false,
        },
        "id": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "id",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "session_token": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "session_token",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "user_id": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "user_id",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
      },
      "comment": undefined,
      "foreignKeys": {
        "session_user_id_foreign": {
          "columnNames": [
            "user_id",
          ],
          "constraintName": "session_user_id_foreign",
          "deleteRule": "cascade",
          "localTableName": "session",
          "referencedColumnNames": [
            "id",
          ],
          "referencedTableName": "user",
          "updateRule": "cascade",
        },
      },
      "indexes": [
        {
          "columnNames": [
            "user_id",
          ],
          "composite": false,
          "keyName": "session_user_id_index",
          "primary": false,
          "unique": false,
        },
        {
          "columnNames": [
            "session_token",
          ],
          "composite": false,
          "keyName": "session_session_token_unique",
          "primary": false,
          "unique": true,
        },
        {
          "columnNames": [
            "id",
          ],
          "composite": false,
          "expression": undefined,
          "keyName": "primary",
          "primary": true,
          "type": undefined,
          "unique": true,
        },
      ],
      "name": "session",
      "schema": undefined,
    },
    {
      "checks": [],
      "columns": {
        "access_token": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "access_token",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "expires_at": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "integer",
          "name": "expires_at",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "integer",
          "unsigned": false,
        },
        "id": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "id",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "id_token": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "id_token",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "provider": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "provider",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "provider_account_id": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "provider_account_id",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "refresh_token": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "refresh_token",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "scope": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "scope",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "session_state": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "session_state",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "token_type": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "token_type",
          "nullable": true,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "type": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "type",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "user_id": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "user_id",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
      },
      "comment": undefined,
      "foreignKeys": {
        "account_user_id_foreign": {
          "columnNames": [
            "user_id",
          ],
          "constraintName": "account_user_id_foreign",
          "deleteRule": "cascade",
          "localTableName": "account",
          "referencedColumnNames": [
            "id",
          ],
          "referencedTableName": "user",
          "updateRule": "cascade",
        },
      },
      "indexes": [
        {
          "columnNames": [
            "user_id",
          ],
          "composite": false,
          "keyName": "account_user_id_index",
          "primary": false,
          "unique": false,
        },
        {
          "columnNames": [
            "provider",
            "provider_account_id",
          ],
          "composite": true,
          "expression": undefined,
          "keyName": "account_provider_provider_account_id_unique",
          "primary": false,
          "type": undefined,
          "unique": true,
        },
        {
          "columnNames": [
            "id",
          ],
          "composite": false,
          "expression": undefined,
          "keyName": "primary",
          "primary": true,
          "type": undefined,
          "unique": true,
        },
      ],
      "name": "account",
      "schema": undefined,
    },
    {
      "checks": [],
      "columns": {
        "expires": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": 0,
          "mappedType": "datetime",
          "name": "expires",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "datetime",
          "unsigned": false,
        },
        "identifier": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "identifier",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
        "token": {
          "autoincrement": false,
          "comment": undefined,
          "default": undefined,
          "enumItems": undefined,
          "extra": undefined,
          "ignoreSchemaChanges": undefined,
          "length": undefined,
          "mappedType": "text",
          "name": "token",
          "nullable": false,
          "precision": undefined,
          "primary": false,
          "scale": undefined,
          "type": "text",
          "unsigned": false,
        },
      },
      "comment": undefined,
      "foreignKeys": {},
      "indexes": [
        {
          "columnNames": [
            "token",
            "identifier",
          ],
          "composite": true,
          "expression": undefined,
          "keyName": "verification_token_token_identifier_unique",
          "primary": false,
          "type": undefined,
          "unique": true,
        },
        {
          "columnNames": [
            "token",
          ],
          "composite": false,
          "expression": undefined,
          "keyName": "primary",
          "primary": true,
          "type": undefined,
          "unique": true,
        },
      ],
      "name": "verification_token",
      "schema": undefined,
    },
  ],
}
`;

================
File: packages/adapter-mikro-orm/test/entities.test.ts
================
import type { SqliteDriver } from "@mikro-orm/sqlite"
import { MikroOrmAdapter, defaultEntities } from "../src"
import {
  Cascade,
  Collection,
  Entity,
  OneToMany,
  PrimaryKey,
  Property,
  Unique,
  MikroORM,
  wrap,
  Options,
  types,
} from "@mikro-orm/core"
import { runBasicTests } from "utils/adapter"
⋮----
export class User implements defaultEntities.User
⋮----
export class VeryImportantEntity
⋮----
async function getORM()
⋮----
async connect()
async disconnect()
⋮----
// its fine to tear down the connection if it has been already closed
⋮----
async verificationToken(identifier_token)
async user(id)
async account(provider_providerAccountId)
async session(sessionToken)

================
File: packages/adapter-mikro-orm/test/schema.test.ts
================
import { MikroORM, Options } from "@mikro-orm/core"
import { SqliteDriver } from "@mikro-orm/sqlite"
import { defaultEntities } from "../src"
import { expect, test } from "vitest"

================
File: packages/adapter-mikro-orm/package.json
================
{
  "name": "@auth/mikro-orm-adapter",
  "version": "2.9.1",
  "description": "MikroORM adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Jonas Strassel <info@jonas-strassel.de>",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "lib",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js",
      "default": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "mikro-orm"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "vitest -c ../utils/vitest.config.ts",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts* lib"
  },
  "peerDependencies": {
    "@mikro-orm/core": "^5"
  },
  "devDependencies": {
    "@mikro-orm/core": "^5",
    "@mikro-orm/sqlite": "^5"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  }
}

================
File: packages/adapter-mikro-orm/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://mikro-orm.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/mikro-orm.svg"/>
  </a>
  <h3 align="center"><b>MikroORM Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/mikro-orm-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/mikro-orm-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/mikro-orm-adapter?color=green&label=@auth/mikro-orm-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/mikro-orm-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/mikro-orm-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/mikro-orm).

================
File: packages/adapter-mikro-orm/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-mikro-orm/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-mongodb/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://www.mongodb.com">MongoDB</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://www.mongodb.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/mongodb.svg" width="30" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/mongodb-adapter mongodb
 * ```
 *
 * @module @auth/mongodb-adapter
 */
import { ObjectId } from "mongodb"
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  VerificationToken,
} from "@auth/core/adapters"
import type { MongoClient } from "mongodb"
/**
 * This adapter uses https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management.
 * This feature is very new and requires runtime polyfills for `Symbol.asyncDispose` in order to work properly in all environments.
 * It is also required to set in the `tsconfig.json` file the compilation target to `es2022` or below and configure the `lib` option to include `esnext` or `esnext.disposable`.
 *
 * You can find more information about this feature and the polyfills in the link above.
 */
// @ts-expect-error read only property is not assignable
⋮----
/** This is the interface of the MongoDB adapter options. */
export interface MongoDBAdapterOptions {
  /**
   * The name of the {@link https://www.mongodb.com/docs/manual/core/databases-and-collections/#collections MongoDB collections}.
   */
  collections?: {
    Users?: string
    Accounts?: string
    Sessions?: string
    VerificationTokens?: string
  }
  /**
   * The name you want to give to the MongoDB database
   */
  databaseName?: string
  /**
   * Callback function for managing the closing of the MongoDB client.
   * This could be useful when `client` is provided as a function returning MongoClient.
   * It allows for more customized management of database connections,
   * addressing persistence, container reuse, and connection closure issues.
   */
  onClose?: (client: MongoClient) => Promise<void>
}
⋮----
/**
   * The name of the {@link https://www.mongodb.com/docs/manual/core/databases-and-collections/#collections MongoDB collections}.
   */
⋮----
/**
   * The name you want to give to the MongoDB database
   */
⋮----
/**
   * Callback function for managing the closing of the MongoDB client.
   * This could be useful when `client` is provided as a function returning MongoClient.
   * It allows for more customized management of database connections,
   * addressing persistence, container reuse, and connection closure issues.
   */
⋮----
/** Takes a MongoDB object and returns a plain old JavaScript object */
from<T = Record<string, unknown>>(object: Record<string, any>): T
/** Takes a plain old JavaScript object and turns it into a MongoDB object */
to<T = Record<string, unknown>>(object: Record<string, any>)
⋮----
/** @internal */
export function _id(hex?: string)
export function MongoDBAdapter(
  /**
   * The MongoDB client.
   *
   * The MongoDB team recommends providing a non-connected `MongoClient` instance to avoid unhandled promise rejections if the client fails to connect.
   *
   * Alternatively, you can also pass:
   * - A promise that resolves to a connected `MongoClient` (not recommended).
   * - A function, to handle more complex and custom connection strategies.
   *
   * Using a function combined with `options.onClose`, can be useful when you want a more advanced and customized connection strategy to address challenges related to persistence, container reuse, and connection closure.
   */
  client:
    | MongoClient
    | Promise<MongoClient>
    | (() => MongoClient | Promise<MongoClient>),
  options: MongoDBAdapterOptions = {}
): Adapter
⋮----
/**
   * The MongoDB client.
   *
   * The MongoDB team recommends providing a non-connected `MongoClient` instance to avoid unhandled promise rejections if the client fails to connect.
   *
   * Alternatively, you can also pass:
   * - A promise that resolves to a connected `MongoClient` (not recommended).
   * - A function, to handle more complex and custom connection strategies.
   *
   * Using a function combined with `options.onClose`, can be useful when you want a more advanced and customized connection strategy to address challenges related to persistence, container reuse, and connection closure.
   */
⋮----
const getDb = async () =>
⋮----
async createUser(data)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(provider_providerAccountId)
async updateUser(data)
async deleteUser(id)
⋮----
async unlinkAccount(provider_providerAccountId)
async getSessionAndUser(sessionToken)
async createSession(data)
async updateSession(data)
async deleteSession(sessionToken)
async createVerificationToken(data)
async useVerificationToken(identifier_token)

================
File: packages/adapter-mongodb/test/custom.test.ts
================
import { runBasicTests } from "utils/adapter"
import { defaultCollections, format, MongoDBAdapter, _id } from "../src"
import { MongoClient } from "mongodb"
⋮----
async disconnect()
async user(id)
async account(provider_providerAccountId)
async session(sessionToken)
async verificationToken(identifier_token)

================
File: packages/adapter-mongodb/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { defaultCollections, format, MongoDBAdapter, _id } from "../src"
import { MongoClient } from "mongodb"
⋮----
async disconnect()
async user(id)
async account(provider_providerAccountId)
async session(sessionToken)
async verificationToken(identifier_token)

================
File: packages/adapter-mongodb/test/serverless.test.ts
================
import { runBasicTests } from "utils/adapter"
import { defaultCollections, format, MongoDBAdapter, _id } from "../src"
import { MongoClient } from "mongodb"
import { expect, test, vi } from "vitest"
⋮----
async disconnect()
async user(id)
async account(provider_providerAccountId)
async session(sessionToken)
async verificationToken(identifier_token)

================
File: packages/adapter-mongodb/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-mongodb-test
# Start db
docker run -d --rm \
  -p 27017:27017 \
  --name ${CONTAINER_NAME} \
  mongo
echo "Waiting 5s for db to start..."
sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-mongodb/package.json
================
{
  "name": "@auth/mongodb-adapter",
  "version": "3.9.1",
  "description": "MongoDB adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Balázs Orbán <info@balazsorban.com>",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "mongodb",
    "adapter"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "mongodb": "^6"
  },
  "devDependencies": {
    "mongodb": "^6.0.0"
  }
}

================
File: packages/adapter-mongodb/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://mongodb.com" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/mongodb.svg"/>
  </a>
  <h3 align="center"><b>MongoDB Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/mongodb-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/mongodb-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/mongodb-adapter?color=green&label=@auth/mongodb-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/mongodb-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/mongodb-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/mongodb).

================
File: packages/adapter-mongodb/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-mongodb/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-neo4j/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://neo4j.com/docs/">Neo4j</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://neo4j.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/neo4j.svg" width="128" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/neo4j-adapter neo4j-driver
 * ```
 *
 * @module @auth/neo4j-adapter
 */
import { type Session, isInt, integer } from "neo4j-driver"
import { isDate, type Adapter } from "@auth/core/adapters"
/**
 * This is the interface of the Neo4j adapter options. The Neo4j adapter takes a {@link https://neo4j.com/docs/bolt/current/driver-api/#driver-session Neo4j session} as its only argument.
 **/
export interface Neo4jOptions extends Session {}
export function Neo4jAdapter(session: Session): Adapter
⋮----
async createUser(data)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(provider_providerAccountId)
async updateUser(data)
async deleteUser(id)
async linkAccount(data)
async unlinkAccount(provider_providerAccountId)
async createSession(data)
async getSessionAndUser(sessionToken)
async updateSession(data)
async deleteSession(sessionToken)
async createVerificationToken(data)
async useVerificationToken(data)
⋮----
/** Takes a plain old JavaScript object and turns it into a Neo4j compatible object */
to(object: Record<string, any>)
/** Takes a Neo4j object and returns a plain old JavaScript object */
from<T = Record<string, unknown>>(object?: Record<string, any>): T | null
⋮----
function client(session: Session)
⋮----
/** Reads values from the database */
async read<T>(statement: string, values?: any): Promise<T | null>
/**
     * Reads/writes values from/to the database.
     * Properties are available under `$data`
     */
async write<T extends Record<string, any>>(
      statement: string,
      values: T
): Promise<any>

================
File: packages/adapter-neo4j/test/resources/statements.ts
================
// Constraints and indexes - relevant to Neo4j Community Edition.

================
File: packages/adapter-neo4j/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import statements from "./resources/statements"
import { Neo4jAdapter, format } from "../src"
⋮----
async connect()
async disconnect()
async user(id)
async session(sessionToken: string)
async account(provider_providerAccountId)
async verificationToken(identifier_token)

================
File: packages/adapter-neo4j/test/test.sh
================
#!/usr/bin/env bash
NEO4J_USER=neo4j
NEO4J_PASS=password
CONTAINER_NAME=authjs-neo4j-test
# Start db
docker run -d --rm \
  -e NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASS} \
  -e TEST_NEO4J_USER=${NEO4J_USER} \
  -e TEST_NEO4J_PASS=${NEO4J_PASS} \
  --name "${CONTAINER_NAME}" \
  -p7474:7474 -p7687:7687 \
  neo4j:4.2.0
# For debug or testing it may be useful to use neo4j enterprise edition.
# Use the lines below in the docker run statement.
# -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
# neo4j:4.2.0-enterprise
echo "Waiting 5s for db to start..." && sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop "${CONTAINER_NAME}"
else
  docker stop "${CONTAINER_NAME}" && exit 1
fi

================
File: packages/adapter-neo4j/package.json
================
{
  "name": "@auth/neo4j-adapter",
  "version": "2.9.1",
  "description": "neo4j adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Davey Brown",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "neo4j"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "peerDependencies": {
    "neo4j-driver": "^4.0.0 || ^5.7.0"
  },
  "devDependencies": {
    "@types/uuid": "^8.3.3",
    "neo4j-driver": "^5.7.0"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  }
}

================
File: packages/adapter-neo4j/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://neo4j.com" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/neo4j.svg"/>
  </a>
  <h3 align="center"><b>Neo4j Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/neo4j-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/neo4j-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/neo4j-adapter?color=green&label=@auth/neo4j-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/neo4j-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/neo4j-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/neo4j).

================
File: packages/adapter-neo4j/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-neo4j/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-neon/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>An official <a href="https://www.postgresql.org/">PostgreSQL</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://www.postgresql.org/">
 *   <img style={{display: "block"}} src="/img/adapters/neon.svg" width="48" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/neon-adapter
 * ```
 *
 * @module @auth/neon-adapter
 */
import type {
  Adapter,
  AdapterUser,
  VerificationToken,
  AdapterSession,
} from "@auth/core/adapters"
import type { Pool } from "@neondatabase/serverless"
export default function NeonAdapter(client: Pool): Adapter
⋮----
async createVerificationToken(
      verificationToken: VerificationToken
): Promise<VerificationToken>
async useVerificationToken({
      identifier,
      token,
    }: {
      identifier: string
      token: string
}): Promise<VerificationToken>
async createUser(user: Omit<AdapterUser, "id">)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount({
      providerAccountId,
      provider,
}): Promise<AdapterUser | null>
async updateUser(user: Partial<AdapterUser>): Promise<AdapterUser>
async linkAccount(account)
async createSession(
async getSessionAndUser(sessionToken: string | undefined): Promise<
async updateSession(
      session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
): Promise<AdapterSession | null | undefined>
async deleteSession(sessionToken)
async unlinkAccount(partialAccount)
async deleteUser(userId: string)

================
File: packages/adapter-neon/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import NeonAdapter from "../src"
import { neonConfig, Pool } from "@neondatabase/serverless"
// Using websockets
import ws from "ws"
⋮----
// Some defaults to make Neon work with Postgres in Docker
// Not required to do it in production
// Set the WebSocket proxy to work with the local instance
⋮----
// Disable all authentication and encryption
⋮----
async verificationToken(identifier_token)

================
File: packages/adapter-neon/test/test.sh
================
#!/usr/bin/env bash
# Start PostgreSQL container
docker run -d --rm \
  --name postgres \
  -e POSTGRES_DB=postgres \
  -e POSTGRES_USER=postgres \
  -e POSTGRES_PASSWORD=postgres \
  -p 5432:5432 \
  -v "$(pwd)"/schema.sql:/docker-entrypoint-initdb.d/schema.sql \
  postgres:latest
# Start pg_proxy container
docker run -d --rm \
  --name pg_proxy \
  -e APPEND_PORT="postgres:5432" \
  -e ALLOW_ADDR_REGEX=".*" \
  -e LOG_TRAFFIC="true" \
  -p 5433:80 \
  --link postgres:postgres \
  ghcr.io/neondatabase/wsproxy:latest
echo "waiting 5s for db to start..."
sleep 5
# Always stop containers, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop pg_proxy && docker stop postgres
else
  docker stop pg_proxy && docker stop postgres && exit 1
fi

================
File: packages/adapter-neon/package.json
================
{
  "name": "@auth/neon-adapter",
  "version": "1.9.1",
  "description": "Neon Postgres adapter for next-auth.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Jake Coppinger",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "license": "ISC",
  "keywords": [
    "next-auth",
    "@auth",
    "Auth.js",
    "next.js",
    "oauth",
    "postgres"
  ],
  "type": "module",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "files": [
    "*.d.ts*",
    "*.js",
    "src"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*",
    "@neondatabase/serverless": "^0.10.4"
  },
  "devDependencies": {
    "@types/ws": "^8.5.13",
    "ws": "^8.18.0"
  }
}

================
File: packages/adapter-neon/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://neon.tech/" target="_blank">
    <img height="64px" src="https://neon.tech/brand/neon-logo-dark-color.svg" />
  </a>
  <h3 align="center"><b>Neon Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/neon-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/neon-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/neon-adapter?color=green&label=@auth/neon-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/neon-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/neon-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/pg).

================
File: packages/adapter-neon/schema.sql
================
\set ON_ERROR_STOP true
CREATE TABLE verification_token
(
  identifier TEXT NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  token TEXT NOT NULL,
  PRIMARY KEY (identifier, token)
);
CREATE TABLE accounts
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  type VARCHAR(255) NOT NULL,
  provider VARCHAR(255) NOT NULL,
  "providerAccountId" VARCHAR(255) NOT NULL,
  refresh_token TEXT,
  access_token TEXT,
  expires_at INTEGER,
  id_token TEXT,
  scope TEXT,
  session_state TEXT,
  token_type TEXT,
  PRIMARY KEY (id)
);
CREATE TABLE sessions
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  "sessionToken" VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);
CREATE TABLE users
(
  id SERIAL,
  name VARCHAR(255),
  email VARCHAR(255) UNIQUE,
  "emailVerified" TIMESTAMPTZ,
  image TEXT,
  PRIMARY KEY (id)
);

================
File: packages/adapter-neon/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-neon/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-pg/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>An official <a href="https://www.postgresql.org/">PostgreSQL</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://www.postgresql.org/">
 *   <img style={{display: "block"}} src="/img/adapters/pg.svg" width="48" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/pg-adapter pg
 * ```
 *
 * @module @auth/pg-adapter
 */
import type {
  Adapter,
  AdapterUser,
  VerificationToken,
  AdapterSession,
} from "@auth/core/adapters"
import type { Pool } from "pg"
export function mapExpiresAt(account: any): any
export default function PostgresAdapter(client: Pool): Adapter
⋮----
async createVerificationToken(
      verificationToken: VerificationToken
): Promise<VerificationToken>
async useVerificationToken({
      identifier,
      token,
    }: {
      identifier: string
      token: string
}): Promise<VerificationToken>
async createUser(user: Omit<AdapterUser, "id">)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount({
      providerAccountId,
      provider,
}): Promise<AdapterUser | null>
async updateUser(user: Partial<AdapterUser>): Promise<AdapterUser>
async linkAccount(account)
async createSession(
async getSessionAndUser(sessionToken: string | undefined): Promise<
async updateSession(
      session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
): Promise<AdapterSession | null | undefined>
async deleteSession(sessionToken)
async unlinkAccount(partialAccount)
async deleteUser(userId: string)

================
File: packages/adapter-pg/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import PostgresAdapter, { mapExpiresAt } from "../src"
import { Pool } from "pg"
⋮----
async verificationToken(identifier_token)

================
File: packages/adapter-pg/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-pg-test
docker run -d --rm \
  --name ${CONTAINER_NAME} \
  -e POSTGRES_DB=adapter-postgres-test \
  -e POSTGRES_USER=pg \
  -e POSTGRES_PASSWORD=pg \
  -p 5432:5432 \
  -v "$(pwd)"/schema.sql:/docker-entrypoint-initdb.d/schema.sql \
  postgres:latest
echo "waiting 5s for db to start..."
sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-pg/package.json
================
{
  "name": "@auth/pg-adapter",
  "version": "1.9.1",
  "description": "Postgres adapter for next-auth.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Jake Coppinger",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "license": "ISC",
  "keywords": [
    "next-auth",
    "@auth",
    "Auth.js",
    "next.js",
    "oauth",
    "postgres"
  ],
  "type": "module",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "files": [
    "*.d.ts*",
    "*.js",
    "src"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "pg": "^8"
  },
  "devDependencies": {
    "@types/pg": "^8.6.5",
    "pg": "^8.7.1"
  }
}

================
File: packages/adapter-pg/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://www.postgresql.org/" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/pg.svg"/>
  </a>
  <h3 align="center"><b>Postgres Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/pg-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/pg-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/pg-adapter?color=green&label=@auth/pg-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/pg-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/pg-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/pg).

================
File: packages/adapter-pg/schema.sql
================
\set ON_ERROR_STOP true
CREATE TABLE verification_token
(
  identifier TEXT NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  token TEXT NOT NULL,
  PRIMARY KEY (identifier, token)
);
CREATE TABLE accounts
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  type VARCHAR(255) NOT NULL,
  provider VARCHAR(255) NOT NULL,
  "providerAccountId" VARCHAR(255) NOT NULL,
  refresh_token TEXT,
  access_token TEXT,
  expires_at BIGINT,
  id_token TEXT,
  scope TEXT,
  session_state TEXT,
  token_type TEXT,
  PRIMARY KEY (id)
);
CREATE TABLE sessions
(
  id SERIAL,
  "userId" INTEGER NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  "sessionToken" VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);
CREATE TABLE users
(
  id SERIAL,
  name VARCHAR(255),
  email VARCHAR(255),
  "emailVerified" TIMESTAMPTZ,
  image TEXT,
  PRIMARY KEY (id)
);

================
File: packages/adapter-pg/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-pg/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-pouchdb/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://pouchdb.com/api.html">PouchDB</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://pouchdb.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/pouchdb.svg" width="38" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install pouchdb pouchdb-find @auth/pouchdb-adapter
 * ```
 *
 * @module @auth/pouchdb-adapter
 */
import type {
  Adapter,
  AdapterAccount,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
type PrefixConfig = Record<
  "user" | "account" | "session" | "verificationToken",
  string
>
type IndexConfig = Record<
  | "userByEmail"
  | "accountByProviderId"
  | "sessionByToken"
  | "verificationTokenByToken",
  string
>
/**
 * Configure the adapter
 */
export interface PouchDBAdapterOptions {
  /**
   * Your PouchDB instance, with the `pouchdb-find` plugin installed.
   * @example
   * ```javascript
   * import PouchDB from "pouchdb"
   *
   * PouchDB
   *   .plugin(require("pouchdb-adapter-leveldb")) // Or any other adapter
   *   .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin
   *
   * const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })
   */
  pouchdb: PouchDB.Database
  /**
   * Override the default prefix names.
   *
   * @default
   * ```js
   * {
   *   user: "USER",
   *   account: "ACCOUNT",
   *   session: "SESSION",
   *   verificationToken: "VERIFICATION-TOKEN"
   * }
   * ```
   */
  prefixes?: PrefixConfig
  /**
   * Override the default index names.
   *
   * @default
   * ```js
   * {
   *   userByEmail: "nextAuthUserByEmail",
   *   accountByProviderId: "nextAuthAccountByProviderId",
   *   sessionByToken: "nextAuthSessionByToken",
   *   verificationTokenByToken: "nextAuthVerificationRequestByToken"
   * }
   * ```
   */
  indexes?: IndexConfig
}
⋮----
/**
   * Your PouchDB instance, with the `pouchdb-find` plugin installed.
   * @example
   * ```javascript
   * import PouchDB from "pouchdb"
   *
   * PouchDB
   *   .plugin(require("pouchdb-adapter-leveldb")) // Or any other adapter
   *   .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin
   *
   * const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })
   */
⋮----
/**
   * Override the default prefix names.
   *
   * @default
   * ```js
   * {
   *   user: "USER",
   *   account: "ACCOUNT",
   *   session: "SESSION",
   *   verificationToken: "VERIFICATION-TOKEN"
   * }
   * ```
   */
⋮----
/**
   * Override the default index names.
   *
   * @default
   * ```js
   * {
   *   userByEmail: "nextAuthUserByEmail",
   *   accountByProviderId: "nextAuthAccountByProviderId",
   *   sessionByToken: "nextAuthSessionByToken",
   *   verificationTokenByToken: "nextAuthVerificationRequestByToken"
   * }
   * ```
   */
⋮----
export function PouchDBAdapter(options: PouchDBAdapterOptions): Adapter
⋮----
async createUser(user)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
/** @todo Implement */
async deleteUser()
async linkAccount(account)
async unlinkAccount(
async createSession(data)
async getSessionAndUser(sessionToken)
async updateSession(data)
async deleteSession(sessionToken)
async createVerificationToken(data)
async useVerificationToken(
⋮----
export async function createIndexes(
  pouchdb: PouchDB.Database,
  indexes?: IndexConfig
)
/** @internal */
function toAdapter<T>(
  dbObject: T & PouchDB.Core.IdMeta & PouchDB.Core.GetMeta
)
/** @internal */
export function toAdapterUser(
  user: AdapterUser & PouchDB.Core.IdMeta & PouchDB.Core.GetMeta
)
/** @internal */
export function toAdapterSession(
  session: AdapterSession & PouchDB.Core.IdMeta & PouchDB.Core.GetMeta
)
/** @internal */
export function toAdapterAccount(
  account: AdapterAccount & PouchDB.Core.IdMeta & PouchDB.Core.GetMeta
)
/** @internal */
export function toVerificationToken(
  verificationToken: VerificationToken &
    PouchDB.Core.IdMeta &
    PouchDB.Core.GetMeta
)

================
File: packages/adapter-pouchdb/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import {
  createIndexes,
  PouchDBAdapter,
  toAdapterAccount,
  toAdapterSession,
  toAdapterUser,
  toVerificationToken,
} from "../src"
import PouchDB from "pouchdb"
import find from "pouchdb-find"
import memoryAdapter from "pouchdb-adapter-memory"
import {
  AdapterAccount,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
// pouchdb setup
⋮----
const disconnect = async () =>
⋮----
// Basic tests
⋮----
async connect()
⋮----
async verificationToken(

================
File: packages/adapter-pouchdb/package.json
================
{
  "name": "@auth/pouchdb-adapter",
  "version": "2.9.1",
  "description": "PouchDB adapter for next-auth.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "jpbourgeon <jeanphilippe.bourgeon@gmail.com> (https://github.com/jpbourgeon)",
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "pouchdb"
  ],
  "type": "module",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "pnpm clean && tsc",
    "clean": "rm -rf index.*",
    "test": "vitest run -c ../utils/vitest.config.ts"
  },
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "peerDependencies": {
    "pouchdb": "^8.0.1",
    "pouchdb-find": "^8.0.1"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "@types/pouchdb": "^6.4.0",
    "pouchdb": "^8.0.1",
    "pouchdb-adapter-memory": "^8.0.1",
    "pouchdb-find": "^8.0.1"
  }
}

================
File: packages/adapter-pouchdb/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://pouchdb.com" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/pouchdb.svg"/>
  </a>
  <h3 align="center"><b>PouchDB Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/pouchdb-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/pouchdb-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/pouchdb-adapter?color=green&label=@auth/pouchdb-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/pouchdb-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/pouchdb-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/pouchdb).

================
File: packages/adapter-pouchdb/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-pouchdb/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-prisma/prisma/custom.prisma
================
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

================
File: packages/adapter-prisma/prisma/mongodb.prisma
================
datasource db {
  provider = "mongodb"
  url      = "mongodb://localhost:27017/test"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

================
File: packages/adapter-prisma/prisma/schema.prisma
================
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

================
File: packages/adapter-prisma/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  Official <a href="https://www.prisma.io/docs">Prisma</a> adapter for Auth.js / NextAuth.js.
 *  <a href="https://www.prisma.io/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/prisma.svg" width="38" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @prisma/client @auth/prisma-adapter
 * npm install prisma --save-dev
 * ```
 *
 * @module @auth/prisma-adapter
 */
import { Prisma, type PrismaClient } from "@prisma/client"
import type {
  Adapter,
  AdapterAccount,
  AdapterSession,
  AdapterUser,
} from "@auth/core/adapters"
export function PrismaAdapter(
  prisma: PrismaClient | ReturnType<PrismaClient["$extends"]>
): Adapter
⋮----
// We need to let Prisma generate the ID because our default UUID is incompatible with MongoDB
⋮----
async getUserByAccount(provider_providerAccountId)
⋮----
async getSessionAndUser(sessionToken)
⋮----
async createVerificationToken(data)
async useVerificationToken(identifier_token)
⋮----
// If token already used/deleted, just return null
// https://www.prisma.io/docs/reference/api-reference/error-reference#p2025
⋮----
async getAccount(providerAccountId, provider)
async createAuthenticator(data)
async getAuthenticator(credentialID)
async listAuthenticatorsByUserId(userId)
async updateAuthenticatorCounter(credentialID, counter)
⋮----
/** @see https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/null-and-undefined */
function stripUndefined<T>(obj: T)

================
File: packages/adapter-prisma/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { PrismaClient } from "@prisma/client"
import { PrismaAdapter } from "../src"
import { ObjectId } from "mongodb"
import { withAccelerate } from "@prisma/extension-accelerate"
⋮----
id()
⋮----
async verificationToken(identifier_token)
⋮----
// @ts-ignore // MongoDB needs an ID, but we don't

================
File: packages/adapter-prisma/test/mongodb.test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-mongodb-test
# Start db
docker run -d --rm \
  -p 27017:27017 \
  --name ${CONTAINER_NAME} \
  "prismagraphql/mongo-single-replica:4.4.3-bionic"
pnpm prisma generate --schema ./prisma/mongodb.prisma
export CONTAINER_NAME=authjs-mongodb-test
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-prisma/package.json
================
{
  "name": "@auth/prisma-adapter",
  "version": "2.9.1",
  "description": "Prisma adapter for Auth.js",
  "homepage": "https://authjs.dev/reference/adapter/prisma",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "William Luke",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js",
      "default": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "prisma"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rm ./prisma/dev.db* || echo 'File deleted' && rm -rf index.js *.d.ts*",
    "init:default": "prisma migrate dev --name init --skip-seed",
    "init:custom": "prisma migrate dev --name init-custom --schema ./prisma/custom.prisma",
    "test:default": "pnpm init:default && vitest run -c ../utils/vitest.config.ts",
    "test:custom": "pnpm init:custom && CUSTOM_MODEL=1 vitest run -c ../utils/vitest.config.ts",
    "test:mongodb": "./test/mongodb.test.sh",
    "test": "pnpm test:default && pnpm test:custom",
    "test:og": "pnpm test:default && pnpm test:custom && pnpm test:mongodb",
    "build": "prisma generate && tsc",
    "dev": "prisma generate && tsc -w",
    "studio": "prisma studio"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "@prisma/client": ">=2.26.0 || >=3 || >=4 || >=5 || >=6"
  },
  "devDependencies": {
    "@prisma/client": "^6.0.0",
    "@prisma/extension-accelerate": "1.1.0",
    "mongodb": "^6.9.0",
    "prisma": "^6.0.0"
  }
}

================
File: packages/adapter-prisma/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://prisma.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/prisma.svg"/>
  </a>
  <h3 align="center"><b>Prisma Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/prisma-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/prisma-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/prisma-adapter?color=green&label=@auth/prisma-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/prisma-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/prisma-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/prisma).

================
File: packages/adapter-prisma/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-prisma/typedoc.config.js
================


================
File: packages/adapter-sequelize/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://sequelize.org/docs/v6/getting-started/">Sequilize</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://sequelize.org/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/sequelize.svg" height="30"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth @auth/sequelize-adapter sequelize
 * ```
 *
 * @module @auth/sequelize-adapter
 */
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  VerificationToken,
} from "@auth/core/adapters"
import { Sequelize, Model, ModelCtor } from "sequelize"
⋮----
// @see https://sequelize.org/master/manual/typescript.html
//@ts-expect-error
interface AccountInstance
  extends Model<AdapterAccount, Partial<AdapterAccount>>,
    AdapterAccount {}
interface UserInstance
  extends Model<AdapterUser, Partial<AdapterUser>>,
    AdapterUser {}
interface SessionInstance
  extends Model<AdapterSession, Partial<AdapterSession>>,
    AdapterSession {}
interface VerificationTokenInstance
  extends Model<VerificationToken, Partial<VerificationToken>>,
    VerificationToken {}
/** This is the interface of the Sequelize adapter options. */
export interface SequelizeAdapterOptions {
  /**
   * Whether to {@link https://sequelize.org/docs/v6/core-concepts/model-basics/#model-synchronization synchronize} the models or not.
   */
  synchronize?: boolean
  /**
   * The {@link https://sequelize.org/docs/v6/core-concepts/model-basics/ Sequelize Models} related to Auth.js that will be created in your database.
   */
  models?: Partial<{
    User: ModelCtor<UserInstance>
    Account: ModelCtor<AccountInstance>
    Session: ModelCtor<SessionInstance>
    VerificationToken: ModelCtor<VerificationTokenInstance>
  }>
}
⋮----
/**
   * Whether to {@link https://sequelize.org/docs/v6/core-concepts/model-basics/#model-synchronization synchronize} the models or not.
   */
⋮----
/**
   * The {@link https://sequelize.org/docs/v6/core-concepts/model-basics/ Sequelize Models} related to Auth.js that will be created in your database.
   */
⋮----
export default function SequelizeAdapter(
  client: Sequelize,
  options?: SequelizeAdapterOptions
): Adapter
⋮----
const sync = async () =>
⋮----
async createUser(user)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
⋮----
// @ts-expect-error
⋮----
async updateUser(user)
async deleteUser(userId)
async linkAccount(account)
async unlinkAccount(
async createSession(session)
async getSessionAndUser(sessionToken)
async updateSession(
async deleteSession(sessionToken)
async createVerificationToken(token)
async useVerificationToken(

================
File: packages/adapter-sequelize/src/models.ts
================
import { DataTypes } from "sequelize"

================
File: packages/adapter-sequelize/test/index.test.ts
================
import { beforeEach, describe, expect, test } from "vitest"
import { Sequelize, DataTypes } from "sequelize"
import { runBasicTests } from "utils/adapter"
import SequelizeAdapter, { models } from "../src"
⋮----
const lowercase = (strs: string[])

================
File: packages/adapter-sequelize/package.json
================
{
  "name": "@auth/sequelize-adapter",
  "version": "2.9.1",
  "description": "Sequelize adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "github.com/luke-j",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "sequelize"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "vitest -c ../utils/vitest.config.ts",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "sequelize": "^6.6.5"
  },
  "devDependencies": {
    "sequelize": "^6.6.5"
  }
}

================
File: packages/adapter-sequelize/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://sequelize.org" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/sequelize.svg"/>
  </a>
  <h3 align="center"><b>Sequelize Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/sequelize-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/sequelize-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/sequelize-adapter?color=green&label=@auth/sequelize-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/sequelize-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/sequelize-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/sequelize).

================
File: packages/adapter-sequelize/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-sequelize/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-supabase/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://supabase.com/docs">Supabase</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://supabase.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/supabase.svg" width="50"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @supabase/supabase-js @auth/supabase-adapter
 * ```
 *
 * @module @auth/supabase-adapter
 */
import { createClient } from "@supabase/supabase-js"
import {
  type Adapter,
  type AdapterSession,
  type AdapterUser,
  type VerificationToken,
  isDate,
} from "@auth/core/adapters"
export function format<T>(obj: Record<string, any>): T
/**
 * This is the interface of the Supabase adapter options.
 **/
export interface SupabaseAdapterOptions {
  /**
   * The URL of your Supabase database
   **/
  url: string
  /**
   * The secret to grant access to the database
   **/
  secret: string
}
⋮----
/**
   * The URL of your Supabase database
   **/
⋮----
/**
   * The secret to grant access to the database
   **/
⋮----
export function SupabaseAdapter(options: SupabaseAdapterOptions): Adapter
⋮----
async createUser(user)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
async deleteUser(userId)
async linkAccount(account)
async unlinkAccount(
async createSession(
async getSessionAndUser(sessionToken)
async updateSession(session)
async deleteSession(sessionToken)
async createVerificationToken(token)
⋮----
// eslint-disable-next-line @typescript-eslint/no-unused-vars
⋮----
async useVerificationToken(
⋮----
// eslint-disable-next-line @typescript-eslint/no-unused-vars
⋮----
interface Database {
  next_auth: {
    Tables: {
      accounts: {
        Row: {
          id: string
          type: string | null
          provider: string | null
          providerAccountId: string | null
          refresh_token: string | null
          access_token: string | null
          expires_at: number | null
          token_type: string | null
          scope: string | null
          id_token: string | null
          session_state: string | null
          oauth_token_secret: string | null
          oauth_token: string | null
          userId: string | null
        }
        Insert: {
          id?: string
          type?: string | null
          provider?: string | null
          providerAccountId?: string | null
          refresh_token?: string | null
          access_token?: string | null
          expires_at?: number | null
          token_type?: string | null
          scope?: string | null
          id_token?: string | null
          session_state?: string | null
          oauth_token_secret?: string | null
          oauth_token?: string | null
          userId?: string | null
        }
        Update: {
          id?: string
          type?: string | null
          provider?: string | null
          providerAccountId?: string | null
          refresh_token?: string | null
          access_token?: string | null
          expires_at?: number | null
          token_type?: string | null
          scope?: string | null
          id_token?: string | null
          session_state?: string | null
          oauth_token_secret?: string | null
          oauth_token?: string | null
          userId?: string | null
        }
      }
      sessions: {
        Row: {
          expires: string | null
          sessionToken: string | null
          userId: string | null
          id: string
        }
        Insert: {
          expires?: string | null
          sessionToken?: string | null
          userId?: string | null
          id?: string
        }
        Update: {
          expires?: string | null
          sessionToken?: string | null
          userId?: string | null
          id?: string
        }
      }
      users: {
        Row: {
          name: string | null
          email: string | null
          emailVerified: string | null
          image: string | null
          id: string
        }
        Insert: {
          name?: string | null
          email?: string | null
          emailVerified?: string | null
          image?: string | null
          id?: string
        }
        Update: {
          name?: string | null
          email?: string | null
          emailVerified?: string | null
          image?: string | null
          id?: string
        }
      }
      verification_tokens: {
        Row: {
          id: number
          identifier: string | null
          token: string | null
          expires: string | null
        }
        Insert: {
          id?: number
          identifier?: string | null
          token?: string | null
          expires?: string | null
        }
        Update: {
          id?: number
          identifier?: string | null
          token?: string | null
          expires?: string | null
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      uid: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
    }
    Enums: {
      [_ in never]: never
    }
  }
}

================
File: packages/adapter-supabase/supabase/migrations/20221108043803_create_next_auth_schema.sql
================
--
-- Name: next_auth; Type: SCHEMA;
--
CREATE SCHEMA next_auth;
GRANT USAGE ON SCHEMA next_auth TO service_role;
GRANT ALL ON SCHEMA next_auth TO postgres;
--
-- Create users table
--
CREATE TABLE IF NOT EXISTS next_auth.users
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name text,
    email text,
    "emailVerified" timestamp with time zone,
    image text,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT email_unique UNIQUE (email)
);
GRANT ALL ON TABLE next_auth.users TO postgres;
GRANT ALL ON TABLE next_auth.users TO service_role;
--- uid() function to be used in RLS policies
CREATE FUNCTION next_auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  	coalesce(
		nullif(current_setting('request.jwt.claim.sub', true), ''),
		(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
	)::uuid
$$;
--
-- Create sessions table
--
CREATE TABLE IF NOT EXISTS  next_auth.sessions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expires timestamp with time zone NOT NULL,
    "sessionToken" text NOT NULL,
    "userId" uuid,
    CONSTRAINT sessions_pkey PRIMARY KEY (id),
    CONSTRAINT sessionToken_unique UNIQUE ("sessionToken"),
    CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId")
        REFERENCES  next_auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);
GRANT ALL ON TABLE next_auth.sessions TO postgres;
GRANT ALL ON TABLE next_auth.sessions TO service_role;
--
-- Create accounts table
--
CREATE TABLE IF NOT EXISTS  next_auth.accounts
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    type text NOT NULL,
    provider text NOT NULL,
    "providerAccountId" text NOT NULL,
    refresh_token text,
    access_token text,
    expires_at bigint,
    token_type text,
    scope text,
    id_token text,
    session_state text,
    oauth_token_secret text,
    oauth_token text,
    "userId" uuid,
    CONSTRAINT accounts_pkey PRIMARY KEY (id),
    CONSTRAINT provider_unique UNIQUE (provider, "providerAccountId"),
    CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId")
        REFERENCES  next_auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);
GRANT ALL ON TABLE next_auth.accounts TO postgres;
GRANT ALL ON TABLE next_auth.accounts TO service_role;
--
-- Create verification_tokens table
--
CREATE TABLE IF NOT EXISTS  next_auth.verification_tokens
(
    identifier text,
    token text,
    expires timestamp with time zone NOT NULL,
    CONSTRAINT verification_tokens_pkey PRIMARY KEY (token),
    CONSTRAINT token_unique UNIQUE (token),
    CONSTRAINT token_identifier_unique UNIQUE (token, identifier)
);
GRANT ALL ON TABLE next_auth.verification_tokens TO postgres;
GRANT ALL ON TABLE next_auth.verification_tokens TO service_role;

================
File: packages/adapter-supabase/supabase/migrations/20221108044627_create_public_users_table.sql
================
/** 
* USERS
* Note: This table contains user data. Users should only be able to view and update their own data.
*/
create table users (
  -- UUID from next_auth.users
  id uuid not null primary key,
  name text,
  email text,
  image text,
  constraint "users_id_fkey" foreign key ("id")
        references  next_auth.users (id) match simple
        on update no action
        on delete cascade -- if user is deleted in NextAuth they will also be deleted in our public table.
);
alter table users enable row level security;
create policy "Can view own user data." on users for select using (next_auth.uid() = id);
create policy "Can update own user data." on users for update using (next_auth.uid() = id);
/**
* This trigger automatically creates a user entry when a new user signs up via NextAuth.
*/ 
create function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.users (id, name, email, image)
  values (new.id, new.name, new.email, new.image);
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on next_auth.users
  for each row execute procedure public.handle_new_user();

================
File: packages/adapter-supabase/supabase/config.toml
================
# A string used to distinguish different Supabase projects on the same host. Defaults to the working
# directory name when running `supabase init`.
project_id = "nextauth"

[api]
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. public and storage are always included.
schemas = ["next_auth"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 14

[db.pooler]
enabled = true

[realtime]
enabled = false

[studio]
enabled = false
# Port to use for Supabase Studio.
port = 54323

[auth]
enabled = false
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://localhost:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 seconds (one
# week).
jwt_expiry = 3600
# Allow/disallow new user signups to your project.
enable_signup = true

[inbucket]
enabled = false

[storage]
enabled = false

[analytics]
enabled = false

================
File: packages/adapter-supabase/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { format, SupabaseAdapter } from "../src"
import { createClient } from "@supabase/supabase-js"
import type {
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "@auth/core/adapters"
import type { Account } from "@auth/core/types"
⋮----
async session(sessionToken)
async user(id)
async account(
async verificationToken(

================
File: packages/adapter-supabase/test/test.sh
================
#!/usr/bin/env bash
# Start database and apply migrations
pnpm exec supabase start
printf "\nWaiting 10s for db to start..." && sleep 10
# Always stop Supabase, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  pnpm exec supabase stop --no-backup
else
  pnpm exec supabase stop --no-backup && exit 1
fi

================
File: packages/adapter-supabase/.env.example
================
# Run `supabase start` in this directory to get the Supabase API URL and service role key!
SUPABASE_URL=http://localhost:54321
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.vI9obAHOGyVVKa3pD--kJlyxp-Z2zV9UUMAhKpNLAcU

================
File: packages/adapter-supabase/.gitignore
================
supabase/.temp
supabase/.branches
supabase/functions

================
File: packages/adapter-supabase/package.json
================
{
  "name": "@auth/supabase-adapter",
  "version": "1.9.1",
  "description": "Supabase adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Martin Sonnberger <martin.sonnberger@icloud.com>",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "keywords": [
    "next-auth",
    "next.js",
    "supabase"
  ],
  "license": "ISC",
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "clean": "rm -rf *.d.ts* *.js dist/ coverage/ supabase/{.branches,.temp}",
    "test": "./test/test.sh"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "@supabase/supabase-js": "^2.43.1"
  },
  "devDependencies": {
    "@supabase/supabase-js": "^2.43.1",
    "supabase": "^1.165.0"
  }
}

================
File: packages/adapter-supabase/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://supabase.com" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/supabase.svg"/>
  </a>
  <h3 align="center"><b>Supabase Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/supabase-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/supabase-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/supabase-adapter?color=green&label=@auth/supabase-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/supabase-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/supabase-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/supabase).

================
File: packages/adapter-supabase/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-supabase/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-surrealdb/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://www.surrealdb.com">SurrealDB</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://www.surrealdb.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/surrealdb.svg" width="30" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/surrealdb-adapter surrealdb.js
 * ```
 *
 * @module @auth/surrealdb-adapter
 */
import Surreal, { ExperimentalSurrealHTTP } from "surrealdb.js"
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  VerificationToken,
} from "@auth/core/adapters"
import type { ProviderType } from "@auth/core/providers"
type Document = Record<string, string | null | undefined> & { id: string }
export type UserDoc = Document & { email: string }
export type AccountDoc<T = string> = {
  id: string
  userId: T
  refresh_token?: string
  access_token?: string
  type: Extract<ProviderType, "oauth" | "oidc" | "email" | "webauthn">
  provider: string
  providerAccountId: string
  expires_at?: number
}
export type SessionDoc<T = string> = Document & { userId: T }
const extractId = (surrealId: string)
/** @internal */
// Convert DB object to AdapterUser
export const docToUser = (doc: UserDoc): AdapterUser => (
/** @internal */
// Convert DB object to AdapterAccount
export const docToAccount = (doc: AccountDoc) =>
/** @internal */
// Convert DB object to AdapterSession
export const docToSession = (
  doc: SessionDoc<string | UserDoc>
): AdapterSession => (
/** @internal */
// Convert AdapterUser to DB object
const userToDoc = (
  user: Omit<AdapterUser, "id"> | Partial<AdapterUser>
): Omit<UserDoc, "id"> =>
/** @internal */
// Convert AdapterAccount to DB object
const accountToDoc = (account: AdapterAccount): Omit<AccountDoc, "id"> =>
/** @internal */
// Convert AdapterSession to DB object
export const sessionToDoc = (
  session: AdapterSession
): Omit<SessionDoc, "id"> =>
export const toSurrealId = (id: string) =>
export const toId = (surrealId: string) =>
export function SurrealDBAdapter<T>(
  client: Promise<Surreal | ExperimentalSurrealHTTP<T>>
  // options = {}
): Adapter
⋮----
// options = {}
⋮----
async createUser(user: Omit<AdapterUser, "id">)
async getUser(id: string)
async getUserByEmail(email: string)
async getUserByAccount({
      providerAccountId,
      provider,
}: Pick<AdapterAccount, "provider" | "providerAccountId">)
async updateUser(user: Partial<AdapterUser>)
async deleteUser(userId: string)
⋮----
// delete account
⋮----
// delete session
⋮----
// delete user
⋮----
// TODO: put all 3 deletes inside a Promise all
⋮----
async linkAccount(account: AdapterAccount)
async unlinkAccount({
      providerAccountId,
      provider,
}: Pick<AdapterAccount, "provider" | "providerAccountId">)
async createSession(
async getSessionAndUser(sessionToken: string)
⋮----
// Can't use limit 1 because it prevent userId to be fetched.
//   Works setting limit to 2
⋮----
async updateSession(
      session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
)
async deleteSession(sessionToken: string)
async createVerificationToken({
      identifier,
      expires,
      token,
}: VerificationToken)
async useVerificationToken({
      identifier,
      token,
    }: {
      identifier: string
      token: string
})

================
File: packages/adapter-surrealdb/test/common.ts
================
import Surreal, { ExperimentalSurrealHTTP } from "surrealdb.js"
import {
  SurrealDBAdapter,
  docToUser,
  docToAccount,
  docToSession,
  toSurrealId,
} from "../src/index"
import type { UserDoc, AccountDoc, SessionDoc } from "../src/index"
import { randomUUID } from "utils/adapter"
export const config = (
  clientPromise: Promise<Surreal | ExperimentalSurrealHTTP<typeof fetch>>
) => (
⋮----
id()
⋮----
async user(id: string)
async account(
async session(sessionToken: string)
async verificationToken(

================
File: packages/adapter-surrealdb/test/index.test.ts
================
import Surreal, { ExperimentalSurrealHTTP } from "surrealdb.js"
import { runBasicTests } from "utils/adapter"
import { config } from "./common"
⋮----
// const clientPromiseRest = new Promise<ExperimentalSurrealHTTP<typeof fetch>>(
//   async (resolve, reject) => {
//     try {
//       const db = new ExperimentalSurrealHTTP("http://0.0.0.0:8000", {
//         fetch,
//         auth: {
//           user: "test",
//           pass: "test",
//         },
//         ns: "test",
//         db: "test",
//       })
//       resolve(db)
//     } catch (e) {
//       reject(e)
//     }
//   }
// )
// TODO: Revisit and fix this test - currently updateUser and deleteUser are failing.
// runBasicTests(config(clientPromiseRest))

================
File: packages/adapter-surrealdb/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-surrealdb-test
# Start db
docker run -d --rm \
  -p 8000:8000 \
  --name ${CONTAINER_NAME} \
  surrealdb/surrealdb:latest start --log debug --user test --pass test memory
echo "Waiting 5s for db to start..."
sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-surrealdb/package.json
================
{
  "name": "@auth/surrealdb-adapter",
  "version": "1.9.1",
  "description": "SurrealDB adapter for next-auth.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Martin Schaer <martin@schaerweb.com>",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "mongodb",
    "adapter"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "surrealdb.js": "^0.11.0"
  }
}

================
File: packages/adapter-surrealdb/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://surrealdb.com/" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/surrealdb.png"/>
  </a>
  <h3 align="center"><b>Surreal DB Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/surrealdb-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/surrealdb-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/surrealdb-adapter?color=green&label=@auth/surrealdb-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/surrealdb-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/surrealdb-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/surrealdb).

================
File: packages/adapter-surrealdb/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-surrealdb/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-typeorm/src/entities.ts
================
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  OneToMany,
  ValueTransformer,
} from "typeorm"
⋮----
export class UserEntity
⋮----
export class AccountEntity
⋮----
export class SessionEntity
⋮----
export class VerificationTokenEntity

================
File: packages/adapter-typeorm/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>Official <a href="https://typeorm.io">TypeORM</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://typeorm.io">
 *   <img style={{display: "block" }} width="56" src="/img/adapters/typeorm.svg" />
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/typeorm-adapter typeorm
 * ```
 *
 * @module @auth/typeorm-adapter
 */
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
} from "@auth/core/adapters"
import { DataSourceOptions, DataSource, EntityManager } from "typeorm"
⋮----
import { parseDataSourceConfig, updateConnectionEntities } from "./utils.js"
⋮----
export type Entities = typeof entities
/** This is the interface for the TypeORM adapter options. */
export interface TypeORMAdapterOptions {
  /**
   * The {@link https://orkhan.gitbook.io/typeorm/docs/entities TypeORM entities} to create the database tables from.
   */
  entities?: Entities
}
⋮----
/**
   * The {@link https://orkhan.gitbook.io/typeorm/docs/entities TypeORM entities} to create the database tables from.
   */
⋮----
export async function getManager(options: {
  dataSource: string | DataSourceOptions
  entities: Entities
}): Promise<EntityManager>
export function TypeORMAdapter(
  dataSource: string | DataSourceOptions,
  options?: TypeORMAdapterOptions
): Adapter
⋮----
/**
     * Method used in testing. You won't need to call this in your app.
     * @internal
     */
async __disconnect()
⋮----
// @ts-expect-error
async getUser(id)
// @ts-expect-error
async getUserByEmail(email)
async getUserByAccount(provider_providerAccountId)
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
async updateUser(data)
async deleteUser(id)
async linkAccount(data)
async unlinkAccount(providerAccountId)
async createSession(data)
async getSessionAndUser(sessionToken)
async updateSession(data)
⋮----
// TODO: Try to return?
⋮----
async deleteSession(sessionToken)
async createVerificationToken(data)
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
async useVerificationToken(identifier_token)
⋮----
// @ts-expect-error

================
File: packages/adapter-typeorm/src/utils.ts
================
import type { DataSource, DataSourceOptions } from "typeorm"
⋮----
/** Ensure configOrString is normalized to an object. */
export function parseDataSourceConfig(
  configOrString: string | DataSourceOptions
): DataSourceOptions
⋮----
// If the input is URL string, automatically convert the string to an object
// to make configuration easier (in most use cases).
//
// TypeORM accepts connection string as a 'url' option, but unfortunately
// not for all databases (e.g. SQLite) or for all options, so we handle
// parsing it in this function.
⋮----
// Special case handling is required for mongodb+srv with TypeORM
⋮----
// This option is recommended by mongodb
⋮----
// Prevents warning about deprecated option (sets default value)
⋮----
// Converts true/false strings to actual boolean values
⋮----
// If URL parsing fails for any reason, try letting TypeORM handle it
⋮----
function entitiesChanged(
  prevEntities: any[] | undefined,
  newEntities: any[]
): boolean
export async function updateConnectionEntities(
  dataSource: DataSource,
  entities: any[]
)
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error

================
File: packages/adapter-typeorm/test/mysql/index.custom.test.ts
================
import { runBasicTests } from "utils/adapter"
import { TypeORMAdapter } from "../../src"
⋮----
import { db } from "../helpers"
import { SnakeNamingStrategy } from "typeorm-naming-strategies"
import type { ConnectionOptions } from "typeorm"

================
File: packages/adapter-typeorm/test/mysql/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { TypeORMAdapter } from "../../src"
import { db } from "../helpers"

================
File: packages/adapter-typeorm/test/mysql/test.sh
================
#!/usr/bin/env bash
set -eu
# Init MySQL container
echo "Initializing container for MySQL tests"
MYSQL_DATABASE=next-auth
MYSQL_ROOT_PASSWORD=password
MYSQL_CONTAINER_NAME=next-auth-mysql-test
function startDatabase {
  docker run -d --rm \
    -e MYSQL_DATABASE=${MYSQL_DATABASE} \
    -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
    --name "${MYSQL_CONTAINER_NAME}" \
    -p 3306:3306 \
    mysql:8 --default-authentication-plugin=mysql_native_password
  echo "Waiting 5s for db to start..."
  sleep 5
}
startDatabase
echo "Started running MySQL tests with default models."
if vitest run -c ../utils/vitest.config.ts mysql/index.test.ts; then
  docker stop ${MYSQL_CONTAINER_NAME}
else
  docker stop ${MYSQL_CONTAINER_NAME} && exit 1
fi
echo "Finished running MySQL tests with default models."
startDatabase
echo "Started running MySQL tests with custom models."
if CUSTOM_MODEL=1 vitest run -c ../utils/vitest.config.ts mysql/index.custom.test.ts; then
  docker stop ${MYSQL_CONTAINER_NAME}
else
  docker stop ${MYSQL_CONTAINER_NAME} && exit 1
fi
echo "Finished running MySQL tests with custom models."

================
File: packages/adapter-typeorm/test/postgresql/index.custom.test.ts
================
import { runBasicTests } from "utils/adapter"
import { TypeORMAdapter } from "../../src"
⋮----
import { db } from "../helpers"

================
File: packages/adapter-typeorm/test/postgresql/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { TypeORMAdapter } from "../../src"
import { db } from "../helpers"

================
File: packages/adapter-typeorm/test/postgresql/test.sh
================
#!/usr/bin/env bash
set -eu
# Init PostgreSQL container
echo "Initializing container for PostgreSQL tests"
PGUSER=nextauth
PGDATABASE=nextauth
PG_CONTAINER_NAME=next-auth-postgres-test
function startDatabase {
  docker run -d --rm \
    -e POSTGRES_USER=${PGUSER} \
    -e POSTGRES_DB=${PGDATABASE} \
    -e POSTGRES_HOST_AUTH_METHOD=trust \
    --name "${PG_CONTAINER_NAME}" \
    -p 5432:5432 \
    postgres:13.3
  echo "Waiting 5s for db to start..."
  sleep 5
}
startDatabase
echo "Started running PostgreSQL tests with default models."
if vitest run -c ../utils/vitest.config.ts postgresql/index.test.ts; then
  docker stop ${PG_CONTAINER_NAME}
else
  docker stop ${PG_CONTAINER_NAME} && exit 1
fi
echo "Finished running PostgreSQL tests with default models."
startDatabase
echo "Started running PostgreSQL tests with custom models."
if CUSTOM_MODEL=1 vitest run -c ../utils/vitest.config.ts postgresql/index.custom.test.ts; then
  docker stop ${PG_CONTAINER_NAME}
else
  docker stop ${PG_CONTAINER_NAME} && exit 1
fi
echo "Finished running PostgreSQL tests with custom models."

================
File: packages/adapter-typeorm/test/sqlite/index.custom.test.ts
================
import { runBasicTests } from "utils/adapter"
import { TypeORMAdapter } from "../../src"
⋮----
import { db } from "../helpers"

================
File: packages/adapter-typeorm/test/sqlite/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { TypeORMAdapter } from "../../src"
import { db } from "../helpers"
import { SnakeNamingStrategy } from "typeorm-naming-strategies"
import type { DataSourceOptions } from "typeorm"

================
File: packages/adapter-typeorm/test/sqlite/test.sh
================
#!/usr/bin/env bash
set -eu
rm -f test/sqlite/dev.db
echo "Started running SQLite tests with default models."
if vitest run -c ../utils/vitest.config.ts sqlite/index.test.ts; then
  rm -f db.sqlite
else
  rm -f db.sqlite && exit 1
fi
echo "Finished running SQLite tests with default models."
rm -f test/sqlite/dev.db
echo "Started running SQLite tests with custom models."
if CUSTOM_MODEL=1 vitest run -c ../utils/vitest.config.ts sqlite/index.custom.test.ts; then
  rm -f db.sqlite
else
  rm -f db.sqlite && exit 1
fi
echo "Finished running SQLite tests with custom models."
rm -f test/sqlite/dev.db

================
File: packages/adapter-typeorm/test/custom-entities.ts
================
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  OneToMany,
  ValueTransformer,
} from "typeorm"
⋮----
export class UserEntity
⋮----
export class AccountEntity
⋮----
export class SessionEntity
⋮----
export class VerificationTokenEntity

================
File: packages/adapter-typeorm/test/helpers.ts
================
import { vi } from "vitest"
import { DataSource } from "typeorm"
import type { DataSourceOptions } from "typeorm"
import type { TestOptions } from "utils/adapter"
⋮----
import { parseDataSourceConfig } from "../src/utils"
⋮----
/** Set up Test Database */
export function db(
  config: string | DataSourceOptions,
  entities: typeof defaultEntities = defaultEntities
): TestOptions["db"]
⋮----
async user(id)
async account(provider_providerAccountId)
async session(sessionToken)
async verificationToken(token_identifier)

================
File: packages/adapter-typeorm/test/index.test.ts
================
import { parseDataSourceConfig } from "../src/utils"

================
File: packages/adapter-typeorm/.dockerignore
================
# Exclude directories we don't need from Docker context to improve build time
node_modules
www
src

================
File: packages/adapter-typeorm/package.json
================
{
  "name": "@auth/typeorm-adapter",
  "version": "2.9.1",
  "description": "TypeORM adapter for Auth.js.",
  "homepage": "https://authjs.dev/reference/adapter/typeorm",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Iain Collins",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "typeorm"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "dev": "tsc -w",
    "clean": "rm -rf dist *.js *.d.ts*",
    "test": "pnpm test:mysql && pnpm test:sqlite && pnpm test:pg",
    "test:mysql": "pnpm clean && ./test/mysql/test.sh",
    "test:pg": "pnpm clean && ./test/postgresql/test.sh",
    "test:sqlite": "pnpm clean && ./test/sqlite/test.sh"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "libsql": "^0.3.18",
    "mssql": "^7.2.1",
    "mysql": "^2.18.1",
    "pg": "^8.7.3",
    "typeorm": "0.3.17",
    "typeorm-naming-strategies": "^4.1.0"
  },
  "peerDependencies": {
    "libsql": "^0.3.18",
    "mssql": "^6.2.1 || ^7 || ^8 || ^9",
    "mysql": "^2.18.1 || ^3",
    "pg": "^8.2.1",
    "typeorm": "^0.3.7"
  },
  "peerDependenciesMeta": {
    "libsql": {
      "optional": true
    },
    "mysql": {
      "optional": true
    },
    "mssql": {
      "optional": true
    },
    "pg": {
      "optional": true
    }
  }
}

================
File: packages/adapter-typeorm/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://typeorm.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/typeorm.svg"/>
  </a>
  <h3 align="center"><b>TypeORM Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/typeorm-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/typeorm-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/typeorm-adapter?color=green&label=@auth/typeorm-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/typeorm-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/typeorm-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/typeorm).

================
File: packages/adapter-typeorm/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/*"]
}

================
File: packages/adapter-typeorm/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-unstorage/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: "16px"}}>
 *  <p>Official <a href="https://unstorage.unjs.io/">Unstorage</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://unstorage.unjs.io/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/unstorage.svg" width="60"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install unstorage @auth/unstorage-adapter
 * ```
 *
 * @module @auth/unstorage-adapter
 */
import type {
  Adapter,
  AdapterUser,
  AdapterAccount,
  AdapterSession,
  AdapterAuthenticator,
  VerificationToken,
} from "@auth/core/adapters"
import { isDate } from "@auth/core/adapters"
import type { Storage, StorageValue } from "unstorage"
/** This is the interface of the Unstorage adapter options. */
export interface UnstorageAdapterOptions {
  /**
   * The base prefix for your keys
   */
  baseKeyPrefix?: string
  /**
   * The prefix for the `account` key
   */
  accountKeyPrefix?: string
  /**
   * The prefix for the `accountByUserId` key
   */
  accountByUserIdPrefix?: string
  /**
   * The prefix for the `emailKey` key
   */
  emailKeyPrefix?: string
  /**
   * The prefix for the `sessionKey` key
   */
  sessionKeyPrefix?: string
  /**
   * The prefix for the `sessionByUserId` key
   */
  sessionByUserIdKeyPrefix?: string
  /**
   * The prefix for the `user` key
   */
  userKeyPrefix?: string
  /**
   * The prefix for the `verificationToken` key
   */
  verificationTokenKeyPrefix?: string
  /**
   * The prefix for the `authenticator` key
   */
  authenticatorKeyPrefix?: string
  /**
   * The prefix for the `authenticator-by-user-id` key
   */
  authenticatorUserKeyPrefix?: string
  /**
   * Use `getItemRaw/setItemRaw` instead of `getItem/setItem`.
   *
   * This is an experimental feature. Please check [unjs/unstorage#142](https://github.com/unjs/unstorage/issues/142) for more information.
   */
  useItemRaw?: boolean
}
⋮----
/**
   * The base prefix for your keys
   */
⋮----
/**
   * The prefix for the `account` key
   */
⋮----
/**
   * The prefix for the `accountByUserId` key
   */
⋮----
/**
   * The prefix for the `emailKey` key
   */
⋮----
/**
   * The prefix for the `sessionKey` key
   */
⋮----
/**
   * The prefix for the `sessionByUserId` key
   */
⋮----
/**
   * The prefix for the `user` key
   */
⋮----
/**
   * The prefix for the `verificationToken` key
   */
⋮----
/**
   * The prefix for the `authenticator` key
   */
⋮----
/**
   * The prefix for the `authenticator-by-user-id` key
   */
⋮----
/**
   * Use `getItemRaw/setItemRaw` instead of `getItem/setItem`.
   *
   * This is an experimental feature. Please check [unjs/unstorage#142](https://github.com/unjs/unstorage/issues/142) for more information.
   */
⋮----
export function hydrateDates(json: Record<string, any>)
export function UnstorageAdapter(
  storage: Storage,
  options: UnstorageAdapterOptions = {}
): Adapter
⋮----
async function getItem<T extends StorageValue>(key: string)
async function setItem(key: string, value: string)
const setObjectAsJson = async (key: string, obj: Record<string, any>) =>
const setAccount = async (id: string, account: AdapterAccount) =>
const getAccount = async (id: string) =>
const setSession = async (
    id: string,
    session: AdapterSession
): Promise<AdapterSession> =>
const getSession = async (id: string) =>
const setUser = async (
    id: string,
    user: AdapterUser
): Promise<AdapterUser> =>
const getUser = async (id: string) =>
const setAuthenticator = async (
    credentialId: string,
    authenticator: AdapterAuthenticator
): Promise<AdapterAuthenticator> =>
const getAuthenticator = async (credentialId: string) =>
const getAuthenticatorByUserId = async (
    userId: string
): Promise<AdapterAuthenticator[] | []> =>
⋮----
async getAccount(providerAccountId: string, provider: string)
async createUser(user)
⋮----
async getUserByEmail(email)
async getUserByAccount(account)
async updateUser(updates)
async linkAccount(account)
⋮----
async getSessionAndUser(sessionToken)
async updateSession(updates)
async deleteSession(sessionToken)
async createVerificationToken(verificationToken)
async useVerificationToken(verificationToken)
async unlinkAccount(account)
async deleteUser(userId)
async createAuthenticator(authenticator)
async getAuthenticator(credentialID)
async listAuthenticatorsByUserId(userId)
async updateAuthenticatorCounter(credentialID, counter)

================
File: packages/adapter-unstorage/test/filesystem.test.ts
================
import { createStorage } from "unstorage"
import { runBasicTests } from "utils/adapter"
import { hydrateDates, UnstorageAdapter } from "../src"
import fsDriver from "unstorage/drivers/fs"
⋮----
async user(id: string)
async account(
async session(sessionToken)
async verificationToken(where)
async authenticator(id)

================
File: packages/adapter-unstorage/test/memory.test.ts
================
import { createStorage } from "unstorage"
import { runBasicTests } from "utils/adapter"
import { hydrateDates, UnstorageAdapter } from "../src"
⋮----
async user(id: string)
async account(
async session(sessionToken)
async verificationToken(where)
async authenticator(id)

================
File: packages/adapter-unstorage/test/redis-json.test.ts
================
import { createStorage } from "unstorage"
import { runBasicTests } from "utils/adapter"
import { hydrateDates, UnstorageAdapter } from "../src"
import { defineDriver } from "unstorage"
import { createClient } from "redis"
import type { RedisClientType, RedisClientOptions } from "redis"
// TODO: These tests just hang and time out so currently we are skipping them
⋮----
const getRedisClient = async () =>
⋮----
// @ts-ignore
⋮----
async hasItem(key, _opts)
async getItem(key, _opts)
async getItemRaw(key, _opts)
async setItem(key, value, _opts)
async setItemRaw(key, value, _opts)
async removeItem(key, _opts)
async getKeys(base, _opts)
⋮----
// TODO: Unstorage `*Raw` methods not working as expected
⋮----
async user(id: string)
async account(
async session(sessionToken)
async verificationToken(where)
async authenticator(id)

================
File: packages/adapter-unstorage/test/redis.test.ts
================
import { createStorage } from "unstorage"
import { runBasicTests } from "utils/adapter"
import { hydrateDates, UnstorageAdapter } from "../src"
import redisDriver from "unstorage/drivers/redis"
⋮----
async user(id: string)
async account(
async session(sessionToken)
async verificationToken(where)
async authenticator(id)

================
File: packages/adapter-unstorage/test/test.sh
================
#!/usr/bin/env bash
CONTAINER_NAME=authjs-unstorage-test
# Start db
docker run -d --rm \
  -p 6379:6379 \
  --name ${CONTAINER_NAME} \
  redis/redis-stack:7.2.0-v10
sleep 10
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker stop ${CONTAINER_NAME}
else
  docker stop ${CONTAINER_NAME} && exit 1
fi

================
File: packages/adapter-unstorage/package.json
================
{
  "name": "@auth/unstorage-adapter",
  "version": "2.9.1",
  "description": "Unstorage adapter for Auth.js.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "nbifrye <nbifrye@gmail.com>",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "unstorage"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "dev": "tsc -w",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "unstorage": "^1.10.1"
  },
  "devDependencies": {
    "redis": "^4.6.12",
    "unstorage": "^1.10.1"
  }
}

================
File: packages/adapter-unstorage/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://unstorage.unjs.io/" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/unstorage.svg"/>
  </a>
  <h3 align="center"><b>Unstorage Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/unstorage-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/unstorage-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/unstorage-adapter?color=green&label=@auth/unstorage-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/unstorage-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/unstorage-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/unstorage).

================
File: packages/adapter-unstorage/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-unstorage/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-upstash-redis/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://docs.upstash.com/redis">Upstash Redis</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://docs.upstash.com/redis">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/upstash-redis.svg" width="60"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @upstash/redis @auth/upstash-redis-adapter
 * ```
 *
 * @module @auth/upstash-redis-adapter
 */
import {
  type Adapter,
  type AdapterUser,
  type AdapterAccount,
  type AdapterSession,
  type VerificationToken,
  isDate,
} from "@auth/core/adapters"
import type { Redis } from "@upstash/redis"
/** This is the interface of the Upstash Redis adapter options. */
export interface UpstashRedisAdapterOptions {
  /**
   * The base prefix for your keys
   */
  baseKeyPrefix?: string
  /**
   * The prefix for the `account` key
   */
  accountKeyPrefix?: string
  /**
   * The prefix for the `accountByUserId` key
   */
  accountByUserIdPrefix?: string
  /**
   * The prefix for the `emailKey` key
   */
  emailKeyPrefix?: string
  /**
   * The prefix for the `sessionKey` key
   */
  sessionKeyPrefix?: string
  /**
   * The prefix for the `sessionByUserId` key
   */
  sessionByUserIdKeyPrefix?: string
  /**
   * The prefix for the `user` key
   */
  userKeyPrefix?: string
  /**
   * The prefix for the `verificationToken` key
   */
  verificationTokenKeyPrefix?: string
}
⋮----
/**
   * The base prefix for your keys
   */
⋮----
/**
   * The prefix for the `account` key
   */
⋮----
/**
   * The prefix for the `accountByUserId` key
   */
⋮----
/**
   * The prefix for the `emailKey` key
   */
⋮----
/**
   * The prefix for the `sessionKey` key
   */
⋮----
/**
   * The prefix for the `sessionByUserId` key
   */
⋮----
/**
   * The prefix for the `user` key
   */
⋮----
/**
   * The prefix for the `verificationToken` key
   */
⋮----
export function hydrateDates(json: object)
export function UpstashRedisAdapter(
  client: Redis,
  options: UpstashRedisAdapterOptions = {}
): Adapter
⋮----
const setObjectAsJson = async (key: string, obj: any)
const setAccount = async (id: string, account: AdapterAccount) =>
const getAccount = async (id: string) =>
const setSession = async (
    id: string,
    session: AdapterSession
): Promise<AdapterSession> =>
const getSession = async (id: string) =>
const setUser = async (
    id: string,
    user: AdapterUser
): Promise<AdapterUser> =>
const getUser = async (id: string) =>
⋮----
async createUser(user)
⋮----
// TypeScript thinks the emailVerified field is missing
// but all fields are copied directly from user, so it's there
⋮----
async getUserByEmail(email)
async getUserByAccount(account)
async updateUser(updates)
async linkAccount(account)
⋮----
async getSessionAndUser(sessionToken)
async updateSession(updates)
async deleteSession(sessionToken)
async createVerificationToken(verificationToken)
async useVerificationToken(verificationToken)
⋮----
// return reviveFromJson(token)
⋮----
async unlinkAccount(account)
async deleteUser(userId)

================
File: packages/adapter-upstash-redis/test/index.test.ts
================
import { Redis } from "@upstash/redis"
import { runBasicTests } from "utils/adapter"
import { hydrateDates, UpstashRedisAdapter } from "../src"
⋮----
async user(id: string)
async account(
async session(sessionToken)
async verificationToken(where)

================
File: packages/adapter-upstash-redis/test/test.sh
================
#!/usr/bin/env bash
echo "Initializing container for Upstash-Redis tests (Serverless-Redis-HTTP)"
# Init Redis + serverless-redis-http containers
docker compose up -d
echo "Waiting 5s for db to start..."
sleep 5
# Always stop container, but exit with 1 when tests are failing
if vitest run -c ../utils/vitest.config.ts; then
  docker compose down -v
else
  docker compose down -v && exit 1
fi

================
File: packages/adapter-upstash-redis/.env.example
================
UPSTASH_REDIS_URL=
UPSTASH_REDIS_KEY=

================
File: packages/adapter-upstash-redis/docker-compose.yml
================
services:
  redis:
    image: redis
    ports:
      - "6379:6379"
  serverless-redis-http:
    ports:
      - "8079:80"
    image: hiett/serverless-redis-http:latest
    environment:
      SRH_MODE: env
      SRH_TOKEN: uwndz1YIfm9k78mx+mjW8qe7CX33VxRYnscDpZVkt4Y=
      SRH_CONNECTION_STRING: "redis://redis:6379"

================
File: packages/adapter-upstash-redis/package.json
================
{
  "name": "@auth/upstash-redis-adapter",
  "version": "2.9.1",
  "description": "Upstash adapter for Auth.js.",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "github.com/kay-is",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "upstash",
    "redis"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "test": "./test/test.sh",
    "build": "tsc",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "@upstash/redis": "^1.0.1"
  },
  "devDependencies": {
    "@types/uuid": "^8.3.3",
    "@upstash/redis": "^1.0.1",
    "dotenv": "^10.0.0"
  }
}

================
File: packages/adapter-upstash-redis/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://docs.upstash.com/redis" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/upstash-redis.svg"/>
  </a>
  <h3 align="center"><b>Upstash Redis Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/upstash-redis-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/upstash-redis-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/upstash-redis-adapter?color=green&label=@auth/upstash-redis-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/upstash-redis-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/upstash-redis-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/upstash-redis).

================
File: packages/adapter-upstash-redis/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-upstash-redis/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/adapter-xata/src/index.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16}}>
 *  <p>Official <a href="https://xata.io/docs/overview">Xata</a> adapter for Auth.js / NextAuth.js.</p>
 *  <a href="https://xata.io/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/adapters/xata.svg" width="50"/>
 *  </a>
 * </div>
 *
 * ## Installation
 *
 * 1. Install Auth.js and the Xata adapter
 *
 * ```bash npm2yarn
 * npm install @auth/xata-adapter
 * ```
 *
 * 2. Install the Xata CLI globally if you don't already have it
 *
 * ```bash npm2yarn
 * npm install -g @xata.io/cli
 * ```
 *
 * 3. Login
 *
 * ```bash
 * xata auth login
 * ```
 *
 * @module @auth/xata-adapter
 */
import type { Adapter } from "@auth/core/adapters"
import type { XataClient } from "./xata.js"
export function XataAdapter(client: XataClient): Adapter
⋮----
async createUser(user)
async getUser(id)
async getUserByEmail(email)
async getUserByAccount(
async updateUser(user)
async deleteUser(id)
async linkAccount(initialAccount)
async unlinkAccount(
⋮----
/**
       * @todo refactor this when we support DELETE WHERE.
       */
⋮----
async createSession(initialSession)
async getSessionAndUser(sessionToken)
async updateSession(
async deleteSession(sessionToken)
⋮----
/**
       * @todo refactor this when we support DELETE WHERE.
       */
⋮----
async createVerificationToken(token)
async useVerificationToken(token)
⋮----
/**
       * @todo refactor this when we support DELETE WHERE.
       */

================
File: packages/adapter-xata/src/xata.ts
================
/**
 * This file is auto-generated from Xata and corresponds
 * to the database types in the Xata database. Please do not
 * augment by hand.
 */
import {
  buildClient,
  BaseClientOptions,
  XataRecord,
  ClientConstructor,
  type BaseSchema,
} from "@xata.io/client"
export interface NextauthUser {
  email?: string | null
  emailVerified?: Date | null
  name?: string | null
  image?: string | null
}
export type NextauthUserRecord = NextauthUser & XataRecord
export interface NextauthAccount {
  user?: NextauthUserRecord | null
  type?: string | null
  provider?: string | null
  providerAccountId?: string | null
  refresh_token?: string | null
  access_token?: string | null
  expires_at?: number | null
  token_type?: string | null
  scope?: string | null
  id_token?: string | null
  session_state?: string | null
}
export type NextauthAccountRecord = NextauthAccount & XataRecord
export interface NextauthVerificationToken {
  identifier?: string | null
  token?: string | null
  expires?: Date | null
}
export type NextauthVerificationTokenRecord = NextauthVerificationToken &
  XataRecord
export interface NextauthUsersAccount {
  user?: NextauthUserRecord | null
  account?: NextauthAccountRecord | null
}
export type NextauthUsersAccountRecord = NextauthUsersAccount & XataRecord
export interface NextauthUsersSession {
  user?: NextauthUserRecord | null
  session?: NextauthSessionRecord | null
}
export type NextauthUsersSessionRecord = NextauthUsersSession & XataRecord
export interface NextauthSession {
  sessionToken?: string | null
  expires?: Date | null
  user?: NextauthUserRecord | null
}
export type NextauthSessionRecord = NextauthSession & XataRecord
export type DatabaseSchema = {
  nextauth_users: NextauthUserRecord
  nextauth_accounts: NextauthAccountRecord
  nextauth_verificationTokens: NextauthVerificationTokenRecord
  nextauth_users_accounts: NextauthUsersAccountRecord
  nextauth_users_sessions: NextauthUsersSessionRecord
  nextauth_sessions: NextauthSessionRecord
}
⋮----
export class XataClient extends DatabaseClient<DatabaseSchema>
⋮----
constructor(options?: BaseClientOptions)

================
File: packages/adapter-xata/test/index.test.ts
================
import { runBasicTests } from "utils/adapter"
import { XataClient } from "../src/xata"
import { XataAdapter } from "../src"
⋮----
async user(id: string)
async account(
async session(sessionToken)
async verificationToken(where)

================
File: packages/adapter-xata/package.json
================
{
  "name": "@auth/xata-adapter",
  "version": "1.9.1",
  "description": "Xata adapter for Auth.js",
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "bugs": {
    "url": "https://github.com/nextauthjs/next-auth/issues"
  },
  "author": "Tejas Kumar",
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    }
  },
  "license": "ISC",
  "keywords": [
    "next-auth",
    "next.js",
    "oauth",
    "xata"
  ],
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc",
    "test": "vitest -c ../utils/vitest.config.ts",
    "clean": "rm -rf *.js *.d.ts*"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "@xata.io/client": ">=0.28.0"
  },
  "devDependencies": {
    "@xata.io/client": "^0.28.0"
  }
}

================
File: packages/adapter-xata/README.md
================
<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank">
    <img height="64px" src="https://authjs.dev/img/logo-sm.png" />
  </a>
  <a href="https://xata.io" target="_blank">
    <img height="64px" src="https://authjs.dev/img/adapters/xata.svg"/>
  </a>
  <h3 align="center"><b>Xata Adapter</b> - NextAuth.js / Auth.js</a></h3>
  <p align="center" style="align: center;">
    <a href="https://npm.im/@auth/xata-adapter">
      <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
    </a>
    <a href="https://npm.im/@auth/xata-adapter">
      <img alt="npm" src="https://img.shields.io/npm/v/@auth/xata-adapter?color=green&label=@auth/xata-adapter&style=flat-square">
    </a>
    <a href="https://www.npmtrends.com/@auth/xata-adapter">
      <img src="https://img.shields.io/npm/dm/@auth/xata-adapter?label=%20downloads&style=flat-square" alt="Downloads" />
    </a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers">
      <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
    </a>
  </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/xata).

================
File: packages/adapter-xata/schema.json
================
{
  "tables": [
    {
      "name": "authjs_users",
      "columns": [
        {
          "name": "email",
          "type": "email"
        },
        {
          "name": "emailVerified",
          "type": "datetime"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "image",
          "type": "string"
        }
      ]
    },
    {
      "name": "authjs_accounts",
      "columns": [
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "authjs_users"
          }
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "provider",
          "type": "string"
        },
        {
          "name": "providerAccountId",
          "type": "string"
        },
        {
          "name": "refresh_token",
          "type": "string"
        },
        {
          "name": "access_token",
          "type": "string"
        },
        {
          "name": "expires_at",
          "type": "int"
        },
        {
          "name": "token_type",
          "type": "string"
        },
        {
          "name": "scope",
          "type": "string"
        },
        {
          "name": "id_token",
          "type": "text"
        },
        {
          "name": "session_state",
          "type": "string"
        }
      ]
    },
    {
      "name": "authjs_verificationTokens",
      "columns": [
        {
          "name": "identifier",
          "type": "string"
        },
        {
          "name": "token",
          "type": "string"
        },
        {
          "name": "expires",
          "type": "datetime"
        }
      ]
    },
    {
      "name": "authjs_users_accounts",
      "columns": [
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "authjs_users"
          }
        },
        {
          "name": "account",
          "type": "link",
          "link": {
            "table": "authjs_accounts"
          }
        }
      ]
    },
    {
      "name": "authjs_users_sessions",
      "columns": [
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "authjs_users"
          }
        },
        {
          "name": "session",
          "type": "link",
          "link": {
            "table": "authjs_sessions"
          }
        }
      ]
    },
    {
      "name": "authjs_sessions",
      "columns": [
        {
          "name": "sessionToken",
          "type": "string"
        },
        {
          "name": "expires",
          "type": "datetime"
        },
        {
          "name": "user",
          "type": "link",
          "link": {
            "table": "authjs_users"
          }
        }
      ]
    }
  ]
}

================
File: packages/adapter-xata/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "outDir": ".",
    "rootDir": "src"
  },
  "exclude": ["*.js", "*.d.ts"],
  "include": ["src/**/*"]
}

================
File: packages/adapter-xata/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/core/scripts/generate-css.js
================
const from = path.join(process.cwd(), "src/lib/pages/styles.css")
const css = fs.readFileSync(from)
const processedCss = await postcss([autoprefixer, postCssNested]).process(css, {
⋮----
fs.writeFileSync(
path.join(process.cwd(), "src/lib/pages/styles.ts"),

================
File: packages/core/scripts/generate-providers.js
================
const providersPath = join(process.cwd(), "src/providers")
const files = readdirSync(providersPath, "utf8")
// TODO: Autogenerate
⋮----
// Credentials
⋮----
// Webauthn
⋮----
// Email providers
⋮----
const providers = files.map((file) => {
const strippedProviderName = file.substring(0, file.indexOf("."))
⋮----
const oauthProviders = providers.filter(
(provider) => !nonOAuthFile.includes(provider.replace(/"/g, ""))
⋮----
const emailProviders = providers.filter((provider) =>
emailProvidersFile.includes(provider.replace(/"/g, ""))
⋮----
| ${oauthProviders.join("\n  | ")}
⋮----
| ${emailProviders.join("\n  | ")}`
writeFileSync(join(providersPath, "provider-types.ts"), content)

================
File: packages/core/src/lib/actions/callback/oauth/callback.ts
================
import {
  OAuthCallbackError,
  OAuthProfileParseError,
} from "../../../../errors.js"
import type {
  Account,
  InternalOptions,
  LoggerInstance,
  Profile,
  RequestInternal,
  TokenSet,
  User,
} from "../../../../types.js"
import { type OAuthConfigInternal } from "../../../../providers/index.js"
import type { Cookie } from "../../../utils/cookie.js"
import { isOIDCProvider } from "../../../utils/providers.js"
import { conformInternal, customFetch } from "../../../symbols.js"
import { decodeJwt } from "jose"
function formUrlEncode(token: string)
/**
 * Formats client_id and client_secret as an HTTP Basic Authentication header as per the OAuth 2.0
 * specified in RFC6749.
 */
function clientSecretBasic(clientId: string, clientSecret: string)
/**
 * Handles the following OAuth steps.
 * https://www.rfc-editor.org/rfc/rfc6749#section-4.1.1
 * https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3
 * https://openid.net/specs/openid-connect-core-1_0.html#UserInfoRequest
 *
 * @note Although requesting userinfo is not required by the OAuth2.0 spec,
 * we fetch it anyway. This is because we always want a user profile.
 */
export async function handleOAuth(
  params: RequestInternal["query"],
  cookies: RequestInternal["cookies"],
  options: InternalOptions<"oauth" | "oidc">
)
⋮----
// Falls back to authjs.dev if the user only passed params
⋮----
// We assume that issuer is always defined as this has been asserted earlier
⋮----
issuer: provider.issuer ?? "https://authjs.dev", // TODO: review fallback issuer
⋮----
// TODO: in the next breaking major version have undefined be `client_secret_post`
⋮----
// TODO: in the next breaking major version use o.ClientSecretBasic() here
clientAuth = (_as, _client, _body, headers) =>
⋮----
// TODO: review in the next breaking change
⋮----
// TODO: move away from allowing insecure HTTP requests
⋮----
/**
         * These providers return errors in the response body and
         * need the authorization server metadata to be re-processed
         * based on the `id_token`'s `tid` claim.
         * @see: https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow#error-response-1
         */
⋮----
// Apple sends some of the user information in a `user` parameter as a stringified JSON.
// It also only does so the first time the user consents to share their information.
⋮----
// TODO: move away from allowing insecure HTTP requests
⋮----
// TODO: move away from allowing insecure HTTP requests
⋮----
/**
 * Returns the user and account that is going to be created in the database.
 * @internal
 */
export async function getUserAndAccount(
  OAuthProfile: Profile,
  provider: OAuthConfigInternal<any>,
  tokens: TokenSet,
  logger: LoggerInstance
)
⋮----
// The user's id is intentionally not set based on the profile id, as
// the user should remain independent of the provider and the profile id
// is saved on the Account already, as `providerAccountId`.
⋮----
// If we didn't get a response either there was a problem with the provider
// response *or* the user cancelled the action with the provider.
//
// Unfortunately, we can't tell which - at least not in a way that works for
// all providers, so we return an empty object; the user should then be
// redirected back to the sign up page. We log the error to help developers
// who might be trying to debug this when configuring a new provider.

================
File: packages/core/src/lib/actions/callback/oauth/checks.ts
================
import { InvalidCheck } from "../../../../errors.js"
// NOTE: We use the default JWT methods here because they encrypt/decrypt the payload, not just sign it.
import { decode, encode } from "../../../../jwt.js"
import type {
  CookiesOptions,
  InternalOptions,
  RequestInternal,
  User,
} from "../../../../types.js"
import type { Cookie } from "../../../utils/cookie.js"
import type { WebAuthnProviderType } from "../../../../providers/webauthn.js"
interface CookiePayload {
  value: string
}
const COOKIE_TTL = 60 * 15 // 15 minutes
/** Returns a cookie with a JWT encrypted payload. */
async function sealCookie(
  name: keyof CookiesOptions,
  payload: string,
  options: InternalOptions<"oauth" | "oidc" | WebAuthnProviderType>
): Promise<Cookie>
async function parseCookie(
  name: keyof CookiesOptions,
  value: string | undefined,
  options: InternalOptions
): Promise<string>
function clearCookie(
  name: keyof CookiesOptions,
  options: InternalOptions,
  resCookies: Cookie[]
)
function useCookie(
  check: "state" | "pkce" | "nonce",
  name: keyof CookiesOptions
)
/**
 * @see https://www.rfc-editor.org/rfc/rfc7636
 * @see https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/#pkce
 */
⋮----
/** Creates a PKCE code challenge and verifier pair. The verifier in stored in the cookie. */
async create(options: InternalOptions<"oauth">)
/**
   * Returns code_verifier if the provider is configured to use PKCE,
   * and clears the container cookie afterwards.
   * An error is thrown if the code_verifier is missing or invalid.
   */
⋮----
interface EncodedState {
  origin?: string
  random: string
}
const STATE_MAX_AGE = 60 * 15 // 15 minutes in seconds
⋮----
/**
 * @see https://www.rfc-editor.org/rfc/rfc6749#section-10.12
 * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.1
 */
⋮----
/** Creates a state cookie with an optionally encoded body. */
async create(options: InternalOptions<"oauth">, origin?: string)
⋮----
// IDEA: Allow the user to pass data to be stored in the state
⋮----
/**
   * Returns state if the provider is configured to use state,
   * and clears the container cookie afterwards.
   * An error is thrown if the state is missing or invalid.
   */
⋮----
/** Decodes the state. If it could not be decoded, it throws an error. */
async decode(state: string, options: InternalOptions)
⋮----
async create(options: InternalOptions<"oidc">)
/**
   * Returns nonce if the provider is configured to use nonce,
   * and clears the container cookie afterwards.
   * An error is thrown if the nonce is missing or invalid.
   * @see https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes
   * @see https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/#nonce
   */
⋮----
const WEBAUTHN_CHALLENGE_MAX_AGE = 60 * 15 // 15 minutes in seconds
interface WebAuthnChallengePayload {
  challenge: string
  registerData?: User
}
⋮----
async create(
    options: InternalOptions<WebAuthnProviderType>,
    challenge: string,
    registerData?: User
)
/** Returns WebAuthn challenge if present. */
async use(
    options: InternalOptions<WebAuthnProviderType>,
    cookies: RequestInternal["cookies"],
    resCookies: Cookie[]
): Promise<WebAuthnChallengePayload>
⋮----
// Clear the WebAuthn challenge cookie after use

================
File: packages/core/src/lib/actions/callback/oauth/csrf-token.ts
================
import { createHash, randomString } from "../../../utils/web.js"
import type { AuthAction, InternalOptions } from "../../../../types.js"
import { MissingCSRF } from "../../../../errors.js"
interface CreateCSRFTokenParams {
  options: InternalOptions
  cookieValue?: string
  isPost: boolean
  bodyValue?: string
}
/**
 * Ensure CSRF Token cookie is set for any subsequent requests.
 * Used as part of the strategy for mitigation for CSRF tokens.
 *
 * Creates a cookie like 'next-auth.csrf-token' with the value 'token|hash',
 * where 'token' is the CSRF token and 'hash' is a hash made of the token and
 * the secret, and the two values are joined by a pipe '|'. By storing the
 * value and the hash of the value (with the secret used as a salt) we can
 * verify the cookie was set by the server and not by a malicious attacker.
 *
 * For more details, see the following OWASP links:
 * https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie
 * https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf
 */
export async function createCSRFToken({
  options,
  cookieValue,
  isPost,
  bodyValue,
}: CreateCSRFTokenParams)
⋮----
// If hash matches then we trust the CSRF token value
// If this is a POST request and the CSRF Token in the POST request matches
// the cookie we have already verified is the one we have set, then the token is verified!
⋮----
// New CSRF token
⋮----
export function validateCSRF(action: AuthAction, verified?: boolean)

================
File: packages/core/src/lib/actions/callback/handle-login.ts
================
import { AccountNotLinked, OAuthAccountNotLinked } from "../../../errors.js"
import { fromDate } from "../../utils/date.js"
import type {
  AdapterAccount,
  AdapterSession,
  AdapterUser,
} from "../../../adapters.js"
import type { Account, InternalOptions, User } from "../../../types.js"
import type { JWT } from "../../../jwt.js"
import type { OAuthConfig } from "../../../providers/index.js"
import type { SessionToken } from "../../utils/cookie.js"
/**
 * This function handles the complex flow of signing users in, and either creating,
 * linking (or not linking) accounts depending on if the user is currently logged
 * in, if they have account already and the authentication mechanism they are using.
 *
 * It prevents insecure behaviour, such as linking OAuth accounts unless a user is
 * signed in and authenticated with an existing valid account.
 *
 * All verification (e.g. OAuth flows or email address verification flows) are
 * done prior to this handler being called to avoid additional complexity in this
 * handler.
 */
export async function handleLoginOrRegister(
  sessionToken: SessionToken,
  _profile: User | AdapterUser | { email: string },
  _account: AdapterAccount | Account | null,
  options: InternalOptions
)
⋮----
// Input validation
⋮----
// If no adapter is configured then we don't have a database and cannot
// persist data; in this mode we just return a dummy session object.
⋮----
// If session can't be verified, treat as no session
⋮----
// If signing in with an email, check if an account with the same email address exists already
⋮----
// If they are not already signed in as the same user, this flow will
// sign them out of the current session and sign them in as the new user
⋮----
// Delete existing session if they are currently signed in as another user.
// This will switch user accounts for the session in cases where the user was
// already logged in with a different account.
⋮----
// Update emailVerified property on the user object
⋮----
// Create user account if there isn't one for the email address already
⋮----
// Create new session
⋮----
// Check if the account exists
⋮----
// If the user is already signed in with this account, we don't need to do anything
⋮----
// If the user is currently signed in, but the new account they are signing in
// with is already associated with another user, then we cannot link them
// and need to return an error.
⋮----
// If there is no active session, but the account being signed in with is already
// associated with a valid user then create session to sign the user in.
⋮----
// If the account doesn't exist, we'll create it
⋮----
// If the user is already signed in and the account isn't already associated
// with another user account then we can go ahead and link the accounts safely.
⋮----
// As they are already signed in, we don't need to do anything after linking them
⋮----
// If the user is not signed in and it looks like a new account then we
// check there also isn't an user account already associated with the same
// email address as the one in the request.
⋮----
// We don't trust user-provided email addresses, so we don't want to link accounts
// if the email address associated with the new account is already associated with
// an existing account.
⋮----
// If the current user is not logged in and the profile isn't linked to any user
// accounts (by email or provider account id)...
//
// If no account matching the same [provider].id or .email exists, we can
// create a new account for the user, link it to the OAuth account and
// create a new session for them so they are signed in with it.
⋮----
// If signing in with OAuth account, check to see if the account exists already
⋮----
// If the user is already signed in with this account, we don't need to do anything
⋮----
// If the user is currently signed in, but the new account they are signing in
// with is already associated with another user, then we cannot link them
// and need to return an error.
⋮----
// If there is no active session, but the account being signed in with is already
// associated with a valid user then create session to sign the user in.
⋮----
// If the user is already signed in and the OAuth account isn't already associated
// with another user account then we can go ahead and link the accounts safely.
⋮----
// As they are already signed in, we don't need to do anything after linking them
⋮----
// If the user is not signed in and it looks like a new OAuth account then we
// check there also isn't an user account already associated with the same
// email address as the one in the OAuth profile.
//
// This step is often overlooked in OAuth implementations, but covers the following cases:
//
// 1. It makes it harder for someone to accidentally create two accounts.
//    e.g. by signin in with email, then again with an oauth account connected to the same email.
// 2. It makes it harder to hijack a user account using a 3rd party OAuth account.
//    e.g. by creating an oauth account then changing the email address associated with it.
//
// It's quite common for services to automatically link accounts in this case, but it's
// better practice to require the user to sign in *then* link accounts to be sure
// someone is not exploiting a problem with a third party OAuth service.
//
// OAuth providers should require email address verification to prevent this, but in
// practice that is not always the case; this helps protect against that.
⋮----
// If you trust the oauth provider to correctly verify email addresses, you can opt-in to
// account linking even when the user is not signed-in.
⋮----
// We end up here when we don't have an account with the same [provider].id *BUT*
// we do already have an account with the same email address as the one in the
// OAuth profile the user has just tried to sign in with.
//
// We don't want to have two accounts with the same email address, and we don't
// want to link them in case it's not safe to do so, so instead we prompt the user
// to sign in via email to verify their identity and then link the accounts.
⋮----
// If the current user is not logged in and the profile isn't linked to any user
// accounts (by email or provider account id)...
//
// If no account matching the same [provider].id or .email exists, we can
// create a new account for the user, link it to the OAuth account and
// create a new session for them so they are signed in with it.

================
File: packages/core/src/lib/actions/callback/index.ts
================
// TODO: Make this file smaller
import {
  AuthError,
  AccessDenied,
  CallbackRouteError,
  CredentialsSignin,
  InvalidProvider,
  Verification,
} from "../../../errors.js"
import { handleLoginOrRegister } from "./handle-login.js"
import { handleOAuth } from "./oauth/callback.js"
import { state } from "./oauth/checks.js"
import { createHash } from "../../utils/web.js"
import type { AdapterSession } from "../../../adapters.js"
import type {
  Account,
  Authenticator,
  InternalOptions,
  RequestInternal,
  ResponseInternal,
  User,
} from "../../../types.js"
import type { Cookie, SessionStore } from "../../utils/cookie.js"
import {
  assertInternalOptionsWebAuthn,
  verifyAuthenticate,
  verifyRegister,
} from "../../utils/webauthn-utils.js"
/** Handle callbacks from login services */
export async function callback(
  request: RequestInternal,
  options: InternalOptions,
  sessionStore: SessionStore,
  cookies: Cookie[]
): Promise<ResponseInternal>
⋮----
// Use body if the response mode is set to form_post. For all other cases, use query
⋮----
// If we have a state and we are on a redirect proxy, we try to parse it
// and see if it contains a valid origin to redirect to. If it does, we
// redirect the user to that origin with the original state.
⋮----
// NOTE: We rely on the state being encrypted using a shared secret
// between the proxy and the original server.
⋮----
// If we don't have a profile object then either something went wrong
// or the user cancelled signing in. We don't know which, so we just
// direct the user to the signin page for now. We could do something
// else in future.
// TODO: Handle user cancelling signin
⋮----
// Check if user is allowed to sign in
// Attempt to get Profile from OAuth provider details before invoking
// signIn callback - but if no user object is returned, that is fine
// (that just means it's a new user signing in for the first time).
⋮----
// Clear cookies if token is null
⋮----
// Encode token
⋮----
// Set cookie expiry date
⋮----
// Save Session Token in cookie
⋮----
// Handle first logins on new accounts
// e.g. option to send users to a new account landing page on initial login
// Note that the callback URL is preserved, so the journey can still be resumed
⋮----
// @ts-expect-error -- Verified in `assertConfig`.
⋮----
// @ts-expect-error User-land adapters might decide to omit the identifier during lookup
identifier: paramIdentifier, // TODO: Drop this requirement for lookup in official adapters too
⋮----
// The user might have configured the link to not contain the identifier
// so we only compare if it exists
⋮----
// Sign user in
⋮----
// Clear cookies if token is null
⋮----
// Encode token
⋮----
// Set cookie expiry date
⋮----
// Save Session Token in cookie
⋮----
// Handle first logins on new accounts
// e.g. option to send users to a new account landing page on initial login
// Note that the callback URL is preserved, so the journey can still be resumed
⋮----
// Callback URL is already verified at this point, so safe to use if specified
⋮----
// TODO: Forward the original request as is, instead of reconstructing it
⋮----
// prettier-ignore
⋮----
// Clear cookies if token is null
⋮----
// Encode token
⋮----
// Set cookie expiry date
⋮----
// Get callback action from request. It should be either "authenticate" or "register"
⋮----
// Return an error if the adapter is missing or if the provider
// is not a webauthn provider.
⋮----
// Verify request to get user, account and authenticator
⋮----
// Check if user is allowed to sign in
⋮----
// Sign user in, creating them and their account if needed
⋮----
// This is mostly for type checking. It should never actually happen.
⋮----
// Create new authenticator if needed
⋮----
// Do the session registering dance
⋮----
// Clear cookies if token is null
⋮----
// Encode token
⋮----
// Set cookie expiry date
⋮----
// Save Session Token in cookie
⋮----
// Handle first logins on new accounts
// e.g. option to send users to a new account landing page on initial login
// Note that the callback URL is preserved, so the journey can still be resumed
⋮----
// Callback URL is already verified at this point, so safe to use if specified
⋮----
async function handleAuthorized(
  params: Parameters<InternalOptions["callbacks"]["signIn"]>[0],
  config: InternalOptions
): Promise<string | undefined>

================
File: packages/core/src/lib/actions/signin/authorization-url.ts
================
import type { InternalOptions, RequestInternal } from "../../../types.js"
import type { Cookie } from "../../utils/cookie.js"
import { customFetch } from "../../symbols.js"
/**
 * Generates an authorization/request token URL.
 *
 * [OAuth 2](https://www.oauth.com/oauth2-servers/authorization/the-authorization-request/)
 */
export async function getAuthorizationUrl(
  query: RequestInternal["query"],
  options: InternalOptions<"oauth" | "oidc">
)
⋮----
// Falls back to authjs.dev if the user only passed params
⋮----
// If url is undefined, we assume that issuer is always defined
// We check this in assert.ts
⋮----
// TODO: move away from allowing insecure HTTP requests
⋮----
// clientId can technically be undefined, should we check this in assert.ts or rely on the Authorization Server to do it?
⋮----
// @ts-expect-error TODO:
⋮----
// Otherwise "POST /redirect_uri" wouldn't include the cookies
⋮----
// We assume S256 PKCE support, if the server does not advertise that,
// a random `nonce` must be used for CSRF protection.
⋮----
// TODO: This does not work in normalizeOAuth because authorization endpoint can come from discovery
// Need to make normalizeOAuth async

================
File: packages/core/src/lib/actions/signin/index.ts
================
import { getAuthorizationUrl } from "./authorization-url.js"
import { sendToken } from "./send-token.js"
import type { Cookie } from "../../utils/cookie.js"
import type {
  InternalOptions,
  RequestInternal,
  ResponseInternal,
} from "../../../types.js"
export async function signIn(
  request: RequestInternal,
  cookies: Cookie[],
  options: InternalOptions
): Promise<ResponseInternal>

================
File: packages/core/src/lib/actions/signin/send-token.ts
================
import { createHash, randomString, toRequest } from "../../utils/web.js"
import { AccessDenied } from "../../../errors.js"
import type { InternalOptions, RequestInternal } from "../../../types.js"
import type { Account } from "../../../types.js"
/**
 * Starts an e-mail login flow, by generating a token,
 * and sending it to the user's e-mail (with the help of a DB adapter).
 * At the end, it returns a redirect to the `verify-request` page.
 */
export async function sendToken(
  request: RequestInternal,
  options: InternalOptions<"email">
)
function defaultNormalizer(email?: string)
⋮----
// Get the first two elements only,
// separated by `@` from user input.
⋮----
// The part before "@" can contain a ","
// but we remove it on the domain part

================
File: packages/core/src/lib/actions/index.ts
================


================
File: packages/core/src/lib/actions/session.ts
================
import { JWTSessionError, SessionTokenError } from "../../errors.js"
import { fromDate } from "../utils/date.js"
import type { Adapter } from "../../adapters.js"
import type { InternalOptions, ResponseInternal, Session } from "../../types.js"
import type { Cookie, SessionStore } from "../utils/cookie.js"
/** Return a session object filtered via `callbacks.session` */
export async function session(
  options: InternalOptions,
  sessionStore: SessionStore,
  cookies: Cookie[],
  isUpdate?: boolean,
  newSession?: any
): Promise<ResponseInternal<Session | null>>
⋮----
// @ts-expect-error
⋮----
// By default, only exposes a limited subset of information to the client
// as needed for presentation purposes (e.g. "you are logged in as...").
⋮----
// @ts-expect-error
⋮----
// Return session payload as response
⋮----
// Refresh JWT expiry by re-signing it, with an updated expiry date
⋮----
// Set cookie, to also update expiry date on cookie
⋮----
// If the JWT is not verifiable remove the broken session cookie(s).
⋮----
// Retrieve session from database
⋮----
// If session has expired, clean up the database
⋮----
// Calculate last updated date to throttle write updates to database
// Formula: ({expiry date} - sessionMaxAge) + sessionUpdateAge
//     e.g. ({expiry date} - 30 days) + 1 hour
⋮----
// Trigger update of session expiry date and write to database, only
// if the session was last updated more than {sessionUpdateAge} ago
⋮----
// Pass Session through to the session callback
⋮----
// TODO: user already passed below,
// remove from session object in https://github.com/nextauthjs/next-auth/pull/9702
// @ts-expect-error
⋮----
// Return session payload as response
⋮----
// Set cookie again to update expiry
⋮----
// @ts-expect-error
⋮----
// If `sessionToken` was found set but it's not valid for a session then
// remove the sessionToken cookie from browser.

================
File: packages/core/src/lib/actions/signout.ts
================
import { SignOutError } from "../../errors.js"
import type { InternalOptions, ResponseInternal } from "../../types.js"
import type { Cookie, SessionStore } from "../utils/cookie.js"
/**
 * Destroys the session.
 * If the session strategy is database,
 * The session is also deleted from the database.
 * In any case, the session cookie is cleared and
 * {@link AuthConfig["events"].signOut} is emitted.
 */
export async function signOut(
  cookies: Cookie[],
  sessionStore: SessionStore,
  options: InternalOptions
): Promise<ResponseInternal>

================
File: packages/core/src/lib/actions/webauthn-options.ts
================
import type {
  InternalOptions,
  RequestInternal,
  ResponseInternal,
  User,
} from "../../types.js"
import type { Cookie, SessionStore } from "../utils/cookie.js"
import { getLoggedInUser } from "../utils/session.js"
import {
  assertInternalOptionsWebAuthn,
  inferWebAuthnOptions,
  getAuthenticationResponse,
  getRegistrationResponse,
} from "../utils/webauthn-utils.js"
/**
 * Returns authentication or registration options for a WebAuthn flow
 * depending on the parameters provided.
 */
export async function webAuthnOptions(
  request: RequestInternal,
  options: InternalOptions,
  sessionStore: SessionStore,
  cookies: Cookie[]
  // @ts-expect-error issue with returning from a switch case
): Promise<ResponseInternal>
⋮----
// @ts-expect-error issue with returning from a switch case
⋮----
// Return an error if the adapter is missing or if the provider
// is not a webauthn provider.
⋮----
// Extract the action from the query parameters
⋮----
// Action must be either "register", "authenticate", or undefined
⋮----
// Get the user info from the session
⋮----
// Extract user info from request
// If session user exists, we don't need to call getUserInfo
⋮----
// Make a decision on what kind of webauthn options to return

================
File: packages/core/src/lib/pages/error.tsx
================
import type { ErrorPageParam, Theme } from "../../types.js"
/**
 * The following errors are passed as error query parameters to the default or overridden error page.
 *
 * [Documentation](https://authjs.dev/guides/pages/error)
 */
export interface ErrorProps {
  url?: URL
  theme?: Theme
  error?: ErrorPageParam
}
interface ErrorView {
  status: number
  heading: string
  message: JSX.Element
  signin?: JSX.Element
}
/** Renders an error page. */

================
File: packages/core/src/lib/pages/index.ts
================
import { renderToString } from "preact-render-to-string"
import ErrorPage from "./error.js"
import SigninPage from "./signin.js"
import SignoutPage from "./signout.js"
import css from "./styles.js"
import VerifyRequestPage from "./verify-request.js"
import { UnknownAction } from "../../errors.js"
import type {
  InternalOptions,
  RequestInternal,
  ResponseInternal,
  InternalProvider,
  PublicProvider,
} from "../../types.js"
import type { Cookie } from "../utils/cookie.js"
function send({
  html,
  title,
  status,
  cookies,
  theme,
  headTags,
}: any): ResponseInternal
type RenderPageParams = {
  query?: RequestInternal["query"]
  cookies?: Cookie[]
} & Partial<
  Pick<
    InternalOptions,
    "url" | "callbackUrl" | "csrfToken" | "providers" | "theme" | "pages"
  >
>
/**
 * Unless the user defines their [own pages](https://authjs.dev/reference/core#pages),
 * we render a set of default ones, using Preact SSR.
 */
export default function renderPage(params: RenderPageParams)
⋮----
csrf(skip: boolean, options: InternalOptions, cookies: Cookie[])
providers(providers: InternalProvider[])
signin(providerId?: string, error?: any)
⋮----
// If we have a webauthn provider with conditional UI and
// a simpleWebAuthnBrowserScript is defined, we need to
// render the script in the page.
⋮----
// We only want to render providers
⋮----
// Always render oauth and email type providers
⋮----
// Only render credentials type provider if credentials are defined
⋮----
// Only render webauthn type provider if formFields are defined
⋮----
// Don't render other provider types
⋮----
signout()
verifyRequest(props?: any)
error(error?: string)
⋮----
// @ts-expect-error fix error type

================
File: packages/core/src/lib/pages/signin.tsx
================
import type {
  InternalProvider,
  SignInPageErrorParam,
  Theme,
} from "../../types.js"
import { webauthnScript } from "../utils/webauthn-client.js"
⋮----
function ConditionalUIScript(providerID: string)

================
File: packages/core/src/lib/pages/signout.tsx
================
import type { Theme } from "../../types.js"
export interface SignoutProps {
  url?: URL
  csrfToken?: string
  theme?: Theme
}
⋮----
<form action=

================
File: packages/core/src/lib/pages/styles.css
================
:root {
.__next-auth-theme-auto,
.__next-auth-theme-dark {
⋮----
img[src$="42-school.svg"],
#submitButton {
⋮----
.__next-auth-theme-auto {
⋮----
html {
*,
body {
h1 {
p {
form {
label {
input[type] {
⋮----
a.button {
⋮----
&:link,
⋮----
button,
⋮----
&:hover {
&:active {
span {
⋮----
a.site {
.page {
⋮----
> div {
⋮----
.error {
⋮----
.message {
⋮----
.signin {
⋮----
input[type="text"] {
hr {
⋮----
&::before {
⋮----
> div,
⋮----
button {
⋮----
.provider + .provider {
⋮----
.logo {
.card {
⋮----
.header {
input[type]::placeholder {
⋮----
.section-header {

================
File: packages/core/src/lib/pages/verify-request.tsx
================
import type { Theme } from "../../types.js"
interface VerifyRequestPageProps {
  url: URL
  theme: Theme
}

================
File: packages/core/src/lib/utils/actions.ts
================
import type { AuthAction } from "../../types.js"
⋮----
export function isAuthAction(action: string): action is AuthAction

================
File: packages/core/src/lib/utils/assert.ts
================
import { defaultCookies } from "./cookie.js"
import {
  AuthError,
  DuplicateConditionalUI,
  ExperimentalFeatureNotEnabled,
  InvalidCallbackUrl,
  InvalidEndpoints,
  MissingAdapter,
  MissingAdapterMethods,
  MissingAuthorize,
  MissingSecret,
  MissingWebAuthnAutocomplete,
  UnsupportedStrategy,
  UntrustedHost,
} from "../../errors.js"
import type { RequestInternal, SemverString } from "../../types.js"
import type { WarningCode } from "../../warnings.js"
import { Adapter } from "../../adapters.js"
import type { AuthConfig } from "../../index.js"
type ConfigError =
  | InvalidCallbackUrl
  | InvalidEndpoints
  | MissingAdapter
  | MissingAdapterMethods
  | MissingAuthorize
  | MissingSecret
  | UnsupportedStrategy
⋮----
function isValidHttpUrl(url: string, baseUrl: string)
function isSemverString(version: string): version is SemverString
⋮----
/**
 * Verify that the user configured Auth.js correctly.
 * Good place to mention deprecations as well.
 *
 * This is invoked before the init method, so default values are not available yet.
 */
export function assertConfig(
  request: RequestInternal,
  options: AuthConfig
): ConfigError | WarningCode[]
⋮----
// Keep track of webauthn providers that use conditional UI
⋮----
// Validate simpleWebAuthnBrowserVersion
⋮----
// Make sure only one webauthn provider has "enableConditionalUI" set to true
⋮----
// Make sure at least one formField has "webauthn" in its autocomplete param
⋮----
// Log experimental warning

================
File: packages/core/src/lib/utils/callback-url.ts
================
import type { InternalOptions } from "../../types.js"
interface CreateCallbackUrlParams {
  options: InternalOptions
  /** Try reading value from request body (POST) then from query param (GET) */
  paramValue?: string
  cookieValue?: string
}
⋮----
/** Try reading value from request body (POST) then from query param (GET) */
⋮----
/**
 * Get callback URL based on query param / cookie + validation,
 * and add it to `req.options.callbackUrl`.
 */
export async function createCallbackUrl({
  options,
  paramValue,
  cookieValue,
}: CreateCallbackUrlParams)
⋮----
// If callbackUrl form field or query parameter is passed try to use it if allowed
⋮----
// If no callbackUrl specified, try using the value from the cookie if allowed
⋮----
// Save callback URL in a cookie so that it can be used for subsequent requests in signin/signout/callback flow

================
File: packages/core/src/lib/utils/cookie.ts
================
import type {
  CookieOption,
  CookiesOptions,
  LoggerInstance,
  RequestInternal,
} from "../../types.js"
// Uncomment to recalculate the estimated size
// of an empty session cookie
// import * as cookie from "../vendored/cookie.js"
// const { serialize } = cookie
// console.log(
//   "Cookie estimated to be ",
//   serialize(`__Secure.authjs.session-token.0`, "", {
//     expires: new Date(),
//     httpOnly: true,
//     maxAge: Number.MAX_SAFE_INTEGER,
//     path: "/",
//     sameSite: "strict",
//     secure: true,
//     domain: "example.com",
//   }).length,
//   " bytes"
// )
⋮----
// Based on commented out section above
⋮----
// REVIEW: Is there any way to defer two types of strings?
/** Stringified form of `JWT`. Extract the content with `jwt.decode` */
export type JWTString = string
export type SetCookieOptions = Partial<CookieOption["options"]> & {
  expires?: Date | string
  encode?: (val: unknown) => string
}
/**
 * If `options.session.strategy` is set to `jwt`, this is a stringified `JWT`.
 * In case of `strategy: "database"`, this is the `sessionToken` of the session in the database.
 */
export type SessionToken<T extends "jwt" | "database" = "jwt"> = T extends "jwt"
  ? JWTString
  : string
/**
 * Use secure cookies if the site uses HTTPS
 * This being conditional allows cookies to work non-HTTPS development URLs
 * Honour secure cookie option, which sets 'secure' and also adds '__Secure-'
 * prefix, but enable them by default if the site URL is HTTPS; but not for
 * non-HTTPS URLs like http://localhost which are used in development).
 * For more on prefixes see https://googlechrome.github.io/samples/cookie-prefixes/
 *
 * @TODO Review cookie settings (names, options)
 */
export function defaultCookies(useSecureCookies: boolean)
⋮----
// default cookie options
⋮----
// Default to __Host- for CSRF token for additional protection if using useSecureCookies
// NB: The `__Host-` prefix is stricter than the `__Secure-` prefix.
⋮----
maxAge: 60 * 15, // 15 minutes in seconds
⋮----
maxAge: 60 * 15, // 15 minutes in seconds
⋮----
maxAge: 60 * 15, // 15 minutes in seconds
⋮----
export interface Cookie extends CookieOption {
  value: string
}
type Chunks = Record<string, string>
export class SessionStore
⋮----
constructor(
    option: CookieOption,
    cookies: RequestInternal["cookies"],
    logger: LoggerInstance | Console
)
/**
   * The JWT Session or database Session ID
   * constructed from the cookie chunks.
   */
get value()
⋮----
// Sort the chunks by their keys before joining
⋮----
// Use the sorted keys to join the chunks in the correct order
⋮----
/** Given a cookie, return a list of cookies, chunked to fit the allowed cookie size. */
⋮----
/** Returns cleaned cookie chunks. */
⋮----
/**
   * Given a cookie value, return new cookies, chunked, to fit the allowed cookie size.
   * If the cookie has changed from chunked to unchunked or vice versa,
   * it deletes the old cookies as well.
   */
chunk(value: string, options: Partial<Cookie["options"]>): Cookie[]
⋮----
// Assume all cookies should be cleaned by default
⋮----
// Calculate new chunks
⋮----
// Update stored chunks / cookies
⋮----
/** Returns a list of cookies that should be cleaned. */
clean(): Cookie[]

================
File: packages/core/src/lib/utils/date.ts
================
/**
 * Takes a number in seconds and returns the date in the future.
 * Optionally takes a second date parameter. In that case
 * the date in the future will be calculated from that date instead of now.
 */
export function fromDate(time: number, date = Date.now())

================
File: packages/core/src/lib/utils/email.ts
================
import type { Theme } from "../../types.js"
/**
 * Email HTML body
 * Insert invisible space into domains from being turned into a hyperlink by email
 * clients like Outlook and Apple mail, as this is confusing because it seems
 * like they are supposed to click on it to sign in.
 *
 * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!
 */
export function html(params:
/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */
export function text(

================
File: packages/core/src/lib/utils/env.ts
================
import type { AuthAction } from "../../types.js"
import type { AuthConfig } from "../../index.js"
import { setLogger } from "./logger.js"
/**
 *  Set default env variables on the config object
 * @param suppressWarnings intended for framework authors.
 */
export function setEnvDefaults(
  envObject: any,
  config: AuthConfig,
  suppressBasePathWarning = false
)
⋮----
// Catching and swallowing potential URL parsing errors, we'll fall
// back to `/auth` below.
⋮----
export function createActionURL(
  action: AuthAction,
  protocol: string,
  headers: Headers,
  envObject: any,
  config: Pick<AuthConfig, "basePath" | "logger">
): URL
⋮----
// remove trailing slash
⋮----
// remove leading and trailing slash

================
File: packages/core/src/lib/utils/logger.ts
================
import { AuthError } from "../../errors.js"
import type { WarningCode } from "../../warnings.js"
import type { AuthConfig } from "../../index.js"
/**
 * Override any of the methods, and the rest will use the default logger.
 *
 * [Documentation](https://authjs.dev/reference/core#authconfig#logger)
 */
// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
export interface LoggerInstance extends Record<string, Function> {
  warn: (code: WarningCode) => void
  error: (error: Error) => void
  debug: (message: string, metadata?: unknown) => void
}
⋮----
error(error)
warn(code)
debug(message, metadata)
⋮----
/**
 * Override the built-in logger with user's implementation.
 * Any `undefined` level will use the default logger.
 */
export function setLogger(
  config: Pick<AuthConfig, "logger" | "debug">
): LoggerInstance
⋮----
// Turn off debug logging if `debug` isn't set to `true`

================
File: packages/core/src/lib/utils/merge.ts
================
function isObject(item: unknown): item is object
/** Deep merge two or more objects */
export function merge<T extends Record<string, unknown>>(
  target: T,
  ...sources: Array<Record<string, unknown> | undefined>
): T & Record<string, unknown>

================
File: packages/core/src/lib/utils/providers.ts
================
import { merge } from "./merge.js"
import type {
  AccountCallback,
  OAuthConfig,
  OAuthConfigInternal,
  OAuthEndpointType,
  OAuthUserConfig,
  ProfileCallback,
} from "../../providers/index.js"
import type { InternalProvider, Profile } from "../../types.js"
import { type AuthConfig } from "../../index.js"
import { customFetch } from "../symbols.js"
/**
 * Adds `signinUrl` and `callbackUrl` to each provider
 * and deep merge user-defined options.
 */
export default function parseProviders(params: {
  url: URL
  providerId?: string
  config: AuthConfig
}):
⋮----
// TODO: Support if properties have different types, e.g. authorization: string or object
⋮----
// We currently don't support redirect proxies for response_mode=form_post
⋮----
// @ts-expect-error Symbols don't get merged by the `merge` function
// so we need to do it manually.
⋮----
// TODO: Also add discovery here, if some endpoints/config are missing.
// We should return both a client and authorization server config.
function normalizeOAuth(
  c: OAuthConfig<any> | OAuthUserConfig<any>
): OAuthConfigInternal<any> | object
/**
 * Returns basic user profile from the userinfo response/`id_token` claims.
 * The returned `id` will become the `account.providerAccountId`. `user.id`
 * and `account.id` are auto-generated UUID's.
 *
 * The result if this function is used to create the `User` in the database.
 * @see https://authjs.dev/reference/core/adapters#user
 * @see https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * @see https://openid.net/specs/openid-connect-core-1_0.html#
 */
const defaultProfile: ProfileCallback<Profile> = (profile) =>
/**
 * Returns basic OAuth/OIDC values from the token response.
 * @see https://www.ietf.org/rfc/rfc6749.html#section-5.1
 * @see https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
 * @see https://authjs.dev/reference/core/adapters#account
 */
const defaultAccount: AccountCallback = (account) =>
function stripUndefined<T extends object>(o: T): T
function normalizeEndpoint(
  e?: OAuthConfig<any>[OAuthEndpointType],
  issuer?: string
): OAuthConfigInternal<any>[OAuthEndpointType]
⋮----
// If e.url is undefined, it's because the provider config
// assumes that we will use the issuer endpoint.
// The existence of either e.url or provider.issuer is checked in
// assert.ts. We fallback to "https://authjs.dev" to be able to pass around
// a valid URL even if the user only provided params.
// NOTE: This need to be checked when constructing the URL
// for the authorization, token and userinfo endpoints.
⋮----
export function isOIDCProvider(
  provider: InternalProvider<"oidc" | "oauth">
): provider is InternalProvider<"oidc">
export function isOAuth2Provider(
  provider: InternalProvider<"oidc" | "oauth">
): provider is InternalProvider<"oauth">
/** Either OAuth 2 or OIDC */
export function isOAuthProvider(
  provider: InternalProvider<any>
): provider is InternalProvider<"oauth" | "oidc">

================
File: packages/core/src/lib/utils/session.ts
================
import type { InternalOptions, User } from "../../types.js"
import type { SessionStore } from "./cookie.js"
/**
 * Returns the currently logged in user, if any.
 */
export async function getLoggedInUser(
  options: InternalOptions,
  sessionStore: SessionStore
): Promise<User | null>
⋮----
// Try to decode JWT

================
File: packages/core/src/lib/utils/web.ts
================
import { UnknownAction } from "../../errors.js"
import { setLogger } from "./logger.js"
import type {
  AuthAction,
  RequestInternal,
  ResponseInternal,
} from "../../types.js"
import { isAuthAction } from "./actions.js"
import type { AuthConfig } from "../../index.js"
⋮----
async function getBody(req: Request): Promise<Record<string, any> | undefined>
export async function toInternalRequest(
  req: Request,
  config: AuthConfig
): Promise<RequestInternal | undefined>
⋮----
// Defaults are usually set in the `init` function, but this is needed below
⋮----
export function toRequest(request: RequestInternal): Request
export function toResponse(res: ResponseInternal): Response
/** Web compatible method to create a hash, using SHA256 */
export async function createHash(message: string)
/** Web compatible method to create a random string of a given length */
export function randomString(size: number)
⋮----
const i2hex = (i: number)
const r = (a: string, i: number): string
⋮----
/** @internal Parse the action and provider id from a URL pathname. */
export function parseActionAndProviderId(
  pathname: string,
  base: string
):

================
File: packages/core/src/lib/utils/webauthn-client.js
================
//@ts-check
// Declare a SimpleWebAuthnBrowser variable as part of "window"
/** @typedef {"authenticate"} WebAuthnAuthenticate */
/** @typedef {"register"} WebAuthnRegister */
/** @typedef {WebAuthnRegister | WebAuthnAuthenticate} WebAuthnOptionsAction */
/**
 * @template {WebAuthnOptionsAction} T
 * @typedef {T extends WebAuthnAuthenticate ?
 *  { options: import("@simplewebauthn/types").PublicKeyCredentialRequestOptionsJSON; action: "authenticate" } :
 *  T extends WebAuthnRegister ?
 *  { options: import("@simplewebauthn/types").PublicKeyCredentialCreationOptionsJSON; action: "register" } :
 * never
 * } WebAuthnOptionsReturn
 */
/**
 * webauthnScript is the client-side script that handles the webauthn form
 *
 * @param {string} authURL is the URL of the auth API
 * @param {string} providerID is the ID of the webauthn provider
 */
export async function webauthnScript(authURL, providerID) {
/** @type {typeof import("@simplewebauthn/browser")} */
// @ts-ignore
⋮----
/**
   * Fetch webauthn options from the server
   *
   * @template {WebAuthnOptionsAction} T
   * @param {T | undefined} action action to fetch options for
   * @returns {Promise<WebAuthnOptionsReturn<T> | undefined>}
   */
async function fetchOptions(action) {
// Create the options URL with the action and query parameters
const url = new URL(`${authURL}/webauthn-options/${providerID}`)
if (action) url.searchParams.append("action", action)
const formFields = getFormFields()
formFields.forEach((field) => {
url.searchParams.append(field.name, field.value)
⋮----
const res = await fetch(url)
⋮----
console.error("Failed to fetch options", res)
⋮----
return res.json()
⋮----
/**
   * Get the webauthn form from the page
   *
   * @returns {HTMLFormElement}
   */
function getForm() {
⋮----
/** @type {HTMLFormElement | null} */
const form = document.querySelector(formID)
if (!form) throw new Error(`Form '${formID}' not found`)
⋮----
/**
   * Get formFields from the form
   *
   * @returns {HTMLInputElement[]}
   */
function getFormFields() {
const form = getForm()
/** @type {HTMLInputElement[]} */
const formFields = Array.from(
form.querySelectorAll("input[data-form-field]")
⋮----
/**
   * Passkey form submission handler.
   * Takes the input from the form and a few other parameters and submits it to the server.
   *
   * @param {WebAuthnOptionsAction} action action to submit
   * @param {unknown | undefined} data optional data to submit
   * @returns {Promise<void>}
   */
async function submitForm(action, data) {
⋮----
// If a POST request, create hidden fields in the form
// and submit it so the browser redirects on login
⋮----
const actionInput = document.createElement("input")
⋮----
form.appendChild(actionInput)
⋮----
const dataInput = document.createElement("input")
⋮----
dataInput.value = JSON.stringify(data)
form.appendChild(dataInput)
⋮----
return form.submit()
⋮----
/**
   * Executes the authentication flow by fetching options from the server,
   * starting the authentication, and submitting the response to the server.
   *
   * @param {WebAuthnOptionsReturn<WebAuthnAuthenticate>['options']} options
   * @param {boolean} autofill Whether or not to use the browser's autofill
   * @returns {Promise<void>}
   */
async function authenticationFlow(options, autofill) {
// Start authentication
const authResp = await WebAuthnBrowser.startAuthentication(
⋮----
// Submit authentication response to server
return await submitForm("authenticate", authResp)
⋮----
/**
   * @param {WebAuthnOptionsReturn<WebAuthnRegister>['options']} options
   */
async function registrationFlow(options) {
// Check if all required formFields are set
⋮----
throw new Error(`Missing required field: ${field.name}`)
⋮----
// Start registration
const regResp = await WebAuthnBrowser.startRegistration(options)
// Submit registration response to server
return await submitForm("register", regResp)
⋮----
/**
   * Attempts to authenticate the user when the page loads
   * using the browser's autofill popup.
   *
   * @returns {Promise<void>}
   */
async function autofillAuthentication() {
// if the browser can't handle autofill, don't try
if (!WebAuthnBrowser.browserSupportsWebAuthnAutofill()) return
const res = await fetchOptions("authenticate")
⋮----
console.error("Failed to fetch option for autofill authentication")
⋮----
await authenticationFlow(res.options, true)
⋮----
console.error(e)
⋮----
/**
   * Sets up the passkey form by overriding the form submission handler
   * so that it attempts to authenticate the user when the form is submitted.
   * If the user is not registered, it will attempt to register them instead.
   */
async function setupForm() {
⋮----
// If the browser can't do WebAuthn, hide the form
if (!WebAuthnBrowser.browserSupportsWebAuthn()) {
⋮----
form.addEventListener("submit", async (e) => {
e.preventDefault()
// Fetch options from the server without assuming that
// the user is registered
const res = await fetchOptions(undefined)
⋮----
console.error("Failed to fetch options for form submission")
⋮----
// Then execute the appropriate flow
⋮----
await authenticationFlow(res.options, false)
⋮----
await registrationFlow(res.options)
⋮----
// On page load, setup the form and attempt to authenticate the user.
setupForm()
autofillAuthentication()

================
File: packages/core/src/lib/utils/webauthn-utils.ts
================
import type { WebAuthnProviderType } from "../../providers/webauthn.js"
import type {
  Account,
  Authenticator,
  Awaited,
  InternalOptions,
  RequestInternal,
  ResponseInternal,
  User,
} from "../../types.js"
import type { Cookie } from "./cookie.js"
import {
  AdapterError,
  AuthError,
  InvalidProvider,
  MissingAdapter,
  WebAuthnVerificationError,
} from "../../errors.js"
import { webauthnChallenge } from "../actions/callback/oauth/checks.js"
import {
  type AuthenticationResponseJSON,
  type PublicKeyCredentialCreationOptionsJSON,
  type PublicKeyCredentialRequestOptionsJSON,
  type RegistrationResponseJSON,
} from "@simplewebauthn/types"
import type {
  Adapter,
  AdapterAccount,
  AdapterAuthenticator,
} from "../../adapters.js"
import type { GetUserInfo } from "../../providers/webauthn.js"
import { randomString } from "./web.js"
import type {
  VerifiedAuthenticationResponse,
  VerifiedRegistrationResponse,
} from "@simplewebauthn/server"
export type WebAuthnRegister = "register"
export type WebAuthnAuthenticate = "authenticate"
export type WebAuthnAction = WebAuthnRegister | WebAuthnAuthenticate
type InternalOptionsWebAuthn = InternalOptions<WebAuthnProviderType> & {
  adapter: Required<Adapter>
}
export type WebAuthnOptionsResponseBody =
  | {
      action: WebAuthnAuthenticate
      options: PublicKeyCredentialRequestOptionsJSON
    }
  | {
      action: WebAuthnRegister
      options: PublicKeyCredentialCreationOptionsJSON
    }
type WebAuthnOptionsResponse = ResponseInternal & {
  body: WebAuthnOptionsResponseBody
}
export type CredentialDeviceType = "singleDevice" | "multiDevice"
interface InternalAuthenticator {
  providerAccountId: string
  credentialID: Uint8Array
  credentialPublicKey: Uint8Array
  counter: number
  credentialDeviceType: CredentialDeviceType
  credentialBackedUp: boolean
  transports?: AuthenticatorTransport[]
}
type RGetUserInfo = Awaited<ReturnType<GetUserInfo>>
/**
 * Infers the WebAuthn options based on the provided parameters.
 *
 * @param action - The WebAuthn action to perform (optional).
 * @param loggedInUser - The logged-in user (optional).
 * @param userInfoResponse - The response containing user information (optional).
 *
 * @returns The WebAuthn action to perform, or null if no inference could be made.
 */
export function inferWebAuthnOptions(
  action: WebAuthnAction | undefined,
  loggedIn: boolean,
  userInfoResponse: RGetUserInfo
): WebAuthnAction | null
⋮----
/**
       * Always allow explicit authentication requests.
       */
⋮----
/**
       * Registration is only allowed if:
       * - The user is logged in, meaning the user wants to register a new authenticator.
       * - The user is not logged in and provided user info that does NOT exist, meaning the user wants to register a new account.
       */
⋮----
/**
       * When no explicit action is provided, we try to infer it based on the user info provided. These are the possible cases:
       * - Logged in users must always send an explit action, so we bail out in this case.
       * - Otherwise, if no user info is provided, the desired action is authentication without pre-defined authenticators.
       * - Otherwise, if the user info provided is of an existing user, the desired action is authentication with their pre-defined authenticators.
       * - Finally, if the user info provided is of a non-existing user, the desired action is registration.
       */
⋮----
// No decision could be made
⋮----
/**
 * Retrieves the registration response for WebAuthn options request.
 *
 * @param options - The internal options for WebAuthn.
 * @param request - The request object.
 * @param user - The user information.
 * @param resCookies - Optional cookies to be included in the response.
 * @returns A promise that resolves to the WebAuthnOptionsResponse.
 */
export async function getRegistrationResponse(
  options: InternalOptionsWebAuthn,
  request: RequestInternal,
  user: User & { email: string },
  resCookies?: Cookie[]
): Promise<WebAuthnOptionsResponse>
⋮----
// Get registration options
⋮----
// Get signed cookie
⋮----
/**
 * Retrieves the authentication response for WebAuthn options request.
 *
 * @param options - The internal options for WebAuthn.
 * @param request - The request object.
 * @param user - Optional user information.
 * @param resCookies - Optional array of cookies to be included in the response.
 * @returns A promise that resolves to a WebAuthnOptionsResponse object.
 */
export async function getAuthenticationResponse(
  options: InternalOptionsWebAuthn,
  request: RequestInternal,
  user?: User,
  resCookies?: Cookie[]
): Promise<WebAuthnOptionsResponse>
⋮----
// Get authentication options
⋮----
// Get signed cookie
⋮----
export async function verifyAuthenticate(
  options: InternalOptionsWebAuthn,
  request: RequestInternal,
  resCookies: Cookie[]
): Promise<
⋮----
// Get WebAuthn response from request body
⋮----
// Reset the ID so we smooth out implementation differences
⋮----
// Get authenticator from database
⋮----
// Get challenge from request cookies
⋮----
// Verify the response
⋮----
// Make sure the response was verified
⋮----
// Update authenticator counter
⋮----
// Get the account and user
⋮----
export async function verifyRegister(
  options: InternalOptions<WebAuthnProviderType>,
  request: RequestInternal,
  resCookies: Cookie[]
): Promise<
⋮----
// Get WebAuthn response from request body
⋮----
// Get challenge from request cookies
⋮----
// Verify the response
⋮----
// Make sure the response was verified
⋮----
// Build a new account
⋮----
// Build a new authenticator
⋮----
// Return created stuff
⋮----
/**
 * Generates WebAuthn authentication options.
 *
 * @param options - The internal options for WebAuthn.
 * @param request - The request object.
 * @param user - Optional user information.
 * @returns The authentication options.
 */
async function getAuthenticationOptions(
  options: InternalOptionsWebAuthn,
  request: RequestInternal,
  user?: User
)
⋮----
// Get the user's authenticators.
⋮----
// Return the authentication options.
⋮----
/**
 * Generates WebAuthn registration options.
 *
 * @param options - The internal options for WebAuthn.
 * @param request - The request object.
 * @param user - The user information.
 * @returns The registration options.
 */
async function getRegistrationOptions(
  options: InternalOptionsWebAuthn,
  request: RequestInternal,
  user: User & { email: string }
)
⋮----
// Get the user's authenticators.
⋮----
// Generate a random user ID for the credential.
// We can do this because we don't use this user ID to link the
// credential to the user. Instead, we store actual userID in the
// Authenticator object and fetch it via it's credential ID.
⋮----
// Return the registration options.
⋮----
export function assertInternalOptionsWebAuthn(
  options: InternalOptions
): InternalOptionsWebAuthn
⋮----
// Adapter is required for WebAuthn
⋮----
// Provider must be WebAuthn
⋮----
// Narrow the options type for typed usage later
⋮----
function fromAdapterAuthenticator(
  authenticator: AdapterAuthenticator
): InternalAuthenticator
export function fromBase64(base64: string): Uint8Array
export function toBase64(bytes: Uint8Array): string
export function transportsToString(
  transports: InternalAuthenticator["transports"]
)
export function stringToTransports(
  tstring: string | undefined | null
): InternalAuthenticator["transports"]

================
File: packages/core/src/lib/vendored/cookie.ts
================
/**
 * @source https://github.com/jshttp/cookie
 * @author blakeembrey
 * @license MIT
 */
/**
 * This is a workaround to support ESM-only environments, until `cookie` ships ESM builds.
 * @see https://github.com/jshttp/cookie/issues/211
 */
/**
 * RegExp to match cookie-name in RFC 6265 sec 4.1.1
 * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2
 * which has been replaced by the token definition in RFC 7230 appendix B.
 *
 * cookie-name       = token
 * token             = 1*tchar
 * tchar             = "!" / "#" / "$" / "%" / "&" / "'" /
 *                     "*" / "+" / "-" / "." / "^" / "_" /
 *                     "`" / "|" / "~" / DIGIT / ALPHA
 */
⋮----
/**
 * RegExp to match cookie-value in RFC 6265 sec 4.1.1
 *
 * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
 *                     ; US-ASCII characters excluding CTLs,
 *                     ; whitespace DQUOTE, comma, semicolon,
 *                     ; and backslash
 */
⋮----
/**
 * RegExp to match domain-value in RFC 6265 sec 4.1.1
 *
 * domain-value      = <subdomain>
 *                     ; defined in [RFC1034], Section 3.5, as
 *                     ; enhanced by [RFC1123], Section 2.1
 * <subdomain>       = <label> | <subdomain> "." <label>
 * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]
 *                     Labels must be 63 characters or less.
 *                     'let-dig' not 'letter' in the first char, per RFC1123
 * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>
 * <let-dig-hyp>     = <let-dig> | "-"
 * <let-dig>         = <letter> | <digit>
 * <letter>          = any one of the 52 alphabetic characters A through Z in
 *                     upper case and a through z in lower case
 * <digit>           = any one of the ten digits 0 through 9
 *
 * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173
 *
 * > (Note that a leading %x2E ("."), if present, is ignored even though that
 * character is not permitted, but a trailing %x2E ("."), if present, will
 * cause the user agent to ignore the attribute.)
 */
⋮----
/**
 * RegExp to match path-value in RFC 6265 sec 4.1.1
 *
 * path-value        = <any CHAR except CTLs or ";">
 * CHAR              = %x01-7F
 *                     ; defined in RFC 5234 appendix B.1
 */
⋮----
const NullObject = /* @__PURE__ */ (() => {
⋮----
/**
 * Parse options.
 */
export interface ParseOptions {
  /**
   * Specifies a function that will be used to decode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).
   * Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode
   * a previously-encoded cookie value into a JavaScript string.
   *
   * The default function is the global `decodeURIComponent`, wrapped in a `try..catch`. If an error
   * is thrown it will return the cookie's original value. If you provide your own encode/decode
   * scheme you must ensure errors are appropriately handled.
   *
   * @default decode
   */
  decode?: (str: string) => string | undefined
}
⋮----
/**
   * Specifies a function that will be used to decode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).
   * Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode
   * a previously-encoded cookie value into a JavaScript string.
   *
   * The default function is the global `decodeURIComponent`, wrapped in a `try..catch`. If an error
   * is thrown it will return the cookie's original value. If you provide your own encode/decode
   * scheme you must ensure errors are appropriately handled.
   *
   * @default decode
   */
⋮----
/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 */
export function parse(
  str: string,
  options?: ParseOptions
): Record<string, string | undefined>
⋮----
// RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.
⋮----
if (eqIdx === -1) break // No more cookie pairs.
⋮----
// backtrack on prior semicolon
⋮----
// only assign once
⋮----
function startIndex(str: string, index: number, max: number)
⋮----
if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index
⋮----
function endIndex(str: string, index: number, min: number)
⋮----
if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index + 1
⋮----
/**
 * Serialize options.
 */
export interface SerializeOptions {
  /**
   * Specifies a function that will be used to encode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).
   * Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode
   * a value into a string suited for a cookie's value, and should mirror `decode` when parsing.
   *
   * @default encodeURIComponent
   */
  encode?: (str: string) => string
  /**
   * Specifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.2).
   *
   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and
   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,
   * so if both are set, they should point to the same date and time.
   */
  maxAge?: number
  /**
   * Specifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.1).
   * When no expiration is set clients consider this a "non-persistent cookie" and delete it the current session is over.
   *
   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and
   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,
   * so if both are set, they should point to the same date and time.
   */
  expires?: Date
  /**
   * Specifies the value for the [`Domain` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.3).
   * When no domain is set clients consider the cookie to apply to the current domain only.
   */
  domain?: string
  /**
   * Specifies the value for the [`Path` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.4).
   * When no path is set, the path is considered the ["default path"](https://tools.ietf.org/html/rfc6265#section-5.1.4).
   */
  path?: string
  /**
   * Enables the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6).
   * When enabled, clients will not allow client-side JavaScript to see the cookie in `document.cookie`.
   */
  httpOnly?: boolean
  /**
   * Enables the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5).
   * When enabled, clients will only send the cookie back if the browser has a HTTPS connection.
   */
  secure?: boolean
  /**
   * Enables the [`Partitioned` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-cutler-httpbis-partitioned-cookies/).
   * When enabled, clients will only send the cookie back when the current domain _and_ top-level domain matches.
   *
   * This is an attribute that has not yet been fully standardized, and may change in the future.
   * This also means clients may ignore this attribute until they understand it. More information
   * about can be found in [the proposal](https://github.com/privacycg/CHIPS).
   */
  partitioned?: boolean
  /**
   * Specifies the value for the [`Priority` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).
   *
   * - `'low'` will set the `Priority` attribute to `Low`.
   * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.
   * - `'high'` will set the `Priority` attribute to `High`.
   *
   * More information about priority levels can be found in [the specification](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).
   */
  priority?: "low" | "medium" | "high"
  /**
   * Specifies the value for the [`SameSite` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).
   *
   * - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
   * - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.
   * - `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.
   * - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
   *
   * More information about enforcement levels can be found in [the specification](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).
   */
  sameSite?: boolean | "lax" | "strict" | "none"
}
⋮----
/**
   * Specifies a function that will be used to encode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).
   * Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode
   * a value into a string suited for a cookie's value, and should mirror `decode` when parsing.
   *
   * @default encodeURIComponent
   */
⋮----
/**
   * Specifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.2).
   *
   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and
   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,
   * so if both are set, they should point to the same date and time.
   */
⋮----
/**
   * Specifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.1).
   * When no expiration is set clients consider this a "non-persistent cookie" and delete it the current session is over.
   *
   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and
   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,
   * so if both are set, they should point to the same date and time.
   */
⋮----
/**
   * Specifies the value for the [`Domain` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.3).
   * When no domain is set clients consider the cookie to apply to the current domain only.
   */
⋮----
/**
   * Specifies the value for the [`Path` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.4).
   * When no path is set, the path is considered the ["default path"](https://tools.ietf.org/html/rfc6265#section-5.1.4).
   */
⋮----
/**
   * Enables the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6).
   * When enabled, clients will not allow client-side JavaScript to see the cookie in `document.cookie`.
   */
⋮----
/**
   * Enables the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5).
   * When enabled, clients will only send the cookie back if the browser has a HTTPS connection.
   */
⋮----
/**
   * Enables the [`Partitioned` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-cutler-httpbis-partitioned-cookies/).
   * When enabled, clients will only send the cookie back when the current domain _and_ top-level domain matches.
   *
   * This is an attribute that has not yet been fully standardized, and may change in the future.
   * This also means clients may ignore this attribute until they understand it. More information
   * about can be found in [the proposal](https://github.com/privacycg/CHIPS).
   */
⋮----
/**
   * Specifies the value for the [`Priority` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).
   *
   * - `'low'` will set the `Priority` attribute to `Low`.
   * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.
   * - `'high'` will set the `Priority` attribute to `High`.
   *
   * More information about priority levels can be found in [the specification](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).
   */
⋮----
/**
   * Specifies the value for the [`SameSite` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).
   *
   * - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
   * - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.
   * - `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.
   * - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.
   *
   * More information about enforcement levels can be found in [the specification](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).
   */
⋮----
/**
 * Serialize data into a cookie header.
 *
 * Serialize a name value pair into a cookie string suitable for
 * http headers. An optional options object specifies cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 */
export function serialize(
  name: string,
  val: string,
  options?: SerializeOptions
): string
/**
 * URL-decode string value. Optimized to skip native call when no %.
 */
function decode(str: string): string
/**
 * Determine if value is a Date.
 */
function isDate(val: any): val is Date

================
File: packages/core/src/lib/index.ts
================
import { UnknownAction } from "../errors.js"
import { SessionStore } from "./utils/cookie.js"
import { init } from "./init.js"
import renderPage from "./pages/index.js"
⋮----
import { validateCSRF } from "./actions/callback/oauth/csrf-token.js"
import type { RequestInternal, ResponseInternal } from "../types.js"
import type { AuthConfig } from "../index.js"
import { skipCSRFCheck } from "./symbols.js"
⋮----
/** @internal */
export async function AuthInternal(
  request: RequestInternal,
  authOptions: AuthConfig
): Promise<ResponseInternal>
⋮----
// Verified CSRF Token required for credentials providers only

================
File: packages/core/src/lib/init.ts
================
import { createCallbackUrl } from "./utils/callback-url.js"
⋮----
import { createCSRFToken } from "./actions/callback/oauth/csrf-token.js"
import { AdapterError, EventError } from "../errors.js"
import parseProviders from "./utils/providers.js"
import { setLogger, type LoggerInstance } from "./utils/logger.js"
import { merge } from "./utils/merge.js"
import type { InternalOptions, RequestInternal } from "../types.js"
import type { AuthConfig } from "../index.js"
interface InitParams {
  url: URL
  authOptions: AuthConfig
  providerId?: string
  action: InternalOptions["action"]
  /** Callback URL value extracted from the incoming request. */
  callbackUrl?: string
  /** CSRF token value extracted from the incoming request. From body if POST, from query if GET */
  csrfToken?: string
  /** Is the incoming request a POST request? */
  csrfDisabled: boolean
  isPost: boolean
  cookies: RequestInternal["cookies"]
}
⋮----
/** Callback URL value extracted from the incoming request. */
⋮----
/** CSRF token value extracted from the incoming request. From body if POST, from query if GET */
⋮----
/** Is the incoming request a POST request? */
⋮----
signIn()
redirect(
session(
jwt(
⋮----
/** Initialize all internal options and cookies. */
export async function init({
  authOptions: config,
  providerId,
  action,
  url,
  cookies: reqCookies,
  callbackUrl: reqCallbackUrl,
  csrfToken: reqCsrfToken,
  csrfDisabled,
  isPost,
}: InitParams): Promise<
⋮----
const maxAge = 30 * 24 * 60 * 60 // Sessions expire after 30 days of being idle by default
⋮----
// User provided options are overridden by other options,
// except for the options with special handling above
⋮----
// Custom options override defaults
⋮----
// These computed settings can have values in userOptions but we override them
// and are request-specific.
⋮----
// @ts-expect-errors
⋮----
// Session options
⋮----
// If no adapter specified, force use of JSON Web Tokens (stateless)
⋮----
// JWT options
⋮----
secret: config.secret!, // Asserted in assert.ts
maxAge: config.session?.maxAge ?? maxAge, // default to same as `session.maxAge`
⋮----
// Event messages
⋮----
// Callback functions
⋮----
// Init cookies
⋮----
type Method = (...args: any[]) => Promise<any>
/** Wraps an object of methods and adds error handling. */
function eventsErrorHandler(
  methods: Partial<InternalOptions["events"]>,
  logger: LoggerInstance
): Partial<InternalOptions["events"]>
/** Handles adapter induced errors. */
function adapterErrorHandler(
  adapter: AuthConfig["adapter"],
  logger: LoggerInstance
)

================
File: packages/core/src/lib/symbols.ts
================
/**
 * :::danger
 * This option is intended for framework authors.
 * :::
 *
 * Auth.js comes with built-in CSRF protection, but
 * if you are implementing a framework that is already protected against CSRF attacks, you can skip this check by
 * passing this value to {@link AuthConfig.skipCSRFCheck}.
 */
⋮----
/**
 * :::danger
 * This option is intended for framework authors.
 * :::
 *
 * Auth.js returns a web standard {@link Response} by default, but
 * if you are implementing a framework you might want to get access to the raw internal response
 * by passing this value to {@link AuthConfig.raw}.
 */
⋮----
/**
 * :::danger
 * This option allows you to override the default `fetch` function used by the provider
 * to make requests to the provider's OAuth endpoints directly.
 * Used incorrectly, it can have security implications.
 * :::
 *
 * It can be used to support corporate proxies, custom fetch libraries, cache discovery endpoints,
 * add mocks for testing, logging, set custom headers/params for non-spec compliant providers, etc.
 *
 * @example
 * ```ts
 * import { Auth, customFetch } from "@auth/core"
 * import GitHub from "@auth/core/providers/github"
 *
 * const dispatcher = new ProxyAgent("my.proxy.server")
 * function proxy(...args: Parameters<typeof fetch>): ReturnType<typeof fetch> {
 *   return undici(args[0], { ...(args[1] ?? {}), dispatcher })
 * }
 *
 * const response = await Auth(request, {
 *   providers: [GitHub({ [customFetch]: proxy })]
 * })
 * ```
 *
 * @see https://undici.nodejs.org/#/docs/api/ProxyAgent?id=example-basic-proxy-request-with-local-agent-dispatcher
 * @see https://authjs.dev/guides/corporate-proxy
 */
⋮----
/**
 * @internal
 *
 * Used to mark some providers for processing within the core library.
 *
 * **Do not use or you will be fired.**
 */

================
File: packages/core/src/providers/42-school.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#fff", display: "flex", justifyContent: "space-between", color: "#000", padding: 16}}>
 * <span>Built-in <b>42School</b> integration.</span>
 * <a href="https://api.intra.42.fr//">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/42-school.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/42-school
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface UserData {
  id: number
  email: string
  login: string
  first_name: string
  last_name: string
  usual_full_name: null | string
  usual_first_name: null | string
  url: string
  phone: "hidden" | string | null
  displayname: string
  image_url: string | null
  "staff?": boolean
  correction_point: number
  pool_month: string | null
  pool_year: string | null
  location: string | null
  wallet: number
  anonymize_date: string
  created_at: string
  updated_at: string | null
  alumni: boolean
  "is_launched?": boolean
}
export interface CursusUser {
  grade: string | null
  level: number
  skills: Array<{ id: number; name: string; level: number }>
  blackholed_at: string | null
  id: number
  begin_at: string | null
  end_at: string | null
  cursus_id: number
  has_coalition: boolean
  created_at: string
  updated_at: string | null
  user: UserData
  cursus: { id: number; created_at: string; name: string; slug: string }
}
export interface ProjectUser {
  id: number
  occurrence: number
  final_mark: number | null
  status: "in_progress" | "finished"
  "validated?": boolean | null
  current_team_id: number
  project: {
    id: number
    name: string
    slug: string
    parent_id: number | null
  }
  cursus_ids: number[]
  marked_at: string | null
  marked: boolean
  retriable_at: string | null
  created_at: string
  updated_at: string | null
}
export interface Achievement {
  id: number
  name: string
  description: string
  tier: "none" | "easy" | "medium" | "hard" | "challenge"
  kind: "scolarity" | "project" | "pedagogy" | "scolarity"
  visible: boolean
  image: string | null
  nbr_of_success: number | null
  users_url: string
}
export interface LanguagesUser {
  id: number
  language_id: number
  user_id: number
  position: number
  created_at: string
}
export interface TitlesUser {
  id: number
  user_id: number
  title_id: number
  selected: boolean
  created_at: string
  updated_at: string | null
}
export interface ExpertisesUser {
  id: number
  expertise_id: number
  interested: boolean
  value: number
  contact_me: boolean
  created_at: string
  user_id: number
}
export interface Campus {
  id: number
  name: string
  time_zone: string
  language: {
    id: number
    name: string
    identifier: string
    created_at: string
    updated_at: string | null
  }
  users_count: number
  vogsphere_id: number
  country: string
  address: string
  zip: string
  city: string
  website: string
  facebook: string
  twitter: string
  active: boolean
  email_extension: string
  default_hidden_phone: boolean
}
export interface CampusUser {
  id: number
  user_id: number
  campus_id: number
  is_primary: boolean
  created_at: string
  updated_at: string | null
}
export interface Image {
  link: string
  versions: {
    micro: string
    small: string
    medium: string
    large: string
  }
}
export interface FortyTwoProfile extends UserData, Record<string, any> {
  groups: Array<{ id: string; name: string }>
  cursus_users: CursusUser[]
  projects_users: ProjectUser[]
  languages_users: LanguagesUser[]
  achievements: Achievement[]
  titles: Array<{ id: string; name: string }>
  titles_users: TitlesUser[]
  partnerships: any[]
  patroned: any[]
  patroning: any[]
  expertises_users: ExpertisesUser[]
  roles: Array<{ id: string; name: string }>
  campus: Campus[]
  campus_users: CampusUser[]
  image: Image
  user: any | null
}
/**
 * Add 42School login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/42-school
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import FortyTwoSchool from "@auth/core/providers/42-school"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     FortyTwoSchool({
 *       clientId: FORTY_TWO_SCHOOL_CLIENT_ID,
 *       clientSecret: FORTY_TWO_SCHOOL_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [42School OAuth documentation](https://api.intra.42.fr/apidoc/guides/web_application_flow)
 *
 * ### Notes
 *
 *
 * :::note
 * 42 returns a field on `Account` called `created_at` which is a number. See the [docs](https://api.intra.42.fr/apidoc/guides/getting_started#make-basic-requests). Make sure to add this field to your database schema, in case if you are using an [Adapter](https://authjs.dev/reference/core/adapters).
 * :::
 * By default, Auth.js assumes that the 42School provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The 42School provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/42-school.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function FortyTwo<P extends FortyTwoProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/apple.ts
================
/**
 * <div class="provider" style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Apple</b> integration.
 * </span>
 * <a href="https://apple.com" style={{backgroundColor: "black", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/apple.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/apple
 */
import { conformInternal, customFetch } from "../lib/symbols.js"
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** The returned user profile from Apple when using the profile callback. */
export interface AppleProfile extends Record<string, any> {
  /**
   * The issuer registered claim identifies the principal that issued the identity token.
   * Since Apple generates the token, the value is `https://appleid.apple.com`.
   */
  iss: "https://appleid.apple.com"
  /**
   * The audience registered claim identifies the recipient for which the identity token is intended.
   * Since the token is meant for your application, the value is the `client_id` from your developer account.
   */
  aud: string
  /**
   * The issued at registered claim indicates the time at which Apple issued the identity token,
   * in terms of the number of seconds since Epoch, in UTC.
   */
  iat: number
  /**
   * The expiration time registered identifies the time on or after which the identity token expires,
   * in terms of number of seconds since Epoch, in UTC.
   * The value must be greater than the current date/time when verifying the token.
   */
  exp: number
  /**
   * The subject registered claim identifies the principal that's the subject of the identity token.
   * Since this token is meant for your application, the value is the unique identifier for the user.
   */
  sub: string
  /**
   * A String value used to associate a client session and the identity token.
   * This value mitigates replay attacks and is present only if passed during the authorization request.
   */
  nonce: string
  /**
   * A Boolean value that indicates whether the transaction is on a nonce-supported platform.
   * If you sent a nonce in the authorization request but don't see the nonce claim in the identity token,
   * check this claim to determine how to proceed.
   * If this claim returns true, you should treat nonce as mandatory and fail the transaction;
   * otherwise, you can proceed treating the nonce as options.
   */
  nonce_supported: boolean
  /**
   * A String value representing the user's email address.
   * The email address is either the user's real email address or the proxy address,
   * depending on their status private email relay service.
   */
  email: string
  /**
   * A String or Boolean value that indicates whether the service has verified the email.
   * The value of this claim is always true, because the servers only return verified email addresses.
   * The value can either be a String (`"true"`) or a Boolean (`true`).
   */
  email_verified: "true" | true
  /**
   * A String or Boolean value that indicates whether the email shared by the user is the proxy address.
   * The value can either be a String (`"true"` or `"false"`) or a Boolean (`true` or `false`).
   */
  is_private_email: boolean | "true" | "false"
  /**
   * An Integer value that indicates whether the user appears to be a real person.
   * Use the value of this claim to mitigate fraud. The possible values are: 0 (or Unsupported), 1 (or Unknown), 2 (or LikelyReal).
   * For more information, see [`ASUserDetectionStatus`](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus).
   * This claim is present only on iOS 14 and later, macOS 11 and later, watchOS 7 and later, tvOS 14 and later;
   * the claim isn't present or supported for web-based apps.
   */
  real_user_status: 0 | 1 | 2
  /**
   * A String value representing the transfer identifier used to migrate users to your team.
   * This claim is present only during the 60-day transfer period after an you transfer an app.
   * For more information, see [Bringing New Apps and Users into Your Team](https://developer.apple.com/documentation/sign_in_with_apple/bringing_new_apps_and_users_into_your_team).
   */
  transfer_sub: string
  at_hash: string
  auth_time: number
  user?: AppleNonConformUser
}
⋮----
/**
   * The issuer registered claim identifies the principal that issued the identity token.
   * Since Apple generates the token, the value is `https://appleid.apple.com`.
   */
⋮----
/**
   * The audience registered claim identifies the recipient for which the identity token is intended.
   * Since the token is meant for your application, the value is the `client_id` from your developer account.
   */
⋮----
/**
   * The issued at registered claim indicates the time at which Apple issued the identity token,
   * in terms of the number of seconds since Epoch, in UTC.
   */
⋮----
/**
   * The expiration time registered identifies the time on or after which the identity token expires,
   * in terms of number of seconds since Epoch, in UTC.
   * The value must be greater than the current date/time when verifying the token.
   */
⋮----
/**
   * The subject registered claim identifies the principal that's the subject of the identity token.
   * Since this token is meant for your application, the value is the unique identifier for the user.
   */
⋮----
/**
   * A String value used to associate a client session and the identity token.
   * This value mitigates replay attacks and is present only if passed during the authorization request.
   */
⋮----
/**
   * A Boolean value that indicates whether the transaction is on a nonce-supported platform.
   * If you sent a nonce in the authorization request but don't see the nonce claim in the identity token,
   * check this claim to determine how to proceed.
   * If this claim returns true, you should treat nonce as mandatory and fail the transaction;
   * otherwise, you can proceed treating the nonce as options.
   */
⋮----
/**
   * A String value representing the user's email address.
   * The email address is either the user's real email address or the proxy address,
   * depending on their status private email relay service.
   */
⋮----
/**
   * A String or Boolean value that indicates whether the service has verified the email.
   * The value of this claim is always true, because the servers only return verified email addresses.
   * The value can either be a String (`"true"`) or a Boolean (`true`).
   */
⋮----
/**
   * A String or Boolean value that indicates whether the email shared by the user is the proxy address.
   * The value can either be a String (`"true"` or `"false"`) or a Boolean (`true` or `false`).
   */
⋮----
/**
   * An Integer value that indicates whether the user appears to be a real person.
   * Use the value of this claim to mitigate fraud. The possible values are: 0 (or Unsupported), 1 (or Unknown), 2 (or LikelyReal).
   * For more information, see [`ASUserDetectionStatus`](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus).
   * This claim is present only on iOS 14 and later, macOS 11 and later, watchOS 7 and later, tvOS 14 and later;
   * the claim isn't present or supported for web-based apps.
   */
⋮----
/**
   * A String value representing the transfer identifier used to migrate users to your team.
   * This claim is present only during the 60-day transfer period after an you transfer an app.
   * For more information, see [Bringing New Apps and Users into Your Team](https://developer.apple.com/documentation/sign_in_with_apple/bringing_new_apps_and_users_into_your_team).
   */
⋮----
/**
 * This is the shape of the `user` query parameter that Apple sends the first
 * time the user consents to the app.
 * @see https://developer.apple.com/documentation/sign_in_with_apple/request_an_authorization_to_the_sign_in_with_apple_server#4066168
 */
export interface AppleNonConformUser {
  name: {
    firstName: string
    lastName: string
  }
  email: string
}
/**
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/auth/callback/apple
 * ```
 *
 * #### Configuration
 * ```ts
 * import Apple from "@auth/core/providers/apple"
 * ...
 * providers: [
 *   Apple({
 *     clientId: env.AUTH_APPLE_ID,
 *     clientSecret: env.AUTH_APPLE_SECRET,
 *   })
 * ]
 * ...
 * ```
 *
 * ### Resources
 *
 * - Sign in with Apple [Overview](https://developer.apple.com/sign-in-with-apple/get-started/)
 * - Sign in with Apple [REST API](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api)
 * - [How to retrieve](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple#3383773) the user's information from Apple ID servers
 * - [Learn more about OAuth](https://authjs.dev/concepts/oauth)
 * - [Creating the Client Secret](https://developer.apple.com/documentation/accountorganizationaldatasharing/creating-a-client-secret)
 *
 * ### Notes
 *
 * - Apple does not support localhost/http URLs. You can only use a live URL with HTTPS.
 * - Apple requires the client secret to be a JWT. We provide a CLI command `npx auth add apple`, to help you generate one.
 *   This will prompt you for the necessary information and at the end it will add the `AUTH_APPLE_ID` and `AUTH_APPLE_SECRET` to your `.env` file.
 * - Apple provides minimal user information. It returns the user's email and name, but only the first time the user consents to the app.
 * - The Apple provider does not support setting up the same client for multiple deployments (like [preview deployments](https://authjs.dev/getting-started/deployment#securing-a-preview-deployment)).
 * - The Apple provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/apple.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Apple(
  config: OAuthUserConfig<AppleProfile>
): OAuthConfig<AppleProfile>
⋮----
scope: "name email", // https://developer.apple.com/documentation/sign_in_with_apple/clientconfigi/3230955-scope
⋮----
// We need to parse the special `user` parameter the first time the user consents to the app.
// It adds the `name` object to the `profile`, with `firstName` and `lastName` fields.
⋮----
profile(profile)
// Apple does not provide a userinfo endpoint.

================
File: packages/core/src/providers/asgardeo.ts
================
/**
 * <div class="provider" style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Asgardeo</b> integration.
 * </span>
 * <a href="https://wso2.com/asgardeo/" style={{backgroundColor: "#ECEFF1", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/asgardeo.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/asgardeo
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** The returned user profile from Asgardeo when using the profile callback. */
export interface AsgardeoProfile extends Record<string, any> {
  /**
   * The user Asgardeo account ID
   */
  sub: string
  /**
   * The user name
   */
  given_name: string
  /**
   * The user email
   */
  email: string
  /**
   * The user profile picture
   */
  picture: string
}
⋮----
/**
   * The user Asgardeo account ID
   */
⋮----
/**
   * The user name
   */
⋮----
/**
   * The user email
   */
⋮----
/**
   * The user profile picture
   */
⋮----
/**
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/asgardeo
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Asgardeo from "@auth/core/providers/asgardeo";
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Asgardeo({
 *       clientId: ASGARDEO_CLIENT_ID,
 *       clientSecret: ASGARDEO_CLIENT_SECRET,
 *       issuer: ASGARDEO_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Configuring Asgardeo
 *
 * Follow these steps:
 *
 * 1. Log into the [Asgardeo console](https://console.asgardeo.io)
 * 2. Next, go to "Application" tab (more info [here](https://wso2.com/asgardeo/docs/guides/applications/register-oidc-web-app/))
 * 3. Register a standard based, Open ID connect, application
 * 4. Add the **callback URLs**: `http://localhost:3000/api/auth/callback/asgardeo` (development) and `https://{YOUR_DOMAIN}.com/api/auth/callback/asgardeo` (production)
 * 5. After registering the application, go to "Protocol" tab.
 * 6. Check `code` as the grant type.
 * 7. Add "Authorized redirect URLs" & "Allowed origins fields"
 * 8. Make Email, First Name, Photo URL user attributes mandatory from the console.
 *
 * Then, create a `.env` file in the project root add the following entries:
 *
 * ```
 * ASGARDEO_CLIENT_ID="Copy client ID from protocol tab here"
 * ASGARDEO_CLIENT_SECRET="Copy client from protocol tab here"
 * ASGARDEO_ISSUER="Copy the issuer url from the info tab here"
 * ```
 *
 * ### Resources
 *
 * - [Asgardeo - Authentication Guide](https://wso2.com/asgardeo/docs/guides/authentication)
 * - [Learn more about OAuth](https://authjs.dev/concepts/oauth)
 *
 * ### Notes
 *
 * The Asgardeo provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/asgardeo.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::info
 * By default, Auth.js assumes that the Asgardeo provider is based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) spec
 * :::
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Asgardeo(
  config: OIDCUserConfig<AsgardeoProfile>
): OIDCConfig<AsgardeoProfile>

================
File: packages/core/src/providers/atlassian.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Atlassian</b> integration.
 * </span>
 * <a href="https://www.atlassian.com/" style={{backgroundColor: "black", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/atlassian.svg" width="24" style={{ marginTop: "-3px"}} />
 * </a>
 * </div>
 *
 * @module providers/atlassian
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** The returned user profile from Atlassian when using the profile callback. */
export interface AtlassianProfile extends Record<string, any> {
  /**
   * The user's atlassian account ID
   */
  account_id: string
  /**
   * The user name
   */
  name: string
  /**
   * The user's email
   */
  email: string
  /**
   * The user's profile picture
   */
  picture: string
}
⋮----
/**
   * The user's atlassian account ID
   */
⋮----
/**
   * The user name
   */
⋮----
/**
   * The user's email
   */
⋮----
/**
   * The user's profile picture
   */
⋮----
/**
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/atlassian
 * ```
 *
 * #### Configuration
 *
 * Import the provider and configure it in your **Auth.js** initialization file:
 *
 * ```ts
 * import Atlassian from "@auth/core/providers/atlassian"
 * ...
 * providers: [
 *  Atlassian({
 *    clientId: env.AUTH_ATLASSIAN_ID,
 *    clientSecret: env.AUTH_ATLASSIAN_SECRET,
 *  }),
 * ]
 * ...
 * ```
 *
 * ### Configuring Atlassian
 *
 * Follow these steps:
 *
 * 1. From any page on [developer.atlassian.com](https://developer.atlassian.com), select your profile icon in the top-right corner, and from the dropdown, select **Developer console**.
 * 2. Select your app from the list (or create one if you don't already have one)
 * 3. Select **Authorization** in the left menu
 * 4. Next to OAuth 2.0 (3LO), select **Configure** (or **Add** for newly created app)
 * 5. Enter the **Callback URL**: `https://{YOUR_DOMAIN}/api/auth/callback/atlassian`
 * 6. Click Save changes
 * 7. Select **Settings** in the left menu
 * 8. Access and copy your app's **Client ID** and **Secret**
 *
 * Then, create a `.env` file in the project root add the following entries:
 *
 * ```
 * AUTH_ATLASSIAN_ID=<Client ID copied in step 8>
 * AUTH_ATLASSIAN_SECRET=<Secret copied in step 8>
 * ```
 *
 * ### Resources
 *
 * - [Atlassian docs](https://developer.atlassian.com/cloud/jira/software/oauth-2-3lo-apps/)
 *
 * ### Notes
 *
 * The Atlassian provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/atlassian.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/providers/custom-provider#override-default-options).
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Atlassian(
  options: OAuthUserConfig<AtlassianProfile>
): OAuthConfig<AtlassianProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/auth0.ts
================
/**
 * <div class="provider" style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Auth0</b> integration.
 * </span>
 * <a href="https://auth0.com" style={{backgroundColor: "black", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/auth0.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/auth0
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** The returned user profile from Auth0 when using the profile callback. [Reference](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure). */
export interface Auth0Profile extends Record<string, any> {
  /** The user's unique identifier. */
  sub: string
  /** Custom fields that store info about a user that influences the user's access, such as support plan, security roles (if not using the Authorization Core feature set), or access control groups. To learn more, read Metadata Overview. */
  app_metadata: object
  /** Indicates whether the user has been blocked. Importing enables subscribers to ensure that users remain blocked when migrating to Auth0. */
  blocked: boolean
  /** Timestamp indicating when the user profile was first created. */
  created_at: Date
  /** (unique) The user's email address. */
  email: string
  /** Indicates whether the user has verified their email address. */
  email_verified: boolean
  /** The user's family name. */
  family_name: string
  /** The user's given name. */
  given_name: string
  /** Custom fields that store info about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences. To learn more, read Metadata Overview. */
  user_metadata: object
  /** (unique) The user's username. */
  username: string
  /** Contains info retrieved from the identity provider with which the user originally authenticates. Users may also link their profile to multiple identity providers; those identities will then also appear in this array. The contents of an individual identity provider object varies by provider. In some cases, it will also include an API Access Token to be used with the provider. */
  identities: Array<{
    /** Name of the Auth0 connection used to authenticate the user. */
    connection: string
    /** Indicates whether the connection is a social one. */
    isSocial: boolean
    /** Name of the entity that is authenticating the user, such as Facebook, Google, SAML, or your own provider. */
    provider: string
    /** User's unique identifier for this connection/provider. */
    user_id: string
    /** User info associated with the connection. When profiles are linked, it is populated with the associated user info for secondary accounts. */
    profileData: object
    [key: string]: any
  }>
  /** IP address associated with the user's last login. */
  last_ip: string
  /** Timestamp indicating when the user last logged in. If a user is blocked and logs in, the blocked session updates last_login. If you are using this property from inside a Rule using the user< object, its value will be associated with the login that triggered the rule; this is because rules execute after login. */
  last_login: Date
  /** Timestamp indicating the last time the user's password was reset/changed. At user creation, this field does not exist. This property is only available for Database connections. */
  last_password_reset: Date
  /** Number of times the user has logged in. If a user is blocked and logs in, the blocked session is counted in logins_count. */
  logins_count: number
  /** List of multi-factor providers with which the user is enrolled. */
  multifactor: string
  /** The user's full name. */
  name: string
  /** The user's nickname. */
  nickname: string
  /** The user's phone number. Only valid for users with SMS connections. */
  phone_number: string
  /** Indicates whether the user has been verified their phone number. Only valid for users with SMS connections. */
  phone_verified: boolean
  /** URL pointing to the user's profile picture. */
  picture: string
  /** Timestamp indicating when the user's profile was last updated/modified. Changes to last_login are considered updates, so most of the time, updated_at will match last_login. */
  updated_at: Date
  /** (unique) The user's identifier. Importing allows user records to be synchronized across multiple systems without using mapping tables. */
  user_id: string
}
⋮----
/** The user's unique identifier. */
⋮----
/** Custom fields that store info about a user that influences the user's access, such as support plan, security roles (if not using the Authorization Core feature set), or access control groups. To learn more, read Metadata Overview. */
⋮----
/** Indicates whether the user has been blocked. Importing enables subscribers to ensure that users remain blocked when migrating to Auth0. */
⋮----
/** Timestamp indicating when the user profile was first created. */
⋮----
/** (unique) The user's email address. */
⋮----
/** Indicates whether the user has verified their email address. */
⋮----
/** The user's family name. */
⋮----
/** The user's given name. */
⋮----
/** Custom fields that store info about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences. To learn more, read Metadata Overview. */
⋮----
/** (unique) The user's username. */
⋮----
/** Contains info retrieved from the identity provider with which the user originally authenticates. Users may also link their profile to multiple identity providers; those identities will then also appear in this array. The contents of an individual identity provider object varies by provider. In some cases, it will also include an API Access Token to be used with the provider. */
⋮----
/** Name of the Auth0 connection used to authenticate the user. */
⋮----
/** Indicates whether the connection is a social one. */
⋮----
/** Name of the entity that is authenticating the user, such as Facebook, Google, SAML, or your own provider. */
⋮----
/** User's unique identifier for this connection/provider. */
⋮----
/** User info associated with the connection. When profiles are linked, it is populated with the associated user info for secondary accounts. */
⋮----
/** IP address associated with the user's last login. */
⋮----
/** Timestamp indicating when the user last logged in. If a user is blocked and logs in, the blocked session updates last_login. If you are using this property from inside a Rule using the user< object, its value will be associated with the login that triggered the rule; this is because rules execute after login. */
⋮----
/** Timestamp indicating the last time the user's password was reset/changed. At user creation, this field does not exist. This property is only available for Database connections. */
⋮----
/** Number of times the user has logged in. If a user is blocked and logs in, the blocked session is counted in logins_count. */
⋮----
/** List of multi-factor providers with which the user is enrolled. */
⋮----
/** The user's full name. */
⋮----
/** The user's nickname. */
⋮----
/** The user's phone number. Only valid for users with SMS connections. */
⋮----
/** Indicates whether the user has been verified their phone number. Only valid for users with SMS connections. */
⋮----
/** URL pointing to the user's profile picture. */
⋮----
/** Timestamp indicating when the user's profile was last updated/modified. Changes to last_login are considered updates, so most of the time, updated_at will match last_login. */
⋮----
/** (unique) The user's identifier. Importing allows user records to be synchronized across multiple systems without using mapping tables. */
⋮----
/**
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/auth0
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Auth0 from "@auth/core/providers/auth0"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Auth0({
 *       clientId: AUTH0_ID,
 *       clientSecret: AUTH0_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Auth0 docs](https://auth0.com/docs/authenticate)
 *
 * ### Notes
 *
 * The Auth0 provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/auth0.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Auth0(
  config: OIDCUserConfig<Auth0Profile>
): OIDCConfig<Auth0Profile>

================
File: packages/core/src/providers/authentik.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#fd4b2d", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Authentik</b> integration.</span>
 * <a href="https://goauthentik.io/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/authentik.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/authentik
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface AuthentikProfile extends Record<string, any> {
  iss: string
  sub: string
  aud: string
  exp: number
  iat: number
  auth_time: number
  acr: string
  c_hash: string
  nonce: string
  at_hash: string
  email: string
  email_verified: boolean
  name: string
  given_name: string
  family_name: string
  preferred_username: string
  nickname: string
  groups: string[]
}
/**
 * Add Authentik login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/authentik
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Authentik from "@auth/core/providers/authentik"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Authentik({
 *       clientId: AUTHENTIK_CLIENT_ID,
 *       clientSecret: AUTHENTIK_CLIENT_SECRET,
 *       issuer: AUTHENTIK_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * :::note
 * issuer should include the slug without a trailing slash – e.g., https://my-authentik-domain.com/application/o/My_Slug
 * :::
 *
 * ### Resources
 *
 *  - [Authentik OAuth documentation](https://goauthentik.io/docs/providers/oauth2)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Authentik provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Authentik provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/authentik.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Authentik<P extends AuthentikProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/azure-ad-b2c.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#0072c6", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Azure AD B2C</b> integration.</span>
 * <a href="https://learn.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-tenant">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/azure.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/azure-ad-b2c
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** @see [Claims](https://learn.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview#claims) */
export interface AzureADB2CProfile {
  exp: number
  nbf: number
  ver: string
  iss: string
  sub: string
  aud: string
  iat: number
  auth_time: number
  oid: string
  country: string
  name: string
  postalCode: string
  emails: string[]
  tfp: string
  preferred_username: string
}
/**
 * Add Azure AD B2C login to your page.
 *
 *
 * ## Configuration
 *
 * ### Basic
 *
 * Basic configuration sets up Azure AD B2C to return an ID Token. This should be done as a prerequisite prior to running through the Advanced configuration.
 *
 * 1. [Azure AD B2C Tenant](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-tenant)
 * 2. [App Registration](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-register-applications)
 * 3. [User Flow](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-user-flows)
 *
 * For the step "User attributes and token claims" set the following:
 *
 * - Collect attribute:
 *   - Email Address
 *   - Display Name
 *   - Given Name
 *   - Surname
 * - Return claim:
 *   - Email Addresses
 *   - Display Name
 *   - Given Name
 *   - Surname
 *   - Identity Provider
 *   - Identity Provider Access Token
 *   - User's Object ID
 *
 * @example
 *
 * ```ts
 * import { Auth } from "@auth/core"
 * import AzureADB2C from "@auth/core/providers/azure-ad-b2c"
 *
 * const request = new Request("https://example.com")
 * const response = await AuthHandler(request, {
 *   // optionally, you can pass `tenantId` and `primaryUserFlow` instead of `issuer`
 *   providers: [AzureADB2C({ clientId: "", clientSecret: "", issuer: "" })],
 * })
 * ```
 *
 * ---
 *
 * ### Resources
 *
 * - [Azure Active Directory B2C documentation](https://learn.microsoft.com/en-us/azure/active-directory-b2c)
 *
 * ---
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Azure AD B2C provider is
 * based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Azure AD B2C provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/azure-ad-b2c.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function AzureADB2C(
  options: OIDCUserConfig<AzureADB2CProfile>
): OIDCConfig<AzureADB2CProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/azure-ad.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#0072c6", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Azure AD</b> integration.</span>
 * <a href="https://learn.microsoft.com/en-us/azure/active-directory">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/azure-ad.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/azure-ad
 */
import MicrosoftEntraID, {
  MicrosoftEntraIDProfile,
} from "./microsoft-entra-id.js"
export type AzureADProfile = MicrosoftEntraIDProfile
/**
 * @deprecated
 * Azure Active Directory has been renamed to [Microsoft Entra ID](/getting-started/providers/microsoft-entra-id).
 * Import this provider from the `providers/microsoft-entra-id` submodule instead of `providers/azure-ad`.
 */
export default function AzureAD(
  config: Parameters<typeof MicrosoftEntraID>[0]
): ReturnType<typeof MicrosoftEntraID>

================
File: packages/core/src/providers/azure-devops.ts
================
import { OAuthConfig, OAuthUserConfig } from "./index.js"
/** @see [Azure DevOps Services REST API 7.0 · Profiles · Get](https://learn.microsoft.com/en-us/rest/api/azure/devops/profile/profiles/get?view=azure-devops-rest-7.0&tabs=HTTP#examples) */
export interface AzureDevOpsProfile extends Record<string, any> {
  id: string
  displayName: string
  emailAddress: string
  coreAttributes: { Avatar: { value: { value: string } } }
}
/**
 *
 * @deprecated
 * While still available, Microsoft is [no longer supporting](https://learn.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops#available-oauth-models) Azure DevOps OAuth and recommends using [Microsoft Entra ID](/getting-started/providers/microsoft-entra-id) instead.
 *
 * ## Documentation
 *
 * [Microsoft Docs](https://docs.microsoft.com/en-us) · [Azure DevOps](https://docs.microsoft.com/en-us/azure/devops/) · [Authorize access to REST APIs with OAuth 2.0](https://docs.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops])
 *
 * ## Configuration
 *
 * ### Register application
 *
 * :::tip
 * [`https://app.vsaex.visualstudio.com/app/register`](https://app.vsaex.visualstudio.com/app/register)
 * :::
 *
 * Provide the required details:
 *
 * - Company name
 * - Application name
 * - Application website
 * - Authorization callback URL
 *   - `https://example.com/api/auth/callback/azure-devops` for production
 *   - `https://localhost/api/auth/callback/azure-devops` for development
 * - Authorized scopes
 *   - Required minimum is `User profile (read)`
 *
 * Click ‘Create Application’
 *
 * :::warning
 * You are required to use HTTPS even for the localhost
 * :::
 *
 * :::warning
 * You will have to delete and create a new application to change the scopes later
 * :::
 *
 * The following data is relevant for the next step:
 *
 * - App ID
 * - Client Secret (after clicking the ‘Show’ button, ignore App Secret entry above it)
 * - Authorized Scopes
 *
 * ### Set up the environment variables
 *
 * In `.env.local` create the following entries:
 *
 * ```
 * AZURE_DEVOPS_APP_ID=<copy App ID value here>
 * AZURE_DEVOPS_CLIENT_SECRET=<copy generated client secret value here>
 * AZURE_DEVOPS_SCOPE=<copy space separated Authorized Scopes list here>
 * ```
 *
 * ## Example
 *
 * ```ts
 * import AzureDevOps from "@auth/core/providers/azure-devops"
 * ...
 * providers: [
 *   AzureDevOps({
 *     clientId: process.env.AZURE_DEVOPS_APP_ID,
 *     clientSecret: process.env.AZURE_DEVOPS_CLIENT_SECRET,
 *     scope: process.env.AZURE_DEVOPS_SCOPE,
 *   }),
 * ]
 * ...
 * ```
 *
 * ### Refresh token rotation
 *
 * Use the [main guide](/guides/basics/refresh-token-rotation) as your starting point with the following considerations:
 *
 * ```ts
 * async jwt({ token, user, account }) {
 *   ...
 *   // The token has an absolute expiration time
 *   const accessTokenExpires = account.expires_at * 1000
 *   ...
 * }
 *
 * async function refreshAccessToken(token) {
 *   ...
 *   const response = await fetch(
 *     "https://app.vssps.visualstudio.com/oauth2/token",
 *     {
 *       headers: { "Content-Type": "application/x-www-form-urlencoded" },
 *       method: "POST",
 *       body: new URLSearchParams({
 *         client_assertion_type:
 *           "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
 *         client_assertion: process.env.AZURE_DEVOPS_CLIENT_SECRET,
 *         grant_type: "refresh_token",
 *         assertion: token.refreshToken,
 *         redirect_uri:
 *           process.env.NEXTAUTH_URL + "/api/auth/callback/azure-devops",
 *       }),
 *     }
 *   )
 *   ...
 *   // The refreshed token comes with a relative expiration time
 *   const accessTokenExpires = Date.now() + newToken.expires_in * 1000
 *   ...
 * }
 * ```
 */
export default function AzureDevOpsProvider<P extends AzureDevOpsProfile>(
  options: OAuthUserConfig<P> & {
    /**
     * https://docs.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops#scopes
     * @default vso.profile
     */
    scope?: string
  }
): OAuthConfig<P>
⋮----
/**
     * https://docs.microsoft.com/en-us/azure/devops/integrate/get-started/authentication/oauth?view=azure-devops#scopes
     * @default vso.profile
     */
⋮----
async request(context)
⋮----
profile(profile)

================
File: packages/core/src/providers/bankid-no.ts
================
/**
 * <div class="provider" style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>BankID Norway</b> integration.
 * </span>
 * <a href="https://bankid.no" style={{backgroundColor: "black", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/bankid-no.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/bankid-no
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/**
 * @see [Core conepts - ID Token](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/core-concepts/id-token)
 * @see [userinfo](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/userinfo)
 */
export interface BankIDNorwayProfile {
  exp: number
  iat: number
  /** Epoc time */
  auth_time: number
  jti: string
  iss: string
  /** Always client_id */
  aud: string
  sub: string
  typ: "ID"
  /** Equals client_id */
  azp: string
  session_state: string
  at_hash: string
  name: string
  given_name: string
  family_name: string
  birthdate: string
  updated_at: number
  /**
   * Uniform Resource Name for [IDP option](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/core-concepts/identity-providers) being used,
   * including Level of Assurance (LoA).
   * @example
   * ```
   * urn:bankid:bid;LOA=4
   * ```
   */
  acr: string
  sid: string
  /**
   * Name of [IDP option](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/core-concepts/identity-providers) being used to authenticate the end-user.
   * If the end-user is subject to authentication step-up,
   * note that this value may differ from any `amr` value specified
   * in the `login_hint` parameter of the [authorize](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/authorize) endpoint.
   */
  amr: "BID" | "BIM" | "BIS"
  /** Personal Identifier (PID) / Serial Number) from associated BankID certificate. */
  bankid_altsub: string
  /**
   * In case of BID or BIM, the issuer of the end user certificate is returned.
   * @example
   * ```
   * CN=BankID Bankenes ID-tjeneste Bank CA 2,
   * OU=988477052,
   * O=Bankenes ID-tjeneste AS,*
   * C=NO;OrginatorId=9775;OriginatorName=Gjensidige Bank RA 1
   * ```
   */
  originator: string
  additionalCertInfo: {
    certValidFrom: number
    serialNumber: string
    keyAlgorithm: string
    keySize: string
    policyOid: string
    certQualified: boolean
    certValidTo: number
    versionNumber: string
    subjectName: string
  }
  /** Currently used as an input parameter for the [securityData](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/securitydata) endpoint of the [Fraud Data](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/advanced-topics/fraud-data) service */
  tid: string
  /** Only returned from the `userinfo_endpoint` */
  email?: string
  /**
   * [Norwegian National Identity Number (fødselsnummer)](https://www.skatteetaten.no/en/person/foreign/norwegian-identification-number/national-identity-number). It can be an alternative to `sub`.
   * Requires `nnin_altsub` scope at the [authorize](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/authorize) endpoint.
   * @example
   * ```
   * 181266*****
   * ```
   */
  nnin_altsub?: string
}
⋮----
/** Epoc time */
⋮----
/** Always client_id */
⋮----
/** Equals client_id */
⋮----
/**
   * Uniform Resource Name for [IDP option](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/core-concepts/identity-providers) being used,
   * including Level of Assurance (LoA).
   * @example
   * ```
   * urn:bankid:bid;LOA=4
   * ```
   */
⋮----
/**
   * Name of [IDP option](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/core-concepts/identity-providers) being used to authenticate the end-user.
   * If the end-user is subject to authentication step-up,
   * note that this value may differ from any `amr` value specified
   * in the `login_hint` parameter of the [authorize](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/authorize) endpoint.
   */
⋮----
/** Personal Identifier (PID) / Serial Number) from associated BankID certificate. */
⋮----
/**
   * In case of BID or BIM, the issuer of the end user certificate is returned.
   * @example
   * ```
   * CN=BankID Bankenes ID-tjeneste Bank CA 2,
   * OU=988477052,
   * O=Bankenes ID-tjeneste AS,*
   * C=NO;OrginatorId=9775;OriginatorName=Gjensidige Bank RA 1
   * ```
   */
⋮----
/** Currently used as an input parameter for the [securityData](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/securitydata) endpoint of the [Fraud Data](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/advanced-topics/fraud-data) service */
⋮----
/** Only returned from the `userinfo_endpoint` */
⋮----
/**
   * [Norwegian National Identity Number (fødselsnummer)](https://www.skatteetaten.no/en/person/foreign/norwegian-identification-number/national-identity-number). It can be an alternative to `sub`.
   * Requires `nnin_altsub` scope at the [authorize](https://confluence.bankidnorge.no/confluence/pdoidcl/technical-documentation/api/authorize) endpoint.
   * @example
   * ```
   * 181266*****
   * ```
   */
⋮----
/**
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/bankid-no
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import BankIDNorge from "@auth/core/providers/bankid-no"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Auth0({
 *       clientId: AUTH_BANKID_NO_ID,
 *       clientSecret: AUTH_BANKID_NO_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [OpenID Connect Provider from BankID](https://confluence.bankidnorge.no/confluence/pdoidcl)
 *
 * ### Notes
 *
 * The BankID Norge provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/bankid-no.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function BankIDNorway(
  config: OIDCUserConfig<BankIDNorwayProfile>
): OIDCConfig<BankIDNorwayProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/battlenet.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Battle.net</b> integration.</span>
 * <a href="https://Battle.net/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/battlenet.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/battlenet
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface BattleNetProfile extends Record<string, any> {
  sub: string
  battle_tag: string
}
/** See the [available regions](https://develop.battle.net/documentation/guides/regionality-and-apis) */
export type BattleNetIssuer =
  | "https://oauth.battle.net"
  | "https://oauth.battlenet.com.cn"
  | "https://www.battlenet.com.cn/oauth"
  | `https://${"us" | "eu" | "kr" | "tw"}.battle.net/oauth`
/**
 * Add Battle.net login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/battlenet
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import BattleNet from "@auth/core/providers/battlenet"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     BattleNet({
 *       clientId: BATTLENET_CLIENT_ID,
 *       clientSecret: BATTLENET_CLIENT_SECRET,
 *       issuer: BATTLENET_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 * issuer must be one of these values, based on the available regions:
 * ```
 * type BattleNetIssuer =
 *   | "https://oauth.battle.net"
 *   | "https://oauth.battlenet.com.cn"
 *   | "https://www.battlenet.com.cn/oauth"
 *   | "https://us.battle.net/oauth"
 *   | "https://eu.battle.net/oauth"
 *   | "https://kr.battle.net/oauth"
 *   | "https://tw.battle.net/oauth"
 * ```
 *
 * ### Resources
 *
 *  - [BattleNet OAuth documentation](https://develop.battle.net/documentation/guides/using-oauth)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the BattleNet provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The BattleNet provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/battlenet.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function BattleNet<P extends BattleNetProfile>(
  options: OAuthUserConfig<P> & { issuer: BattleNetIssuer }
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/beyondidentity.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#5077c5", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Beyond Identity</b> integration.</span>
 * <a href="https://www.beyondidentity.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/beyondidentity.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/beyondidentity
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** @see [Beyond Identity Developer Docs](https://developer.beyondidentity.com/) */
export interface BeyondIdentityProfile {
  /** The user's unique identifier. */
  sub: string
  /** The user's full name. */
  name: string
  /** The user's preferred username. */
  preferred_username: string
  /** The user's email address. */
  email: string
}
⋮----
/** The user's unique identifier. */
⋮----
/** The user's full name. */
⋮----
/** The user's preferred username. */
⋮----
/** The user's email address. */
⋮----
/**
 * Add Beyond Identity login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/beyondidentity
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import BeyondIdentity from "@auth/core/providers/beyondidentity"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     BeyondIdentity({
 *       clientId: BEYOND_IDENTITY_CLIENT_ID,
 *       clientSecret: BEYOND_IDENTITY_CLIENT_SECRET,
 *       issuer: BEYOND_IDENTITY_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Beyond Identity Developer Docs](https://developer.beyondidentity.com/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the BeyondIdentity provider is
 * based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The BeyondIdentity provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/beyondidentity.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function BeyondIdentity(
  config: OIDCUserConfig<BeyondIdentityProfile>
): OIDCConfig<BeyondIdentityProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/bitbucket.ts
================
/**
 * <div class="provider" style={{ display: "flex", justifyContent: "space-between", color: "#fff" }}>
 * <span>Built-in <b>Bitbucket</b> integration.</span>
 * <a href="https://bitbucket.org">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/bitbucket.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/bitbucket
 */
import { OAuthConfig, OAuthUserConfig } from "./index.js"
type LiteralUnion<T extends U, U = string> = T | (U & Record<never, never>)
/**
 * @see https://developer.atlassian.com/cloud/bitbucket/rest/api-group-users/#api-user-get
 */
export interface BitbucketProfile {
  display_name: string
  links: Record<
    LiteralUnion<
      "self" | "avatar" | "repositories" | "snippets" | "html" | "hooks"
    >,
    { href?: string }
  >
  created_on: string
  type: string
  uuid: string
  has_2fa_enabled: boolean | null
  username: string
  is_staff: boolean
  account_id: string
  nickname: string
  account_status: string
  location: string | null
}
/**
 *
 * ### Setup
 *
 * #### Callback URL
 *
 * ```ts
 * https://example.com/api/auth/callback/bitbucket
 * ```
 *
 * #### Configuration
 *
 * ```ts
 * import { Auth } from "@auth/core"
 * import Bitbucket from "@auth/core/providers/bitbucket"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Bitbucket({
 *       clientId: process.env.BITBUCKET_CLIENT_ID,
 *       clientSecret: process.env.BITBUCKET_CLIENT_SECRET,
 *     })
 *   ],
 * })
 * ```
 *
 * #### Resources
 *
 * - [Using OAuth on Bitbucket Cloud](https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/)
 * - [Bitbucket REST API Authentication](https://developer.atlassian.com/cloud/bitbucket/rest/intro/#authentication)
 * - [Bitbucket REST API Users](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-users/#api-group-users)
 *
 *  #### Notes
 *
 * By default, Auth.js assumes that the Bitbucket provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Bitbucket provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/bitbucket.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Bitbucket(
  options: OAuthUserConfig<BitbucketProfile>
): OAuthConfig<BitbucketProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/box.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Box</b> integration.</span>
 * <a href="https://box.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/box.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/box
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Box login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/box
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Box from "@auth/core/providers/box"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Box({ clientId: BOX_CLIENT_ID, clientSecret: BOX_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Box developers documentation](https://developer.box.com/reference/)
 *  - [Box OAuth documentation](https://developer.box.com/guides/sso-identities-and-app-users/connect-okta-to-app-users/configure-box/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Box provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Box provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/box.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Box(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/boxyhq-saml.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>BoxyHQ SAML</b> integration.</span>
 * <a href="https://boxyhq.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/boxyhq-saml.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/boxyhq-saml
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface BoxyHQSAMLProfile extends Record<string, any> {
  id: string
  email: string
  firstName?: string
  lastName?: string
}
/**
 * Add BoxyHQ SAML login to your page.
 *
 * BoxyHQ SAML is an open source service that handles the SAML SSO login flow as an OAuth 2.0 flow, abstracting away all the complexities of the SAML protocol. Enable Enterprise single-sign-on in your app with ease.
 *
 * You can deploy BoxyHQ SAML as a separate service or embed it into your app using our NPM library. [Check out the documentation for more details](https://boxyhq.com/docs/jackson/deploy)
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/boxyhq-saml
 * ```
 *
 * #### Configuration
 *
 * For OAuth 2.0 Flow:
 *```ts
 * import { Auth } from "@auth/core"
 * import BoxyHQ from "@auth/core/providers/boxyhq-saml"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     BoxyHQ({
 *       authorization: { params: { scope: "" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid
 *       clientId: BOXYHQ_SAML_CLIENT_ID,
 *       clientSecret: BOXYHQ_SAML_CLIENT_SECRET,
 *       issuer: BOXYHQ_SAML_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 * For OIDC Flow:
 *
 *```ts
 * import { Auth } from "@auth/core"
 * import BoxyHQ from "@auth/core/providers/boxyhq-saml"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     BoxyHQ({
 *       clientId: BOXYHQ_SAML_CLIENT_ID,
 *       clientSecret: BOXYHQ_SAML_CLIENT_SECRET,
 *       issuer: BOXYHQ_SAML_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [BoxyHQ OAuth documentation](https://example.com)
 *
 * ## Configuration
 *
 * SAML login requires a configuration for every tenant of yours. One common method is to use the domain for an email address to figure out which tenant they belong to. You can also use a unique tenant ID (string) from your backend for this, typically some kind of account or organization ID.
 *
 * Check out the [documentation](https://boxyhq.com/docs/jackson/saml-flow#2-saml-config-api) for more details.
 *
 *
 * On the client side you'll need to pass additional parameters `tenant` and `product` to the `signIn` function. This will allow BoxyHQL SAML to figure out the right SAML configuration and take your user to the right SAML Identity Provider to sign them in.
 *
 * ```tsx
 * import { signIn } from "auth";
 * ...
 *
 *   // Map your users's email to a tenant and product
 *   const tenant = email.split("@")[1];
 *   const product = 'my_awesome_product';
 * ...
 *   <Button
 *     onClick={async (event) => {
 *       event.preventDefault();
 *
 *       signIn("boxyhq-saml", {}, { tenant, product });
 *     }}>
 * ...
 * ```
 * ### Notes
 *
 * By default, Auth.js assumes that the BoxyHQ provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The BoxyHQ provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/boxyhq-saml.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function SAMLJackson<P extends BoxyHQSAMLProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/bungie.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Bungie</b> integration.</span>
 * <a href="https://bungie.net/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/bungie.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/bungie
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Bungie login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/bungie
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Bungie from "@auth/core/providers/bungie"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Bungie({
 *       clientId: BUNGIE_CLIENT_ID,
 *       clientSecret: BUNGIE_CLIENT_SECRET,
 *       headers: { "X-API-Key": BUNGIE_API_KEY },
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Bungie OAuth documentation](https://github.com/Bungie-net/api/wiki/OAuth-Documentation)
 *
 * ## Configuration
 *
 * :::tip
 * Bungie require all sites to run HTTPS (including local development instances).
 * :::
 *
 * :::tip
 * Bungie doesn't allow you to use localhost as the website URL, instead you need to use https://127.0.0.1:3000
 * :::
 *
 * Navigate to https://www.bungie.net/en/Application and fill in the required details:
 *
 * - Application name
 * - Application Status
 * - Website
 * - OAuth Client Type
 *   - Confidential
 * - Redirect URL
 *   - https://localhost:3000/api/auth/callback/bungie
 * - Scope
 *   - `Access items like your Bungie.net notifications, memberships, and recent Bungie.Net forum activity.`
 * - Origin Header
 *
 * The following guide may be helpful:
 *
 * - [How to setup localhost with HTTPS with a Next.js app](https://medium.com/@anMagpie/secure-your-local-development-server-with-https-next-js-81ac6b8b3d68)
 *
 * #@example server
 *
 * You will need to edit your host file and point your site at `127.0.0.1`
 *
 * [How to edit my host file?](https://phoenixnap.com/kb/how-to-edit-hosts-file-in-windows-mac-or-linux)
 *
 * On Windows (Run PowerShell as administrator)
 *
 * ```ps
 * Add-Content -Path C:\Windows\System32\drivers\etc\hosts -Value "127.0.0.1`tdev.example.com" -Force
 * ```
 *
 * ```
 * 127.0.0.1 dev.example.com
 * ```
 *
 * ### Create certificate
 *
 * Creating a certificate for localhost is easy with openssl. Just put the following command in the terminal. The output will be two files: localhost.key and localhost.crt.
 *
 * ```bash
 * openssl req -x509 -out localhost.crt -keyout localhost.key \
 *   -newkey rsa:2048 -nodes -sha256 \
 *   -subj "/CN=localhost" -extensions EXT -config <( \
 *    printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
 * ```
 *
 * :::tip
 * **Windows**
 *
 * The OpenSSL executable is distributed with [Git](https://git-scm.com/download/win]9) for Windows.
 * Once installed you will find the openssl.exe file in `C:/Program Files/Git/mingw64/bin` which you can add to the system PATH environment variable if it’s not already done.
 *
 * Add environment variable `OPENSSL_CONF=C:/Program Files/Git/mingw64/ssl/openssl.cnf`
 *
 * ```bash
 *  req -x509 -out localhost.crt -keyout localhost.key \
 *   -newkey rsa:2048 -nodes -sha256 \
 *   -subj "/CN=localhost"
 * ```
 *
 * :::
 *
 * Create directory `certificates` and place `localhost.key` and `localhost.crt`
 *
 * You can create a `server.js` in the root of your project and run it with `node server.js` to test Sign in with Bungie integration locally:
 *
 * ```js
 * const { createServer } = require("https")
 * const { parse } = require("url")
 * const next = require("next")
 * const fs = require("fs")
 *
 * const dev = process.env.NODE_ENV !== "production"
 * const app = next({ dev })
 * const handle = app.getRequestHandler()
 *
 * const httpsOptions = {
 *   key: fs.readFileSync("./certificates/localhost.key"),
 *   cert: fs.readFileSync("./certificates/localhost.crt"),
 * }
 *
 * app.prepare().then(() => {
 *   createServer(httpsOptions, (req, res) => {
 *     const parsedUrl = parse(req.url, true)
 *     handle(req, res, parsedUrl)
 *   }).listen(3000, (err) => {
 *     if (err) throw err
 *     console.log("> Ready on https://localhost:3000")
 *   })
 * })
 * ```
 *
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Bungie provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Bungie provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/bungie.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Bungie(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/click-up.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#24292f", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>ClickUp</b> integration.</span>
 * <a href="https://clickup.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/click-up.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/click-up
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** @see [Get the authenticated user](https://clickup.com/api/clickupreference/operation/GetAuthorizedUser/)*/
export interface ClickUpProfile {
  user: {
    id: number
    username: string
    color: string
    profilePicture: string
  }
}
/**
 * Add ClickUp login to your page and make requests to [ClickUp APIs](https://clickup.com/api/).
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/clickup
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import ClickUp from "@auth/core/providers/click-up"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     ClickUp({
 *       clientId: CLICKUP_CLIENT_ID,
 *       clientSecret: CLICKUP_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [ClickUp - Authorizing OAuth Apps](https://clickup.com/api/developer-portal/authentication#oauth-flow)
 * - [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/click-up.ts)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the ClickUp provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The ClickUp provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/click-up.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function ClickUp(
  config: OAuthUserConfig<ClickUpProfile>
): OAuthConfig<ClickUpProfile>

================
File: packages/core/src/providers/cognito.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Cognito</b> integration.</span>
 * <a href="https://docs.aws.amazon.com/cognito">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/cognito.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/cognito
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface CognitoProfile extends Record<string, any> {
  sub: string
  name: string
  email: string
  picture: string
}
/**
 * Add Cognito login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/cognito
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Cognito from "@auth/core/providers/cognito"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Cognito({
 *       clientId: COGNITO_CLIENT_ID,
 *       clientSecret: COGNITO_CLIENT_SECRET,
 *       issuer: COGNITO_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Cognito OAuth documentation](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html)
 *
 * ### Notes
 * You need to select your AWS region to go the the Cognito dashboard.
 *
 * :::tip
 * The issuer is a URL, that looks like this: https://cognito-idp.{region}.amazonaws.com/{PoolId}
 * :::
 * `PoolId` is from General Settings in Cognito, not to be confused with the App Client ID.
 * :::warning
 * Make sure you select all the appropriate client settings or the OAuth flow will not work.
 * :::
 *
 * By default, Auth.js assumes that the Cognito provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Cognito provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/cognito.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Cognito<P extends CognitoProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/coinbase.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Coinbase</b> integration.</span>
 * <a href="https://coinbase.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/coinbase.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/coinbase
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Coinbase login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/coinbase
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Coinbase from "@auth/core/providers/coinbase"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Coinbase({
 *       clientId: COINBASE_CLIENT_ID,
 *       clientSecret: COINBASE_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Coinbase OAuth documentation](https://developers.coinbase.com/api/v2)
 *
 * ### Notes
 *
 * :::tip
 * This Provider template has a 2 hour access token to it. A refresh token is also returned.
 * :::
 *
 * By default, Auth.js assumes that the Coinbase provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Coinbase provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/coinbase.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Coinbase(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/concept2.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Concept2</b> integration.</span>
 * <a href="https://concept2.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/concept2.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/concept2
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface Concept2Profile extends Record<string, any> {
  id: number
  username: string
  first_name: string
  last_name: string
  gender: string
  dob: string
  email: string
  country: string
  profile_image: string
  age_restricted: boolean
  email_permission: boolean | null
  max_heart_rate: number | null
  weight: number | null
  logbook_privacy: string | null
}
/**
 * Add Concept2 login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/concept2
 * ```
 *
 * #### Configuration
 *```js
 * import { Auth } from "@auth/core"
 * import Concept2 from "@auth/core/providers/concept2"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Concept2({
 *       clientId: CONCEPT2_CLIENT_ID,
 *       clientSecret: CONCEPT2_CLIENT_SECRET
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Concept2 OAuth documentation](https://log.concept2.com/developers/documentation/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Concept2 provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Concept2 provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/next-auth/src/providers/concept2.ts)).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/providers/custom-provider#override-default-options).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Concept2(
  options: OAuthUserConfig<Concept2Profile>
): OAuthConfig<Concept2Profile>
⋮----
profile(profile)

================
File: packages/core/src/providers/credentials.ts
================
import type { CommonProviderOptions } from "./index.js"
import type { Awaitable, User } from "../types.js"
import type { JSX } from "preact"
/**
 * Besides providing type safety inside {@link CredentialsConfig.authorize}
 * it also determines how the credentials input fields will be rendered
 * on the default sign in page.
 */
export interface CredentialInput
  extends Partial<JSX.IntrinsicElements["input"]> {
  label?: string
}
/** The Credentials Provider needs to be configured. */
export interface CredentialsConfig<
  CredentialsInputs extends Record<string, CredentialInput> = Record<
    string,
    CredentialInput
  >,
> extends CommonProviderOptions {
  type: "credentials"
  credentials: CredentialsInputs
  /**
   * Gives full control over how you handle the credentials received from the user.
   *
   * :::warning
   * There is no validation on the user inputs by default, so make sure you do so
   * by a popular library like [Zod](https://zod.dev)
   * :::
   *
   * This method expects a `User` object to be returned for a successful login.
   *
   * If an `CredentialsSignin` is thrown or `null` is returned, two things can happen:
   * 1. The user is redirected to the login page, with `error=CredentialsSignin&code=credentials` in the URL. `code` is configurable, see below.
   * 2. If you throw this error in a framework that handles form actions server-side, this error is thrown by the login form action, so you'll need to handle it there.
   *
   * In case of 1., generally, we recommend not hinting if the user for example gave a wrong username or password specifically,
   * try rather something like "invalid-credentials". Try to be as generic with client-side errors as possible.
   *
   * To customize the error code, you can create a custom error that extends {@link CredentialsSignin} and throw it in `authorize`.
   *
   * @example
   * ```ts
   * class CustomError extends CredentialsSignin {
   *  code = "custom_error"
   * }
   * // URL will contain `error=CredentialsSignin&code=custom_error`
   * ```
   *
   * @example
   * ```ts
   * async authorize(credentials, request) { // you have access to the original request as well
   *   if(!isValidCredentials(credentials)) {
   *      throw new CustomError()
   *   }
   *   return await getUser(credentials) // assuming it returns a User or null
   * }
   * ```
   */
  authorize: (
    /**
     * The available keys are determined by {@link CredentialInput}.
     *
     * @note The existence/correctness of a field cannot be guaranteed at compile time,
     * so you should always validate the input before using it.
     *
     * You can add basic validation depending on your use case,
     * or you can use a popular library like [Zod](https://zod.dev) for example.
     */
    credentials: Partial<Record<keyof CredentialsInputs, unknown>>,
    /** The original request. */
    request: Request
  ) => Awaitable<User | null>
}
⋮----
/**
   * Gives full control over how you handle the credentials received from the user.
   *
   * :::warning
   * There is no validation on the user inputs by default, so make sure you do so
   * by a popular library like [Zod](https://zod.dev)
   * :::
   *
   * This method expects a `User` object to be returned for a successful login.
   *
   * If an `CredentialsSignin` is thrown or `null` is returned, two things can happen:
   * 1. The user is redirected to the login page, with `error=CredentialsSignin&code=credentials` in the URL. `code` is configurable, see below.
   * 2. If you throw this error in a framework that handles form actions server-side, this error is thrown by the login form action, so you'll need to handle it there.
   *
   * In case of 1., generally, we recommend not hinting if the user for example gave a wrong username or password specifically,
   * try rather something like "invalid-credentials". Try to be as generic with client-side errors as possible.
   *
   * To customize the error code, you can create a custom error that extends {@link CredentialsSignin} and throw it in `authorize`.
   *
   * @example
   * ```ts
   * class CustomError extends CredentialsSignin {
   *  code = "custom_error"
   * }
   * // URL will contain `error=CredentialsSignin&code=custom_error`
   * ```
   *
   * @example
   * ```ts
   * async authorize(credentials, request) { // you have access to the original request as well
   *   if(!isValidCredentials(credentials)) {
   *      throw new CustomError()
   *   }
   *   return await getUser(credentials) // assuming it returns a User or null
   * }
   * ```
   */
⋮----
/**
     * The available keys are determined by {@link CredentialInput}.
     *
     * @note The existence/correctness of a field cannot be guaranteed at compile time,
     * so you should always validate the input before using it.
     *
     * You can add basic validation depending on your use case,
     * or you can use a popular library like [Zod](https://zod.dev) for example.
     */
⋮----
/** The original request. */
⋮----
export type CredentialsProviderId = "credentials"
/**
 * The Credentials provider allows you to handle signing in with arbitrary credentials,
 * such as a username and password, domain, or two factor authentication or hardware device (e.g. YubiKey U2F / FIDO).
 *
 * It is intended to support use cases where you have an existing system you need to authenticate users against.
 *
 * It comes with the constraint that users authenticated in this manner are not persisted in the database,
 * and consequently that the Credentials provider can only be used if JSON Web Tokens are enabled for sessions.
 *
 * :::caution
 * The functionality provided for credentials-based authentication is intentionally limited to discourage the use of passwords due to the inherent security risks of the username-password model.
 *
 * OAuth providers spend significant amounts of money, time, and engineering effort to build:
 *
 * - abuse detection (bot-protection, rate-limiting)
 * - password management (password reset, credential stuffing, rotation)
 * - data security (encryption/salting, strength validation)
 *
 * and much more for authentication solutions. It is likely that your application would benefit from leveraging these battle-tested solutions rather than try to rebuild them from scratch.
 *
 * If you'd still like to build password-based authentication for your application despite these risks, Auth.js gives you full control to do so.
 *
 * :::
 *
 * See the [callbacks documentation](/reference/core#authconfig#callbacks) for more information on how to interact with the token. For example, you can add additional information to the token by returning an object from the `jwt()` callback:
 *
 * ```ts
 * callbacks: {
 *   async jwt({ token, user, account, profile, isNewUser }) {
 *     if (user) {
 *       token.id = user.id
 *     }
 *     return token
 *   }
 * }
 * ```
 *
 * @example
 * ```ts
 * import { Auth } from "@auth/core"
 * import Credentials from "@auth/core/providers/credentials"
 *
 * const request = new Request("https://example.com")
 * const response = await AuthHandler(request, {
 *   providers: [
 *     Credentials({
 *       credentials: {
 *         username: { label: "Username" },
 *         password: {  label: "Password", type: "password" }
 *       },
 *       async authorize({ request }) {
 *         const response = await fetch(request)
 *         if(!response.ok) return null
 *         return await response.json() ?? null
 *       }
 *     })
 *   ],
 *   secret: "...",
 *   trustHost: true,
 * })
 * ```
 * @see [Username/Password Example](https://authjs.dev/getting-started/authentication/credentials)
 */
export default function Credentials<
  CredentialsInputs extends Record<string, CredentialInput> = Record<
    string,
    CredentialInput
  >,
>(config: Partial<CredentialsConfig<CredentialsInputs>>): CredentialsConfig
⋮----
// @ts-expect-error

================
File: packages/core/src/providers/descope.ts
================
/**
 * <div class="provider" style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Descope</b> integration.
 * </span>
 * <a href="https://descope.com" style={{backgroundColor: "#000000", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/descope.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/descope
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** The returned user profile from Descope when using the profile callback.
 * [See Load User](https://docs.descope.com/api/openapi/usermanagement/operation/LoadUser/)
 */
export interface DescopeProfile {
  /** The user's unique Descope ID */
  sub: string
  /** The user's name */
  name: string
  /** The user's email */
  email: string
  /** A boolean indicating if the user's email is verified */
  email_verified: boolean
  /** The user's phone number */
  phone_number: string
  /** A boolean indicating if the user's phone number is verified */
  phone_number_verified: boolean
  /** The user's picture */
  picture: string
  /** The user's custom attributes */
  [claim: string]: unknown
}
⋮----
/** The user's unique Descope ID */
⋮----
/** The user's name */
⋮----
/** The user's email */
⋮----
/** A boolean indicating if the user's email is verified */
⋮----
/** The user's phone number */
⋮----
/** A boolean indicating if the user's phone number is verified */
⋮----
/** The user's picture */
⋮----
/** The user's custom attributes */
⋮----
/**
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/descope
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Descope from "@auth/core/providers/descope"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, { providers: [Descope({ clientId: AUTH_DESCOPE_ID, clientSecret: AUTH_DESCOPE_SECRET, issuer: AUTH_DESCOPE_ISSUER })] })
 * ```
 *
 * ### Configuring Descope
 *
 * Follow these steps:
 *
 * 1. Log into the [Descope console](https://app.descope.com)
 * 2. Follow the [OIDC instructions](https://docs.descope.com/customize/auth/oidc)
 *
 * Then, create a `.env.local` file in the project root add the following entries:
 *
 * Get the following from the Descope's console:
 * ```
 * AUTH_DESCOPE_ID="<Descope Issuer's last url segment>" # Descope's Issuer can be found in "Authentication Methods > SSO > Identity Provider" (Can also be taken from "Project > Project ID")
 * AUTH_DESCOPE_SECRET="<Descope Access Key>" # Manage > Access Keys
 * AUTH_DESCOPE_ISSUER="<Descope Issuer URL>" # Applications -> OIDC Application -> Issuer
 * ```
 *
 * ### Resources
 *
 * - [Descope OIDC](https://docs.descope.com/customize/auth/oidc)
 * - [Descope Flows](https://docs.descope.com/customize/flows)
 *
 * ### Notes
 *
 * The Descope provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/descope.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::info
 * By default, Auth.js assumes that the Descope provider is based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) spec
 * :::
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Descope(
  config: OIDCUserConfig<DescopeProfile>
): OIDCConfig<DescopeProfile>

================
File: packages/core/src/providers/discord.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Discord</b> integration.</span>
 * <a href="https://discord.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/discord.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/discord
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Corresponds to the user structure documented here:
 * https://discord.com/developers/docs/resources/user#user-object-user-structure
 */
export interface DiscordProfile extends Record<string, any> {
  /** the user's id (i.e. the numerical snowflake) */
  id: string
  /** the user's username, not unique across the platform */
  username: string
  /** the user's Discord-tag */
  discriminator: string
  /** the user's display name, if it is set  */
  global_name: string | null
  /**
   * the user's avatar hash:
   * https://discord.com/developers/docs/reference#image-formatting
   */
  avatar: string | null
  /** whether the user belongs to an OAuth2 application */
  bot?: boolean
  /**
   * whether the user is an Official Discord System user (part of the urgent
   * message system)
   */
  system?: boolean
  /** whether the user has two factor enabled on their account */
  mfa_enabled: boolean
  /**
   * the user's banner hash:
   * https://discord.com/developers/docs/reference#image-formatting
   */
  banner: string | null
  /** the user's banner color encoded as an integer representation of hexadecimal color code */
  accent_color: number | null
  /**
   * the user's chosen language option:
   * https://discord.com/developers/docs/reference#locales
   */
  locale: string
  /** whether the email on this account has been verified */
  verified: boolean
  /** the user's email */
  email: string | null
  /**
   * the flags on a user's account:
   * https://discord.com/developers/docs/resources/user#user-object-user-flags
   */
  flags: number
  /**
   * the type of Nitro subscription on a user's account:
   * https://discord.com/developers/docs/resources/user#user-object-premium-types
   */
  premium_type: number
  /**
   * the public flags on a user's account:
   * https://discord.com/developers/docs/resources/user#user-object-user-flags
   */
  public_flags: number
  /** undocumented field; corresponds to the user's custom nickname */
  display_name: string | null
  /**
   * undocumented field; corresponds to the Discord feature where you can e.g.
   * put your avatar inside of an ice cube
   */
  avatar_decoration: string | null
  /**
   * undocumented field; corresponds to the premium feature where you can
   * select a custom banner color
   */
  banner_color: string | null
  /** undocumented field; the CDN URL of their profile picture */
  image_url: string
}
⋮----
/** the user's id (i.e. the numerical snowflake) */
⋮----
/** the user's username, not unique across the platform */
⋮----
/** the user's Discord-tag */
⋮----
/** the user's display name, if it is set  */
⋮----
/**
   * the user's avatar hash:
   * https://discord.com/developers/docs/reference#image-formatting
   */
⋮----
/** whether the user belongs to an OAuth2 application */
⋮----
/**
   * whether the user is an Official Discord System user (part of the urgent
   * message system)
   */
⋮----
/** whether the user has two factor enabled on their account */
⋮----
/**
   * the user's banner hash:
   * https://discord.com/developers/docs/reference#image-formatting
   */
⋮----
/** the user's banner color encoded as an integer representation of hexadecimal color code */
⋮----
/**
   * the user's chosen language option:
   * https://discord.com/developers/docs/reference#locales
   */
⋮----
/** whether the email on this account has been verified */
⋮----
/** the user's email */
⋮----
/**
   * the flags on a user's account:
   * https://discord.com/developers/docs/resources/user#user-object-user-flags
   */
⋮----
/**
   * the type of Nitro subscription on a user's account:
   * https://discord.com/developers/docs/resources/user#user-object-premium-types
   */
⋮----
/**
   * the public flags on a user's account:
   * https://discord.com/developers/docs/resources/user#user-object-user-flags
   */
⋮----
/** undocumented field; corresponds to the user's custom nickname */
⋮----
/**
   * undocumented field; corresponds to the Discord feature where you can e.g.
   * put your avatar inside of an ice cube
   */
⋮----
/**
   * undocumented field; corresponds to the premium feature where you can
   * select a custom banner color
   */
⋮----
/** undocumented field; the CDN URL of their profile picture */
⋮----
/**
 * Add Discord login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/discord
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Discord from "@auth/core/providers/discord"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Discord({
 *       clientId: DISCORD_CLIENT_ID,
 *       clientSecret: DISCORD_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Discord OAuth documentation](https://discord.com/developers/docs/topics/oauth2)
 *  - [Discord OAuth apps](https://discord.com/developers/applications)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Discord provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Discord provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/discord.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Discord<P extends DiscordProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/dribbble.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Dribbble</b> integration.</span>
 * <a href="https://dribbble.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/dribbble.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/dribbble
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface DribbbleProfile extends Record<string, any> {
  id: number
  name: string
  email: string
  avatar_url: string
}
/**
 *
 * Add Dribbble login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/dribbble
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Dribbble from "@auth/core/providers/dribbble"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Dribbble({
 *       clientId: DRIBBBLE_CLIENT_ID,
 *       clientSecret: DRIBBBLE_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Dribbble API](https://developer.dribbble.com)
 *  - [Dribbble OAuth](https://developer.dribbble.com/v2/oauth/)
 *  - [Dribbble Applications](https://dribbble.com/account/applications/new)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the GitHub provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Dribbble provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/dribbble.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 *
 * :::tip
 * You can optionally set the scope to `public upload` for more advanced scenarios. If omitted, the default `public` scope will be used for authentication purposes.
 * :::
 */
export default function Dribbble<P extends DribbbleProfile>(
  options: OAuthUserConfig<P> & {
    /**
     * Reference: https://developer.dribbble.com/v2/oauth/#scopes
     *
     * For the purposes of NextAuth.js `upload`-only scope makes no sense,
     * therefore it is excluded from suggested values. Treated by Dribbble as `public` when omitted.
     *
     * @default public
     */
    scope?: "public" | "public upload"
  }
): OAuthConfig<P>
⋮----
/**
     * Reference: https://developer.dribbble.com/v2/oauth/#scopes
     *
     * For the purposes of NextAuth.js `upload`-only scope makes no sense,
     * therefore it is excluded from suggested values. Treated by Dribbble as `public` when omitted.
     *
     * @default public
     */
⋮----
profile(profile)

================
File: packages/core/src/providers/dropbox.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Dropbox</b> integration.</span>
 * <a href="https://dropbox.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/dropbox.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/dropbox
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Dropbox login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/dropbox
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Dropbox from "@auth/core/providers/dropbox"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Dropbox({
 *       clientId: DROPBOX_CLIENT_ID,
 *       clientSecret: DROPBOX_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Dropbox OAuth documentation](https://developers.dropbox.com/oauth-guide)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Dropbox provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Dropbox provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/dropbox.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Dropbox(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
async request(
⋮----
profile(profile)

================
File: packages/core/src/providers/duende-identity-server6.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>DuendeIdentityServer6</b> integration.</span>
 * <a href="https://docs.duendesoftware.com/identityserver/v6">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/duende-identity-server6.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/duende-identity-server6
 */
import type { OAuthConfig, OAuthUserConfig } from "./oauth.js"
export interface DuendeISUser extends Record<string, any> {
  email: string
  id: string
  name: string
  verified: boolean
}
/**
 * Add DuendeIdentityServer6 login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/duende-identity-server6
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import DuendeIdentityServer6 from "@auth/core/providers/duende-identity-server6"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     DuendeIdentityServer6({
 *       clientId: DIS6_CLIENT_ID,
 *       clientSecret: DIS6_CLIENT_SECRET,
 *       issuer: DIS6_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [DuendeIdentityServer6 documentation](https://docs.duendesoftware.com/identityserver/v6)
 *
 * ### Notes
 *
 *
 * ## Demo IdentityServer
 *
 * The configuration below is for the demo server at https://demo.duendesoftware.com/
 *
 * If you want to try it out, you can copy and paste the configuration below.
 *
 * You can sign in to the demo service with either <b>bob/bob</b> or <b>alice/alice</b>.
 *
 * ```ts
 * import DuendeIdentityServer6 from "@auth/core/providers/duende-identity-server6"
 * providers: [
 *   DuendeIdentityServer6({
 *     clientId: "interactive.confidential",
 *     clientSecret: "secret",
 *     issuer: "https://demo.duendesoftware.com",
 *   })
 * ]
 * ```
 * By default, Auth.js assumes that the DuendeIdentityServer6 provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The DuendeIdentityServer6 provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/duende-identity-server6.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function DuendeIdentityServer6<P extends DuendeISUser>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/email.ts
================
import type { CommonProviderOptions } from "./index.js"
import type { Awaitable, Theme } from "../types.js"
⋮----
// TODO: Kepts for backwards compatibility
// Remove this import and encourage users
// to import it from @auth/core/providers/nodemailer directly
import Nodemailer from "./nodemailer.js"
import type { NodemailerConfig, NodemailerUserConfig } from "./nodemailer.js"
/**
 * @deprecated
 *
 * Import this provider from the `providers/nodemailer` submodule instead of `providers/email`.
 *
 * To log in with nodemailer, change `signIn("email")` to `signIn("nodemailer")`
 */
export default function Email(config: NodemailerUserConfig): NodemailerConfig
// TODO: Rename to Token provider
// when started working on https://github.com/nextauthjs/next-auth/discussions/1465
export type EmailProviderType = "email"
export type EmailProviderSendVerificationRequestParams = {
  identifier: string
  url: string
  expires: Date
  provider: EmailConfig
  token: string
  theme: Theme
  request: Request
}
export interface EmailConfig extends CommonProviderOptions {
  id: string
  type: "email"
  name: string
  from?: string
  maxAge?: number
  sendVerificationRequest: (
    params: EmailProviderSendVerificationRequestParams
  ) => Awaitable<void>
  /** Used to hash the verification token. */
  secret?: string
  /** Used with HTTP-based email providers. */
  apiKey?: string
  /** Used with SMTP-based email providers. */
  server?: NodemailerConfig["server"]
  generateVerificationToken?: () => Awaitable<string>
  normalizeIdentifier?: (identifier: string) => string
  options?: EmailUserConfig
}
⋮----
/** Used to hash the verification token. */
⋮----
/** Used with HTTP-based email providers. */
⋮----
/** Used with SMTP-based email providers. */
⋮----
export type EmailUserConfig = Omit<Partial<EmailConfig>, "options" | "type">

================
File: packages/core/src/providers/eventbrite.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#f05537", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Eventbrite</b> integration.</span>
 * <a href="https://www.eventbrite.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/eventbrite.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/eventbrite
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * @see https://www.eventbrite.com/platform/api#/reference/user/retrieve-your-user/retrieve-your-user
 */
export interface EventbriteProfile extends Record<string, any> {
  id: string
  name: string
  first_name: string
  last_name: string
  emails: { email: string; verified: boolean; primary: boolean }[]
  image_id: string
}
/**
 * Add Eventbrite login to your page and make requests to [Eventbrite APIs](https://www.eventbrite.com/platform/api).
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/eventbrite
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Eventbrite from "@auth/core/providers/eventbrite"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [Eventbrite({ clientId: EVENTBRITE_CLIENT_ID, clientSecret: EVENTBRITE_CLIENT_SECRET })],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Eventbrite OAuth documentation](https://www.eventbrite.com/platform/api#/introduction/authentication)
 * - [Eventbrite App Management](https://www.eventbrite.com/account-settings/apps)
 * - [Learn more about OAuth](https://authjs.dev/concepts/oauth)
 * - [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/eventbrite.ts)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Eventbrite provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Eventbrite provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/eventbrite.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Eventbrite<P extends EventbriteProfile>(
  config: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/eveonline.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>EVEOnline</b> integration.</span>
 * <a href="https://eveonline.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/eveonline.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/eveonline
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface EVEOnlineProfile extends Record<string, any> {
  CharacterID: number
  CharacterName: string
  ExpiresOn: string
  Scopes: string
  TokenType: string
  CharacterOwnerHash: string
  IntellectualProperty: string
}
/**
 * Add EveOnline login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/eveonline
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import EveOnline from "@auth/core/providers/eveonline"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     EveOnline({
 *       clientId: EVEONLINE_CLIENT_ID,
 *       clientSecret: EVEONLINE_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [EveOnline OAuth documentation](https://developers.eveonline.com/blog/article/sso-to-authenticated-calls)
 *
 * ### Notes
 *
 * :::tip
 * When creating your application, make sure to select `Authentication Only` as the connection type.
 * :::
 *
 * :::tip
 * If using JWT for the session, you can add the `CharacterID` to the JWT and session. Example:
 * ```ts
 * options: {
 *   jwt: {
 *     secret: process.env.JWT_SECRET,
 *   },
 *   callbacks: {
 *     session: async ({ session, token }) => {
 *       session.user.id = token.id;
 *       return session;
 *     }
 *   }
 * }
 * ```
 * :::
 * By default, Auth.js assumes that the EveOnline provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The EveOnline provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/eveonline.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function EVEOnline<P extends EVEOnlineProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/facebook.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Facebook</b> integration.</span>
 * <a href="https://facebook.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/facebook.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/facebook
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
interface FacebookPictureData {
  url: string
}
interface FacebookPicture {
  data: FacebookPictureData
}
export interface FacebookProfile extends Record<string, any> {
  id: string
  picture: FacebookPicture
}
/**
 * Add Facebook login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/facebook
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Facebook from "@auth/core/providers/facebook"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Facebook({
 *       clientId: FACEBOOK_CLIENT_ID,
 *       clientSecret: FACEBOOK_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Facebook OAuth documentation](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/)
 *
 * ### Notes
 *
 * :::tip
 * Production applications cannot use localhost URLs to sign in with Facebook. You need to use a dedicated development application in Facebook to use localhost callback URLs.
 * :::
 *
 * :::tip
 * Email address may not be returned for accounts created on mobile.
 * :::
 *
 * By default, Auth.js assumes that the Facebook provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Facebook provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/facebook.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Facebook<P extends FacebookProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
// https://developers.facebook.com/docs/graph-api/reference/user/#fields
⋮----
async request(
⋮----
profile(profile: P)

================
File: packages/core/src/providers/faceit.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>FACEIT</b> integration.</span>
 * <a href="https://faceit.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/faceit.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/faceit
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add FACEIT login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/faceit
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import FACEIT from "@auth/core/providers/faceit"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     FACEIT({ clientId: FACEIT_CLIENT_ID, clientSecret: FACEIT_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [FACEIT OAuth documentation](https://cdn.faceit.com/third_party/docs/FACEIT_Connect_3.0.pdf)
 *
 * ### Notes
 *
 * Grant type: Authorization Code
 * Scopes to have basic infos (email, nickname, guid and avatar) : openid, email, profile
 * By default, Auth.js assumes that the FACEIT provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The FACEIT provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/faceit.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function FACEIT(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
// @ts-expect-error - TODO fix this
⋮----
profile(profile)

================
File: packages/core/src/providers/figma.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Figma</b> integration.</span>
 * <a href="https://figma.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/figma.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/figma
 */
import { OAuth2Config, OAuthUserConfig } from "./index.js"
/**
 * @see https://www.figma.com/developers/api#users-types
 */
interface FigmaProfile {
  id: string
  email: string
  handle: string
  img_url: string
}
/**
 * ### Setup
 *
 * #### Callback URL
 *
 * ```ts
 * https://example.com/api/auth/callback/figma
 * ```
 *
 * #### Configuration
 *
 * ```ts
 * import { Auth } from "@auth/core"
 * import Figma from "@auth/core/providers/figma"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Figma({
 *       clientId: process.env.AUTH_FIGMA_ID,
 *       clientSecret: process.env.AUTH_FIGMA_SECRET
 *     })
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Using OAuth 2 on Figma](https://www.figma.com/developers/api#oauth2)
 * - [Scopes](https://www.figma.com/developers/api#authentication-scopes)
 *
 * #### Notes
 *
 * By default, Auth.js assumes that the Figma provider is based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Figma provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/figma.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Figma(
  options: OAuthUserConfig<FigmaProfile>
): OAuth2Config<FigmaProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/forwardemail.ts
================
import type { EmailConfig, EmailUserConfig } from "./index.js"
import { html, text } from "../lib/utils/email.js"
/** @todo Document this */
export default function ForwardEmail(config: EmailUserConfig): EmailConfig
⋮----
async sendVerificationRequest(params)

================
File: packages/core/src/providers/foursquare.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>FourSquare</b> integration.</span>
 * <a href="https://foursquare.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/foursquare.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/foursquare
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add FourSquare login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/foursquare
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import FourSquare from "@auth/core/providers/foursquare"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     FourSquare({
 *       clientId: FOURSQUARE_CLIENT_ID,
 *       clientSecret: FOURSQUARE_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [FourSquare OAuth documentation](https://docs.foursquare.com/developer/reference/authentication)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the FourSquare provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::warning
 * Foursquare requires an additional apiVersion parameter in YYYYMMDD format, which essentially states "I'm prepared for API changes up to this date".
 * :::
 *
 * :::tip
 *
 * The FourSquare provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/foursquare.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Foursquare(
  options: OAuthUserConfig<Record<string, any>> & { apiVersion?: string }
): OAuthConfig<Record<string, any>>
⋮----
async request(
⋮----
profile(

================
File: packages/core/src/providers/freshbooks.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>FreshBooks</b> integration.</span>
 * <a href="https://freshbooks.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/freshbooks.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/freshbooks
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add FreshBooks login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/freshbooks
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import FreshBooks from "@auth/core/providers/freshbooks"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     FreshBooks({
 *       clientId: FRESHBOOKS_CLIENT_ID,
 *       clientSecret: FRESHBOOKS_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [FreshBooks OAuth documentation](https://www.freshbooks.com/api/authenticating-with-oauth-2-0-on-the-new-freshbooks-api
)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the FreshBooks provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The FreshBooks provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/freshbooks.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Freshbooks(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
async profile(profile)

================
File: packages/core/src/providers/frontegg.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Frontegg</b> integration.
 * </span>
 * <a href="https://frontegg.com" style={{backgroundColor: "black", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/frontegg.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/frontegg
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** The returned user profile from Frontegg when using the profile callback. [Reference](https://docs.frontegg.com/docs/admin-portal-profile). */
export interface FronteggProfile {
  /** The user's unique Frontegg ID */
  sub: string
  /** The user's name */
  name: string
  /** The user's email */
  email: string
  /** A boolean indicating if the user's email is verified */
  email_verified: boolean
  /** The user's picture */
  profilePictureUrl: string
  /** The user's roles */
  roles: string[]
  /** The user's custom attributes */
  [claim: string]: unknown
}
⋮----
/** The user's unique Frontegg ID */
⋮----
/** The user's name */
⋮----
/** The user's email */
⋮----
/** A boolean indicating if the user's email is verified */
⋮----
/** The user's picture */
⋮----
/** The user's roles */
⋮----
/** The user's custom attributes */
⋮----
/**
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/frontegg
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Frontegg from "@auth/core/providers/frontegg"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Frontegg({
 *       clientId: AUTH_FRONTEGG_ID,
 *       clientSecret: AUTH_FRONTEGG_SECRET,
 *       issuer: AUTH_FRONTEGG_ISSUER
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Configuring Frontegg
 *
 * Follow these steps:
 *
 * Log into the [Frontegg portal](https://portal.frontegg.com)
 *
 * Authentication > Login method > Hosted login > Add your callback url here
 *
 * Then, create a `.env.local` file in the project root add the following entries:
 *
 * Get the following from the Frontegg's portal:
 * ```
 * AUTH_FRONTEGG_ID="<Client ID>" # Environments > Your environment > Env settings
 * AUTH_FRONTEGG_SECRET="<API KEY>" # Environments > Your environment > Env settings
 * AUTH_FRONTEGG_ISSUER="<https://[YOUR_SUBDOMAIN].frontegg.com>" # Environments > Your environment > Env settings > Domains > Domain name
 * ```
 *
 * ### Resources
 *
 * - [Frontegg Docs](https://docs.frontegg.com/docs/how-to-use-our-docs)
 *
 * ### Notes
 *
 * The Frontegg provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/frontegg.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::info
 * By default, Auth.js assumes that the Frontegg provider is based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) spec
 * :::
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Frontegg(
  options: OIDCUserConfig<FronteggProfile>
): OIDCConfig<FronteggProfile>

================
File: packages/core/src/providers/fusionauth.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>FusionAuth</b> integration.</span>
 * <a href="https://fusionauth.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/fushionauth.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/fusionauth
 */
import type { OAuthConfig, OAuthUserConfig } from "./oauth.js"
/**
 * This is the default openid signature returned from FusionAuth
 * it can be customized using [lambda functions](https://fusionauth.io/docs/v1/tech/lambdas)
 */
export interface FusionAuthProfile extends Record<string, any> {
  aud: string
  exp: number
  iat: number
  iss: string
  sub: string
  jti: string
  authenticationType: string
  email: string
  email_verified: boolean
  preferred_username: string
  at_hash: string
  c_hash: string
  scope: string
  sid: string
}
/**
 * Add FusionAuth login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/fusionauth
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import FusionAuth from "@auth/core/providers/fusionauth"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     FusionAuth({
 *       clientId: FUSIONAUTH_CLIENT_ID,
 *       clientSecret: FUSIONAUTH_CLIENT_SECRET,
 *       tenantId: FUSIONAUTH_TENANT_ID,
 *       issuer: FUSIONAUTH_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 * :::warning
 * If you're using multi-tenancy, you need to pass in the tenantId option to apply the proper theme.
 * :::
 *
 * ### Resources
 *
 *  - [FusionAuth OAuth documentation](https://fusionauth.io/docs/v1/tech/oauth/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the FusionAuth provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * ## Configuration
 * :::tip
 * An application can be created at https://your-fusionauth-server-url/admin/application.
 *
 * For more information, follow the [FusionAuth 5-minute setup guide](https://fusionauth.io/docs/v1/tech/5-minute-setup-guide).
 * :::
 *
 * In the OAuth settings for your application, configure the following.
 *
 * - Redirect URL
 *   - https://localhost:3000/api/auth/callback/fusionauth
 * - Enabled grants
 *   - Make sure _Authorization Code_ is enabled.
 *
 * If using JSON Web Tokens, you need to make sure the signing algorithm is RS256, you can create an RS256 key pair by
 * going to Settings, Key Master, generate RSA and choosing SHA-256 as algorithm. After that, go to the JWT settings of
 * your application and select this key as Access Token signing key and Id Token signing key.
 * :::tip
 *
 * The FusionAuth provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/fusionauth.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function FusionAuth<P extends FusionAuthProfile>(
  // tenantId only needed if there is more than one tenant configured on the server
  options: OAuthUserConfig<P> & { tenantId?: string }
): OAuthConfig<P>
⋮----
// tenantId only needed if there is more than one tenant configured on the server
⋮----
profile(profile)

================
File: packages/core/src/providers/github.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#24292f", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>GitHub</b> integration.</span>
 * <a href="https://github.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/github.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/github
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface GitHubEmail {
  email: string
  primary: boolean
  verified: boolean
  visibility: "public" | "private"
}
/** @see [Get the authenticated user](https://docs.github.com/en/rest/users/users#get-the-authenticated-user) */
export interface GitHubProfile {
  login: string
  id: number
  node_id: string
  avatar_url: string
  gravatar_id: string | null
  url: string
  html_url: string
  followers_url: string
  following_url: string
  gists_url: string
  starred_url: string
  subscriptions_url: string
  organizations_url: string
  repos_url: string
  events_url: string
  received_events_url: string
  type: string
  site_admin: boolean
  name: string | null
  company: string | null
  blog: string | null
  location: string | null
  email: string | null
  hireable: boolean | null
  bio: string | null
  twitter_username?: string | null
  public_repos: number
  public_gists: number
  followers: number
  following: number
  created_at: string
  updated_at: string
  private_gists?: number
  total_private_repos?: number
  owned_private_repos?: number
  disk_usage?: number
  suspended_at?: string | null
  collaborators?: number
  two_factor_authentication: boolean
  plan?: {
    collaborators: number
    name: string
    space: number
    private_repos: number
  }
  [claim: string]: unknown
}
/**
 * Add GitHub login to your page and make requests to [GitHub APIs](https://docs.github.com/en/rest).
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/github
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import GitHub from "@auth/core/providers/github"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     GitHub({ clientId: GITHUB_CLIENT_ID, clientSecret: GITHUB_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [GitHub - Creating an OAuth App](https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app)
 * - [GitHub - Authorizing OAuth Apps](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps)
 * - [GitHub - Configure your GitHub OAuth Apps](https://github.com/settings/developers)
 * - [Learn more about OAuth](https://authjs.dev/concepts/oauth)
 * - [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/github.ts)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the GitHub provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The GitHub provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/github.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function GitHub(
  config: OAuthUserConfig<GitHubProfile> & {
    /** Configuration for usage with [GitHub Enterprise Server](https://docs.github.com/en/enterprise-server/get-started). */
    enterprise?: {
      /** The base URL of your GitHub Enterprise Server instance. */
      baseUrl?: string
    }
  }
): OAuthConfig<GitHubProfile>
⋮----
/** Configuration for usage with [GitHub Enterprise Server](https://docs.github.com/en/enterprise-server/get-started). */
⋮----
/** The base URL of your GitHub Enterprise Server instance. */
⋮----
async request(
⋮----
// If the user does not have a public email, get another via the GitHub API
// See https://docs.github.com/en/rest/users/emails#list-public-email-addresses-for-the-authenticated-user
⋮----
profile(profile)

================
File: packages/core/src/providers/gitlab.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>GitLab</b> integration.</span>
 * <a href="https://gitlab.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/gitlab.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/gitlab
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface GitLabProfile extends Record<string, any> {
  id: number
  username: string
  email: string
  name: string
  state: string
  avatar_url: string
  web_url: string
  created_at: string
  bio: string
  location?: string
  public_email: string
  skype: string
  linkedin: string
  twitter: string
  website_url: string
  organization: string
  job_title: string
  pronouns: string
  bot: boolean
  work_information?: string
  followers: number
  following: number
  local_time: string
  last_sign_in_at: string
  confirmed_at: string
  theme_id: number
  last_activity_on: string
  color_scheme_id: number
  projects_limit: number
  current_sign_in_at: string
  identities: Array<{
    provider: string
    extern_uid: string
  }>
  can_create_group: boolean
  can_create_project: boolean
  two_factor_enabled: boolean
  external: boolean
  private_profile: boolean
  commit_email: string
  shared_runners_minutes_limit: number
  extra_shared_runners_minutes_limit: number
}
/**
 * Add GitLab login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/gitlab
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import GitLab from "@auth/core/providers/gitlab"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     GitLab({ clientId: GITLAB_CLIENT_ID, clientSecret: GITLAB_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [GitLab OAuth documentation](https://docs.gitlab.com/ee/api/oauth2.html)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the GitLab provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 * Enable the `read_user` option in scope if you want to save the users email address on sign up.
 * :::
 *
 * :::tip
 *
 * The GitLab provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/gitlab.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function GitLab<P extends GitLabProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/google.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Google</b> integration.</span>
 * <a href="https://google.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/google.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/google
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface GoogleProfile extends Record<string, any> {
  aud: string
  azp: string
  email: string
  email_verified: boolean
  exp: number
  family_name?: string
  given_name: string
  hd?: string
  iat: number
  iss: string
  jti?: string
  locale?: string
  name: string
  nbf?: number
  picture: string
  sub: string
}
/**
 * Add Google login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/google
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Google from "@auth/core/providers/google"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Google({ clientId: GOOGLE_CLIENT_ID, clientSecret: GOOGLE_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Google OAuth documentation](https://developers.google.com/identity/protocols/oauth2)
 *  - [Google OAuth Configuration](https://console.developers.google.com/apis/credentials)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Google provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 *
 * The "Authorized redirect URIs" used when creating the credentials must include your full domain and end in the callback path. For example;
 *
 * - For production: `https://{YOUR_DOMAIN}/api/auth/callback/google`
 * - For development: `http://localhost:3000/api/auth/callback/google`
 *
 * :::warning
 * Google only provides Refresh Token to an application the first time a user signs in.
 *
 * To force Google to re-issue a Refresh Token, the user needs to remove the application from their account and sign in again:
 * https://myaccount.google.com/permissions
 *
 * Alternatively, you can also pass options in the `params` object of `authorization` which will force the Refresh Token to always be provided on sign in, however this will ask all users to confirm if they wish to grant your application access every time they sign in.
 *
 * If you need access to the RefreshToken or AccessToken for a Google account and you are not using a database to persist user accounts, this may be something you need to do.
 *
 * ```ts
 * const options = {
 *   providers: [
 *     Google({
 *       clientId: process.env.GOOGLE_ID,
 *       clientSecret: process.env.GOOGLE_SECRET,
 *       authorization: {
 *         params: {
 *           prompt: "consent",
 *           access_type: "offline",
 *           response_type: "code"
 *         }
 *       }
 *     })
 *   ],
 * }
 * ```
 *
 * :::
 *
 * :::tip
 * Google also returns a `email_verified` boolean property in the OAuth profile.
 *
 * You can use this property to restrict access to people with verified accounts at a particular domain.
 *
 * ```ts
 * const options = {
 *   ...
 *   callbacks: {
 *     async signIn({ account, profile }) {
 *       if (account.provider === "google") {
 *         return profile.email_verified && profile.email.endsWith("@example.com")
 *       }
 *       return true // Do different verification for other providers that don't have `email_verified`
 *     },
 *   }
 *   ...
 * }
 * ```
 *
 * :::
 * :::tip
 *
 * The Google provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/google.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Google<P extends GoogleProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/hubspot.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>HubSpot</b> integration.</span>
 * <a href="https://hubspot.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/hubspot.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/hubspot
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
interface HubSpotProfile extends Record<string, any> {
  // https://legacydocs.hubspot.com/docs/methods/oauth2/get-access-token-information
  user: string
  user_id: string
  hub_domain: string
  hub_id: string
}
⋮----
// https://legacydocs.hubspot.com/docs/methods/oauth2/get-access-token-information
⋮----
/**
 * Add HubSpot login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/hubspot
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import HubSpot from "@auth/core/providers/hubspot"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     HubSpot({
 *       clientId: HUBSPOT_CLIENT_ID,
 *       clientSecret: HUBSPOT_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [HubSpot OAuth documentation](https://developers.hubspot.com/docs/api/oauth-quickstart-guide)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the HubSpot provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * You need to have an APP in your Developer Account as described at https://developers.hubspot.com/docs/api/developer-tools-overview
 * :::note
 * HubSpot returns a limited amount of information on the token holder (see [docs](https://legacydocs.hubspot.com/docs/methods/oauth2/get-access-token-information)). One other issue is that the name and profile photo cannot be fetched through API as discussed [here](https://community.hubspot.com/t5/APIs-Integrations/Profile-photo-is-not-retrieved-with-User-API/m-p/325521).
 * :::
 * :::tip
 *
 * The HubSpot provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/hubspot.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function HubSpot<P extends HubSpotProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
async request(
⋮----
profile(profile)
⋮----
// TODO: get image from profile once it's available
// Details available https://community.hubspot.com/t5/APIs-Integrations/Profile-photo-is-not-retrieved-with-User-API/m-p/325521

================
File: packages/core/src/providers/huggingface.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#fff", display: "flex", justifyContent: "space-between", color: "#000", padding: 16}}>
 * <span>Built-in <b>Hugging Face</b> integration.</span>
 * <a href="https://huggingface.co">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/huggingface.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/huggingface
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface HuggingfaceProfile {
  /**
   * Unique identifier for the user.
   */
  sub: string
  /**
   * Full name of the user.
   *
   * Needs 'profile' scope
   */
  name?: string
  /**
   * Username of the user.
   *
   * Need 'profile' scope
   */
  preferred_username?: string
  /**
   * URL of the user's avatar.
   *
   * Need 'profile' scope
   */
  profile?: string
  /**
   * URL of the user's profile picture.
   *
   * Need 'profile' scope
   */
  picture?: string
  /**
   * Need 'profile' scope
   *
   * Website of the user.
   */
  website?: string
  /**
   * Need 'email' scope
   *
   * Email address of the user.
   */
  email?: string
  /**
   * Need 'email' scope
   *
   * Whether the user's email address is verified. Should always be true, Hugging Face enforces
   * email verification for users to grant access to OAuth apps.
   */
  email_verified?: boolean
  /**
   * Whether the user has a paid subscription.
   */
  isPro: boolean
  /**
   * Whether the user has a payment method set up.
   *
   * Needs the `read-billing` scope.
   */
  canPay?: boolean
  /**
   * List of the user's organizations.
   */
  orgs: Array<{
    /**
     * Unique identifier for the organization.
     */
    sub: string
    /**
     * Name of the organization.
     */
    name: string
    /**
     * URL of the organization's avatar.
     */
    picture: string
    /**
     * Username of the organization.
     */
    preferred_username: string
    /**
     * Whether the organization has a paid enterprise subscription.
     */
    isEnterprise: boolean
    /**
     * Whether the organization has a payment method set up.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
    canPay?: boolean
    /**
     * The role of the user in the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
    roleInOrg?: "admin" | "write" | "read" | "contributor"
    /**
     * User needs to re-authenticate to access the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
    pendingSSO?: boolean
    /**
     * User needs to enable MFA to access the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
    missingMFA?: boolean
    /**
     * Resource groups are a feature of enterprise organizations.
     *
     * They allow granular access control to resources within the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
    resourceGroups?: Array<{
      /**
       * Unique identifier for the resource group.
       */
      sub: string
      name: string
      /**
       * The role of the user in the resource group.
       */
      role: "read" | "write" | "admin" | "contributor"
    }>
  }>
}
⋮----
/**
   * Unique identifier for the user.
   */
⋮----
/**
   * Full name of the user.
   *
   * Needs 'profile' scope
   */
⋮----
/**
   * Username of the user.
   *
   * Need 'profile' scope
   */
⋮----
/**
   * URL of the user's avatar.
   *
   * Need 'profile' scope
   */
⋮----
/**
   * URL of the user's profile picture.
   *
   * Need 'profile' scope
   */
⋮----
/**
   * Need 'profile' scope
   *
   * Website of the user.
   */
⋮----
/**
   * Need 'email' scope
   *
   * Email address of the user.
   */
⋮----
/**
   * Need 'email' scope
   *
   * Whether the user's email address is verified. Should always be true, Hugging Face enforces
   * email verification for users to grant access to OAuth apps.
   */
⋮----
/**
   * Whether the user has a paid subscription.
   */
⋮----
/**
   * Whether the user has a payment method set up.
   *
   * Needs the `read-billing` scope.
   */
⋮----
/**
   * List of the user's organizations.
   */
⋮----
/**
     * Unique identifier for the organization.
     */
⋮----
/**
     * Name of the organization.
     */
⋮----
/**
     * URL of the organization's avatar.
     */
⋮----
/**
     * Username of the organization.
     */
⋮----
/**
     * Whether the organization has a paid enterprise subscription.
     */
⋮----
/**
     * Whether the organization has a payment method set up.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
⋮----
/**
     * The role of the user in the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
⋮----
/**
     * User needs to re-authenticate to access the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
⋮----
/**
     * User needs to enable MFA to access the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
⋮----
/**
     * Resource groups are a feature of enterprise organizations.
     *
     * They allow granular access control to resources within the organization.
     *
     * Access to the organization needs to be granted to the oauth app for this field to be present.
     */
⋮----
/**
       * Unique identifier for the resource group.
       */
⋮----
/**
       * The role of the user in the resource group.
       */
⋮----
/**
 * Add HuggingFace login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/huggingface
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import HuggingFace from "@auth/core/providers/huggingface"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     HuggingFace({
 *       clientId: HUGGINGFACE_CLIENT_ID,
 *       clientSecret: HUGGINGFACE_CLIENT_SECRET,
 *       authorization: {
 *        params: {
 *          scope: "openid profile email", // specify the scopes you need
 *          //  orgIds: "unique_org_id" // If your oauth app needs access to a specific organization of the user
 *        }
 *       },
 *     }),
 *   ],
 * })
 * ```
 *
 * The following scopes are available:
 *
 * - `openid`: Grants access to the user's OpenID Connect profile.
 * - `profile`: Grants access to the user's profile information.
 * - `email`: Grants access to the user's email address.
 * - `read-repos`: Grants read access to the user's repositories.
 * - `write-repos`: Grants write access to the user's repositories.
 * - `manage-repos`: Can create/delete repositories on behalf of the user.
 * - `write-discussions`: Can post on the user's behalf.
 * - `read-billing`: Know if the user has a payment method set up.
 * - `inference-api`: Can make calls to Inference providers on behalf of the user.
 * - `webhooks`: Can manage webhooks on behalf of the user.
 *
 * You need to enable them first in your OAuth app settings.
 *
 * /!\ By default, the `profile` and `email` scopes are enabled in NextAuth. So you need to enable
 * the `email` scope in your OAuth app settings or you will get a scope error.
 *
 * ### Resources
 *
 *  - [Hugging Face OAuth documentation](https://huggingface.co/docs/hub/en/oauth#creating-an-oauth-app)
 *  - [Create an OAuth application](https://huggingface.co/settings/applications/new)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Hugging Face provider is
 * based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The HuggingFace provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/huggingface.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Huggingface(
  options: OIDCUserConfig<HuggingfaceProfile>
): OIDCConfig<HuggingfaceProfile>

================
File: packages/core/src/providers/identity-server4.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>IdentityServer4</b> integration.</span>
 * <a href="https://identityserver4.readthedocs.io">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/identity-server4.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/identity-server4
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add IdentityServer4 login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/identity-server4
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import IdentityServer4 from "@auth/core/providers/identity-server4"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     IdentityServer4({
 *       clientId: IDENTITY_SERVER4_CLIENT_ID,
 *       clientSecret: IDENTITY_SERVER4_CLIENT_SECRET,
 *       issuer: IDENTITY_SERVER4_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [IdentityServer4 OAuth documentation](https://identityserver4.readthedocs.io/en/latest/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the IdentityServer4 provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::warning
 * IdentityServer4 is discontinued and only releases security updates until November 2022. You should consider an alternative provider.
 * :::
 * :::tip
 *
 * The IdentityServer4 provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/identity-server4.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function IdentityServer4(
  options: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>

================
File: packages/core/src/providers/index.ts
================
import type { Profile } from "../types.js"
import CredentialsProvider from "./credentials.js"
import type { CredentialsConfig, CredentialsProviderId } from "./credentials.js"
import type EmailProvider from "./email.js"
import type { EmailConfig, EmailProviderId } from "./email.js"
import type {
  OAuth2Config,
  OAuthConfig,
  OAuthProviderId,
  OIDCConfig,
} from "./oauth.js"
import type { WebAuthnConfig, WebAuthnProviderType } from "./webauthn.js"
⋮----
/**
 * Providers passed to Auth.js must define one of these types.
 *
 * @see [RFC 6749 - The OAuth 2.0 Authorization Framework](https://www.rfc-editor.org/rfc/rfc6749.html#section-2.3)
 * @see [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication)
 * @see [Email or Passwordless Authentication](https://authjs.dev/concepts/oauth)
 * @see [Credentials-based Authentication](https://authjs.dev/concepts/credentials)
 */
export type ProviderType =
  | "oidc"
  | "oauth"
  | "email"
  | "credentials"
  | WebAuthnProviderType
/** Shared across all {@link ProviderType} */
export interface CommonProviderOptions {
  /**
   * Uniquely identifies the provider in {@link AuthConfig.providers}
   * It's also part of the URL
   */
  id: string
  /**
   * The provider name used on the default sign-in page's sign-in button.
   * For example if it's "Google", the corresponding button will say:
   * "Sign in with Google"
   */
  name: string
  /** See {@link ProviderType} */
  type: ProviderType
}
⋮----
/**
   * Uniquely identifies the provider in {@link AuthConfig.providers}
   * It's also part of the URL
   */
⋮----
/**
   * The provider name used on the default sign-in page's sign-in button.
   * For example if it's "Google", the corresponding button will say:
   * "Sign in with Google"
   */
⋮----
/** See {@link ProviderType} */
⋮----
interface InternalProviderOptions {
  /** Used to deep merge user-provided config with the default config
   */
  options?: Record<string, unknown>
}
⋮----
/** Used to deep merge user-provided config with the default config
   */
⋮----
/**
 * Must be a supported authentication provider config:
 * - {@link OAuthConfig}
 * - {@link EmailConfigInternal}
 * - {@link CredentialsConfigInternal}
 *
 * For more information, see the guides:
 *
 * @see [OAuth/OIDC guide](https://authjs.dev/guides/providers/custom-provider)
 * @see [Email (Passwordless) guide](https://authjs.dev/guides/providers/email)
 * @see [Credentials guide](https://authjs.dev/guides/providers/credentials)
 */
export type Provider<P extends Profile = any> = (
  | ((
      | OIDCConfig<P>
      | OAuth2Config<P>
      | EmailConfig
      | CredentialsConfig
      | WebAuthnConfig
    ) &
      InternalProviderOptions)
  | ((
      ...args: any
    ) => (
      | OAuth2Config<P>
      | OIDCConfig<P>
      | EmailConfig
      | CredentialsConfig
      | WebAuthnConfig
    ) &
      InternalProviderOptions)
) &
  InternalProviderOptions
export type BuiltInProviders = Record<
  OAuthProviderId,
  (config: Partial<OAuthConfig<any>>) => OAuthConfig<any>
> &
  Record<CredentialsProviderId, typeof CredentialsProvider> &
  Record<EmailProviderId, typeof EmailProvider> &
  Record<
    WebAuthnProviderType,
    (config: Partial<WebAuthnConfig>) => WebAuthnConfig
  >
export type AppProviders = Array<
  Provider | ReturnType<BuiltInProviders[keyof BuiltInProviders]>
>
export interface AppProvider extends CommonProviderOptions {
  signinUrl: string
  callbackUrl: string
}
export type ProviderId =
  | CredentialsProviderId
  | EmailProviderId
  | OAuthProviderId
  | WebAuthnProviderType
  | (string & {}) // HACK: To allow user-defined providers in `signIn`
⋮----
| (string & {}) // HACK: To allow user-defined providers in `signIn`

================
File: packages/core/src/providers/instagram.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Instagram</b> integration.</span>
 * <a href="https://www.instagram.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/instagram.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/instagram
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Instagram login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/instagram
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Instagram from "@auth/core/providers/instagram"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Instagram({
 *       clientId: INSTAGRAM_CLIENT_ID,
 *       clientSecret: INSTAGRAM_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Instagram OAuth documentation](https://developers.facebook.com/docs/instagram-basic-display-api/getting-started)
 *  - [Instagram OAuth apps](https://developers.facebook.com/apps/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Instagram provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 *
 * :::warning
 * Email address is not returned by the Instagram API.
 * :::
 *
 * :::tip
 * Instagram display app required callback URL to be configured in your Facebook app and Facebook required you to use **https** even for localhost! In order to do that, you either need to [add an SSL to your localhost](https://www.freecodecamp.org/news/how-to-get-https-working-on-your-local-development-environment-in-5-minutes-7af615770eec/) or use a proxy such as [ngrok](https://ngrok.com/docs).
 * :::
 * :::tip
 *
 * The Instagram provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/instagram.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Instagram(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
async profile(profile)

================
File: packages/core/src/providers/kakao.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Kakao</b> integration.</span>
 * <a href="https://www.kakaocorp.com/page/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/kakao.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/kakao
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export type DateTime = string
export type Gender = "female" | "male"
export type Birthday = "SOLAR" | "LUNAR"
export type AgeRange =
  | "1-9"
  | "10-14"
  | "15-19"
  | "20-29"
  | "30-39"
  | "40-49"
  | "50-59"
  | "60-69"
  | "70-79"
  | "80-89"
  | "90-"
/**
 * https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api#req-user-info
 * type from : https://gist.github.com/ziponia/cdce1ebd88f979b2a6f3f53416b56a77
 */
export interface KakaoProfile extends Record<string, any> {
  id: number
  has_signed_up?: boolean
  connected_at?: DateTime
  synched_at?: DateTime
  properties?: {
    id?: string
    status?: string
    registered_at?: DateTime
    msg_blocked?: boolean
    nickname?: string
    profile_image?: string
    thumbnail_image?: string
  }
  kakao_account?: {
    profile_needs_agreement?: boolean
    profile_nickname_needs_agreement?: boolean
    profile_image_needs_agreement?: boolean
    profile?: {
      nickname?: string
      thumbnail_image_url?: string
      profile_image_url?: string
      is_default_image?: boolean
    }
    name_needs_agreement?: boolean
    name?: string
    email_needs_agreement?: boolean
    is_email_valid?: boolean
    is_email_verified?: boolean
    email?: string
    age_range_needs_agreement?: boolean
    age_range?: AgeRange
    birthyear_needs_agreement?: boolean
    birthyear?: string
    birthday_needs_agreement?: boolean
    birthday?: string
    birthday_type?: Birthday
    gender_needs_agreement?: boolean
    gender?: Gender
    phone_number_needs_agreement?: boolean
    phone_number?: string
    ci_needs_agreement?: boolean
    ci?: string
    ci_authenticated_at?: DateTime
  }
}
/**
 * Add Kakao login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/kakao
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Kakao from "@auth/core/providers/kakao"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Kakao({ clientId: KAKAO_CLIENT_ID, clientSecret: KAKAO_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Kakao OAuth documentation](https://developers.kakao.com/product/kakaoLogin)
 *  - [Kakao OAuth configuration](https://developers.kakao.com/docs/latest/en/kakaologin/common)
 *
 * ## Configuration
 * Create a provider and a Kakao application at https://developers.kakao.com/console/app. In the settings of the app under Kakao Login, activate web app, change consent items and configure callback URL.
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Kakao provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 *
 * The "Authorized redirect URIs" used when creating the credentials must include your full domain and end in the callback path. For example;
 *
 * ![스크린샷 2023-11-28 오후 9 27 41](https://github.com/nextauthjs/next-auth/assets/66895208/7d4c2df6-45a6-4937-bb10-4b47c987bff4)
 *
 * - For production: `https://{YOUR_DOMAIN}/api/auth/callback/kakao`
 * - For development: `http://localhost:3000/api/auth/callback/kakao`
 *
 * :::tip
 *
 * The Kakao provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/kakao.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::tip
 *
 * Kakao's client key is in **Summary(It is written as 요약정보 in Korean.) tab's App Keys Field**
 * (My Application > App Settings > Summary)
 *
 * ![스크린샷 2023-11-28 오후 9 47 17](https://github.com/nextauthjs/next-auth/assets/66895208/a87e5705-26b9-4f83-99d7-6df097a3632c)
 *
 * Kakao's clientSecret key is in **Security(It is written as 보안 in Korean.) tab's App Keys Field**
 * (My Application > Product Settings > Kakao Login > Security)
 *
 * ![스크린샷 2023-11-28 오후 9 38 25](https://github.com/nextauthjs/next-auth/assets/66895208/6a763921-4f70-40f4-a3e1-9abc78276d45)
 *
 * :::
 *
 * :::tip
 *
 * Kakao dev console has a button at the top right to change from KR to ENG
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Kakao<P extends KakaoProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/keycloak.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Keycloak</b> integration.</span>
 * <a href="https://keycloak.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/keycloak.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/keycloak
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface KeycloakProfile extends Record<string, any> {
  exp: number
  iat: number
  auth_time: number
  jti: string
  iss: string
  aud: string
  sub: string
  typ: string
  azp: string
  session_state: string
  at_hash: string
  acr: string
  sid: string
  email_verified: boolean
  name: string
  preferred_username: string
  given_name: string
  family_name: string
  email: string
  picture: string
  user: any
}
/**
 * Add Keycloak login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/keycloak
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Keycloak from "@auth/core/providers/keycloak"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Keycloak({
 *       clientId: KEYCLOAK_CLIENT_ID,
 *       clientSecret: KEYCLOAK_CLIENT_SECRET,
 *       issuer: KEYCLOAK_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Keycloak OIDC documentation](https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients)
 *
 * :::tip
 *
 * Create an openid-connect client in Keycloak with "confidential" as the "Access Type".
 *
 * :::
 *
 * :::note
 *
 * issuer should include the realm – e.g. https://my-keycloak-domain.com/realms/My_Realm
 *
 * :::
 * ### Notes
 *
 * By default, Auth.js assumes that the Keycloak provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Keycloak provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/keycloak.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Keycloak<P extends KeycloakProfile>(
  options: OIDCUserConfig<P>
): OIDCConfig<P>

================
File: packages/core/src/providers/kinde.ts
================
/**
 * <div class="provider" style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Kinde</b> integration.
 * </span>
 * <a href="https://kinde.com" style={{backgroundColor: "#0F0F0F", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/kinde.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/kinde
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** The returned user profile from Kinde when using the profile callback. [Reference](https://kinde.com/api/docs/#get-user-profile). */
export interface KindeProfile extends Record<string, any> {
  /** The user's given name. */
  first_name: string
  /** The user's unique identifier. */
  id: string
  /** The user's family name. */
  last_name: string
  /** URL pointing to the user's profile picture. */
  picture: string
  /** The user's email address. */
  preferred_email: string
  /** The user's identifier from a previous system. */
  provided_id: string
  /** The user's username. */
  username: string
}
⋮----
/** The user's given name. */
⋮----
/** The user's unique identifier. */
⋮----
/** The user's family name. */
⋮----
/** URL pointing to the user's profile picture. */
⋮----
/** The user's email address. */
⋮----
/** The user's identifier from a previous system. */
⋮----
/** The user's username. */
⋮----
/**
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/kinde
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Kinde from "@auth/core/providers/kinde"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Kinde({
 *       clientId: KINDE_CLIENT_ID,
 *       clientSecret: KINDE_CLIENT_SECRET,
 *       issuer: KINDE_DOMAIN,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Kinde docs](https://docs.kinde.com/)
 *
 * ### Notes
 *
 * The Kinde provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/kinde.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Kinde(
  config: OIDCUserConfig<KindeProfile>
): OIDCConfig<KindeProfile>

================
File: packages/core/src/providers/line.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>LINE</b> integration.</span>
 * <a href="https://LINE.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/line.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/line
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface LineProfile extends Record<string, any> {
  iss: string
  sub: string
  aud: string
  exp: number
  iat: number
  amr: string[]
  name: string
  picture: string
  user: any
}
/**
 * Add LINE login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/line
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import LINE from "@auth/core/providers/line"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     LINE({ clientId: LINE_CLIENT_ID, clientSecret: LINE_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [LINE Login documentation](https://developers.line.biz/en/docs/line-login/integrate-line-login/)
 *  - [LINE app console](https://developers.line.biz/console/)
 *
 * ## Configuration
 * Create a provider and a LINE login channel at https://developers.line.biz/console/. In the settings of the channel under LINE Login, activate web app and configure the following: Callback URL `http://localhost:3000/api/auth/callback/line`
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the LINE provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * To retrieve email address, you need to apply for Email address permission. Open [Line Developer Console](https://developers.line.biz/console/), go to your Login Channel. Scroll down bottom to find **OpenID Connect** -> **Email address permission**. Click **Apply** and follow the instruction.
 *
 * :::
 *
 * :::tip
 *
 * The LINE provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/line.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function LINE<P extends LineProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/linkedin.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>LinkedIn</b> integration.</span>
 * <a href="https://linkedin.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/linkedin.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/linkedin
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** @see https://learn.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/sign-in-with-linkedin-v2#response-body-schema */
export interface LinkedInProfile extends Record<string, any> {
  sub: string
  name: string
  given_name: string
  family_name: string
  picture: string
  locale: string
  email: string
  email_verified: boolean
}
/**
 * Add LinkedIn login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/linkedin
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import LinkedIn from "@auth/core/providers/linkedin"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     LinkedIn({
 *       clientId: LINKEDIN_CLIENT_ID,
 *       clientSecret: LINKEDIN_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [LinkedIn OAuth documentation](https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow)
 *  - [LinkedIn app console](https://www.linkedin.com/developers/apps/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the LinkedIn provider is
 * based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The LinkedIn provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/linkedin.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function LinkedIn<P extends LinkedInProfile>(
  options: OIDCUserConfig<P>
): OIDCConfig<P>

================
File: packages/core/src/providers/logto.ts
================
/**
 * <div style={{display: "flex", justifyContent: "space-between", alignItems: "center"}}>
 * <span style={{fontSize: "1.35rem" }}>
 *  Built-in sign in with <b>Logto</b> integration.
 * </span>
 * <a href="https://logto.io" style={{backgroundColor: "black", padding: "12px", borderRadius: "100%" }}>
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/logto.svg" width="24"/>
 * </a>
 * </div>
 *
 * @module providers/logto
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
/** The returned user profile from Logto when using the profile callback. [Reference](https://docs.logto.io/quick-starts/next-auth#scopes-and-claims). */
export interface LogtoProfile {
  /** The user's unique ID */
  sub: string
  /** The user's name */
  name: string
  /** The user's username */
  username: string
  /** The user's picture */
  picture: string
  /** The user's email */
  email: string
  /** A boolean indicating if the user's email is verified */
  email_verified: boolean
  /** The user's phone number */
  phone_number: string
  /** A boolean indicating if the user's phone number is verified */
  phone_number_verified: boolean
  /** The user's address */
  address: string
  /** Custom fields */
  custom_data: object
  /** The linked identities of the user */
  identities: object
  /** The linked SSO identities of the user */
  sso_identities: object[]
  /** The organization IDs the user belongs to */
  organizations: string[]
  /** The organization data the user belongs to */
  organization_data: object[]
  /** The organization roles the user belongs to with the format of organization_id:/role_name */
  organization_roles: string[]
  /** The user's custom attributes */
  [claim: string]: unknown
}
⋮----
/** The user's unique ID */
⋮----
/** The user's name */
⋮----
/** The user's username */
⋮----
/** The user's picture */
⋮----
/** The user's email */
⋮----
/** A boolean indicating if the user's email is verified */
⋮----
/** The user's phone number */
⋮----
/** A boolean indicating if the user's phone number is verified */
⋮----
/** The user's address */
⋮----
/** Custom fields */
⋮----
/** The linked identities of the user */
⋮----
/** The linked SSO identities of the user */
⋮----
/** The organization IDs the user belongs to */
⋮----
/** The organization data the user belongs to */
⋮----
/** The organization roles the user belongs to with the format of organization_id:/role_name */
⋮----
/** The user's custom attributes */
⋮----
/**
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/logto
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Logto from "@auth/core/providers/logto"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Logto({
 *       clientId: LOGTO_ID,
 *       clientSecret: LOGTO_SECRET,
 *       issuer: LOGTO_ISSUER
 *     }),
 *   ],
 * })
 * ```
 *
 *
 * ### Resources
 *
 * - [Logto Auth.js quickstart](https://docs.logto.io/quick-starts/next-auth)
 * - [Integrate Logto in your application](https://docs.logto.io/integrate-logto/integrate-logto-into-your-application)
 *
 * ### Notes
 *
 * The Logto provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/logto.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::info
 * By default, Auth.js assumes that the Logto provider is based on the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) spec
 * :::
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Logto(
  options: OIDCUserConfig<LogtoProfile>
): OIDCConfig<LogtoProfile>
⋮----
profile(profile)

================
File: packages/core/src/providers/loops.ts
================
/**
 * <div style={{backgroundColor: "#24292f", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Loops</b> integration.</span>
 * <a href="https://loops.so">
 *  <img style={{display: "block"}} src="https://authjs.dev/img/providers/loops.svg" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/loops
 */
import type { EmailConfig, EmailUserConfig } from "./email.js"
export type LoopsUserConfig = Omit<Partial<LoopsConfig>, "options" | "type">
export interface LoopsConfig
  extends Omit<EmailConfig, "sendVerificationRequest" | "options"> {
  id: string
  apiKey: string
  transactionalId: string
  sendVerificationRequest: (params: Params) => Promise<void>
  options: LoopsUserConfig
}
type Params = Parameters<EmailConfig["sendVerificationRequest"]>[0] & {
  provider: LoopsConfig
}
/**
 *
 * @param config
 * @returns LoopsConfig
 * @requires LoopsUserConfig
 * @example
 * ```ts
 * Loops({
 *   apiKey: process.env.AUTH_LOOPS_KEY,
 *   transactionalId: process.env.AUTH_LOOPS_TRANSACTIONAL_ID,
 * })
 * ```
 *
 * @typedef LoopsUserConfig
 */
export default function Loops(config: LoopsUserConfig): LoopsConfig
⋮----
async sendVerificationRequest(params: Params)

================
File: packages/core/src/providers/mailchimp.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Mailchimp</b> integration.</span>
 * <a href="https://mailchimp.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/mailchimp.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/mailchimp
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Mailchimp login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/mailchimp
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Mailchimp from "@auth/core/providers/mailchimp"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Mailchimp({
 *       clientId: MAILCHIMP_CLIENT_ID,
 *       clientSecret: MAILCHIMP_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Mailchimp OAuth documentation](https://admin.mailchimp.com/account/oauth2/client/)
 *  - [Mailchimp documentation: Access user data](https://mailchimp.com/developer/marketing/guides/access-user-data-oauth-2/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Mailchimp provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Mailchimp provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/mailchimp.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Mailchimp(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/mailgun.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Mailgun</b> integration.</span>
 * <a href="https://www.mailgun.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/mailgun.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/mailgun
 */
import type { EmailConfig, EmailUserConfig } from "./index.js"
import { html, text } from "../lib/utils/email.js"
/**
 * Add Mailgun login to your page.
 *
 * ### Setup
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Mailgun from "@auth/core/providers/mailgun"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Mailgun({ from: MAILGUN_DOMAIN }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Mailgun documentation](https://documentation.mailgun.com/docs/mailgun)
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function MailGun(config: EmailUserConfig): EmailConfig
⋮----
async sendVerificationRequest(params)

================
File: packages/core/src/providers/mailru.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Mailru</b> integration.</span>
 * <a href="https://mail.ru">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/mailru.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/mailru
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Mailru login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/mailru
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Mailru from "@auth/core/providers/mailru"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Mailru({ clientId: MAILRU_CLIENT_ID, clientSecret: MAILRU_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Mailru OAuth documentation](https://o2.mail.ru/docs)
 *  - [Mailru app console](https://o2.mail.ru/app/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Mailru provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Mailru provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/ma.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Mailru(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>

================
File: packages/core/src/providers/mastodon.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Mastodon</b> integration.</span>
 * <a href="https://mastodon.social">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/mastodon.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/mastodon
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface MastodonProfile extends Record<string, any> {
  id: string
  username: string
  acct: string
  display_name: string
  locked: boolean
  bot: boolean
  created_at: string
  note: string
  url: string
  avatar: string
  avatar_static: string
  header: string
  header_static: string
  followers_count: number
  following_count: number
  statuses_count: number
  last_status_at: string | null
}
/**
 * Add Mastodon login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/mastodon
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Mastodon from "@auth/core/providers/mastodon"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Mastodon({
 *       clientId: MASTODON_CLIENT_ID,
 *       clientSecret: MASTODON_CLIENT_SECRET,
 *       issuer: MASTODON_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Mastodon OAuth documentation](https://docs.joinmastodon.org/client/token/)
 *  - [Mastodon OAuth Configuration](https://mastodon.social/settings/applications)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Mastodon provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * Due to Mastodons infrastructure beeing a Fediverse you have to define the `issuer` you want to connect to.
 *
 * :::tip
 *
 * The Mastodon provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/mastodon.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Mastodon<P extends MastodonProfile>(
  options: OAuthUserConfig<P> & {
    issuer: string
  }
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/mattermost.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Mattermost</b> integration.</span>
 * <a href="https://mattermost.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/mattermost.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/mattermost
 */
import type { OAuthConfig, OAuthUserConfig } from "./oauth.js"
/** [Get a user](https://api.mattermost.com/#tag/users/operation/GetUser) */
export interface MattermostProfile {
  id: string
  /** The time in milliseconds a user was created */
  create_at: number
  /** The time in milliseconds a user was last updated */
  update_at: number
  /** The time in milliseconds a user was deleted */
  delete_at: number
  username: string
  auth_data: string
  auth_service: string
  email: string
  email_verified: boolean
  nickname: string
  first_name: string
  last_name: string
  position: string
  roles: string
  notify_props: {
    /** Set to "true" to enable channel-wide notifications (@channel, @all, etc.), "false" to disable. Defaults to "true". */
    channel: string
    comments: string
    /** Set to "all" to receive desktop notifications for all activity, "mention" for mentions and direct messages only, and "none" to disable. Defaults to "all". */
    desktop: string
    /** Set to "true" to enable sound on desktop notifications, "false" to disable. Defaults to "true". */
    desktop_sound: string
    desktop_threads: string
    /** Set to "true" to enable email notifications, "false" to disable. Defaults to "true". */
    email: string
    email_threads: string
    /** Set to "true" to enable mentions for first name. Defaults to "true" if a first name is set, "false" otherwise. */
    first_name: string
    /** A comma-separated list of words to count as mentions. Defaults to username and @username. */
    mention_keys: string
    /** Set to "all" to receive push notifications for all activity, "mention" for mentions and direct messages only, and "none" to disable. Defaults to "mention". */
    push: string
    push_status: string
    push_threads: string
  }
  last_password_update: number
  locale: string
  timezone: {
    /** This value is set automatically when the "useAutomaticTimezone" is set to "true". */
    automaticTimezone: string
    /** Value when setting manually the timezone, i.e. "Europe/Berlin". */
    manualTimezone: string
    /** Set to "true" to use the browser/system timezone, "false" to set manually. Defaults to "true". */
    useAutomaticTimezone: string
  }
  disable_welcome_email: boolean
  /** ID of accepted terms of service, if any. This field is not present if empty. */
  terms_of_service_id?: string
  /** The time in milliseconds the user accepted the terms of service */
  terms_of_service_create_at?: number
}
⋮----
/** The time in milliseconds a user was created */
⋮----
/** The time in milliseconds a user was last updated */
⋮----
/** The time in milliseconds a user was deleted */
⋮----
/** Set to "true" to enable channel-wide notifications (@channel, @all, etc.), "false" to disable. Defaults to "true". */
⋮----
/** Set to "all" to receive desktop notifications for all activity, "mention" for mentions and direct messages only, and "none" to disable. Defaults to "all". */
⋮----
/** Set to "true" to enable sound on desktop notifications, "false" to disable. Defaults to "true". */
⋮----
/** Set to "true" to enable email notifications, "false" to disable. Defaults to "true". */
⋮----
/** Set to "true" to enable mentions for first name. Defaults to "true" if a first name is set, "false" otherwise. */
⋮----
/** A comma-separated list of words to count as mentions. Defaults to username and @username. */
⋮----
/** Set to "all" to receive push notifications for all activity, "mention" for mentions and direct messages only, and "none" to disable. Defaults to "mention". */
⋮----
/** This value is set automatically when the "useAutomaticTimezone" is set to "true". */
⋮----
/** Value when setting manually the timezone, i.e. "Europe/Berlin". */
⋮----
/** Set to "true" to use the browser/system timezone, "false" to set manually. Defaults to "true". */
⋮----
/** ID of accepted terms of service, if any. This field is not present if empty. */
⋮----
/** The time in milliseconds the user accepted the terms of service */
⋮----
/**
 * Add Mattermost login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/mattermost
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Mattermost from "@auth/core/providers/mattermost"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Mattermost({
 *       clientId: MATTERMOST_CLIENT_ID,
 *       clientSecret: MATTERMOST_CLIENT_SECRET,
 *       issuer: MATTERMOST_ISSUER, // The base url of your Mattermost instance. e.g `https://my-cool-server.cloud.mattermost.com`
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Mattermost OAuth documentation](https://example.com)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Mattermost provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * To create your Mattermost OAuth2 app visit `http://<your Mattermost instance url>/<your team>/integrations/oauth2-apps`
 *
 * :::warning
 *
 * The Mattermost provider requires the `issuer` option to be set. This is the base url of your Mattermost instance. e.g https://my-cool-server.cloud.mattermost.com
 *
 * :::
 *
 * :::tip
 *
 * The Mattermost provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/mattermost.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Mattermost<P extends MattermostProfile>(
  config: OAuthUserConfig<P> & { issuer: string }
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/medium.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Medium</b> integration.</span>
 * <a href="https://medium.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/medium.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/medium
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Medium login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/medium
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Medium from "@auth/core/providers/medium"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Medium({ clientId: MEDIUM_CLIENT_ID, clientSecret: MEDIUM_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Medium OAuth documentation](https://example.com)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Medium provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::warning
 *
 * Email address is not returned by the Medium API.
 *
 * :::
 *
 * :::tip
 *
 * The Medium provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/medium.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Medium(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/microsoft-entra-id.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#0072c6", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Microsoft Entra ID</b> integration.</span>
 * <a href="https://learn.microsoft.com/en-us/entra/identity">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/microsoft-entra-id.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/microsoft-entra-id
 */
import { conformInternal, customFetch } from "../lib/symbols.js"
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface MicrosoftEntraIDProfile extends Record<string, any> {
  sub: string
  nickname: string
  email: string
  picture: string
}
/**
 *
 * Add Microsoft Entra ID login to your page.
 *
 * ## Setup
 *
 * ### Callback URL
 * ```
 * https://example.com/auth/callback/microsoft-entra-id
 * ```
 *
 * ### Configuration
 *
 * @example
 *
 * ```ts
 * import MicrosoftEntraID from "@auth/core/providers/microsoft-entra-id"
 * ...
 * providers: [
 *   MicrosoftEntraID({
 *     clientId: env.AUTH_MICROSOFT_ENTRA_ID_ID,
 *     clientSecret: env.AUTH_MICROSOFT_ENTRA_ID_SECRET,
 *   }),
 * ]
 * ...
 * ```
 *
 * ### Resources
 *
 *  - [Microsoft Entra OAuth documentation](https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow)
 *  - [Microsoft Entra OAuth apps](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
 *
 * ### To allow specific Active Directory users access:
 *
 * By default, the Entra ID provider lets the users to log in with any Microsoft account (either Personal, School or Work).
 *
 * To only allow your organization's users to log in, you'll need to set the `issuer`, in addition to the client id and secret.
 *
 * @example
 * ```ts
 * import MicrosoftEntraID from "@auth/core/providers/microsoft-entra-id"
 *
 * providers: [
 *   MicrosoftEntraID({
 *     clientId: env.AUTH_MICROSOFT_ENTRA_ID_ID,
 *     clientSecret: env.AUTH_MICROSOFT_ENTRA_ID_SECRET,
 *     issuer: env.AUTH_MICROSOFT_ENTRA_ID_TENANT_ID,
 *   }),
 * ]
 * ```
 *
 * ### Notes
 *
 * Microsoft Entra ID returns the profile picture in an ArrayBuffer, instead of just a URL to the image, so our provider converts it to a base64 encoded image string and returns that instead. See: https://learn.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0&tabs=http#examples. The default image size is 48x48 to avoid [running out of space](https://next-auth.js.org/faq#:~:text=What%20are%20the%20disadvantages%20of%20JSON%20Web%20Tokens%3F) in case the session is saved as a JWT.
 *
 * By default, Auth.js assumes that the Microsoft Entra ID provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Microsoft Entra ID provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/microsoft-entra-id.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function MicrosoftEntraID(
  config: OIDCUserConfig<MicrosoftEntraIDProfile> & {
    /**
     * https://learn.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0&tabs=http#examples
     *
     * @default 48
     */
    profilePhotoSize?: 48 | 64 | 96 | 120 | 240 | 360 | 432 | 504 | 648
  }
): OIDCConfig<MicrosoftEntraIDProfile>
⋮----
/**
     * https://learn.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0&tabs=http#examples
     *
     * @default 48
     */
⋮----
async profile(profile, tokens)
⋮----
// https://learn.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0&tabs=http#examples
⋮----
// Confirm that profile photo was returned
⋮----
// TODO: Do this without Buffer
⋮----
/** Entra ID returns the wrong issuer @see https://github.com/MicrosoftDocs/azure-docs/issues/113944 */

================
File: packages/core/src/providers/naver.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Naver</b> integration.</span>
 * <a href="https://naver.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/naver.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/naver
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** https://developers.naver.com/docs/login/profile/profile.md */
export interface NaverProfile extends Record<string, any> {
  resultcode: string
  message: string
  response: {
    id: string
    nickname?: string
    name?: string
    email?: string
    gender?: "F" | "M" | "U"
    age?: string
    birthday?: string
    profile_image?: string
    birthyear?: string
    mobile?: string
  }
}
/**
 * Add Naver login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/naver
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Naver from "@auth/core/providers/naver"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Naver({ clientId: NAVER_CLIENT_ID, clientSecret: NAVER_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Naver OAuth documentation](https://developers.naver.com/docs/login/overview/overview.md)
 *  - [Naver OAuth documentation 2](https://developers.naver.com/docs/login/api/api.md)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Naver provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Naver provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/naver.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Naver<P extends NaverProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/netlify.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Netlify</b> integration.</span>
 * <a href="https://netlify.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/netlify.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/netlify
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Netlify login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/netlify
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Netlify from "@auth/core/providers/netlify"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Netlify({
 *       clientId: NETLIFY_CLIENT_ID,
 *       clientSecret: NETLIFY_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Netlify OAuth blog](https://www.netlify.com/blog/2016/10/10/integrating-with-netlify-oauth2/)
 *  - [Netlify OAuth example](https://github.com/netlify/netlify-oauth-example/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Netlify provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Netlify provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/netlify.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Netlify(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/netsuite.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#24292f", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>NetSuite</b> integration.</span>
 * <a href="https://system.netsuite.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/netsuite.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/netsuite
 */
/*
 * This NetSuite provider uses OAuth 2 Features. Ensure you have an integration record and access token set up in order to use this provider.
 * Read more about OAuth 2 setup here: https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771281570.html
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface OAuthNetSuiteOptions {
  /**
   *  The prompt options - also viewable below
   *
   *  @link https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_160855585734.html
   *
   * 	authorization.params.prompt
   *
   * The optional prompt parameter provides additional control of when the login/consent screen appears. Following are the values you can use with the prompt parameter:
   * "none" - the consent screen does not appear. If there is no active session, the application returns an error.
   * "login" - the user must authenticate even if there is an active session.
   * This option only works if the application sends the request to the account-specific domain.
   * "consent" - the consent screen appears every time. The user must authenticate if there is no active session.
   * login consent or consent login - the consent screen appears every time, and the user must authenticate even if there is an active session and allow the connection to the NetSuite. Similar to GitHub, Google, and Facebook data consent screens.
   */
  prompt: string | "none" | "login" | "consent"
  /**
   * EX: TSTDRV1234567 or 81555 for prod
   */
  accountID: string
  /**
   * restlets rest_webservices or restlets or rest_webservices suiteanalytics_connect restlets
   */
  scope: string
  /**
   * Either a restlet or suitelet returning runtime info or record info -> RESTlet recommended
   */
  userinfo: string
}
⋮----
/**
   *  The prompt options - also viewable below
   *
   *  @link https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_160855585734.html
   *
   * 	authorization.params.prompt
   *
   * The optional prompt parameter provides additional control of when the login/consent screen appears. Following are the values you can use with the prompt parameter:
   * "none" - the consent screen does not appear. If there is no active session, the application returns an error.
   * "login" - the user must authenticate even if there is an active session.
   * This option only works if the application sends the request to the account-specific domain.
   * "consent" - the consent screen appears every time. The user must authenticate if there is no active session.
   * login consent or consent login - the consent screen appears every time, and the user must authenticate even if there is an active session and allow the connection to the NetSuite. Similar to GitHub, Google, and Facebook data consent screens.
   */
⋮----
/**
   * EX: TSTDRV1234567 or 81555 for prod
   */
⋮----
/**
   * restlets rest_webservices or restlets or rest_webservices suiteanalytics_connect restlets
   */
⋮----
/**
   * Either a restlet or suitelet returning runtime info or record info -> RESTlet recommended
   */
⋮----
export interface NetSuiteProfile {
  // Main N/runtime.getCurrentUser() object return
  id: number
  name: string
  email: string
  location: number
  role: number
  roleId?: string
  roleCenter?: string
  contact?: number
  subsidiary?: number
  department?: number
}
⋮----
// Main N/runtime.getCurrentUser() object return
⋮----
/**
 * Add Netsuite login to your page and make requests to:
 * - [NetSuite RESTLets](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_4567507062.html#Tracking-RESTlet-Calls-Made-with-TBA-and-OAuth-2.0).
 * - [NetSuite REST Web Services](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/book_1559132836.html#SuiteTalk-REST-Web-Services-API-Guide).
 *
 * ### Setup
 *
 * #### Disclaimer
 * By using this provider, you consent to sharing your data with NetSuite.
 * By using this provider we assume you comply with NetSuite's [Terms of Service](https://www.netsuite.com/portal/assets/pdf/terms_of_service.pdf) and [Privacy Policy](https://www.oracle.com/legal/privacy).
 * The author of this provider is not affiliated with NetSuite. Proceeding with this provider you must be a NetSuite customer and have a NetSuite account (Full access user).
 * **Ensure the OAuth 2.0 Feature is enabled in your NetSuite account with the proper permissions set up on the current role/user**
 *
 * Before setting up the provider, you will need to:
 * - [Create an Integration Record](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771733782.html#procedure_157838925981)
 *   - Uncheck the TBA Auth Flow checkbox.
 *   - Check OAuth 2.0 Auth Flow checkbox.
 *   - Copy and paste the `Callback URL` below into the `Redirect URI` field.
 *   - Then select the scope(s) you want to use.
 *     - **REST Web Services** (`rest_webservices`) - Access to REST Web Services.
 *     - **RESTlets**(`restlets`) - Access to RESTLets.
 *     - **SuiteAnalytics Connect** (`suiteanalytics_connect`) - Access to SuiteAnalytics Connect.
 *   - Add any policies you want to use.
 *     - Application Logo (_Optional_) (Shown to users when they are asked to grant access to your application). - Consent Screen
 *     - Application Terms of Use (_Optional_) - A PDF file that contains the terms of use for your application. - Consent Screen
 *     - Application Privacy Policy (_Optional_) - A PDF file that contains the privacy policy for your application. - Consent Screen
 *   - OAuth 2.0 Consent Policy Preference - This setting determines whether the user is asked to grant access to your application **every time** they sign in or only the **first time** they sign in or **never**.
 *   - **Save** the Integration record.
 *   - The Integration record will be used to generate the `clientId` and `clientSecret` for the provider. **Save the generated values for later**
 *
 * #### Callback URL
 *
 * :::tip
 * When setting the Redirect URI in the Integration record, you must use the `https` protocol.
 * Otherwise, you will get an error when trying to sign in. (_INVALID_LOGIN_ATTEMPT_).
 * If you are testing locally, you can use a service like [ngrok](https://ngrok.com/) to create a secure tunnel to your localhost.
 * :::
 *
 * ```
 * https://example.com/api/auth/callback/netsuite
 * ```
 *
 * :::tip
 * Our `userinfo` needs to compose of a suitelet or RESTLet url that gives us the information about the user. This has to be very fast in which the handshake profile gather execution can't take long.
 * The best bet is to use the `N/runtime` module to get the basics first. - Here is an example of a RESTlet below. Be sure to deploy and enable access to "All Roles".
 * :::
 *
 * #### Example RESTLet Callback Handler
 * Be sure to deploy and use the **external** RESTLet url of any usage of the URIs.
 *
 * ```js
 * * /**
 * * @NApiVersion 2.1
 * * @NScriptType Restlet
 * *\/
 * define(["N/runtime"], /**
 *  @param{runtime} runtimee
 * \/ (runtime) => {
 *  /**
 *   * Defines the function that is executed when a GET request is sent to a RESTlet.
 *   * @param {Object} requestParams - Parameters from HTTP request URL; parameters passed as an Object (for all supported
 *   *     content types)
 *   * @returns {string | Object} HTTP response body; returns a string when request Content-Type is 'text/plain'; returns an
 *   *     Object when request Content-Type is 'application/json' or 'application/xml'
 *   * @since 2015.2
 *   *\/
 *   const get = (requestParams) => {
 *     let userObject = runtime.getCurrentUser();
 *
 *     try {
 *       log.debug({ title: "Payload received:", details: requestParams });
 *
 *       const { id, name, role, location, email, contact } = userObject;
 *
 *       log.audit({ title: "Current User Ran", details: name });
 *
 *       let user = {
 *         id,
 *         name,
 *         role,
 *         location,
 *         email,
 *         contact,
 *       };
 *
 *       log.debug({ title: "Returning user", details: user });
 *
 *       return JSON.stringify(user);
 *     } catch (e) {
 *       log.error({ title: "Error grabbing current user:", details: e });
 *     }
 *   };
 *
 *   return {
 *     get,
 *   };
 * );
 * ```
 *
 * > **Note**: Above is an example of returning the basic runtime information. Be sure to create a new script record and deployment record. Upon saving the deployment record. We will get our URLs for our RESTlet.
 *
 * ### Configuration
 *
 * ```ts
 * import { Auth } from "@auth/core"
 * import Netsuite from "@auth/core/providers/netsuite"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *       NetSuite({
 *         accountID: NETSUITE_ACCOUNT_ID, // EX: TSTDRV1234567 or 81555 for prod, and 1234567-SB1 for Sandbox accounts not "_" use "-".
 *        // Returns the current user using the N/runtime module. This url can be a suitelet or RESTlet (Recommended)
 *        // Using getCurrentUser(); So we match this schema returned from this RESTlet in the profile callback. (Required)
 *         userinfo: "https://1234567.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=123&deploy=1",
 *       })
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [NetSuite - Creating an Integration Record (OAuth 2.0)](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771733782.html#Related-Topics)
 * - [NetSuite - Authorizing OAuth Requests](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps)
 * - [NetSuite - Configure OAuth Roles](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_157771510070.html#Set-Up-OAuth-2.0-Roles)
 * - [Learn more about NetSuite OAuth 2.0](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/chapter_157769826287.html#OAuth-2.0)
 *
 * ### Notes
 *
 * :::tip
 * Make sure the `userinfo` matches the return type of the profile callback to ensure the user session gets read correctly.
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/providers/custom-provider#override-default-options).
 * :::
 *
 */
export default function NetSuite<P extends NetSuiteProfile>(
  config: OAuthUserConfig<P> & OAuthNetSuiteOptions
): OAuthConfig<P>
⋮----
profile(profile)
⋮----
// This is the default runtime.getCurrentUser() object returned from the RESTlet or SUITELet

================
File: packages/core/src/providers/nextcloud.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#0082C9", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Nextcloud</b> integration.</span>
 * <a href="https://nextcloud.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/nextcloud.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/nextcloud
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Represents the Nextcloud user profile data returned from the `/ocs/v1.php/cloud/users/`.
 * @see [Check out the documentation for more details](https://docs.nextcloud.com/server/latest/admin_manual/configuration_user/instruction_set_for_users.html#get-data-of-a-single-user)
 */
export interface NextcloudProfile extends Record<string, any> {
  /**
   * The user's username.
   * @example "frank"
   */
  id: string
  /**
   * The email address associated with the user.
   * @example "frank@domain.tld"
   */
  email: string | null
  /**
   * The display name of the user.
   * @example "Frank K."
   */
  displayname: string
  /**
   * The phone number of the user.
   */
  phone: string
  /**
   * The address of the user.
   * @example "Foobar 12, 12345 Town"
   */
  address: string
  /**
   * The website URL of the user.
   * @example "https://nextcloud.com"
   */
  website: string
  /**
   * The user's Twitter handle.
   * @example "Nextcloud"
   */
  twitter: string
  /**
   * The user's Fediverse handle.
   */
  fediverse: string
  /**
   * The organization associated with the user.
   */
  organisation: string
  /**
   * The role or position of the user.
   */
  role: string
  /**
   * The headline or brief description of the user.
   */
  headline: string
  /**
   * The biography or detailed description of the user.
   */
  biography: string
  /**
   * An array of group names that the user belongs to.
   * @example ["admin", "group1", "group2"]
   */
  groups: string[]
  /**
   * The language preference of the user.
   * @example "en"
   */
  language: string
  /**
   * The locale or language locale of the user.
   * @example "en_US"
   */
  locale: string
  /**
   * Indicates whether the user account is enabled or disabled.
   * @example true
   */
  enabled: boolean
  /**
   * The storage location of the user's files.
   * @example "/path/to/nextcloud/data/frank"
   */
  storageLocation: string
}
⋮----
/**
   * The user's username.
   * @example "frank"
   */
⋮----
/**
   * The email address associated with the user.
   * @example "frank@domain.tld"
   */
⋮----
/**
   * The display name of the user.
   * @example "Frank K."
   */
⋮----
/**
   * The phone number of the user.
   */
⋮----
/**
   * The address of the user.
   * @example "Foobar 12, 12345 Town"
   */
⋮----
/**
   * The website URL of the user.
   * @example "https://nextcloud.com"
   */
⋮----
/**
   * The user's Twitter handle.
   * @example "Nextcloud"
   */
⋮----
/**
   * The user's Fediverse handle.
   */
⋮----
/**
   * The organization associated with the user.
   */
⋮----
/**
   * The role or position of the user.
   */
⋮----
/**
   * The headline or brief description of the user.
   */
⋮----
/**
   * The biography or detailed description of the user.
   */
⋮----
/**
   * An array of group names that the user belongs to.
   * @example ["admin", "group1", "group2"]
   */
⋮----
/**
   * The language preference of the user.
   * @example "en"
   */
⋮----
/**
   * The locale or language locale of the user.
   * @example "en_US"
   */
⋮----
/**
   * Indicates whether the user account is enabled or disabled.
   * @example true
   */
⋮----
/**
   * The storage location of the user's files.
   * @example "/path/to/nextcloud/data/frank"
   */
⋮----
/**
 * Add Nextcloud login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/auth/callback/nextcloud
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Nextcloud from "@auth/core/providers/nextcloud"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Nextcloud({ clientId: AUTH_NEXTCLOUD_ID, clientSecret: AUTH_NEXTCLOUD_SECRET, issuer: AUTH_NEXTCLOUD_ISSUER }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Nextcloud Documentation](https://docs.nextcloud.com/)
 * - [Nextcloud OAuth 2](https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/oauth2.html)
 * - [Nextcloud Clients and Client APIs](https://docs.nextcloud.com/server/latest/developer_manual/client_apis/index.html)
 * - [Nextcloud User provisioning API](https://docs.nextcloud.com/server/latest/admin_manual/configuration_user/user_provisioning_api.html)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Nextcloud provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Nextcloud provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/nextcloud.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Nextcloud(
  options: OAuthUserConfig<NextcloudProfile>
): OAuthConfig<NextcloudProfile>
⋮----
async request(
⋮----
profile(profile)

================
File: packages/core/src/providers/nodemailer.ts
================
import { createTransport } from "nodemailer"
import { AuthError } from "../errors.js"
import { html, text } from "../lib/utils/email.js"
import type { Transport, TransportOptions } from "nodemailer"
⋮----
import type { Awaitable, Theme } from "../types.js"
import type { EmailConfig } from "./email.js"
type AllTransportOptions =
  | string
  | SMTPTransport
  | SMTPTransport.Options
  | SMTPPool
  | SMTPPool.Options
  | SendmailTransport
  | SendmailTransport.Options
  | StreamTransport
  | StreamTransport.Options
  | JSONTransport
  | JSONTransport.Options
  | SESTransport
  | SESTransport.Options
  | Transport<any>
  | TransportOptions
export interface NodemailerConfig extends EmailConfig {
  server?: AllTransportOptions
  sendVerificationRequest: (params: {
    identifier: string
    url: string
    expires: Date
    provider: NodemailerConfig
    token: string
    theme: Theme
    request: Request
  }) => Awaitable<void>
  options?: NodemailerUserConfig
}
export type NodemailerUserConfig = Omit<
  Partial<NodemailerConfig>,
  "options" | "type"
>
export default function Nodemailer(
  config: NodemailerUserConfig
): NodemailerConfig
⋮----
async sendVerificationRequest(params)

================
File: packages/core/src/providers/notion.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Notion</b> integration.</span>
 * <a href="https://notion.so">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/notion.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/notion
 */
import type { OAuthConfig, OAuthUserConfig } from "./oauth.js"
export interface Person extends Record<string, any> {
  email: string
}
// https://developers.notion.com/reference/user
export interface User extends Record<string, any> {
  object: "user" | "bot"
  id: string
  type: string
  name: string
  avatar_url: null | string
  person: Person
  owner?: {
    type: "workspace" | "user"
    workspace: string
  }
  workspace_name?: string | null
}
export interface Owner {
  type: string
  user: User
}
// Notion responds with an access_token + some additional information, which we define here
// More info -  https://developers.notion.com/docs/authorization#step-4-notion-responds-with-an-access_token-and-some-additional-information
export interface NotionProfile extends Record<string, any> {
  access_token: string
  bot_id: string
  duplicated_template_id: string
  owner?: Owner
  workspace_icon: string
  workspace_id: number
  workspace_name: string
}
// Any config required that isn't part of the `OAuthUserConfig` spec should belong here
// For example, we must pass a `redirectUri` to the Notion API when requesting tokens, therefore we add it here
interface AdditionalConfig {
  redirectUri: string
}
⋮----
/**
 * Add Notion login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/notion
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Notion from "@auth/core/providers/notion"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Notion({
 *       clientId: NOTION_CLIENT_ID,
 *       clientSecret: NOTION_CLIENT_SECRET,
 *       redirectUri: NOTION_CLIENT_REDIRECT_URI,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 * - [Notion Docs](https://developers.notion.com/docs)
 * - [Notion Authorization Docs](https://developers.notion.com/docs/authorization)
 * - [Notion Integrations](https://www.notion.so/my-integrations)
 *
 * ### Notes
 * You need to select "Public Integration" on the configuration page to get an `oauth_id` and `oauth_secret`. Private integrations do not provide these details.
 * You must provide a `clientId` and `clientSecret` to use this provider, as-well as a redirect URI (due to this being required by Notion endpoint to fetch tokens).
 *
 * :::tip
 *
 * The Notion provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/notion.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function NotionProvider<P extends NotionProfile>(
  options: OAuthUserConfig<P> & AdditionalConfig
): OAuthConfig<P>
⋮----
// The result of this method will be the input to the `profile` callback.
// We use a custom request handler, since we need to do things such as pass the "Notion-Version" header
// More info: https://authjs.dev/getting-started/providers/notion
async request(context)
⋮----
async profile(profile)

================
File: packages/core/src/providers/oauth.ts
================
import type { Client, PrivateKey } from "oauth4webapi"
import type { CommonProviderOptions } from "../providers/index.js"
import type { Awaitable, Profile, TokenSet, User } from "../types.js"
import type { AuthConfig } from "../index.js"
import type { conformInternal, customFetch } from "../lib/symbols.js"
// TODO: fix types
type AuthorizationParameters = any
type CallbackParamsType = any
type IssuerMetadata = any
type OAuthCallbackChecks = any
type OpenIDCallbackChecks = any
⋮----
export type OAuthChecks = OpenIDCallbackChecks | OAuthCallbackChecks
type PartialIssuer = Partial<Pick<IssuerMetadata, "jwks_endpoint" | "issuer">>
type UrlParams = Record<string, unknown>
type EndpointRequest<C, R, P> = (
  context: C & {
    /** Provider is passed for convenience, and also contains the `callbackUrl`. */
    provider: OAuthConfigInternal<P> & {
      signinUrl: string
      callbackUrl: string
    }
  }
) => Awaitable<R> | void
⋮----
/** Provider is passed for convenience, and also contains the `callbackUrl`. */
⋮----
/** Gives granular control of the request to the given endpoint */
interface AdvancedEndpointHandler<P extends UrlParams, C, R> {
  /** Endpoint URL. Can contain parameters. Optionally, you can use `params` */
  url?: string
  /** These will be prepended to the `url` */
  params?: P
  /**
   * Control the corresponding OAuth endpoint request completely.
   * Useful if your provider relies on some custom behaviour
   * or it diverges from the OAuth spec.
   *
   * - ⚠ **This is an advanced option.**
   * You should **try to avoid using advanced options** unless you are very comfortable using them.
   */
  request?: EndpointRequest<C, R, P>
  /** @internal */
  conform?: (response: Response) => Awaitable<Response | undefined>
  clientPrivateKey?: CryptoKey | PrivateKey
}
⋮----
/** Endpoint URL. Can contain parameters. Optionally, you can use `params` */
⋮----
/** These will be prepended to the `url` */
⋮----
/**
   * Control the corresponding OAuth endpoint request completely.
   * Useful if your provider relies on some custom behaviour
   * or it diverges from the OAuth spec.
   *
   * - ⚠ **This is an advanced option.**
   * You should **try to avoid using advanced options** unless you are very comfortable using them.
   */
⋮----
/** @internal */
⋮----
/**
 * Either an URL (containing all the parameters) or an object with more granular control.
 * @internal
 */
export type EndpointHandler<
  P extends UrlParams,
  C = any,
  R = any,
> = AdvancedEndpointHandler<P, C, R>
export type AuthorizationEndpointHandler =
  EndpointHandler<AuthorizationParameters>
export type TokenEndpointHandler = EndpointHandler<
  UrlParams,
  {
    /**
     * Parameters extracted from the request to the `/api/auth/callback/:providerId` endpoint.
     * Contains params like `state`.
     */
    params: CallbackParamsType
    /**
     * When using this custom flow, make sure to do all the necessary security checks.
     * This object contains parameters you have to match against the request to make sure it is valid.
     */
    checks: OAuthChecks
  },
  {
    tokens: TokenSet
  }
>
⋮----
/**
     * Parameters extracted from the request to the `/api/auth/callback/:providerId` endpoint.
     * Contains params like `state`.
     */
⋮----
/**
     * When using this custom flow, make sure to do all the necessary security checks.
     * This object contains parameters you have to match against the request to make sure it is valid.
     */
⋮----
export type UserinfoEndpointHandler = EndpointHandler<
  UrlParams,
  { tokens: TokenSet },
  Profile
>
export type ProfileCallback<Profile> = (
  profile: Profile,
  tokens: TokenSet
) => Awaitable<User>
export type AccountCallback = (tokens: TokenSet) => TokenSet | undefined | void
export interface OAuthProviderButtonStyles {
  logo?: string
  /**
   * @deprecated
   */
  text?: string
  /**
   * @deprecated Please use 'brandColor' instead
   */
  bg?: string
  brandColor?: string
}
⋮----
/**
   * @deprecated
   */
⋮----
/**
   * @deprecated Please use 'brandColor' instead
   */
⋮----
/** TODO: Document */
export interface OAuth2Config<Profile>
  extends CommonProviderOptions,
    PartialIssuer {
  /**
   * Identifies the provider when you want to sign in to
   * a specific provider.
   *
   * @example
   * ```ts
   * signIn('github') // "github" is the provider ID
   * ```
   */
  id: string
  /** The name of the provider. shown on the default sign in page. */
  name: string
  /**
   * OpenID Connect (OIDC) compliant providers can configure
   * this instead of `authorize`/`token`/`userinfo` options
   * without further configuration needed in most cases.
   * You can still use the `authorize`/`token`/`userinfo`
   * options for advanced control.
   *
   * [Authorization Server Metadata](https://datatracker.ietf.org/doc/html/rfc8414#section-3)
   */
  wellKnown?: string
  issuer?: string
  /**
   * The login process will be initiated by sending the user to this URL.
   *
   * [Authorization endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1)
   */
  authorization?: string | AuthorizationEndpointHandler
  token?: string | TokenEndpointHandler
  userinfo?: string | UserinfoEndpointHandler
  type: "oauth"
  /**
   * Receives the full {@link Profile} returned by the OAuth provider, and returns a subset.
   * It is used to create the user in the database.
   *
   * Defaults to: `id`, `email`, `name`, `image`
   *
   * @see [Database Adapter: User model](https://authjs.dev/reference/core/adapters#user)
   */
  profile?: ProfileCallback<Profile>
  /**
   * Receives the full {@link TokenSet} returned by the OAuth provider, and returns a subset.
   * It is used to create the account associated with a user in the database.
   *
   * :::note
   * You need to adjust your database's [Account model](https://authjs.dev/reference/core/adapters#account) to match the returned properties.
   * Check out the documentation of your [database adapter](https://authjs.dev/reference/core/adapters) for more information.
   * :::
   *
   * Defaults to: `access_token`, `id_token`, `refresh_token`, `expires_at`, `scope`, `token_type`, `session_state`
   *
   * @example
   * ```ts
   * import GitHub from "@auth/core/providers/github"
   * // ...
   * GitHub({
   *   account(account) {
   *     // https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/refreshing-user-access-tokens#refreshing-a-user-access-token-with-a-refresh-token
   *     const refresh_token_expires_at =
   *       Math.floor(Date.now() / 1000) + Number(account.refresh_token_expires_in)
   *     return {
   *       access_token: account.access_token,
   *       expires_at: account.expires_at,
   *       refresh_token: account.refresh_token,
   *       refresh_token_expires_at
   *     }
   *   }
   * })
   * ```
   *
   * @see [Database Adapter: Account model](https://authjs.dev/reference/core/adapters#account)
   * @see https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
   * @see https://www.ietf.org/rfc/rfc6749.html#section-5.1
   */
  account?: AccountCallback
  /**
   * The CSRF protection performed on the callback endpoint.
   * @default ["pkce"]
   *
   * @note When `redirectProxyUrl` or {@link AuthConfig.redirectProxyUrl} is set,
   * `"state"` will be added to checks automatically.
   *
   * [RFC 7636 - Proof Key for Code Exchange by OAuth Public Clients (PKCE)](https://www.rfc-editor.org/rfc/rfc7636.html#section-4) |
   * [RFC 6749 - The OAuth 2.0 Authorization Framework](https://www.rfc-editor.org/rfc/rfc6749.html#section-4.1.1) |
   * [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) |
   */
  checks?: Array<"pkce" | "state" | "none">
  clientId?: string
  clientSecret?: string
  /**
   * Pass overrides to the underlying OAuth library.
   * See [`oauth4webapi` client](https://github.com/panva/oauth4webapi/blob/main/docs/interfaces/Client.md) for details.
   */
  client?: Partial<Client & { token_endpoint_auth_method: string }>
  style?: OAuthProviderButtonStyles
  /**
   * Normally, when you sign in with an OAuth provider and another account
   * with the same email address already exists,
   * the accounts are not linked automatically.
   *
   * Automatic account linking on sign in is not secure
   * between arbitrary providers and is disabled by default.
   * Learn more in our [Security FAQ](https://authjs.dev/concepts#security).
   *
   * However, it may be desirable to allow automatic account linking if you trust that the provider involved has securely verified the email address
   * associated with the account. Set `allowDangerousEmailAccountLinking: true`
   * to enable automatic account linking.
   */
  allowDangerousEmailAccountLinking?: boolean
  redirectProxyUrl?: AuthConfig["redirectProxyUrl"]
  /** @see {customFetch} */
  [customFetch]?: typeof fetch
  /**
   * The options provided by the user.
   * We will perform a deep-merge of these values
   * with the default configuration.
   *
   * @internal
   */
  /** @see {conformInternal} */
  [conformInternal]?: true
  options?: OAuthUserConfig<Profile>
}
⋮----
/**
   * Identifies the provider when you want to sign in to
   * a specific provider.
   *
   * @example
   * ```ts
   * signIn('github') // "github" is the provider ID
   * ```
   */
⋮----
/** The name of the provider. shown on the default sign in page. */
⋮----
/**
   * OpenID Connect (OIDC) compliant providers can configure
   * this instead of `authorize`/`token`/`userinfo` options
   * without further configuration needed in most cases.
   * You can still use the `authorize`/`token`/`userinfo`
   * options for advanced control.
   *
   * [Authorization Server Metadata](https://datatracker.ietf.org/doc/html/rfc8414#section-3)
   */
⋮----
/**
   * The login process will be initiated by sending the user to this URL.
   *
   * [Authorization endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1)
   */
⋮----
/**
   * Receives the full {@link Profile} returned by the OAuth provider, and returns a subset.
   * It is used to create the user in the database.
   *
   * Defaults to: `id`, `email`, `name`, `image`
   *
   * @see [Database Adapter: User model](https://authjs.dev/reference/core/adapters#user)
   */
⋮----
/**
   * Receives the full {@link TokenSet} returned by the OAuth provider, and returns a subset.
   * It is used to create the account associated with a user in the database.
   *
   * :::note
   * You need to adjust your database's [Account model](https://authjs.dev/reference/core/adapters#account) to match the returned properties.
   * Check out the documentation of your [database adapter](https://authjs.dev/reference/core/adapters) for more information.
   * :::
   *
   * Defaults to: `access_token`, `id_token`, `refresh_token`, `expires_at`, `scope`, `token_type`, `session_state`
   *
   * @example
   * ```ts
   * import GitHub from "@auth/core/providers/github"
   * // ...
   * GitHub({
   *   account(account) {
   *     // https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/refreshing-user-access-tokens#refreshing-a-user-access-token-with-a-refresh-token
   *     const refresh_token_expires_at =
   *       Math.floor(Date.now() / 1000) + Number(account.refresh_token_expires_in)
   *     return {
   *       access_token: account.access_token,
   *       expires_at: account.expires_at,
   *       refresh_token: account.refresh_token,
   *       refresh_token_expires_at
   *     }
   *   }
   * })
   * ```
   *
   * @see [Database Adapter: Account model](https://authjs.dev/reference/core/adapters#account)
   * @see https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
   * @see https://www.ietf.org/rfc/rfc6749.html#section-5.1
   */
⋮----
/**
   * The CSRF protection performed on the callback endpoint.
   * @default ["pkce"]
   *
   * @note When `redirectProxyUrl` or {@link AuthConfig.redirectProxyUrl} is set,
   * `"state"` will be added to checks automatically.
   *
   * [RFC 7636 - Proof Key for Code Exchange by OAuth Public Clients (PKCE)](https://www.rfc-editor.org/rfc/rfc7636.html#section-4) |
   * [RFC 6749 - The OAuth 2.0 Authorization Framework](https://www.rfc-editor.org/rfc/rfc6749.html#section-4.1.1) |
   * [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) |
   */
⋮----
/**
   * Pass overrides to the underlying OAuth library.
   * See [`oauth4webapi` client](https://github.com/panva/oauth4webapi/blob/main/docs/interfaces/Client.md) for details.
   */
⋮----
/**
   * Normally, when you sign in with an OAuth provider and another account
   * with the same email address already exists,
   * the accounts are not linked automatically.
   *
   * Automatic account linking on sign in is not secure
   * between arbitrary providers and is disabled by default.
   * Learn more in our [Security FAQ](https://authjs.dev/concepts#security).
   *
   * However, it may be desirable to allow automatic account linking if you trust that the provider involved has securely verified the email address
   * associated with the account. Set `allowDangerousEmailAccountLinking: true`
   * to enable automatic account linking.
   */
⋮----
/** @see {customFetch} */
⋮----
/**
   * The options provided by the user.
   * We will perform a deep-merge of these values
   * with the default configuration.
   *
   * @internal
   */
/** @see {conformInternal} */
⋮----
/**
 * Extension of the {@link OAuth2Config}.
 *
 * @see https://openid.net/specs/openid-connect-core-1_0.html
 */
export interface OIDCConfig<Profile>
  extends Omit<OAuth2Config<Profile>, "type" | "checks"> {
  type: "oidc"
  checks?: Array<NonNullable<OAuth2Config<Profile>["checks"]>[number] | "nonce">
  /**
   * If set to `false`, the `userinfo_endpoint` will be fetched for the user data.
   * @note An `id_token` is still required to be returned during the authorization flow.
   */
  idToken?: boolean
}
⋮----
/**
   * If set to `false`, the `userinfo_endpoint` will be fetched for the user data.
   * @note An `id_token` is still required to be returned during the authorization flow.
   */
⋮----
export type OAuthConfig<Profile> = OIDCConfig<Profile> | OAuth2Config<Profile>
export type OAuthEndpointType = "authorization" | "token" | "userinfo"
/**
 * We parsed `authorization`, `token` and `userinfo`
 * to always contain a valid `URL`, with the params
 * @internal
 */
export type OAuthConfigInternal<Profile> = Omit<
  OAuthConfig<Profile>,
  OAuthEndpointType | "redirectProxyUrl"
> & {
  authorization?: { url: URL }
  token?: {
    url: URL
    request?: TokenEndpointHandler["request"]
    clientPrivateKey?: CryptoKey | PrivateKey
    /**
     * @internal
     * @deprecated
     */
    conform?: TokenEndpointHandler["conform"]
  }
  userinfo?: { url: URL; request?: UserinfoEndpointHandler["request"] }
  /**
   * Reconstructed from {@link OAuth2Config.redirectProxyUrl},
   * adding the callback action and provider id onto the URL.
   *
   * If defined, it is favoured over {@link OAuthConfigInternal.callbackUrl} in the authorization request.
   *
   * When {@link InternalOptions.isOnRedirectProxy} is set, the actual value is saved in the decoded `state.origin` parameter.
   *
   * @example `"https://auth.example.com/api/auth/callback/:provider"`
   *
   */
  redirectProxyUrl?: OAuth2Config<Profile>["redirectProxyUrl"]
} & Pick<
    Required<OAuthConfig<Profile>>,
    "clientId" | "checks" | "profile" | "account"
  >
⋮----
/**
     * @internal
     * @deprecated
     */
⋮----
/**
   * Reconstructed from {@link OAuth2Config.redirectProxyUrl},
   * adding the callback action and provider id onto the URL.
   *
   * If defined, it is favoured over {@link OAuthConfigInternal.callbackUrl} in the authorization request.
   *
   * When {@link InternalOptions.isOnRedirectProxy} is set, the actual value is saved in the decoded `state.origin` parameter.
   *
   * @example `"https://auth.example.com/api/auth/callback/:provider"`
   *
   */
⋮----
export type OIDCConfigInternal<Profile> = OAuthConfigInternal<Profile> & {
  checks: OIDCConfig<Profile>["checks"]
  idToken: OIDCConfig<Profile>["idToken"]
}
export type OAuthUserConfig<Profile> = Omit<
  Partial<OAuthConfig<Profile>>,
  "options" | "type"
>
export type OIDCUserConfig<Profile> = Omit<
  Partial<OIDCConfig<Profile>>,
  "options" | "type"
>

================
File: packages/core/src/providers/okta.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Okta</b> integration.</span>
 * <a href="https://okta.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/okta.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/okta
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface OktaProfile extends Record<string, any> {
  iss: string
  ver: string
  sub: string
  aud: string
  iat: string
  exp: string
  jti: string
  auth_time: string
  amr: string
  idp: string
  nonce: string
  name: string
  nickname: string
  preferred_username: string
  given_name: string
  middle_name: string
  family_name: string
  email: string
  email_verified: string
  profile: string
  zoneinfo: string
  locale: string
  address: string
  phone_number: string
  picture: string
  website: string
  gender: string
  birthdate: string
  updated_at: string
  at_hash: string
  c_hash: string
}
/**
 * Add Okta login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/okta
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Okta from "@auth/core/providers/okta"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Okta({
 *       clientId: OKTA_CLIENT_ID,
 *       clientSecret: OKTA_CLIENT_SECRET,
 *       issuer: OKTA_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Okta OAuth documentation](https://developer.okta.com/docs/reference/api/oidc)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Okta provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Okta provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/okta.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Okta<P extends OktaProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/onelogin.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>OneLogin</b> integration.</span>
 * <a href="https://onelogin.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/onelogin.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/onelogin
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add OneLogin login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/onelogin
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import OneLogin from "@auth/core/providers/onelogin"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     OneLogin({
 *       clientId: ONELOGIN_CLIENT_ID,
 *       clientSecret: ONELOGIN_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [OneLogin OAuth documentation](https://example.com)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the OneLogin provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The OneLogin provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/onelogin.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function OneLogin(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>

================
File: packages/core/src/providers/ory-hydra.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Ory Hydra</b> integration.</span>
 * <a href="https://www.ory.sh/hydra/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/ory.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/ory-hydra
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface OryHydraProfile extends Record<string, any> {
  iss: string
  ver: string
  sub: string
  aud: string
  iat: string
  exp: string
  jti: string
  amr: string
  email?: string
}
/**
 * Add Ory Hydra login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/hydra
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import OryHydra from "@auth/core/providers/ory-hydra"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     OryHydra({
 *       clientId: ORY_HYDRA_CLIENT_ID,
 *       clientSecret: ORY_HYDRA_CLIENT_SECRET,
 *       issuer: ORY_HYDRA_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Ory Hydra documentation](https://www.ory.sh/docs/hydra/5min-tutorial)
 *
 * ### Notes
 *
 * Ory Hydra can be setup using the default Ory Network setup or self hosted on your own
 * infrastructure.
 * By default, Auth.js assumes that the Ory Hydra provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Ory Hydra provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/ory-hydra.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function OryHydra<P extends OryHydraProfile>(
  options: OIDCUserConfig<P>
): OIDCConfig<P>

================
File: packages/core/src/providers/osso.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Osso</b> integration.</span>
 * <a href="https://ossoapp.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/osso.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/osso
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Osso login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/osso
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Osso from "@auth/core/providers/osso"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Osso({
 *       clientId: OSSO_CLIENT_ID,
 *       clientSecret: OSSO_CLIENT_SECRET,
 *       issuer: OSSO_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 * Osso is an open source service that handles SAML authentication against Identity Providers, normalizes profiles, and makes those profiles available to you in an OAuth 2.0 code grant flow.
 * 
 * - If you don't yet have an Osso instance, you can use [Osso's Demo App](https://demo.ossoapp.com) for your testing purposes. For documentation on deploying an Osso instance, see https://ossoapp.com/docs/deploy/overview/
 *  - [Osso OAuth documentation](https://ossoapp.com/)
 *
 * You can configure your OAuth Clients on your Osso Admin UI, i.e. https://demo.ossoapp.com/admin/config - you'll need to get a Client ID and Secret and allow-list your redirect URIs.
 * [SAML SSO differs a bit from OAuth](https://ossoapp.com/blog/saml-vs-oauth) - for every tenant who wants to sign in to your application using SAML, you and your customer need to perform a multi-step configuration in Osso's Admin UI and the admin dashboard of the tenant's Identity Provider. Osso provides documentation for providers like Okta and OneLogin, cloud-based IDPs who also offer a developer account that's useful for testing. Osso also provides a [Mock IDP](https://idp.ossoapp.com) that you can use for testing without needing to sign up for an Identity Provider service.
 * See Osso's complete configuration and testing documentation at https://ossoapp.com/docs/configure/overview
 * 
 * ### Notes
 *
 * By default, Auth.js assumes that the Osso provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::note
 * 
 * `issuer` should be the fully qualified domain e.g. `demo.ossoapp.com`
 * 
 * :::
 * 
 * :::tip
 *
 * The Osso provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/osso.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Osso(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>

================
File: packages/core/src/providers/osu.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>osu!</b> integration.</span>
 * <a href="https://osu.ppy.sh/home">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/osu.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/osu
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface OsuUserCompact {
  avatar_url: string
  country_code: string
  default_group: string
  id: number
  is_active: boolean
  is_bot: boolean
  is_deleted: boolean
  is_online: boolean
  is_supporter: boolean
  last_visit: Date | null
  pm_friends_only: boolean
  profile_colour: string | null
  username: string
}
export interface OsuProfile extends OsuUserCompact, Record<string, any> {
  discord: string | null
  has_supported: boolean
  interests: string | null
  join_date: Date
  kudosu: {
    available: number
    total: number
  }
  location: string | null
  max_blocks: number
  max_friends: number
  occupation: string | null
  playmode: string
  playstyle: string[]
  post_count: number
  profile_order: string[]
  title: string | null
  title_url: string | null
  twitter: string | null
  website: string | null
  country: {
    code: string
    name: string
  }
  cover: {
    custom_url: string | null
    url: string
    id: number | null
  }
  is_restricted: boolean
}
/**
 * Add osu! login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/osu
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Osu from "@auth/core/providers/osu"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Osu({ clientId: OSU_CLIENT_ID, clientSecret: OSU_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [osu! OAuth documentation](https://osu.ppy.sh/docs/index.html#authentication)
 *  - [osu! app console](https://osu.ppy.sh/home/account/edit#new-oauth-application)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Osu provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::note
 *
 * osu! does not provide a user email.
 *
 * :::
 *
 * :::tip
 *
 * The osu! provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/osu.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Osu<P extends OsuProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/passage.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Passage by 1Password</b> integration.</span>
 * <a href="https://passage.1password.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/passage.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/passage
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** @see [Supported Scopes](https://docs.passage.id/hosted-login/oidc-client-configuration#supported-scopes) */
export interface PassageProfile {
  iss: string
  /** Unique identifer in Passage for the user */
  sub: string
  aud: string[]
  exp: number
  iat: number
  auth_time: number
  azp: string
  client_id: string
  at_hash: string
  c_hash: string
  /** The user's email address */
  email: string
  /** Whether the user has verified their email address */
  email_verified: boolean
  /** The user's phone number */
  phone: string
  /** Whether the user has verified their phone number */
  phone_number_verified: boolean
}
⋮----
/** Unique identifer in Passage for the user */
⋮----
/** The user's email address */
⋮----
/** Whether the user has verified their email address */
⋮----
/** The user's phone number */
⋮----
/** Whether the user has verified their phone number */
⋮----
/**
 * Add Passage login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/passage
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Passage from "@auth/core/providers/passage"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Passage({
 *       clientId: PASSAGE_ID,
 *       clientSecret: PASSAGE_SECRET,
 *       issuer: PASSAGE_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Passage OIDC documentation](https://docs.passage.id/hosted-login/oidc-client-configuration)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Passage provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Passage provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/passage.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Passage(
  config: OAuthUserConfig<PassageProfile>
): OAuthConfig<PassageProfile>

================
File: packages/core/src/providers/passkey.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#24292f", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Passkey</b> integration.</span>
 * <a href="https://passkeys.dev">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/passkey.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/passkey
 */
import WebAuthn, {
  WebAuthnConfig,
  DEFAULT_WEBAUTHN_TIMEOUT,
} from "./webauthn.js"
/**
 * Add Passkey login to your page.
 *
 * ### Setup
 *
 * Install the required peer dependency.
 *
 * ```bash npm2yarn
 * npm install @simplewebauthn/browser@9.0.1
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Passkey from "@auth/core/providers/passkey"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [Passkey],
 * })
 * ```
 * ### Resources
 *
 * - [SimpleWebAuthn - Server side](https://simplewebauthn.dev/docs/packages/server)
 * - [SimpleWebAuthn - Client side](https://simplewebauthn.dev/docs/packages/client)
 * - [Passkeys.dev - Intro](https://passkeys.dev/docs/intro/what-are-passkeys/)
 * - [Passkeys.dev - Specifications](https://passkeys.dev/docs/reference/specs/)
 * - [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/passkey.ts)
 *
 * ### Notes
 *
 * This provider is an extension of the WebAuthn provider that defines some default values
 * associated with Passkey support. You may override these, but be aware that authenticators
 * may not recognize your credentials as Passkey credentials if you do.
 *
 * :::tip
 *
 * The Passkey provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/passkey.ts).
 * To override the defaults for your use case, check out [customizing a built-in WebAuthn provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Passkey(
  config: Partial<WebAuthnConfig>
): WebAuthnConfig

================
File: packages/core/src/providers/patreon.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Patreon</b> integration.</span>
 * <a href="https://www.patreon.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/patreon.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/patreon
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface PatreonProfile extends Record<string, any> {
  sub: string
  nickname: string
  email: string
  picture: string
}
/**
 * Add Patreon login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/patreon
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Patreon from "@auth/core/providers/patreon"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Patreon({
 *       clientId: PATREON_CLIENT_ID,
 *       clientSecret: PATREON_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Patreon OAuth documentation](https://docs.patreon.com/#apiv2-oauth)
 *  - [Patreon Platform](https://www.patreon.com/portal/registration/register-clients)
 *  - [ApiV2 Scopes](https://docs.patreon.com/#scopes)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Patreon provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Patreon provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/patreon.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Patreon<P extends PatreonProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/ping-id.ts
================
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface PingProfile extends Record<string, any> {
  iss: string
  sub: string
  aud: string
  iat: number
  exp: number
  acr: string
  amr: [string]
  auth_time: number
  at_hash: string
  sid: string
  preferred_username: string
  given_name: string
  picture: string
  updated_at: number
  name: string
  family_name: string
  email: string
  env: string
  org: string
  "p1.region": string
}
/**
 * Add PingId login to your page.
 *
 * ## Documentation
 *
 * - [Create App in Ping Identity](https://docs.pingidentity.com/r/en-us/pingone/p1_add_app_worker)
 *
 *  ---
 * ## Example
 *
 * ```ts
 * import PingId from "@auth/core/providers/ping-id"
 *
 * ...
 * providers: [
 *  PingId({
 *    clientId: AUTH_PING_ID_ID,
 *    clientSecret: AUTH_PING_ID_SECRET,
 *    issuer: PING_ID_ISSUER
 *  })
 * ]
 * ...
 * ```
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function PingId(
  options: OIDCUserConfig<PingProfile>
): OIDCConfig<PingProfile>

================
File: packages/core/src/providers/pinterest.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Pinterest</b> integration.</span>
 * <a href="https://www.pinterest.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/pinterest.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/pinterest
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface PinterestProfile extends Record<string, any> {
  account_type: "BUSINESS" | "PINNER"
  profile_image: string
  website_url: string
  username: string
}
/**
 * Add Pinterest login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/pinterest
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Pinterest from "@auth/core/providers/pinterest"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Pinterest({
 *       clientId: PINTEREST_CLIENT_ID,
 *       clientSecret: PINTEREST_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Pinterest OAuth documentation](https://developers.pinterest.com/docs/getting-started/authentication/)
 *  - [Pinterest app console](https://developers.pinterest.com/apps/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Pinterest provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 *
 * :::tip
 *
 * To use in production, make sure the app has standard API access and not trial access
 *
 * :::
 *
 * :::tip
 *
 * The Pinterest provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/pinterest.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function PinterestProvider<P extends PinterestProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(

================
File: packages/core/src/providers/pipedrive.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Pipedrive</b> integration.</span>
 * <a href="https://www.pipedrive.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/pipedrive.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/pipedrive
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface PipedriveProfile extends Record<string, any> {
  success: boolean
  data: {
    id: number
    name: string
    default_currency?: string
    locale?: string
    lang?: number
    email: string
    phone?: string
    activated?: boolean
    last_login?: Date
    created?: Date
    modified?: Date
    signup_flow_variation?: string
    has_created_company?: boolean
    is_admin?: number
    active_flag?: boolean
    timezone_name?: string
    timezone_offset?: string
    role_id?: number
    icon_url?: string
    is_you?: boolean
    company_id?: number
    company_name?: string
    company_domain?: string
    company_country?: string
    company_industry?: string
    language?: {
      language_code?: string
      country_code?: string
    }
  }
}
/**
 * Add Pipedrive login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/pipedrive
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Pipedrive from "@auth/core/providers/pipedrive"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Pipedrive({
 *       clientId: PIPEDRIVE_CLIENT_ID,
 *       clientSecret: PIPEDRIVE_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Pipedrive OAuth documentation](https://pipedrive.readme.io/docs/marketplace-oauth-authorization)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Pipedrive provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Pipedrive provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/pipedrive.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Pipedrive<P extends PipedriveProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/postmark.ts
================
import type { EmailConfig, EmailUserConfig } from "./index.js"
import { html, text } from "../lib/utils/email.js"
/** @todo Document this */
export default function Postmark(config: EmailUserConfig): EmailConfig
⋮----
async sendVerificationRequest(params)

================
File: packages/core/src/providers/reddit.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Reddit</b> integration.</span>
 * <a href="https://www.reddit.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/reddit.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/reddit
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add Reddit login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/reddit
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Reddit from "@auth/core/providers/reddit"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Reddit({ clientId: REDDIT_CLIENT_ID, clientSecret: REDDIT_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Reddit API documentation](https://www.reddit.com/dev/api/)
 * - [Reddit app console](https://www.reddit.com/prefs/apps/ )
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Reddit provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::danger
 *
 * Reddit requires authorization every time you go through their page.
 * Only allows one callback URL per Client ID / Client Secret.
 *
 * :::
 *
 * :::tip
 *
 * This Provider template only has a one hour access token to it and only has the "identity" scope. If you want to get a refresh token as well you must follow this:
 *```ts
 * providers: [
 *  Reddit({
 *    clientId: process.env.REDDIT_CLIENT_ID,
 *    clientSecret: process.env.REDDIT_CLIENT_SECRET,
 *    authorization: {
 *      params: {
 *        duration: 'permanent',
 *      },
 *    },
 *  }),
 * ]
 * ```
 * :::
 *
 * :::tip
 *
 * The Reddit provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/reddit.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Reddit(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>

================
File: packages/core/src/providers/resend.ts
================
import type { EmailConfig, EmailUserConfig } from "./index.js"
import { html, text } from "../lib/utils/email.js"
/** @todo Document this */
export default function Resend(config: EmailUserConfig): EmailConfig
⋮----
async sendVerificationRequest(params)

================
File: packages/core/src/providers/roblox.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Roblox</b> integration.</span>
 * <a href="https://roblox.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/roblox.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/roblox
 */
import type { OIDCUserConfig, OIDCConfig } from "./index.js"
/**
 * Corresponds to the user structure documented here:
 * https://create.roblox.com/docs/cloud/reference/oauth2 (Example User with Profile Scope)
 */
export interface RobloxProfile extends Record<string, any> {
  /* Roblox user id */
  sub: string
  /* Roblox display name */
  name: string
  /* Roblox display name */
  nickname: string
  /* Roblox username */
  preferred_username: string
  /* Creation time of the Roblox account as a Unix timestamp. */
  created_at: number
  /* Roblox account profile URL */
  profile: string
  /* Roblox avatar headshot image. Can be null if the avatar headshot image hasn't yet been generated or has been moderated */
  picture: string | null
}
⋮----
/* Roblox user id */
⋮----
/* Roblox display name */
⋮----
/* Roblox display name */
⋮----
/* Roblox username */
⋮----
/* Creation time of the Roblox account as a Unix timestamp. */
⋮----
/* Roblox account profile URL */
⋮----
/* Roblox avatar headshot image. Can be null if the avatar headshot image hasn't yet been generated or has been moderated */
⋮----
/**
 * Add Roblox login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/roblox
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Roblox from "@auth/providers/roblox"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Roblox({
 *       clientId: AUTH_ROBLOX_ID,
 *       clientSecret: AUTH_ROBLOX_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Roblox OAuth documentation](https://create.roblox.com/docs/cloud/open-cloud/oauth2-overview)
 *  - [Roblox OAuth apps](https://create.roblox.com/dashboard/credentials?activeTab=OAuthTab)
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Roblox(
  options: OIDCUserConfig<RobloxProfile>
): OIDCConfig<RobloxProfile>

================
File: packages/core/src/providers/salesforce.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#00a1e0", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Salesforce</b> integration.</span>
 * <a href="https://www.salesforce.com/ap/?ir=1">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/salesforce.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/salesforce
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface SalesforceProfile extends Record<string, any> {
  sub: string
  nickname: string
  email: string
  picture: string
}
/**
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/salesforce
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Salesforce from "@auth/core/providers/salesforce"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Salesforce({
 *       clientId: AUTH_SALESFORCE_ID,
 *       clientSecret: AUTH_SALESFORCE_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Auth0 docs](https://auth0.com/docs/authenticate)
 *
 * ### Notes
 *
 * The Salesforce provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/salesforce.ts). To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * ## Help
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 */
export default function Salesforce(
  options: OIDCUserConfig<SalesforceProfile>
): OIDCConfig<SalesforceProfile>

================
File: packages/core/src/providers/sendgrid.ts
================
import type { EmailConfig, EmailUserConfig } from "./index.js"
import { html, text } from "../lib/utils/email.js"
/** @todo Document this */
export default function SendGrid(config: EmailUserConfig): EmailConfig
⋮----
async sendVerificationRequest(params)
⋮----
// REVIEW: Clean up error handling

================
File: packages/core/src/providers/simplelogin.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>SimpleLogin</b> integration.</span>
 * <a href="https://simplelogin.io">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/simplelogin.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/simplelogin
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface SimpleLoginProfile {
  id: number
  sub: string
  email: string
  email_verified: boolean
  name: string
  avatar_url: string | undefined
  client: string
}
/**
 * Add SimpleLogin login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/simplelogin
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import SimpleLogin from "@auth/core/providers/simplelogin"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     SimpleLogin({
 *       clientId: SIMPLELOGIN_CLIENT_ID,
 *       clientSecret: SIMPLELOGIN_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 *  - [Sign in with SimpleLogin](https://simplelogin.io/developer/)
 *  - [SimpleLogin OAuth documentation](https://simplelogin.io/docs/siwsl/intro/)
 *  - [SimpleLogin OAuth Configuration](https://app.simplelogin.io/developer)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the SimpleLogin provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * The "Authorized redirect URIs" used must include your full domain and end in the callback path. By default, SimpleLogin whitelists all `http[s]://localhost:*` address to facilitate local development. For example;
 *
 * - For production: `https://{YOUR_DOMAIN}/api/auth/callback/simplelogin`
 * - For development: By default **localhost** is whitelisted.
 *
 * :::warning
 *
 * **Authorized Redirect URIs** must be **HTTPS** for security reason (except for `localhost`).
 *
 * :::
 *
 * :::tip
 *
 * The SimpleLogin provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/simplelogin.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function SimpleLogin<P extends SimpleLoginProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/slack.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Slack</b> integration.</span>
 * <a href="https://www.slack.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/slack.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/slack
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface SlackProfile extends Record<string, any> {
  ok: boolean
  sub: string
  "https://slack.com/user_id": string
  "https://slack.com/team_id": string
  email: string
  email_verified: boolean
  date_email_verified: number
  name: string
  picture: string
  given_name: string
  family_name: string
  locale: string
  "https://slack.com/team_name": string
  "https://slack.com/team_domain": string
  "https://slack.com/user_image_24": string
  "https://slack.com/user_image_32": string
  "https://slack.com/user_image_48": string
  "https://slack.com/user_image_72": string
  "https://slack.com/user_image_192": string
  "https://slack.com/user_image_512": string
  "https://slack.com/user_image_1024": string
  "https://slack.com/team_image_34": string
  "https://slack.com/team_image_44": string
  "https://slack.com/team_image_68": string
  "https://slack.com/team_image_88": string
  "https://slack.com/team_image_102": string
  "https://slack.com/team_image_132": string
  "https://slack.com/team_image_230": string
  "https://slack.com/team_image_default": boolean
}
/**
 * Add Slack login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/slack
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Slack from "@auth/core/providers/slack"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Slack({ clientId: SLACK_CLIENT_ID, clientSecret: SLACK_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Slack Authentication documentation](https://api.slack.com/authentication)
 * - [Sign-in with Slack](https://api.slack.com/docs/sign-in-with-slack)
 * - [Slack app console](https://api.slack.com/apps)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Slack provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::danger
 *
 * Slack requires that the redirect URL of your app uses https, even for local development.
 * An easy workaround for this is using a service like [ngrok](https://ngrok.com/) that creates a secure tunnel to your app, using https. Remember to set the url as `NEXTAUTH_URL` as well.
 *
 * :::
 *
 * :::tip
 *
 * The Slack provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/slack.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Slack<P extends SlackProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>

================
File: packages/core/src/providers/spotify.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Spotify</b> integration.</span>
 * <a href="https://www.spotify.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/spotify.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/spotify
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface SpotifyImage {
  url: string
}
export interface SpotifyProfile extends Record<string, any> {
  id: string
  display_name: string
  email: string
  images: SpotifyImage[]
}
/**
 * Add Spotify login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/spotify
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Spotify from "@auth/core/providers/spotify"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Spotify({
 *       clientId: SPOTIFY_CLIENT_ID,
 *       clientSecret: SPOTIFY_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Spotify OAuth documentation](https://developer.spotify.com/documentation/general/guides/authorization-guide)
 * - [Spotify app console](https://developer.spotify.com/dashboard/applications)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Spotify provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Spotify provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/spotify.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Spotify<P extends SpotifyProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/strava.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Strava</b> integration.</span>
 * <a href="https://www.strava.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/strava.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/strava
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface StravaProfile extends Record<string, any> {
  id: string // this is really a number
  firstname: string
  lastname: string
  profile: string
}
⋮----
id: string // this is really a number
⋮----
/**
 * Add Strava login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/strava
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Strava from "@auth/core/providers/strava"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Strava({ clientId: STRAVA_CLIENT_ID, clientSecret: STRAVA_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Strava API documentation](http://developers.strava.com/docs/reference/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Strava provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Strava provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/strava.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Strava<P extends StravaProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/threads.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Threads</b> integration.</span>
 * <a href="https://www.threads.net/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/threads.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/threads
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * [User](https://developers.facebook.com/docs/threads/reference/user)
 */
export interface ThreadsProfile {
  data: {
    /**
     * Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools
     * that cannot handle large integers.
     */
    id: string
    /**
     * The Threads handle (username) of this user.
     *
     * To return this field, add `fields=username` in the authorization request's query parameter.
     */
    username?: string
    /**
     * The URL to the profile image for this user, as shown on the user's profile.
     *
     * To return this field, add `fields=threads_profile_picture_url` in the authorization request's query parameter.
     */
    threads_profile_picture_url?: string
    /**
     * The text of this user's profile biography (also known as bio), if the user provided one.
     *
     * To return this field, add `fields=threads_biography` in the authorization request's query parameter.
     */
    threads_biography?: string
  }
}
⋮----
/**
     * Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools
     * that cannot handle large integers.
     */
⋮----
/**
     * The Threads handle (username) of this user.
     *
     * To return this field, add `fields=username` in the authorization request's query parameter.
     */
⋮----
/**
     * The URL to the profile image for this user, as shown on the user's profile.
     *
     * To return this field, add `fields=threads_profile_picture_url` in the authorization request's query parameter.
     */
⋮----
/**
     * The text of this user's profile biography (also known as bio), if the user provided one.
     *
     * To return this field, add `fields=threads_biography` in the authorization request's query parameter.
     */
⋮----
/**
 * Add Threads login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/threads
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Threads from "@auth/core/providers/threads"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Threads({
 *       clientId: THREADS_CLIENT_ID,
 *       clientSecret: THREADS_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Threads OAuth documentation](https://developers.facebook.com/docs/threads)
 * - [Threads OAuth apps](https://developers.facebook.com/apps/)
 *
 * ### Notes
 *
 * :::warning
 *
 * Email address is not returned by the Threads API.
 *
 * :::
 *
 * :::tip
 *
 * Threads required callback URL to be configured in your Facebook app and Facebook required you to use **https** even for localhost! In order to do that, you either need to [add an SSL to your localhost](https://www.freecodecamp.org/news/how-to-get-https-working-on-your-local-development-environment-in-5-minutes-7af615770eec/) or use a proxy such as [ngrok](https://ngrok.com/docs).
 *
 * :::
 *
 * By default, Auth.js assumes that the Threads provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Threads provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/threads.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Threads(
  config: OAuthUserConfig<ThreadsProfile>
): OAuthConfig<ThreadsProfile>
⋮----
profile(

================
File: packages/core/src/providers/tiktok.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>TikTok</b> integration.</span>
 * <a href="https://www.tiktok.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/tiktok.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/tiktok
 */
import { customFetch } from "../lib/symbols.js"
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * [More info](https://developers.tiktok.com/doc/tiktok-api-v2-get-user-info/)
 */
export interface TiktokProfile {
  data: {
    user: {
      /**
       * The unique identification of the user in the current application.Open id
       * for the client.
       *
       * To return this field, add `fields=open_id` in the user profile request's query parameter.
       */
      open_id: string
      /**
       * The unique identification of the user across different apps for the same developer.
       * For example, if a partner has X number of clients,
       * it will get X number of open_id for the same TikTok user,
       * but one persistent union_id for the particular user.
       *
       * To return this field, add `fields=union_id` in the user profile request's query parameter.
       */
      union_id?: string
      /**
       * User's profile image.
       *
       * To return this field, add `fields=avatar_url` in the user profile request's query parameter.
       */
      avatar_url: string
      /**
       * User`s profile image in 100x100 size.
       *
       * To return this field, add `fields=avatar_url_100` in the user profile request's query parameter.
       */
      avatar_url_100?: string
      /**
       * User's profile image with higher resolution
       *
       * To return this field, add `fields=avatar_url_100` in the user profile request's query parameter.
       */
      avatar_large_url?: string
      /**
       * User's profile name
       *
       * To return this field, add `fields=display_name` in the user profile request's query parameter.
       */
      display_name: string
      /**
       * User's username.
       *
       * To return this field, add `fields=username` in the user profile request's query parameter.
       */
      username: string
      /** @note Email is currently unsupported by TikTok  */
      email?: string
      /**
       * User's bio description if there is a valid one.
       *
       * To return this field, add `fields=bio_description` in the user profile request's query parameter.
       */
      bio_description?: string
      /**
       * The link to user's TikTok profile page.
       *
       * To return this field, add `fields=profile_deep_link` in the user profile request's query parameter.
       */
      profile_deep_link?: string
      /**
       * Whether TikTok has provided a verified badge to the account after confirming
       * that it belongs to the user it represents.
       *
       * To return this field, add `fields=is_verified` in the user profile request's query parameter.
       */
      is_verified?: boolean
      /**
       * User's followers count.
       *
       * To return this field, add `fields=follower_count` in the user profile request's query parameter.
       */
      follower_count?: number
      /**
       * The number of accounts that the user is following.
       *
       * To return this field, add `fields=following_count` in the user profile request's query parameter.
       */
      following_count?: number
      /**
       * The total number of likes received by the user across all of their videos.
       *
       * To return this field, add `fields=likes_count` in the user profile request's query parameter.
       */
      likes_count?: number
      /**
       * The total number of publicly posted videos by the user.
       *
       * To return this field, add `fields=video_count` in the user profile request's query parameter.
       */
      video_count?: number
    }
  }
  error: {
    /**
     * The error category in string.
     */
    code: string
    /**
     * The error message in string.
     */
    message: string
    /**
     * The error message in string.
     */
    log_id: string
  }
}
⋮----
/**
       * The unique identification of the user in the current application.Open id
       * for the client.
       *
       * To return this field, add `fields=open_id` in the user profile request's query parameter.
       */
⋮----
/**
       * The unique identification of the user across different apps for the same developer.
       * For example, if a partner has X number of clients,
       * it will get X number of open_id for the same TikTok user,
       * but one persistent union_id for the particular user.
       *
       * To return this field, add `fields=union_id` in the user profile request's query parameter.
       */
⋮----
/**
       * User's profile image.
       *
       * To return this field, add `fields=avatar_url` in the user profile request's query parameter.
       */
⋮----
/**
       * User`s profile image in 100x100 size.
       *
       * To return this field, add `fields=avatar_url_100` in the user profile request's query parameter.
       */
⋮----
/**
       * User's profile image with higher resolution
       *
       * To return this field, add `fields=avatar_url_100` in the user profile request's query parameter.
       */
⋮----
/**
       * User's profile name
       *
       * To return this field, add `fields=display_name` in the user profile request's query parameter.
       */
⋮----
/**
       * User's username.
       *
       * To return this field, add `fields=username` in the user profile request's query parameter.
       */
⋮----
/** @note Email is currently unsupported by TikTok  */
⋮----
/**
       * User's bio description if there is a valid one.
       *
       * To return this field, add `fields=bio_description` in the user profile request's query parameter.
       */
⋮----
/**
       * The link to user's TikTok profile page.
       *
       * To return this field, add `fields=profile_deep_link` in the user profile request's query parameter.
       */
⋮----
/**
       * Whether TikTok has provided a verified badge to the account after confirming
       * that it belongs to the user it represents.
       *
       * To return this field, add `fields=is_verified` in the user profile request's query parameter.
       */
⋮----
/**
       * User's followers count.
       *
       * To return this field, add `fields=follower_count` in the user profile request's query parameter.
       */
⋮----
/**
       * The number of accounts that the user is following.
       *
       * To return this field, add `fields=following_count` in the user profile request's query parameter.
       */
⋮----
/**
       * The total number of likes received by the user across all of their videos.
       *
       * To return this field, add `fields=likes_count` in the user profile request's query parameter.
       */
⋮----
/**
       * The total number of publicly posted videos by the user.
       *
       * To return this field, add `fields=video_count` in the user profile request's query parameter.
       */
⋮----
/**
     * The error category in string.
     */
⋮----
/**
     * The error message in string.
     */
⋮----
/**
     * The error message in string.
     */
⋮----
/**
 * Add TikTok login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/tiktok
 * ```
 *
 * #### Configuration
 * You can omit the client and secret if you have set the `AUTH_TIKTOK_ID` and `AUTH_TIKTOK_SECRET` environment variables.
 * Remeber that the AUTH_TIKTOK_ID is the Client Key in the TikTok Application
 *```ts
 * import { Auth } from "@auth/core"
 * import TikTok from "@auth/core/providers/tiktok"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     TikTok({ clientId: AUTH_TIKTOK_ID, clientSecret: AUTH_TIKTOK_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *  - [TikTok app console](https://developers.tiktok.com/)
 *  - [TikTok login kit documentation](https://developers.tiktok.com/doc/login-kit-web/)
 *  - [Avaliable Scopes](https://developers.tiktok.com/doc/tiktok-api-scopes/)
 *  - [Sandbox for testing](https://developers.tiktok.com/blog/introducing-sandbox)
 *
 *
 * ### Notes
 *
 * :::tip
 *
 * Production applications cannot use localhost URLs to sign in with TikTok. You need add the domain and Callback/Redirect url's to your TikTok app and have them review and approved by the TikTok Team.
 * If you need to test your implementation, you can use the sandbox feature and ngrok for testing in localhost.
 *
 * :::
 *
 * :::tip
 *
 * Email address is not supported by TikTok.
 *
 * :::
 *
 * :::tip
 *
 * AUTH_TIKTOK_ID will be the Client Key in the TikTok Application
 *
 * :::
 *
 * By default, Auth.js assumes that the TikTok provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The TikTok provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/tiktok.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * If You Need to Customize the TikTok Provider, You Can Use the Following Configuration as a custom provider
 *
 * ```ts
 * {
 *   async [customFetch](...args) {
 *     const url = new URL(args[0] instanceof Request ? args[0].url : args[0]);
 *     if (url.pathname.endsWith("/token/")) {
 *       const [url, request] = args;
 *       const customHeaders = {
 *         ...request?.headers,
 *         "content-type": "application/x-www-form-urlencoded",
 *       };
 *
 *       const customBody = new URLSearchParams(request?.body as string);
 *       customBody.append("client_key", process.env.AUTH_TIKTOK_ID!);
 *
 *       const response = await fetch(url, {
 *         ...request,
 *         headers: customHeaders,
 *         body: customBody.toString(),
 *       });
 *       const json = await response.json();
 *       return Response.json({ ...json });
 *     }
 *     return fetch(...args);
 *   },
 *
 *   id: "tiktok",
 *   name: "TikTok",
 *   type: "oauth",
 *   client: {
 *     token_endpoint_auth_method: "client_secret_post",
 *   },
 *
 *   authorization: {
 *     url: "https://www.tiktok.com/v2/auth/authorize",
 *     params: {
 *       client_key: options.clientId,
 *       scope: "user.info.profile", //Add scopes you need eg(user.info.profile,user.info.stats,video.list)
 *     },
 *   },
 *
 *   token: "https://open.tiktokapis.com/v2/oauth/token/",
 *
 *   userinfo: "https://open.tiktokapis.com/v2/user/info/?fields=open_id,avatar_url,display_name,username", //Add fields you need eg(open_id,avatar_url,display_name,username)
 *
 *   profile(profile) {
 *     return {
 *       id: profile.data.user.open_id,
 *       name: profile.data.user.display_name,
 *       image: profile.data.user.avatar_url,
 *       email: profile.data.user.email || profile.data.user.username || null,
 *     };
 *   },
 * }
 *
 * ```
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function TikTok(
  options: OAuthUserConfig<TiktokProfile>
): OAuthConfig<TiktokProfile>
⋮----
profile(profile)
⋮----
// Email address is not supported by TikTok.

================
File: packages/core/src/providers/todoist.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Todoist</b> integration.</span>
 * <a href="https://www.todoist.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/todoist.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/todoist
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * @see https://developer.todoist.com/sync/v9/#user
 */
interface TodoistProfile extends Record<string, any> {
  avatar_big: string
  email: string
  full_name: string
  id: string
}
/**
 * Add Todoist login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/todoist
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Todoist from "@auth/core/providers/todoist"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Todoist({
 *       clientId: TODOIST_CLIENT_ID,
 *       clientSecret: TODOIST_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Todoist OAuth documentation](https://developer.todoist.com/guides/#oauth)
 * - [Todoist configuration](https://developer.todoist.com/appconsole.html)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Todoist provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Todoist provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/todoist.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function TodoistProvider<P extends TodoistProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
async request(
⋮----
// To obtain Todoist user info, we need to call the Sync API
// See https://developer.todoist.com/sync/v9
⋮----
profile(profile)

================
File: packages/core/src/providers/trakt.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Trakt</b> integration.</span>
 * <a href="https://www.trakt.tv/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/trakt.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/trakt
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface TraktUser extends Record<string, any> {
  username: string
  private: boolean
  name: string
  vip: boolean
  vip_ep: boolean
  ids: { slug: string }
  joined_at: string
  location: string | null
  about: string | null
  gender: string | null
  age: number | null
  images: { avatar: { full: string } }
}
/**
 * Add Trakt login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/trakt
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Trakt from "@auth/core/providers/trakt"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Trakt({ clientId: TRAKT_CLIENT_ID, clientSecret: TRAKT_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Trakt OAuth documentation](https://trakt.docs.apiary.io/#reference/authentication-oauth)
 *
 * If you're using the api in production by calling `api.trakt.tv`. Follow the example. If you wish to develop on Trakt's sandbox environment by calling `api-staging.trakt.tv`, change the URLs.
 *
 * Start by creating an OAuth app on Trakt for production or development. Then set the Client ID and Client Secret as TRAKT_ID and TRAKT_SECRET in .env.
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Trakt provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::danger
 *
 * - Trakt does not allow hotlinking images. Even the authenticated user's profie picture.
 * - Trakt does not supply the authenticated user's email.
 *
 * :::
 *
 * :::tip
 *
 * The Trakt provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/trakt.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Trakt<P extends TraktUser>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
async request(
⋮----
profile(profile)
⋮----
email: null, // trakt does not provide user emails
image: profile.images.avatar.full, // trakt does not allow hotlinking

================
File: packages/core/src/providers/twitch.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Twitch</b> integration.</span>
 * <a href="https://www.twitch.tv/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/twitch.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/twitch
 */
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
export interface TwitchProfile extends Record<string, any> {
  sub: string
  preferred_username: string
  email: string
  picture: string
}
/**
 * Add Twitch login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/twitch
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Twitch from "@auth/core/providers/twitch"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Twitch({ clientId: TWITCH_CLIENT_ID, clientSecret: TWITCH_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Twitch app documentation](https://dev.twitch.tv/console/apps)
 *
 * Add the following redirect URL into the console `http://<your-next-app-url>/api/auth/callback/twitch`
 *
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Twitch provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::tip
 *
 * The Twitch provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/twitch.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Twitch(
  config: OIDCUserConfig<TwitchProfile>
): OIDCConfig<TwitchProfile>
⋮----
async conform(response)

================
File: packages/core/src/providers/twitter.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Twitter</b> integration.</span>
 * <a href="https://www.x.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/twitter.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/twitter
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * [Users lookup](https://developer.x.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me)
 */
export interface TwitterProfile {
  data: {
    /**
     * Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools
     * that cannot handle large integers.
     */
    id: string
    /** The friendly name of this user, as shown on their profile. */
    name: string
    /** @note Email is currently unsupported by Twitter.  */
    email?: string
    /** The Twitter handle (screen name) of this user. */
    username: string
    /**
     * The location specified in the user's profile, if the user provided one.
     * As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
     *
     * To return this field, add `user.fields=location` in the authorization request's query parameter.
     */
    location?: string
    /**
     * This object and its children fields contain details about text that has a special meaning in the user's description.
     *
     *To return this field, add `user.fields=entities` in the authorization request's query parameter.
     */
    entities?: {
      /** Contains details about the user's profile website. */
      url: {
        /** Contains details about the user's profile website. */
        urls: Array<{
          /** The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. */
          start: number
          /** The end position (zero-based) of the recognized user's profile website. This end index is exclusive. */
          end: number
          /** The URL in the format entered by the user. */
          url: string
          /** The fully resolved URL. */
          expanded_url: string
          /** The URL as displayed in the user's profile. */
          display_url: string
        }>
      }
      /** Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. */
      description: {
        hashtags: Array<{
          start: number
          end: number
          tag: string
        }>
      }
    }
    /**
     * Indicate if this user is a verified Twitter user.
     *
     * To return this field, add `user.fields=verified` in the authorization request's query parameter.
     */
    verified?: boolean
    /**
     * The text of this user's profile description (also known as bio), if the user provided one.
     *
     * To return this field, add `user.fields=description` in the authorization request's query parameter.
     */
    description?: string
    /**
     * The URL specified in the user's profile, if present.
     *
     * To return this field, add `user.fields=url` in the authorization request's query parameter.
     */
    url?: string
    /** The URL to the profile image for this user, as shown on the user's profile. */
    profile_image_url?: string
    protected?: boolean
    /**
     * Unique identifier of this user's pinned Tweet.
     *
     *  You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the authorization request's query parameter.
     */
    pinned_tweet_id?: string
    created_at?: string
  }
  includes?: {
    tweets?: Array<{
      id: string
      text: string
    }>
  }
  [claims: string]: unknown
}
⋮----
/**
     * Unique identifier of this user. This is returned as a string in order to avoid complications with languages and tools
     * that cannot handle large integers.
     */
⋮----
/** The friendly name of this user, as shown on their profile. */
⋮----
/** @note Email is currently unsupported by Twitter.  */
⋮----
/** The Twitter handle (screen name) of this user. */
⋮----
/**
     * The location specified in the user's profile, if the user provided one.
     * As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
     *
     * To return this field, add `user.fields=location` in the authorization request's query parameter.
     */
⋮----
/**
     * This object and its children fields contain details about text that has a special meaning in the user's description.
     *
     *To return this field, add `user.fields=entities` in the authorization request's query parameter.
     */
⋮----
/** Contains details about the user's profile website. */
⋮----
/** Contains details about the user's profile website. */
⋮----
/** The start position (zero-based) of the recognized user's profile website. All start indices are inclusive. */
⋮----
/** The end position (zero-based) of the recognized user's profile website. This end index is exclusive. */
⋮----
/** The URL in the format entered by the user. */
⋮----
/** The fully resolved URL. */
⋮----
/** The URL as displayed in the user's profile. */
⋮----
/** Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description. */
⋮----
/**
     * Indicate if this user is a verified Twitter user.
     *
     * To return this field, add `user.fields=verified` in the authorization request's query parameter.
     */
⋮----
/**
     * The text of this user's profile description (also known as bio), if the user provided one.
     *
     * To return this field, add `user.fields=description` in the authorization request's query parameter.
     */
⋮----
/**
     * The URL specified in the user's profile, if present.
     *
     * To return this field, add `user.fields=url` in the authorization request's query parameter.
     */
⋮----
/** The URL to the profile image for this user, as shown on the user's profile. */
⋮----
/**
     * Unique identifier of this user's pinned Tweet.
     *
     *  You can obtain the expanded object in `includes.tweets` by adding `expansions=pinned_tweet_id` in the authorization request's query parameter.
     */
⋮----
/**
 * Add Twitter login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/twitter
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Twitter from "@auth/core/providers/twitter"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Twitter({
 *       clientId: TWITTER_CLIENT_ID,
 *       clientSecret: TWITTER_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Twitter App documentation](https://developer.x.com/en/apps)
 *
 * ## OAuth 2
 * Twitter supports OAuth 2, which is currently opt-in. To enable it, simply add version: "2.0" to your Provider configuration:
 * ```ts
 * Twitter({
 *   clientId: process.env.TWITTER_ID,
 *   clientSecret: process.env.TWITTER_SECRET,
 *   version: "2.0", // opt-in to Twitter OAuth 2.0
 * })
 * ```
 * Keep in mind that although this change is easy, it changes how and with which of Twitter APIs you can interact with. Read the official Twitter OAuth 2 documentation for more details.
 *
 *
 * :::note
 *
 * Email is currently not supported by Twitter OAuth 2.0.
 *
 * :::
 *
 * ### Notes
 *
 * Twitter is currently the only built-in provider using the OAuth 1.0 spec.
 * This means that you won't receive an `access_token` or `refresh_token`, but an `oauth_token` and `oauth_token_secret` respectively. Remember to add these to your database schema, in case if you are using an [Adapter](https://authjs.dev/reference/core/adapters).
 *
 * :::tip
 *
 * You must enable the "Request email address from users" option in your app permissions if you want to obtain the users email address.
 *
 * :::
 *
 * By default, Auth.js assumes that the Twitter provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Twitter provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/twitter.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Twitter(
  config: OAuthUserConfig<TwitterProfile>
): OAuthConfig<TwitterProfile>
⋮----
profile(

================
File: packages/core/src/providers/united-effects.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>United Effects</b> integration.</span>
 * <a href="https://www.unitedeffects.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/united-effects.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/united-effects
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export interface UnitedEffectsProfile extends Record<string, any> {
  sub: string
  email: string
}
/**
 * Add United Effects login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/united-effects
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import UnitedEffects from "@auth/core/providers/united-effects"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     UnitedEffects({ clientId: UE_CLIENT_ID, clientSecret: UE_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [UnitedEffects Auth.js documentation](https://docs.unitedeffects.com/integrations/nextauthjs)",
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the UnitedEffects provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * :::note
 *
 * `issuer` should be the fully qualified URL including your Auth Group ID – e.g. `https://auth.unitedeffects.com/YQpbQV5dbW-224dCovz-3`
 *
 * :::
 *
 * :::danger
 *
 * The United Effects API does not return the user name or image by design, so this provider will return null for both. United Effects prioritizes user personal information security above all and has built a secured profile access request system separate from the provider API.
 *
 * :::
 *
 * :::tip
 *
 * The UnitedEffects provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/united-effects.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function UnitedEffects<P extends UnitedEffectsProfile>(
  options: OAuthUserConfig<P> & { issuer: string }
): OAuthConfig<P>

================
File: packages/core/src/providers/vipps.ts
================
import type { OIDCConfig, OIDCUserConfig } from "./index.js"
interface Address {
  address_type: string
  country: string
  formatted: string
  postal_code: string
  region: string
  street_address: string
}
/** @see [User Profile Structure](https://developer.vippsmobilepay.com/api/userinfo/#operation/userinfoAuthorizationCode) */
export interface VippsProfile extends Record<string, any> {
  accounts: {
    account_name: string
    account_number: number
    bank_name: string
  }[]
  address: Address
  other_addresses: Address[]
  birthdate: string
  email: string
  email_verified: boolean
  family_name: string
  given_name: string
  name: string
  nin: string
  phone_number: string
  sid: string
  sub: string
  delegatedConsents: {
    language: string
    heading: string
    termsDescription: string
    confirmConsentButtonText: string
    links: {
      termsLinkText: string
      termsLinkUrl: string
      privacyStatementLinkText: string
      privacyStatementLinkUrl: string
    }
    timeOfConsent: string
    consents: {
      id: string
      accepted: boolean
      required: boolean
      textDisplayedToUser: string
    }[]
  }
}
/**
 * @see [Vipps Login API](https://developer.vippsmobilepay.com/docs/APIs/login-api/api-guide)
 *
 * ## Example
 *
 * ```ts
 * import Vipps from "@auth/core/providers/vipps"
 * ...
 * providers: [
 *  Vipps({
 *    clientId: process.env.AUTH_VIPPS_ID,
 *    clientSecret: process.env.AUTH_VIPPS_SECRET,
 *  })
 * ]
 * ...
 * ```
 * ::: note
 * If you're testing, make sure to override the issuer option with apitest.vipps.no
 * :::
 */
export default function Vipps(
  options: OIDCUserConfig<VippsProfile>
): OIDCConfig<VippsProfile>

================
File: packages/core/src/providers/vk.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>VK</b> integration.</span>
 * <a href="https://vk.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/vk.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/vk
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** https://dev.vk.com/reference/objects/user */
export interface VkProfile {
  id: number
  first_name: string
  last_name: string
  photo_100: string
  can_access_closed: boolean
  is_closed: boolean
  deactivated?: string
  sex?: 0 | 1 | 2
  screen_name?: string
  photo_50?: string
  online?: 0 | 1
  online_mobile?: 0 | 1
  online_app?: number
  verified?: 0 | 1
  trending?: 0 | 1
  friend_status?: 0 | 1 | 2 | 3
  first_name_nom?: string
  first_name_gen?: string
  first_name_dat?: string
  first_name_acc?: string
  first_name_ins?: string
  first_name_abl?: string
  last_name_nom?: string
  last_name_gen?: string
  last_name_dat?: string
  last_name_acc?: string
  last_name_ins?: string
  last_name_abl?: string
  nickname?: string
  maiden_name?: string
  domain?: string
  bdate?: string
  city?: {
    id: number
    title: string
  }
  country?: {
    id: number
    title: string
  }
  timezone?: number
  photo_200?: string
  photo_max?: string
  photo_200_orig?: string
  photo_400_orig?: string
  photo_max_orig?: string
  photo_id?: string
  has_photo?: 0 | 1
  has_mobile?: 0 | 1
  is_friend?: 0 | 1
  can_post?: 0 | 1
  can_see_all_posts?: 0 | 1
  can_see_audio?: 0 | 1
  connections?: {
    facebook?: string
    skype?: string
    twitter?: string
    livejournal?: string
    instagram?: string
  }
  photo_400?: string
  wall_default?: "owner" | "all"
  interests?: string
  books?: string
  tv?: string
  quotes?: string
  about?: string
  games?: string
  movies?: string
  activities?: string
  music?: string
  can_write_private_message?: 0 | 1
  can_send_friend_request?: 0 | 1
  contacts?: {
    mobile_phone?: string
    home_phone?: string
  }
  site?: string
  status_audio?: {
    access_key?: string
    artist: string
    id: number
    owner_id: number
    title: string
    url?: string
    duration: number
    date?: number
    album_id?: number
    genre_id?: number
    performer?: string
  }
  status?: string
  last_seen?: {
    platform?: 1 | 2 | 3 | 4 | 5 | 6 | 7
    time?: number
  }
  exports?: {
    facebook?: number
    livejournal?: number
    twitter?: number
    instagram?: number
  }
  crop_photo?: {
    photo: {
      access_key?: string
      album_id: number
      date: number
      height?: number
      id: number
      images?: Array<{
        height?: number
        type?: "s" | "m" | "x" | "l" | "o" | "p" | "q" | "r" | "y" | "z" | "w"
        url?: string
        width?: number
      }>
      lat?: number
      long?: number
      owner_id: number
      photo_256?: string
      can_comment?: 0 | 1
      place?: string
      post_id?: number
      sizes?: Array<{
        height: number
        url: string
        src?: string
        type:
          | "s"
          | "m"
          | "x"
          | "o"
          | "p"
          | "q"
          | "r"
          | "k"
          | "l"
          | "y"
          | "z"
          | "c"
          | "w"
          | "a"
          | "b"
          | "e"
          | "i"
          | "d"
          | "j"
          | "temp"
          | "h"
          | "g"
          | "n"
          | "f"
          | "max"
        width: number
      }>
      text?: string
      user_id?: number
      width?: number
      has_tags: boolean
    }
    crop: {
      x: number
      y: number
      x2: number
      y2: number
    }
    rect: {
      x: number
      y: number
      x2: number
      y2: number
    }
  }
  followers_count?: number
  blacklisted?: 0 | 1
  blacklisted_by_me?: 0 | 1
  is_favorite?: 0 | 1
  is_hidden_from_feed?: 0 | 1
  common_count?: number
  occupation?: {
    id?: number
    name?: string
    type?: "work" | "school" | "university"
  }
  career?: {
    group_id?: number
    company?: string
    country_id?: number
    city_id?: number
    city_name?: string
    from?: number
    until?: number
    position?: string
  }
  military?: {
    country_id: number
    from?: number
    unit: string
    unit_id: number
    until?: number
  }
  education?: {
    university?: number
    university_name?: string
    faculty?: number
    faculty_name?: string
    graduation?: number
  }
  home_town?: string
  relation?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8
  relation_partner?: {
    deactivated?: string
    first_name: string
    hidden?: number
    id: number
    last_name: string
    can_access_closed?: boolean
    is_closed?: boolean
  }
  personal?: {
    alcohol?: 1 | 2 | 3 | 4 | 5
    inspired_by?: string
    langs?: string[]
    life_main?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8
    people_main?: 1 | 2 | 3 | 4 | 5 | 6
    political?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    religion?: string
    smoking?: 1 | 2 | 3 | 4 | 5
  }
  universities?: Array<{
    chair?: number
    chair_name?: string
    city?: number
    country?: number
    education_form?: string
    education_status?: string
    faculty?: number
    faculty_name?: string
    graduation?: number
    id?: number
    name?: string
    university_group_id?: number
  }>
  schools?: Array<{
    city?: number
    class?: string
    country?: number
    id?: string
    name?: string
    type?: number
    type_str?: string
    year_from?: number
    year_graduated?: number
    year_to?: number
    speciality?: string
  }>
  relatives?: Array<{
    id?: number
    name?: string
    type: "parent" | "child" | "grandparent" | "grandchild" | "sibling"
  }>
  counters?: {
    albums?: number
    videos?: number
    audios?: number
    photos?: number
    notes?: number
    friends?: number
    groups?: number
    online_friends?: number
    mutual_friends?: number
    user_videos?: number
    followers?: number
    pages?: number
  }
  is_no_index?: 0 | 1
  // Expand from token https://dev.vk.com/en/reference/access-rights?ref=old_portal
  email?: string
}
⋮----
// Expand from token https://dev.vk.com/en/reference/access-rights?ref=old_portal
⋮----
/**
 * Add VK login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/vk
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import VK from "@auth/core/providers/vk"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [VK({ clientId: VK_CLIENT_ID, clientSecret: VK_CLIENT_SECRET })],
 * })
 * ```
 *
 * ### Resources
 *
 * - [VK API documentation](https://vk.com/dev/first_guide)
 * - [VK App configuration](https://vk.com/apps?act=manage)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the VK provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The VK provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/vk.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::note
 *
 * By default the provider uses 5.126 version of the API. See https://vk.com/dev/versions for more info.
 * If you want to use a different version, you can pass it to provider's options object:
 * ```ts
 * const apiVersion = "5.126"
 * providers: [
 *   Vk({
 *     accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
 *     requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
 *     authorizationUrl:
 *       `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,
 *     profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,
 *   })
 * ]
 * ```
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function VK<P extends Record<string, any> = VkProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
const apiVersion = "5.131" // https://vk.com/dev/versions
⋮----
async request(
⋮----
profile(profile: P)

================
File: packages/core/src/providers/webauthn.ts
================
import {
  generateAuthenticationOptions,
  generateRegistrationOptions,
  verifyAuthenticationResponse,
  verifyRegistrationResponse,
} from "@simplewebauthn/server"
import { MissingAdapter } from "../errors.js"
import type { CommonProviderOptions, CredentialInput } from "./index.js"
import type {
  GenerateRegistrationOptionsOpts,
  GenerateAuthenticationOptionsOpts,
  VerifyAuthenticationResponseOpts,
  VerifyRegistrationResponseOpts,
} from "@simplewebauthn/server"
import type {
  InternalOptions,
  RequestInternal,
  SemverString,
  User,
} from "../types.js"
export type WebAuthnProviderType = "webauthn"
export const DEFAULT_WEBAUTHN_TIMEOUT = 5 * 60 * 1000 // 5 minutes
⋮----
export type RelayingParty = {
  /** Relaying Party ID. Use the website's domain name. */
  id: string
  /** Relaying Party name. Use the website's name. */
  name: string
  /** Relaying Party origin. Use the website's origin. */
  origin: string
}
⋮----
/** Relaying Party ID. Use the website's domain name. */
⋮----
/** Relaying Party name. Use the website's name. */
⋮----
/** Relaying Party origin. Use the website's origin. */
⋮----
type RelayingPartyArray = {
  /** Relaying Party ID. Use the website's domain name. */
  id: string | string[]
  /** Relaying Party name. Use the website's name. */
  name: string | string[]
  /** Relaying Party origin. Use the website's origin. */
  origin: string | string[]
}
⋮----
/** Relaying Party ID. Use the website's domain name. */
⋮----
/** Relaying Party name. Use the website's name. */
⋮----
/** Relaying Party origin. Use the website's origin. */
⋮----
export type GetUserInfo = (
  options: InternalOptions<WebAuthnProviderType>,
  request: RequestInternal
) => Promise<
  | { user: User; exists: true }
  | { user: Omit<User, "id">; exists: false }
  | null
>
type ConfigurableAuthenticationOptions = Omit<
  GenerateAuthenticationOptionsOpts,
  "rpID" | "allowCredentials" | "challenge"
>
type ConfigurableRegistrationOptions = Omit<
  GenerateRegistrationOptionsOpts,
  | "rpName"
  | "rpID"
  | "userID"
  | "userName"
  | "challenge"
  | "userDisplayName"
  | "excludeCredentials"
>
type ConfigurableVerifyAuthenticationOptions = Omit<
  VerifyAuthenticationResponseOpts,
  | "expectedChallenge"
  | "expectedOrigin"
  | "expectedRPID"
  | "authenticator"
  | "response"
>
type ConfigurableVerifyRegistrationOptions = Omit<
  VerifyRegistrationResponseOpts,
  "expectedChallenge" | "expectedOrigin" | "expectedRPID" | "response"
>
export interface WebAuthnConfig extends CommonProviderOptions {
  type: WebAuthnProviderType
  /**
   * Relaying party (RP) configuration
   *
   * If not provided, the request URL will be used.
   **/
  relayingParty?: Partial<RelayingPartyArray>
  /**
   * Function that returns the relaying party for the current request.
   */
  getRelayingParty: (
    options: InternalOptions<WebAuthnProviderType>,
    request: RequestInternal
  ) => RelayingParty
  /**
   * Enable conditional UI.
   *
   * NOTE: Only one provider can have this option enabled at a time. Defaults to `true`.
   */
  enableConditionalUI: boolean
  /**
   * Version of SimpleWebAuthn browser script to load in the sign in page.
   *
   * This is only loaded if the provider has conditional UI enabled. If set to false, it won't load any script.
   * Defaults to `v9.0.0`.
   */
  simpleWebAuthnBrowserVersion: SemverString | false
  /** Form fields displayed in the default Passkey sign in/up form.
   * These are not validated or enforced beyond the default Auth.js authentication page.
   *
   * By default it displays an email field.
   */
  formFields: Record<string, CredentialInput>
  /**
   * Authentication options that are passed to @simplewebauthn during authentication.
   */
  authenticationOptions?: Partial<ConfigurableAuthenticationOptions>
  /**
   * Registration options that are passed to @simplewebauthn during registration.
   */
  registrationOptions: Partial<ConfigurableRegistrationOptions>
  /**
   * Verify Authentication options that are passed to @simplewebauthn during authentication.
   */
  verifyAuthenticationOptions?: Partial<ConfigurableVerifyAuthenticationOptions>
  /**
   * Verify Registration options that are passed to @simplewebauthn during registration.
   */
  verifyRegistrationOptions?: Partial<ConfigurableVerifyRegistrationOptions>
  /**
   * Function that returns the user info that the authenticator will use during registration and authentication.
   *
   * - It accepts the provider options, the request object, and returns the user info.
   * - If the request contains an existing user's data (e.g. email address), the function must return the existing user and `exists` must be `true`.
   * - If the request contains enough information to create a new user, the function must return a new user info and `exists` must be `false`.
   * - If the request does not contain enough information to create a new user, the function must return `null`.
   *
   * It should not have any side effects (i.e. it shall not modify the database).
   *
   * During passkey creation:
   *  - The passkey's user ID will be a random string.
   *  - The passkey's user name will be user.email
   *  - The passkey's user display name will be user.name, if present, or user.email
   *
   * By default, it looks for and uses the "email" request parameter to look up the user in the database.
   */
  getUserInfo: GetUserInfo
  /** SimpleWebAuthn instance to use for registration and authentication. */
  simpleWebAuthn: {
    verifyAuthenticationResponse: typeof verifyAuthenticationResponse
    verifyRegistrationResponse: typeof verifyRegistrationResponse
    generateAuthenticationOptions: typeof generateAuthenticationOptions
    generateRegistrationOptions: typeof generateRegistrationOptions
  }
}
⋮----
/**
   * Relaying party (RP) configuration
   *
   * If not provided, the request URL will be used.
   **/
⋮----
/**
   * Function that returns the relaying party for the current request.
   */
⋮----
/**
   * Enable conditional UI.
   *
   * NOTE: Only one provider can have this option enabled at a time. Defaults to `true`.
   */
⋮----
/**
   * Version of SimpleWebAuthn browser script to load in the sign in page.
   *
   * This is only loaded if the provider has conditional UI enabled. If set to false, it won't load any script.
   * Defaults to `v9.0.0`.
   */
⋮----
/** Form fields displayed in the default Passkey sign in/up form.
   * These are not validated or enforced beyond the default Auth.js authentication page.
   *
   * By default it displays an email field.
   */
⋮----
/**
   * Authentication options that are passed to @simplewebauthn during authentication.
   */
⋮----
/**
   * Registration options that are passed to @simplewebauthn during registration.
   */
⋮----
/**
   * Verify Authentication options that are passed to @simplewebauthn during authentication.
   */
⋮----
/**
   * Verify Registration options that are passed to @simplewebauthn during registration.
   */
⋮----
/**
   * Function that returns the user info that the authenticator will use during registration and authentication.
   *
   * - It accepts the provider options, the request object, and returns the user info.
   * - If the request contains an existing user's data (e.g. email address), the function must return the existing user and `exists` must be `true`.
   * - If the request contains enough information to create a new user, the function must return a new user info and `exists` must be `false`.
   * - If the request does not contain enough information to create a new user, the function must return `null`.
   *
   * It should not have any side effects (i.e. it shall not modify the database).
   *
   * During passkey creation:
   *  - The passkey's user ID will be a random string.
   *  - The passkey's user name will be user.email
   *  - The passkey's user display name will be user.name, if present, or user.email
   *
   * By default, it looks for and uses the "email" request parameter to look up the user in the database.
   */
⋮----
/** SimpleWebAuthn instance to use for registration and authentication. */
⋮----
/**
 * Add WebAuthn login to your page.
 *
 * ### Setup
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import WebAuthn from "@auth/core/providers/webauthn"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [WebAuthn],
 * })
 * ```
 * ### Resources
 *
 * - [SimpleWebAuthn - Server side](https://simplewebauthn.dev/docs/packages/server)
 * - [SimpleWebAuthn - Client side](https://simplewebauthn.dev/docs/packages/client)
 * - [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/webauthn.ts)
 *
 * :::tip
 *
 * The WebAuthn provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/webauthn.ts).
 * To override the defaults for your use case, check out [customizing the built-in WebAuthn provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function WebAuthn(
  config: Partial<WebAuthnConfig>
): WebAuthnConfig
/**
 * Retrieves user information for the WebAuthn provider.
 *
 * It looks for the "email" query parameter and uses it to look up the user in the database.
 * It also accepts a "name" query parameter to set the user's display name.
 *
 * @param options - The internaloptions object.
 * @param request - The request object containing the query parameters.
 * @returns The existing or new user info.
 * @throws {MissingAdapter} If the adapter is missing.
 * @throws {EmailSignInError} If the email address is not provided.
 */
const getUserInfo: GetUserInfo = async (options, request) =>
⋮----
// Get email address from the query.
⋮----
// If email is not provided, return null
⋮----
// If the user does not exist, return a new user info.
⋮----
/**
 * Retrieves the relaying party information based on the provided options.
 * If the relaying party information is not provided, it falls back to using the URL information.
 */
function getRelayingParty(
  /** The options object containing the provider and URL information. */
  options: InternalOptions<WebAuthnProviderType>
): RelayingParty
⋮----
/** The options object containing the provider and URL information. */

================
File: packages/core/src/providers/webex.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Webex</b> integration.</span>
 * <a href="https://webex.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/webex.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/webex
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * The returned user profile from Webex when using the profile callback.
 *
 * Please refer to {@link https://developer.webex.com/docs/api/v1/people/get-my-own-details People - Get My Own Details}
 * on Webex Developer portal for additional fields. Returned fields may vary depending on the user's role, the OAuth
 * integration's scope, and the organization the OAuth integration belongs to.
 */
export interface WebexProfile extends Record<string, any> {
  id: string
  emails: string[]
  displayName?: string
  avatar?: string
}
/**
 * Add Webex login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/webex
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Webex from "@auth/core/providers/webex"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Webex({ clientId: WEBEX_CLIENT_ID, clientSecret: WEBEX_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Webex OAuth 2.0 Integration Guide](https://developer.webex.com/docs/integrations)
 * - [Login with Webex](https://developer.webex.com/docs/login-with-webex)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Webex provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Webex provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/webex.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Webex<P extends WebexProfile>(
  config: OAuthUserConfig<P> & { apiBaseUrl?: string }
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/wechat.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#24292f", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>WeChat</b> integration.</span>
 * <a href="https://www.wechat.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/wechat.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/wechat
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/** @see [Get the authenticated user](https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Authorized_Interface_Calling_UnionID.html) */
export interface WeChatProfile {
  openid: string
  nickname: string
  sex: number
  province: string
  city: string
  country: string
  headimgurl: string
  privilege: string[]
  unionid: string
  [claim: string]: unknown
}
/**
 * Add WeChat login to your page and make requests to [WeChat APIs](https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Authorized_Interface_Calling_UnionID.html).
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/wechat
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import WeChat from "@auth/core/providers/wechat"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [WeChat({
 *     clientId: AUTH_WECHAT_APP_ID,
 *     clientSecret: AUTH_WECHAT_APP_SECRET,
 *     platformType: "OfficialAccount",
 *   })],
 * })
 * ```
 *
 * ### Resources
 *
 * - [WeChat Official Account](https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html)
 * - [WeChat Official Account - Webpage Authorization](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html)
 * - [WeChat Official Account Test Account](https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login)
 * - [WeChat WebsiteApp Login](https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html)
 * - [使用微信测试账号对网页进行授权](https://cloud.tencent.com/developer/article/1703167)
 *
 * :::tip
 *
 * The WeChat provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/wechat.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/providers/custom-provider#override-default-options).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function WeChat(
  options: OAuthUserConfig<WeChatProfile> & {
    platformType?: "OfficialAccount" | "WebsiteApp"
  }
): OAuthConfig<WeChatProfile>
⋮----
async conform(response)
⋮----
async request(
⋮----
profile(profile)

================
File: packages/core/src/providers/wikimedia.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b> Wikimedia</b> integration.</span>
 * <a href="https://mediawiki.org/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/wikimedia.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/wikimedia
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
export type WikimediaGroup =
  | "*"
  | "user"
  | "autoconfirmed"
  | "extendedconfirmed"
  | "bot"
  | "sysop"
  | "bureaucrat"
  | "steward"
  | "accountcreator"
  | "import"
  | "transwiki"
  | "ipblock-exempt"
  | "oversight"
  | "rollbacker"
  | "propertycreator"
  | "wikidata-staff"
  | "flood"
  | "translationadmin"
  | "confirmed"
  | "flow-bot"
  | "checkuser"
export type WikimediaGrant =
  | "basic"
  | "blockusers"
  | "checkuser"
  | "createaccount"
  | "delete"
  | "editinterface"
  | "editmycssjs"
  | "editmyoptions"
  | "editmywatchlist"
  | "editpage"
  | "editprotected"
  | "editsiteconfig"
  | "globalblock"
  | "highvolume"
  | "import"
  | "mergehistory"
  | "oath"
  | "oversight"
  | "patrol"
  | "privateinfo"
  | "protect"
  | "rollback"
  | "sendemail"
  | "shortenurls"
  | "uploadfile"
  | "viewdeleted"
  | "viewmywatchlist"
export type WikimediaRight =
  | "abusefilter-log"
  | "apihighlimits"
  | "applychangetags"
  | "autoconfirmed"
  | "autopatrol"
  | "autoreview"
  | "bigdelete"
  | "block"
  | "blockemail"
  | "bot"
  | "browsearchive"
  | "changetags"
  | "checkuser"
  | "checkuser-log"
  | "createaccount"
  | "createpage"
  | "createpagemainns"
  | "createtalk"
  | "delete"
  | "delete-redirect"
  | "deletedhistory"
  | "deletedtext"
  | "deletelogentry"
  | "deleterevision"
  | "edit"
  | "edit-legal"
  | "editinterface"
  | "editmyoptions"
  | "editmyusercss"
  | "editmyuserjs"
  | "editmyuserjson"
  | "editmywatchlist"
  | "editprotected"
  | "editsemiprotected"
  | "editsitecss"
  | "editsitejs"
  | "editsitejson"
  | "editusercss"
  | "edituserjs"
  | "edituserjson"
  | "globalblock"
  | "import"
  | "importupload"
  | "ipblock-exempt"
  | "item-merge"
  | "item-redirect"
  | "item-term"
  | "markbotedits"
  | "massmessage"
  | "mergehistory"
  | "minoredit"
  | "move"
  | "move-subpages"
  | "movefile"
  | "movestable"
  | "mwoauth-authonlyprivate"
  | "nominornewtalk"
  | "noratelimit"
  | "nuke"
  | "patrol"
  | "patrolmarks"
  | "property-create"
  | "property-term"
  | "protect"
  | "purge"
  | "read"
  | "reupload"
  | "reupload-own"
  | "reupload-shared"
  | "rollback"
  | "sendemail"
  | "skipcaptcha"
  | "suppressionlog"
  | "tboverride"
  | "templateeditor"
  | "torunblocked"
  | "transcode-reset"
  | "translate"
  | "undelete"
  | "unwatchedpages"
  | "upload"
  | "upload_by_url"
  | "viewmywatchlist"
  | "viewsuppressed"
  | "writeapi"
export interface WikimediaProfile extends Record<string, any> {
  sub: string
  username: string
  editcount: number
  confirmed_email: boolean
  blocked: boolean
  registered: string
  groups: WikimediaGroup[]
  rights: WikimediaRight[]
  grants: WikimediaGrant[]
  realname: string
  email: string
}
/**
 * Add Wikimedia login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/wikimedia
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Wikimedia from "@auth/core/providers/wikimedia"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Wikimedia({
 *       clientId: WIKIMEDIA_CLIENT_ID,
 *       clientSecret: WIKIMEDIA_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Wikimedia OAuth documentation](https://www.mediawiki.org/wiki/Extension:OAuth)
 *
 * ## Configuration steps
 * - Go to and accept the Consumer Registration doc: https://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration
 * - Request a new OAuth 2.0 consumer to get the `clientId` and `clientSecret`: https://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration/propose/oauth2
 *   - Add the following redirect URL into the console: `http://<your-next-app-url>/api/auth/callback/wikimedia`
 *   - Do not check the box next to This consumer is only for __your username__
 *   - Unless you explicitly need a larger scope, feel free to select the radio button labelled User identity verification only - no ability to read pages or act on the users behalf.
 *
 * After registration, you can initially test your application only with your own Wikimedia account.
 * You may have to wait several days for the application to be approved for it to be used by everyone.
 *
 * ### Notes
 * This provider also supports all Wikimedia projects:
 * - Wikipedia
 * - Wikidata
 * - Wikibooks
 * - Wiktionary
 * - etc..
 *
 * Please be aware that Wikimedia accounts do not have to have an associated email address. So you may want to add check if the user has an email address before allowing them to login.
 *
 * By default, Auth.js assumes that the Wikimedia provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Wikimedia provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/wikimedia.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Wikimedia<P extends WikimediaProfile>(
  options: OAuthUserConfig<P>
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/wordpress.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>WordPress</b> integration.</span>
 * <a href="https://wordpress.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/wordpress.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/wordpress
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add WordPress login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/wordpress
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import WordPress from "@auth/core/providers/wordpress"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     WordPress({
 *       clientId: WORKPRESS_CLIENT_ID,
 *       clientSecret: WORKPRESS_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [WordPress OAuth documentation](https://developer.wordpress.com/docs/oauth2/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the WordPress provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The WordPress provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/wordpress.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function WordPress(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/workos.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>WorkOS</b> integration.</span>
 * <a href="https://workos.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/workos.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/workos
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * - {@link https://workos.com/docs/reference/sso/profile | The returned profile object}
 */
export interface WorkOSProfile extends Record<string, any> {
  object: string
  id: string
  organization_id: string
  connection_id: string
  connection_type: string
  idp_id: string
  email: string
  first_name: string
  last_name: string
  raw_attributes: {
    id: string
    email: string
    lastName: string
    firstName: string
    picture: string
  }
}
/**
 * Add WorkOS login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/workos
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import WorkOS from "@auth/core/providers/workos"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     WorkOS({
 *       clientId: WORKOS_CLIENT_ID,
 *       clientSecret: WORKOS_CLIENT_SECRET,
 *       issuer: WORKOS_ISSUER,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [WorkOS SSO OAuth documentation](https://workos.com/docs/reference/sso)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the WorkOS provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * WorkOS is not an identity provider itself, but, rather, a bridge to multiple single sign-on (SSO) providers.
 * As a result, we need to make some additional changes to authenticate users using WorkOS.
 *
 * In order to sign a user in using WorkOS, we need to specify which WorkOS Connection to use.
 * A common way to do this is to collect the user's email address and extract the domain. This can be done using a custom login page.
 * To add a custom login page, you can use the `pages` option:
 * ```ts
 * pages: {
 *   signIn: "/auth/signin",
 * }
 * ```
 * We can then add a custom login page that displays an input where the user can enter their email address.
 * We then extract the domain from the user's email address and pass it to the `authorizationParams` parameter on the `signIn` function:
 * ```js title="pages/auth/signin.js"
 * import { useState } from "react"
 * import { getProviders, signIn } from "next-auth/react"
 *
 * export default function SignIn({ providers }) {
 *   const [email, setEmail] = useState("")
 *
 *   return (
 *     <>
 *       {Object.values(providers).map((provider) => {
 *         if (provider.id === "workos") {
 *           return (
 *             <div key={provider.id}>
 *               <input
 *                 type="email"
 *                 value={email}
 *                 placeholder="Email"
 *                 onChange={(event) => setEmail(event.target.value)}
 *               />
 *               <button
 *                 onClick={() =>
 *                   signIn(provider.id, undefined, {
 *                     domain: email.split("@")[1],
 *                   })
 *                 }
 *               >
 *                 Sign in with SSO
 *               </button>
 *             </div>
 *           )
 *         }
 *
 *         return (
 *           <div key={provider.id}>
 *             <button onClick={() => signIn(provider.id)}>
 *               Sign in with {provider.name}
 *             </button>
 *           </div>
 *         )
 *       })}
 *     </>
 *   )
 * }
 *
 * export async function getServerSideProps(context) {
 *   const providers = await getProviders()
 *   return {
 *     props: { providers },
 *   }
 * }
 * ```
 *
 * :::tip
 *
 * The WorkOS provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/workos.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function WorkOS<P extends WorkOSProfile>(
  options: OAuthUserConfig<P> & { connection?: string }
): OAuthConfig<P>
⋮----
profile(profile)

================
File: packages/core/src/providers/yandex.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#ffcc00", display: "flex", justifyContent: "space-between", color: "#000", padding: 16}}>
 * <span>Built-in <b>Yandex</b> integration.</span>
 * <a href="https://yandex.com">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/yandex.svg" height="48" width="48"/>
 * </a>
 * </div>
 *
 * @module providers/yandex
 */
import { OAuthConfig, OAuthUserConfig } from "./oauth.js"
/**
 * - {@link https://yandex.com/dev/id/doc/en/user-information | Getting information about the user}
 * - {@link https://yandex.com/dev/id/doc/en/user-information#email-access | Access to email address}
 * - {@link https://yandex.com/dev/id/doc/en/user-information#avatar-access | Access to the user's profile picture}
 * - {@link https://yandex.com/dev/id/doc/en/user-information#birthday-access | Access to the date of birth}
 * - {@link https://yandex.com/dev/id/doc/en/user-information#name-access | Access to login, first name, last name, and gender}
 * - {@link https://yandex.com/dev/id/doc/en/user-information#phone-access | Access to the phone number}
 */
export interface YandexProfile {
  /** User's Yandex login. */
  login: string
  /** Yandex user's unique ID. */
  id: string
  /**
   * The ID of the app the OAuth token in the request was issued for.
   * Available in the [app properties](https://oauth.yandex.com/). To open properties, click the app name.
   */
  client_id: string
  /** Authorized Yandex user ID. It is formed on the Yandex side based on the `client_id` and `user_id` pair. */
  psuid: string
  /** An array of the user's email addresses. Currently only includes the default email address. */
  emails?: string[]
  /** The default email address for contacting the user. */
  default_email?: string
  /**
   * Indicates that the stub (profile picture that is automatically assigned when registering in Yandex)
   * ID is specified in the `default_avatar_id` field.
   */
  is_avatar_empty?: boolean
  /**
   * ID of the Yandex user's profile picture.
   * Format for downloading user avatars: `https://avatars.yandex.net/get-yapic/<default_avatar_id>/<size>`
   * @example "https://avatars.yandex.net/get-yapic/31804/BYkogAC6AoB17bN1HKRFAyKiM4-1/islands-200"
   * Available sizes:
   * `islands-small`: 28×28 pixels.
   * `islands-34`: 34×34 pixels.
   * `islands-middle`: 42×42 pixels.
   * `islands-50`: 50×50 pixels.
   * `islands-retina-small`: 56×56 pixels.
   * `islands-68`: 68×68 pixels.
   * `islands-75`: 75×75 pixels.
   * `islands-retina-middle`: 84×84 pixels.
   * `islands-retina-50`: 100×100 pixels.
   * `islands-200`: 200×200 pixels.
   */
  default_avatar_id?: string
  /**
   * The user's date of birth in YYYY-MM-DD format.
   * Unknown elements of the date are filled in with zeros, such as: `0000-12-23`.
   * If the user's date of birth is unknow, birthday will be `null`
   */
  birthday?: string | null
  first_name?: string
  last_name?: string
  display_name?: string
  /**
   * The first and last name that the user specified in Yandex ID.
   * Non-Latin characters of the first and last names are presented in Unicode format.
   */
  real_name?: string
  /** User's gender. `null` Stands for unknown or unspecified gender. Will be `undefined` if not provided by Yandex. */
  sex?: "male" | "female" | null
  /**
   * The default phone number for contacting the user.
   * The API can exclude the user's phone number from the response at its discretion.
   * The field contains the following parameters:
   * id: Phone number ID.
   * number: The user's phone number.
   */
  default_phone?: { id: number; number: string }
}
⋮----
/** User's Yandex login. */
⋮----
/** Yandex user's unique ID. */
⋮----
/**
   * The ID of the app the OAuth token in the request was issued for.
   * Available in the [app properties](https://oauth.yandex.com/). To open properties, click the app name.
   */
⋮----
/** Authorized Yandex user ID. It is formed on the Yandex side based on the `client_id` and `user_id` pair. */
⋮----
/** An array of the user's email addresses. Currently only includes the default email address. */
⋮----
/** The default email address for contacting the user. */
⋮----
/**
   * Indicates that the stub (profile picture that is automatically assigned when registering in Yandex)
   * ID is specified in the `default_avatar_id` field.
   */
⋮----
/**
   * ID of the Yandex user's profile picture.
   * Format for downloading user avatars: `https://avatars.yandex.net/get-yapic/<default_avatar_id>/<size>`
   * @example "https://avatars.yandex.net/get-yapic/31804/BYkogAC6AoB17bN1HKRFAyKiM4-1/islands-200"
   * Available sizes:
   * `islands-small`: 28×28 pixels.
   * `islands-34`: 34×34 pixels.
   * `islands-middle`: 42×42 pixels.
   * `islands-50`: 50×50 pixels.
   * `islands-retina-small`: 56×56 pixels.
   * `islands-68`: 68×68 pixels.
   * `islands-75`: 75×75 pixels.
   * `islands-retina-middle`: 84×84 pixels.
   * `islands-retina-50`: 100×100 pixels.
   * `islands-200`: 200×200 pixels.
   */
⋮----
/**
   * The user's date of birth in YYYY-MM-DD format.
   * Unknown elements of the date are filled in with zeros, such as: `0000-12-23`.
   * If the user's date of birth is unknow, birthday will be `null`
   */
⋮----
/**
   * The first and last name that the user specified in Yandex ID.
   * Non-Latin characters of the first and last names are presented in Unicode format.
   */
⋮----
/** User's gender. `null` Stands for unknown or unspecified gender. Will be `undefined` if not provided by Yandex. */
⋮----
/**
   * The default phone number for contacting the user.
   * The API can exclude the user's phone number from the response at its discretion.
   * The field contains the following parameters:
   * id: Phone number ID.
   * number: The user's phone number.
   */
⋮----
/**
 * Add Yandex login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/yandex
 * ```
 *
 * #### Configuration
 * ```ts
 * import { Auth } from "@auth/core"
 * import Yandex from "@auth/core/providers/yandex"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Yandex({ clientId: YANDEX_CLIENT_ID, clientSecret: YANDEX_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Yandex - Creating an OAuth app](https://yandex.com/dev/id/doc/en/register-client#create)
 * - [Yandex - Manage OAuth apps](https://oauth.yandex.com/)
 * - [Yandex - OAuth documentation](https://yandex.com/dev/id/doc/en/)
 * - [Learn more about OAuth](https://authjs.dev/concepts/oauth)
 * - [Source code](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/yandex.ts)
 *
 *:::tip
 * The Yandex provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/yandex.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 * :::
 *
 * :::info **Disclaimer**
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 * :::
 */
export default function Yandex(
  options: OAuthUserConfig<YandexProfile>
): OAuthConfig<YandexProfile>
⋮----
/** @see [Data access](https://yandex.com/dev/id/doc/en/register-client#access) */
⋮----
profile(profile)

================
File: packages/core/src/providers/zitadel.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Zitadel</b> integration.</span>
 * <a href="https://zitadel.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/zitadel.svg" height="48"/>
 * </a>
 * </div>
 *
 * @module providers/zitadel
 */
import type { OIDCConfig, OAuthUserConfig } from "./index.js"
/**
 * The returned user profile from ZITADEL when using the profile callback. See the standard claims reference [here](https://zitadel.com/docs/apis/openidoauth/claims#standard-claims).
 * If you need access to ZITADEL APIs or need additional information, make sure to add the corresponding scopes.
 */
export interface ZitadelProfile extends Record<string, any> {
  amr: string // Authentication Method References as defined in RFC8176
  aud: string // The audience of the token, by default all client id's and the project id are included
  auth_time: number // UNIX time of the authentication
  azp: string // Client id of the client who requested the token
  email: string // Email Address of the subject
  email_verified: boolean // if the email was verified by ZITADEL
  exp: number // Time the token expires (as unix time)
  family_name: string // The subjects family name
  given_name: string // Given name of the subject
  gender: string // Gender of the subject
  iat: number // Time of the token was issued at (as unix time)
  iss: string // Issuing domain of a token
  jti: string // Unique id of the token
  locale: string // Language from the subject
  name: string // The subjects full name
  nbf: number // Time the token must not be used before (as unix time)
  picture: string // The subjects profile picture
  phone: string // Phone number provided by the user
  phone_verified: boolean // if the phonenumber was verified by ZITADEL
  preferred_username: string // ZITADEL's login name of the user. Consist of username@primarydomain
  sub: string // Subject ID of the user
}
⋮----
amr: string // Authentication Method References as defined in RFC8176
aud: string // The audience of the token, by default all client id's and the project id are included
auth_time: number // UNIX time of the authentication
azp: string // Client id of the client who requested the token
email: string // Email Address of the subject
email_verified: boolean // if the email was verified by ZITADEL
exp: number // Time the token expires (as unix time)
family_name: string // The subjects family name
given_name: string // Given name of the subject
gender: string // Gender of the subject
iat: number // Time of the token was issued at (as unix time)
iss: string // Issuing domain of a token
jti: string // Unique id of the token
locale: string // Language from the subject
name: string // The subjects full name
nbf: number // Time the token must not be used before (as unix time)
picture: string // The subjects profile picture
phone: string // Phone number provided by the user
phone_verified: boolean // if the phonenumber was verified by ZITADEL
preferred_username: string // ZITADEL's login name of the user. Consist of username@primarydomain
sub: string // Subject ID of the user
⋮----
/**
 * Add ZITADEL login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/zitadel
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import ZITADEL from "@auth/core/providers/zitadel"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     ZITADEL({
 *       clientId: ZITADEL_CLIENT_ID,
 *       clientSecret: ZITADEL_CLIENT_SECRET,
 *     }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 * - [ZITADEL OpenID Endpoints](https://zitadel.com/docs/apis/openidoauth/endpoints)
 * - [ZITADEL recommended OAuth Flows](https://zitadel.com/docs/guides/integrate/oauth-recommended-flows)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the ZITADEL provider is
 * based on the [Open ID Connect](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *
 * The Redirect URIs used when creating the credentials must include your full domain and end in the callback path. For example:
 * - For production: `https://{YOUR_DOMAIN}/api/auth/callback/zitadel`
 * - For development: `http://localhost:3000/api/auth/callback/zitadel`
 *
 * Make sure to enable dev mode in ZITADEL console to allow redirects for local development.
 *
 * :::tip
 *
 * The ZITADEL provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/zitadel.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 * :::tip
 *
 * ZITADEL also returns a email_verified boolean property in the profile. You can use this property to restrict access to people with verified accounts.
 * ```ts
 * const options = {
 *   ...
 *   callbacks: {
 *     async signIn({ account, profile }) {
 *       if (account.provider === "zitadel") {
 *         return profile.email_verified;
 *       }
 *       return true; // Do different verification for other providers that don't have `email_verified`
 *     },
 *   }
 *   ...
 * }
 * ```
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function ZITADEL<P extends ZitadelProfile>(
  options: OAuthUserConfig<P>
): OIDCConfig<P>

================
File: packages/core/src/providers/zoho.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>ZOHO</b> integration.</span>
 * <a href="https://zoho.com/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/zoho.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/zoho
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * Add ZOHO login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/zoho
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import ZOHO from "@auth/core/providers/zoho"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     ZOHO({ clientId: ZOHO_CLIENT_ID, clientSecret: ZOHO_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Zoho OAuth 2.0 Integration Guide](https://www.zoho.com/accounts/protocol/oauth/web-server-applications.html)
 * - [Zoho API Console](https://api-console.zoho.com)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the ZOHO provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The ZOHO provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/zoho.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Zoho(
  config: OAuthUserConfig<Record<string, any>>
): OAuthConfig<Record<string, any>>
⋮----
profile(profile)

================
File: packages/core/src/providers/zoom.ts
================
/**
 * <div class="provider" style={{backgroundColor: "#000", display: "flex", justifyContent: "space-between", color: "#fff", padding: 16}}>
 * <span>Built-in <b>Zoom</b> integration.</span>
 * <a href="https://zoom.us/">
 *   <img style={{display: "block"}} src="https://authjs.dev/img/providers/zoom.svg" height="48" />
 * </a>
 * </div>
 *
 * @module providers/zoom
 */
import type { OAuthConfig, OAuthUserConfig } from "./index.js"
/**
 * See: https://developers.zoom.us/docs/integrations/oauth/#using-an-access-token
 */
export interface ZoomProfile extends Record<string, any> {
  id: string
  first_name: string
  last_name: string
  email: string
  type: number
  role_name: string
  pmi: number
  use_pmi: boolean
  vanity_url: string
  personal_meeting_url: string
  timezone: string
  verified: number
  dept: string
  created_at: string
  last_login_time: string
  last_client_version: string
  pic_url: string
  host_key: string
  jid: string
  group_ids: string[]
  im_group_ids: string[]
  account_id: string
  language: string
  phone_country: string
  phone_number: string
  status: string
}
/**
 * Add Zoom login to your page.
 *
 * ### Setup
 *
 * #### Callback URL
 * ```
 * https://example.com/api/auth/callback/zoom
 * ```
 *
 * #### Configuration
 *```ts
 * import { Auth } from "@auth/core"
 * import Zoom from "@auth/core/providers/zoom"
 *
 * const request = new Request(origin)
 * const response = await Auth(request, {
 *   providers: [
 *     Zoom({ clientId: ZOOM_CLIENT_ID, clientSecret: ZOOM_CLIENT_SECRET }),
 *   ],
 * })
 * ```
 *
 * ### Resources
 *
 * - [Zoom OAuth 2.0 Integration Guide](https://developers.zoom.us/docs/integrations/oauth/)
 *
 * ### Notes
 *
 * By default, Auth.js assumes that the Zoom provider is
 * based on the [OAuth 2](https://www.rfc-editor.org/rfc/rfc6749.html) specification.
 *
 * :::tip
 *
 * The Zoom provider comes with a [default configuration](https://github.com/nextauthjs/next-auth/blob/main/packages/core/src/providers/zoom.ts).
 * To override the defaults for your use case, check out [customizing a built-in OAuth provider](https://authjs.dev/guides/configuring-oauth-providers).
 *
 * :::
 *
 * :::info **Disclaimer**
 *
 * If you think you found a bug in the default configuration, you can [open an issue](https://authjs.dev/new/provider-issue).
 *
 * Auth.js strictly adheres to the specification and it cannot take responsibility for any deviation from
 * the spec by the provider. You can open an issue, but if the problem is non-compliance with the spec,
 * we might not pursue a resolution. You can ask for more help in [Discussions](https://authjs.dev/new/github-discussions).
 *
 * :::
 */
export default function Zoom(
  config: OAuthUserConfig<ZoomProfile>
): OAuthConfig<ZoomProfile>
⋮----
profile(profile)

================
File: packages/core/src/adapters.ts
================
/**
 * Auth.js can be integrated with _any_ data layer (database, ORM, or backend API, HTTP client)
 * in order to automatically create users, handle account linking automatically, support passwordless login,
 * and to store session information.
 *
 * This module contains utility functions and types to create an Auth.js compatible adapter.
 *
 * Auth.js supports 2 session strategies to persist the login state of a user.
 * The default is to use a cookie + {@link https://authjs.dev/concepts/session-strategies#jwt-session JWT}
 * based session store (`strategy: "jwt"`),
 * but you can also use a database adapter to store the session in a database.
 *
 * Before you continue, Auth.js has a list of {@link https://adapters.authjs.dev official database adapters}. If your database is listed there, you
 * probably do not need to create your own. If you are using a data solution that cannot be integrated with an official adapter, this module will help you create a compatible adapter.
 *
 * :::caution Note
 * Although `@auth/core` _is_ framework/runtime agnostic, an adapter might rely on a client/ORM package,
 * that is not yet compatible with your framework/runtime (e.g. it might rely on [Node.js APIs](https://nodejs.org/docs/latest/api)).
 * Related issues should be reported to the corresponding package maintainers.
 * :::
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/core
 * ```
 *
 * Then, you can import this submodule from `@auth/core/adapters`.
 *
 * ## Usage
 *
 * Each adapter method and its function signature is documented in the {@link Adapter} interface.
 *
 * ```ts title=my-adapter.ts
 * import { type Adapter } from "@auth/core/adapters"
 *
 * // 1. Simplest form, a plain object.
 * export const MyAdapter: Adapter {
 *  // implement the adapter methods here
 * }
 *
 * // or
 *
 * // 2. A function that returns an object. Official adapters use this pattern.
 * export function MyAdapter(config: any): Adapter {
 *  // Instantiate a client/ORM here with the provided config, or pass it in as a parameter.
 *  // Usually, you might already have a client instance elsewhere in your application,
 *  // so you should only create a new instance if you need to or you don't have one.
 *
 *  return {
 *    // implement the adapter methods
 *  }
 * }
 *
 * ```
 *
 * Then, you can pass your adapter to Auth.js as the `adapter` option.
 *
 * ```ts title=index.ts
 * import { MyAdapter } from "./my-adapter"
 *
 * const response = await Auth(..., {
 *   adapter: MyAdapter, // 1.
 *   // or
 *   adapter: MyAdapter({ /* config *\/ }), // 2.
 *   ...
 * })
 * ```
 *
 * Note, you might be able to tweak an existing adapter to work with your data layer, instead of creating one from scratch.
 *
 * ```ts title=my-adapter.ts
 * import { type Adapter } from "@auth/core/adapters"
 * import { PrismaAdapter } from "@auth/prisma-adapter"
 * import { PrismaClient } from "@prisma/client"
 *
 * const prisma = new PrismaClient()
 *
 * const adapter: Adapter = {
 *   ...PrismaAdapter(prisma),
 *   // Add your custom methods here
 * }
 *
 * const request = new Request("https://example.com")
 * const response = await Auth(request, { adapter, ... })
 * ```
 *
 * ## Models
 *
 * Auth.js can be used with any database. Models tell you what structures Auth.js expects from your database. Models will vary slightly depending on which adapter you use, but in general, will have a similar structure to the graph below. Each model can be extended with additional fields.
 *
 * :::note
 * Auth.js / NextAuth.js uses `camelCase` for its database rows while respecting the conventional `snake_case` formatting for OAuth-related values. If the mixed casing is an issue for you, most adapters have a dedicated documentation section on how to force a casing convention.
 * :::
 *
 * ```mermaid
 * erDiagram
 *     User ||--|{ Account : ""
 *     User {
 *       string id
 *       string name
 *       string email
 *       timestamp emailVerified
 *       string image
 *     }
 *     User ||--|{ Session : ""
 *     Session {
 *       string id
 *       timestamp expires
 *       string sessionToken
 *       string userId
 *     }
 *     Account {
 *       string id
 *       string userId
 *       string type
 *       string provider
 *       string providerAccountId
 *       string refresh_token
 *       string access_token
 *       int expires_at
 *       string token_type
 *       string scope
 *       string id_token
 *       string session_state
 *     }
 *     User ||--|{ VerificationToken : ""
 *     VerificationToken {
 *       string identifier
 *       string token
 *       timestamp expires
 *     }
 * ```
 *
 * ## Testing
 *
 * There is a test suite [available](https://github.com/nextauthjs/next-auth/blob/main/packages/utils/adapter.ts)
 * to ensure that your adapter is compatible with Auth.js.
 *
 * ## Known issues
 *
 * The following are missing built-in features in Auth.js but can be solved in user land. If you would like to help implement these features, please reach out.
 *
 * ### Token rotation
 *
 * Auth.js _currently_ does not support {@link https://authjs.dev/concepts/oauth `access_token` rotation} out of the box.
 * The necessary information (`refresh_token`, expiry, etc.) is being stored in the database, but the logic to rotate the token is not implemented
 * in the core library.
 * [This guide](https://authjs.dev/guides/refresh-token-rotation#database-strategy) should provide the necessary steps to do this in user land.
 *
 * ### Federated logout
 *
 * Auth.js _currently_ does not support federated logout out of the box.
 * This means that even if an active session is deleted from the database, the user will still be signed in to the identity provider,
 * they will only be signed out of the application.
 * Eg. if you use Google as an identity provider, and you delete the session from the database,
 * the user will still be signed in to Google, but they will be signed out of your application.
 *
 * If your users might be using the application from a publicly shared computer (eg: library), you might want to implement federated logout.
 *
 * @module adapters
 */
import { ProviderType } from "./providers/index.js"
import type { Account, Authenticator, Awaitable, User } from "./types.js"
// TODO: Discuss if we should expose methods to serialize and deserialize
// the data? Many adapters share this logic, so it could be useful to
// have a common implementation.
/**
 * A user represents a person who can sign in to the application.
 * If a user does not exist yet, it will be created when they sign in for the first time,
 * using the information (profile data) returned by the identity provider.
 * A corresponding account is also created and linked to the user.
 */
export interface AdapterUser extends User {
  /** A unique identifier for the user. */
  id: string
  /** The user's email address. */
  email: string
  /**
   * Whether the user has verified their email address via an [Email provider](https://authjs.dev/getting-started/authentication/email).
   * It is `null` if the user has not signed in with the Email provider yet, or the date of the first successful signin.
   */
  emailVerified: Date | null
}
⋮----
/** A unique identifier for the user. */
⋮----
/** The user's email address. */
⋮----
/**
   * Whether the user has verified their email address via an [Email provider](https://authjs.dev/getting-started/authentication/email).
   * It is `null` if the user has not signed in with the Email provider yet, or the date of the first successful signin.
   */
⋮----
/**
 * The type of account.
 */
export type AdapterAccountType = Extract<
  ProviderType,
  "oauth" | "oidc" | "email" | "webauthn"
>
/**
 * An account is a connection between a user and a provider.
 *
 * There are two types of accounts:
 * - OAuth/OIDC accounts, which are created when a user signs in with an OAuth provider.
 * - Email accounts, which are created when a user signs in with an [Email provider](https://authjs.dev/getting-started/authentication/email).
 *
 * One user can have multiple accounts.
 */
export interface AdapterAccount extends Account {
  userId: string
  type: AdapterAccountType
}
/**
 * A session holds information about a user's current signin state.
 */
export interface AdapterSession {
  /**
   * A randomly generated value that is used to look up the session in the database
   * when using `"database"` `AuthConfig.strategy` option.
   * This value is saved in a secure, HTTP-Only cookie on the client.
   */
  sessionToken: string
  /** Connects the active session to a user in the database */
  userId: string
  /**
   * The absolute date when the session expires.
   *
   * If a session is accessed prior to its expiry date,
   * it will be extended based on the `maxAge` option as defined in by `SessionOptions.maxAge`.
   * It is never extended more than once in a period defined by `SessionOptions.updateAge`.
   *
   * If a session is accessed past its expiry date,
   * it will be removed from the database to clean up inactive sessions.
   *
   */
  expires: Date
}
⋮----
/**
   * A randomly generated value that is used to look up the session in the database
   * when using `"database"` `AuthConfig.strategy` option.
   * This value is saved in a secure, HTTP-Only cookie on the client.
   */
⋮----
/** Connects the active session to a user in the database */
⋮----
/**
   * The absolute date when the session expires.
   *
   * If a session is accessed prior to its expiry date,
   * it will be extended based on the `maxAge` option as defined in by `SessionOptions.maxAge`.
   * It is never extended more than once in a period defined by `SessionOptions.updateAge`.
   *
   * If a session is accessed past its expiry date,
   * it will be removed from the database to clean up inactive sessions.
   *
   */
⋮----
/**
 * A verification token is a temporary token that is used to sign in a user via their email address.
 * It is created when a user signs in with an [Email provider](https://authjs.dev/getting-started/authentication/email).
 * When the user clicks the link in the email, the token and email is sent back to the server
 * where it is hashed and compared to the value in the database.
 * If the tokens and emails match, and the token hasn't expired yet, the user is signed in.
 * The token is then deleted from the database.
 */
export interface VerificationToken {
  /** The user's email address. */
  identifier: string
  /** The absolute date when the token expires. */
  expires: Date
  /**
   * A [hashed](https://en.wikipedia.org/wiki/Hash_function) token, using the `AuthConfig.secret` value.
   */
  token: string
}
⋮----
/** The user's email address. */
⋮----
/** The absolute date when the token expires. */
⋮----
/**
   * A [hashed](https://en.wikipedia.org/wiki/Hash_function) token, using the `AuthConfig.secret` value.
   */
⋮----
/**
 * An authenticator represents a credential authenticator assigned to a user.
 */
export interface AdapterAuthenticator extends Authenticator {
  /**
   * User ID of the authenticator.
   */
  userId: string
}
⋮----
/**
   * User ID of the authenticator.
   */
⋮----
/**
 * An adapter is an object with function properties (methods) that read and write data from a data source.
 * Think of these methods as a way to normalize the data layer to common interfaces that Auth.js can understand.
 *
 * This is what makes Auth.js very flexible and allows it to be used with any data layer.
 *
 * The adapter methods are used to perform the following operations:
 * - Create/update/delete a user
 * - Link/unlink an account to/from a user
 * - Handle active sessions
 * - Support passwordless authentication across multiple devices
 *
 * :::note
 * If any of the methods are not implemented, but are called by Auth.js,
 * an error will be shown to the user and the operation will fail.
 * :::
 */
export interface Adapter {
  /**
   * Creates a user in the database and returns it.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
  createUser?(user: AdapterUser): Awaitable<AdapterUser>
  /**
   * Returns a user from the database via the user id.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
  getUser?(id: string): Awaitable<AdapterUser | null>
  /**
   * Returns a user from the database via the user's email address.
   *
   * See also [Verification tokens](https://authjs.dev/guides/creating-a-database-adapter#verification-tokens)
   */
  getUserByEmail?(email: string): Awaitable<AdapterUser | null>
  /**
   * Using the provider id and the id of the user for a specific account, get the user.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
  getUserByAccount?(
    providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">
  ): Awaitable<AdapterUser | null>
  /**
   * Updates a user in the database and returns it.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
  updateUser?(
    user: Partial<AdapterUser> & Pick<AdapterUser, "id">
  ): Awaitable<AdapterUser>
  /**
   * @todo This method is currently not invoked yet.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
  deleteUser?(
    userId: string
  ): Promise<void> | Awaitable<AdapterUser | null | undefined>
  /**
   * This method is invoked internally (but optionally can be used for manual linking).
   * It creates an [Account](https://authjs.dev/reference/core/adapters#models) in the database.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
  linkAccount?(
    account: AdapterAccount
  ): Promise<void> | Awaitable<AdapterAccount | null | undefined>
  /** @todo This method is currently not invoked yet. */
  unlinkAccount?(
    providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">
  ): Promise<void> | Awaitable<AdapterAccount | undefined>
  /**
   * Creates a session for the user and returns it.
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
  createSession?(session: {
    sessionToken: string
    userId: string
    expires: Date
  }): Awaitable<AdapterSession>
  /**
   * Returns a session and a userfrom the database in one go.
   *
   * :::tip
   * If the database supports joins, it's recommended to reduce the number of database queries.
   * :::
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
  getSessionAndUser?(
    sessionToken: string
  ): Awaitable<{ session: AdapterSession; user: AdapterUser } | null>
  /**
   * Updates a session in the database and returns it.
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
  updateSession?(
    session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
  ): Awaitable<AdapterSession | null | undefined>
  /**
   * Deletes a session from the database. It is preferred that this method also
   * returns the session that is being deleted for logging purposes.
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
  deleteSession?(
    sessionToken: string
  ): Promise<void> | Awaitable<AdapterSession | null | undefined>
  /**
   * Creates a verification token and returns it.
   *
   * See also [Verification tokens](https://authjs.dev/guides/creating-a-database-adapter#verification-tokens)
   */
  createVerificationToken?(
    verificationToken: VerificationToken
  ): Awaitable<VerificationToken | null | undefined>
  /**
   * Return verification token from the database and deletes it
   * so it can only be used once.
   *
   * See also [Verification tokens](https://authjs.dev/guides/creating-a-database-adapter#verification-tokens)
   */
  useVerificationToken?(params: {
    identifier: string
    token: string
  }): Awaitable<VerificationToken | null>
  /**
   * Get account by provider account id and provider.
   *
   * If an account is not found, the adapter must return `null`.
   */
  getAccount?(
    providerAccountId: AdapterAccount["providerAccountId"],
    provider: AdapterAccount["provider"]
  ): Awaitable<AdapterAccount | null>
  /**
   * Returns an authenticator from its credentialID.
   *
   * If an authenticator is not found, the adapter must return `null`.
   */
  getAuthenticator?(
    credentialID: AdapterAuthenticator["credentialID"]
  ): Awaitable<AdapterAuthenticator | null>
  /**
   * Create a new authenticator.
   *
   * If the creation fails, the adapter must throw an error.
   */
  createAuthenticator?(
    authenticator: AdapterAuthenticator
  ): Awaitable<AdapterAuthenticator>
  /**
   * Returns all authenticators from a user.
   *
   * If a user is not found, the adapter should still return an empty array.
   * If the retrieval fails for some other reason, the adapter must throw an error.
   */
  listAuthenticatorsByUserId?(
    userId: AdapterAuthenticator["userId"]
  ): Awaitable<AdapterAuthenticator[]>
  /**
   * Updates an authenticator's counter.
   *
   * If the update fails, the adapter must throw an error.
   */
  updateAuthenticatorCounter?(
    credentialID: AdapterAuthenticator["credentialID"],
    newCounter: AdapterAuthenticator["counter"]
  ): Awaitable<AdapterAuthenticator>
}
⋮----
/**
   * Creates a user in the database and returns it.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
createUser?(user: AdapterUser): Awaitable<AdapterUser>
/**
   * Returns a user from the database via the user id.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
getUser?(id: string): Awaitable<AdapterUser | null>
/**
   * Returns a user from the database via the user's email address.
   *
   * See also [Verification tokens](https://authjs.dev/guides/creating-a-database-adapter#verification-tokens)
   */
getUserByEmail?(email: string): Awaitable<AdapterUser | null>
/**
   * Using the provider id and the id of the user for a specific account, get the user.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
getUserByAccount?(
/**
   * Updates a user in the database and returns it.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
updateUser?(
/**
   * @todo This method is currently not invoked yet.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
deleteUser?(
/**
   * This method is invoked internally (but optionally can be used for manual linking).
   * It creates an [Account](https://authjs.dev/reference/core/adapters#models) in the database.
   *
   * See also [User management](https://authjs.dev/guides/creating-a-database-adapter#user-management)
   */
linkAccount?(
/** @todo This method is currently not invoked yet. */
unlinkAccount?(
/**
   * Creates a session for the user and returns it.
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
createSession?(session:
/**
   * Returns a session and a userfrom the database in one go.
   *
   * :::tip
   * If the database supports joins, it's recommended to reduce the number of database queries.
   * :::
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
getSessionAndUser?(
/**
   * Updates a session in the database and returns it.
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
updateSession?(
/**
   * Deletes a session from the database. It is preferred that this method also
   * returns the session that is being deleted for logging purposes.
   *
   * See also [Database Session management](https://authjs.dev/guides/creating-a-database-adapter#database-session-management)
   */
deleteSession?(
/**
   * Creates a verification token and returns it.
   *
   * See also [Verification tokens](https://authjs.dev/guides/creating-a-database-adapter#verification-tokens)
   */
createVerificationToken?(
/**
   * Return verification token from the database and deletes it
   * so it can only be used once.
   *
   * See also [Verification tokens](https://authjs.dev/guides/creating-a-database-adapter#verification-tokens)
   */
useVerificationToken?(params:
/**
   * Get account by provider account id and provider.
   *
   * If an account is not found, the adapter must return `null`.
   */
getAccount?(
/**
   * Returns an authenticator from its credentialID.
   *
   * If an authenticator is not found, the adapter must return `null`.
   */
getAuthenticator?(
/**
   * Create a new authenticator.
   *
   * If the creation fails, the adapter must throw an error.
   */
createAuthenticator?(
/**
   * Returns all authenticators from a user.
   *
   * If a user is not found, the adapter should still return an empty array.
   * If the retrieval fails for some other reason, the adapter must throw an error.
   */
listAuthenticatorsByUserId?(
/**
   * Updates an authenticator's counter.
   *
   * If the update fails, the adapter must throw an error.
   */
updateAuthenticatorCounter?(
⋮----
// https://github.com/honeinc/is-iso-date/blob/master/index.js
⋮----
/** Determines if a given value can be parsed into `Date` */
export function isDate(value: unknown): value is string
// @ts-expect-error For compatibility with older versions of NextAuth.js
⋮----
type JsonObject = {
    [Key in string]?: JsonValue
  }
type JsonArray = JsonValue[]
type JsonPrimitive = string | number | boolean | null
type JsonValue = JsonPrimitive | JsonObject | JsonArray
interface AdapterAccount {
    type: "oauth" | "email" | "oidc"
    [key: string]: JsonValue | undefined
  }

================
File: packages/core/src/errors.ts
================
type ErrorOptions = Error | Record<string, unknown>
type ErrorType =
  | "AccessDenied"
  | "AdapterError"
  | "CallbackRouteError"
  | "ErrorPageLoop"
  | "EventError"
  | "InvalidCallbackUrl"
  | "CredentialsSignin"
  | "InvalidEndpoints"
  | "InvalidCheck"
  | "JWTSessionError"
  | "MissingAdapter"
  | "MissingAdapterMethods"
  | "MissingAuthorize"
  | "MissingSecret"
  | "OAuthAccountNotLinked"
  | "OAuthCallbackError"
  | "OAuthProfileParseError"
  | "SessionTokenError"
  | "OAuthSignInError"
  | "EmailSignInError"
  | "SignOutError"
  | "UnknownAction"
  | "UnsupportedStrategy"
  | "InvalidProvider"
  | "UntrustedHost"
  | "Verification"
  | "MissingCSRF"
  | "AccountNotLinked"
  | "DuplicateConditionalUI"
  | "MissingWebAuthnAutocomplete"
  | "WebAuthnVerificationError"
  | "ExperimentalFeatureNotEnabled"
/**
 * Base error class for all Auth.js errors.
 * It's optimized to be printed in the server logs in a nicely formatted way
 * via the [`logger.error`](https://authjs.dev/reference/core#logger) option.
 * @noInheritDoc
 */
export class AuthError extends Error
⋮----
/**
   * Determines on which page an error should be handled. Typically `signIn` errors can be handled in-page.
   * Default is `"error"`.
   * @internal
   */
⋮----
/** @internal */
constructor(
    message?: string | Error | ErrorOptions,
    errorOptions?: ErrorOptions
)
⋮----
// @ts-expect-error https://github.com/microsoft/TypeScript/issues/3841
⋮----
// @ts-expect-error https://github.com/microsoft/TypeScript/issues/3841
⋮----
/**
 * Thrown when the user's sign-in attempt failed.
 * @noInheritDoc
 */
export class SignInError extends AuthError
⋮----
/** @internal */
⋮----
/**
 * One of the database [`Adapter` methods](https://authjs.dev/reference/core/adapters#methods)
 * failed during execution.
 *
 * :::tip
 * If `debug: true` is set, you can check out `[auth][debug]` in the logs to learn more about the failed adapter method execution.
 * @example
 * ```sh
 * [auth][debug]: adapter_getUserByEmail
 * { "args": [undefined] }
 * ```
 * :::
 * @noInheritDoc
 */
export class AdapterError extends AuthError
/**
 * Thrown when the execution of the [`signIn` callback](https://authjs.dev/reference/core/types#signin) fails
 * or if it returns `false`.
 * @noInheritDoc
 */
export class AccessDenied extends AuthError
/**
 * This error occurs when the user cannot finish login.
 * Depending on the provider type, this could have happened for multiple reasons.
 *
 * :::tip
 * Check out `[auth][details]` in the logs to know which provider failed.
 * @example
 * ```sh
 * [auth][details]: { "provider": "github" }
 * ```
 * :::
 *
 * For an [OAuth provider](https://authjs.dev/getting-started/authentication/oauth), possible causes are:
 * - The user denied access to the application
 * - There was an error parsing the OAuth Profile:
 *   Check out the provider's `profile` or `userinfo.request` method to make sure
 *   it correctly fetches the user's profile.
 * - The `signIn` or `jwt` callback methods threw an uncaught error:
 *   Check the callback method implementations.
 *
 * For an [Email provider](https://authjs.dev/getting-started/authentication/email), possible causes are:
 * - The provided email/token combination was invalid/missing:
 *   Check if the provider's `sendVerificationRequest` method correctly sends the email.
 * - The provided email/token combination has expired:
 *   Ask the user to log in again.
 * - There was an error with the database:
 *   Check the database logs.
 *
 * For a [Credentials provider](https://authjs.dev/getting-started/authentication/credentials), possible causes are:
 * - The `authorize` method threw an uncaught error:
 *   Check the provider's `authorize` method.
 * - The `signIn` or `jwt` callback methods threw an uncaught error:
 *   Check the callback method implementations.
 *
 * :::tip
 * Check out `[auth][cause]` in the error message for more details.
 * It will show the original stack trace.
 * :::
 * @noInheritDoc
 */
export class CallbackRouteError extends AuthError
/**
 * Thrown when Auth.js is misconfigured and accidentally tried to require authentication on a custom error page.
 * To prevent an infinite loop, Auth.js will instead render its default error page.
 *
 * To fix this, make sure that the `error` page does not require authentication.
 *
 * Learn more at [Guide: Error pages](https://authjs.dev/guides/pages/error)
 * @noInheritDoc
 */
export class ErrorPageLoop extends AuthError
/**
 * One of the [`events` methods](https://authjs.dev/reference/core/types#eventcallbacks)
 * failed during execution.
 *
 * Make sure that the `events` methods are implemented correctly and uncaught errors are handled.
 *
 * Learn more at [`events`](https://authjs.dev/reference/core/types#eventcallbacks)
 * @noInheritDoc
 */
export class EventError extends AuthError
/**
 * Thrown when Auth.js is unable to verify a `callbackUrl` value.
 * The browser either disabled cookies or the `callbackUrl` is not a valid URL.
 *
 * Somebody might have tried to manipulate the callback URL that Auth.js uses to redirect the user back to the configured `callbackUrl`/page.
 * This could be a malicious hacker trying to redirect the user to a phishing site.
 * To prevent this, Auth.js checks if the callback URL is valid and throws this error if it is not.
 *
 * There is no action required, but it might be an indicator that somebody is trying to attack your application.
 * @noInheritDoc
 */
export class InvalidCallbackUrl extends AuthError
/**
 * Can be thrown from the `authorize` callback of the Credentials provider.
 * When an error occurs during the `authorize` callback, two things can happen:
 * 1. The user is redirected to the signin page, with `error=CredentialsSignin&code=credentials` in the URL. `code` is configurable.
 * 2. If you throw this error in a framework that handles form actions server-side, this error is thrown, instead of redirecting the user, so you'll need to handle.
 * @noInheritDoc
 */
export class CredentialsSignin extends SignInError
⋮----
/**
   * The error code that is set in the `code` query parameter of the redirect URL.
   *
   *
   * ⚠ NOTE: This property is going to be included in the URL, so make sure it does not hint at sensitive errors.
   *
   * The full error is always logged on the server, if you need to debug.
   *
   * Generally, we don't recommend hinting specifically if the user had either a wrong username or password specifically,
   * try rather something like "Invalid credentials".
   */
⋮----
/**
 * One of the configured OAuth or OIDC providers is missing the `authorization`, `token` or `userinfo`, or `issuer` configuration.
 * To perform OAuth or OIDC sign in, at least one of these endpoints is required.
 *
 * Learn more at [`OAuth2Config`](https://authjs.dev/reference/core/providers#oauth2configprofile) or [Guide: OAuth Provider](https://authjs.dev/guides/configuring-oauth-providers)
 * @noInheritDoc
 */
export class InvalidEndpoints extends AuthError
/**
 * Thrown when a PKCE, state or nonce OAuth check could not be performed.
 * This could happen if the OAuth provider is configured incorrectly or if the browser is blocking cookies.
 *
 * Learn more at [`checks`](https://authjs.dev/reference/core/providers#checks)
 * @noInheritDoc
 */
export class InvalidCheck extends AuthError
/**
 * Logged on the server when Auth.js could not decode or encode a JWT-based (`strategy: "jwt"`) session.
 *
 * Possible causes are either a misconfigured `secret` or a malformed JWT or `encode/decode` methods.
 *
 * :::note
 * When this error is logged, the session cookie is destroyed.
 * :::
 *
 * Learn more at [`secret`](https://authjs.dev/reference/core#secret), [`jwt.encode`](https://authjs.dev/reference/core/jwt#encode-1) or [`jwt.decode`](https://authjs.dev/reference/core/jwt#decode-2) for more information.
 * @noInheritDoc
 */
export class JWTSessionError extends AuthError
/**
 * Thrown if Auth.js is misconfigured. This could happen if you configured an Email provider but did not set up a database adapter,
 * or tried using a `strategy: "database"` session without a database adapter.
 * In both cases, make sure you either remove the configuration or add the missing adapter.
 *
 * Learn more at [Database Adapters](https://authjs.dev/getting-started/database), [Email provider](https://authjs.dev/getting-started/authentication/email) or [Concept: Database session strategy](https://authjs.dev/concepts/session-strategies#database-session)
 * @noInheritDoc
 */
export class MissingAdapter extends AuthError
/**
 * Thrown similarily to [`MissingAdapter`](https://authjs.dev/reference/core/errors#missingadapter), but only some required methods were missing.
 *
 * Make sure you either remove the configuration or add the missing methods to the adapter.
 *
 * Learn more at [Database Adapters](https://authjs.dev/getting-started/database)
 * @noInheritDoc
 */
export class MissingAdapterMethods extends AuthError
/**
 * Thrown when a Credentials provider is missing the `authorize` configuration.
 * To perform credentials sign in, the `authorize` method is required.
 *
 * Learn more at [Credentials provider](https://authjs.dev/getting-started/authentication/credentials)
 * @noInheritDoc
 */
export class MissingAuthorize extends AuthError
/**
 * Auth.js requires a secret or multiple secrets to be set, but none was not found. This is used to encrypt cookies, JWTs and other sensitive data.
 *
 * :::note
 * If you are using a framework like Next.js, we try to automatically infer the secret from the `AUTH_SECRET`, `AUTH_SECRET_1`, etc. environment variables.
 * Alternatively, you can also explicitly set the [`AuthConfig.secret`](https://authjs.dev/reference/core#secret) option.
 * :::
 *
 *
 * :::tip
 * To generate a random string, you can use the Auth.js CLI: `npx auth secret`
 * :::
 * @noInheritDoc
 */
export class MissingSecret extends AuthError
/**
 * Thrown when an Email address is already associated with an account
 * but the user is trying an OAuth account that is not linked to it.
 *
 * For security reasons, Auth.js does not automatically link OAuth accounts to existing accounts if the user is not signed in.
 *
 * :::tip
 * If you trust the OAuth provider to have verified the user's email address,
 * you can enable automatic account linking by setting [`allowDangerousEmailAccountLinking: true`](https://authjs.dev/reference/core/providers#allowdangerousemailaccountlinking)
 * in the provider configuration.
 * :::
 * @noInheritDoc
 */
export class OAuthAccountNotLinked extends SignInError
/**
 * Thrown when an OAuth provider returns an error during the sign in process.
 * This could happen for example if the user denied access to the application or there was a configuration error.
 *
 * For a full list of possible reasons, check out the specification [Authorization Code Grant: Error Response](https://www.rfc-editor.org/rfc/rfc6749#section-4.1.2.1)
 * @noInheritDoc
 */
export class OAuthCallbackError extends SignInError
/**
 * This error occurs during an OAuth sign in attempt when the provider's
 * response could not be parsed. This could for example happen if the provider's API
 * changed, or the [`OAuth2Config.profile`](https://authjs.dev/reference/core/providers#oauth2configprofile) method is not implemented correctly.
 * @noInheritDoc
 */
export class OAuthProfileParseError extends AuthError
/**
 * Logged on the server when Auth.js could not retrieve a session from the database (`strategy: "database"`).
 *
 * The database adapter might be misconfigured or the database is not reachable.
 *
 * Learn more at [Concept: Database session strategy](https://authjs.dev/concepts/session-strategies#database)
 * @noInheritDoc
 */
export class SessionTokenError extends AuthError
/**
 * Happens when login by [OAuth](https://authjs.dev/getting-started/authentication/oauth) could not be started.
 *
 * Possible causes are:
 * - The Authorization Server is not compliant with the [OAuth 2.0](https://www.ietf.org/rfc/rfc6749.html) or the [OIDC](https://openid.net/specs/openid-connect-core-1_0.html) specification.
 *   Check the details in the error message.
 *
 * :::tip
 * Check out `[auth][details]` in the logs to know which provider failed.
 * @example
 * ```sh
 * [auth][details]: { "provider": "github" }
 * ```
 * :::
 * @noInheritDoc
 */
export class OAuthSignInError extends SignInError
/**
 * Happens when the login by an [Email provider](https://authjs.dev/getting-started/authentication/email) could not be started.
 *
 * Possible causes are:
 * - The email sent from the client is invalid, could not be normalized by [`EmailConfig.normalizeIdentifier`](https://authjs.dev/reference/core/providers/email#normalizeidentifier)
 * - The provided email/token combination has expired:
 *   Ask the user to log in again.
 * - There was an error with the database:
 *   Check the database logs.
 * @noInheritDoc
 */
export class EmailSignInError extends SignInError
/**
 * Represents an error that occurs during the sign-out process. This error
 * is logged when there are issues in terminating a user's session, either
 * by failing to delete the session from the database (in database session
 * strategies) or encountering issues during other parts of the sign-out
 * process, such as emitting sign-out events or clearing session cookies.
 *
 * The session cookie(s) are emptied even if this error is logged.
 * @noInheritDoc
 */
export class SignOutError extends AuthError
/**
 * Auth.js was requested to handle an operation that it does not support.
 *
 * See [`AuthAction`](https://authjs.dev/reference/core/types#authaction) for the supported actions.
 * @noInheritDoc
 */
export class UnknownAction extends AuthError
/**
 * Thrown when a Credentials provider is present but the JWT strategy (`strategy: "jwt"`) is not enabled.
 *
 * Learn more at [`strategy`](https://authjs.dev/reference/core#strategy) or [Credentials provider](https://authjs.dev/getting-started/authentication/credentials)
 * @noInheritDoc
 */
export class UnsupportedStrategy extends AuthError
/**
 * Thrown when an endpoint was incorrectly called without a provider, or with an unsupported provider.
 * @noInheritDoc
 */
export class InvalidProvider extends AuthError
/**
 * Thrown when the `trustHost` option was not set to `true`.
 *
 * Auth.js requires the `trustHost` option to be set to `true` since it's relying on the request headers' `host` value.
 *
 * :::note
 * Official Auth.js libraries might attempt to automatically set the `trustHost` option to `true` if the request is coming from a trusted host on a trusted platform.
 * :::
 *
 * Learn more at [`trustHost`](https://authjs.dev/reference/core#trusthost) or [Guide: Deployment](https://authjs.dev/getting-started/deployment)
 * @noInheritDoc
 */
export class UntrustedHost extends AuthError
/**
 * The user's email/token combination was invalid.
 * This could be because the email/token combination was not found in the database,
 * or because the token has expired. Ask the user to log in again.
 * @noInheritDoc
 */
export class Verification extends AuthError
/**
 * Error for missing CSRF tokens in client-side actions (`signIn`, `signOut`, `useSession#update`).
 * Thrown when actions lack the double submit cookie, essential for CSRF protection.
 *
 * CSRF ([Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf))
 * is an attack leveraging authenticated user credentials for unauthorized actions.
 *
 * Double submit cookie pattern, a CSRF defense, requires matching values in a cookie
 * and request parameter. More on this at [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Glossary/CSRF).
 * @noInheritDoc
 */
export class MissingCSRF extends SignInError
⋮----
/**
 * Used to only allow sending a certain subset of errors to the client.
 * Errors are always logged on the server, but to prevent leaking sensitive information,
 * only a subset of errors are sent to the client as-is.
 * @internal
 */
export function isClientError(error: Error): error is AuthError
/**
 * Thrown when multiple providers have `enableConditionalUI` set to `true`.
 * Only one provider can have this option enabled at a time.
 * @noInheritDoc
 */
export class DuplicateConditionalUI extends AuthError
/**
 * Thrown when a WebAuthn provider has `enableConditionalUI` set to `true` but no formField has `webauthn` in its autocomplete param.
 *
 * The `webauthn` autocomplete param is required for conditional UI to work.
 * @noInheritDoc
 */
export class MissingWebAuthnAutocomplete extends AuthError
/**
 * Thrown when a WebAuthn provider fails to verify a client response.
 * @noInheritDoc
 */
export class WebAuthnVerificationError extends AuthError
/**
 * Thrown when an Email address is already associated with an account
 * but the user is trying an account that is not linked to it.
 *
 * For security reasons, Auth.js does not automatically link accounts to existing accounts if the user is not signed in.
 * @noInheritDoc
 */
export class AccountNotLinked extends SignInError
/**
 * Thrown when an experimental feature is used but not enabled.
 * @noInheritDoc
 */
export class ExperimentalFeatureNotEnabled extends AuthError

================
File: packages/core/src/index.ts
================
/**
 *
 * :::warning Experimental
 * `@auth/core` is under active development.
 * :::
 *
 * This is the main entry point to the Auth.js library.
 *
 * Based on the {@link https://developer.mozilla.org/en-US/docs/Web/API/Request Request}
 * and {@link https://developer.mozilla.org/en-US/docs/Web/API/Response Response} Web standard APIs.
 * Primarily used to implement [framework](https://authjs.dev/getting-started/integrations)-specific packages,
 * but it can also be used directly.
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/core
 * ```
 *
 * ## Usage
 *
 * ```ts
 * import { Auth } from "@auth/core"
 *
 * const request = new Request("https://example.com")
 * const response = await Auth(request, {...})
 *
 * console.log(response instanceof Response) // true
 * ```
 *
 * ## Resources
 *
 * - [Getting started](https://authjs.dev/getting-started)
 * - [Guides](https://authjs.dev/guides)
 *
 * @module @auth/core
 */
import { assertConfig } from "./lib/utils/assert.js"
import {
  AuthError,
  CredentialsSignin,
  ErrorPageLoop,
  isClientError,
} from "./errors.js"
import { AuthInternal, raw, skipCSRFCheck } from "./lib/index.js"
import { setEnvDefaults, createActionURL } from "./lib/utils/env.js"
import renderPage from "./lib/pages/index.js"
import { setLogger, type LoggerInstance } from "./lib/utils/logger.js"
import { toInternalRequest, toResponse } from "./lib/utils/web.js"
import type { Adapter, AdapterSession, AdapterUser } from "./adapters.js"
import type {
  Account,
  AuthAction,
  Awaitable,
  CookiesOptions,
  DefaultSession,
  PagesOptions,
  Profile,
  ResponseInternal,
  Session,
  Theme,
  User,
} from "./types.js"
import type { CredentialInput, Provider } from "./providers/index.js"
import { JWT, JWTOptions } from "./jwt.js"
import { isAuthAction } from "./lib/utils/actions.js"
⋮----
export async function Auth(
⋮----
/**
 * Core functionality provided by Auth.js.
 *
 * Receives a standard {@link Request} and returns a {@link Response}.
 *
 * @example
 * ```ts
 * import { Auth } from "@auth/core"
 *
 * const request = new Request("https://example.com")
 * const response = await Auth(request, {
 *   providers: [Google],
 *   secret: "...",
 *   trustHost: true,
 * })
 *```
 * @see [Documentation](https://authjs.dev)
 */
export async function Auth(
  request: Request,
  config: AuthConfig
): Promise<Response | ResponseInternal>
⋮----
// There was an error parsing the request
⋮----
// If there's an error in the user config, bail out early
⋮----
// If this is true, the config required auth on the error page
// which could cause a redirect loop
⋮----
// Either there was no error page configured or the configured one contains infinite redirects
⋮----
// If the CSRF check failed for POST/session, return a 400 status code.
// We should not redirect to a page as this is an API route
⋮----
/**
 * Configure the {@link Auth} method.
 *
 * @example
 * ```ts
 * import Auth, { type AuthConfig } from "@auth/core"
 *
 * export const authConfig: AuthConfig = {...}
 *
 * const request = new Request("https://example.com")
 * const response = await AuthHandler(request, authConfig)
 * ```
 *
 * @see [Initialization](https://authjs.dev/reference/core/types#authconfig)
 */
export interface AuthConfig {
  /**
   * List of authentication providers for signing in
   * (e.g. Google, Facebook, Twitter, GitHub, Email, etc) in any order.
   * This can be one of the built-in providers or an object with a custom provider.
   *
   * @default []
   */
  providers: Provider[]
  /**
   * A random string used to hash tokens, sign cookies and generate cryptographic keys.
   *
   * To generate a random string, you can use the Auth.js CLI: `npx auth secret`
   *
   * @note
   * You can also pass an array of secrets, in which case the first secret that successfully
   * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.
   * The newer secret should be added to the start of the array, which will be used for all new sessions.
   *
   */
  secret?: string | string[]
  /**
   * Configure your session like if you want to use JWT or a database,
   * how long until an idle session expires, or to throttle write operations in case you are using a database.
   */
  session?: {
    /**
     * Choose how you want to save the user session.
     * The default is `"jwt"`, an encrypted JWT (JWE) in the session cookie.
     *
     * If you use an `adapter` however, we default it to `"database"` instead.
     * You can still force a JWT session by explicitly defining `"jwt"`.
     *
     * When using `"database"`, the session cookie will only contain a `sessionToken` value,
     * which is used to look up the session in the database.
     *
     * [Documentation](https://authjs.dev/reference/core#authconfig#session) | [Adapter](https://authjs.dev/reference/core#authconfig#adapter) | [About JSON Web Tokens](https://authjs.dev/concepts/session-strategies#jwt-session)
     */
    strategy?: "jwt" | "database"
    /**
     * Relative time from now in seconds when to expire the session
     *
     * @default 2592000 // 30 days
     */
    maxAge?: number
    /**
     * How often the session should be updated in seconds.
     * If set to `0`, session is updated every time.
     *
     * @default 86400 // 1 day
     */
    updateAge?: number
    /**
     * Generate a custom session token for database-based sessions.
     * By default, a random UUID or string is generated depending on the Node.js version.
     * However, you can specify your own custom string (such as CUID) to be used.
     *
     * @default `randomUUID` or `randomBytes.toHex` depending on the Node.js version
     */
    generateSessionToken?: () => string
  }
  /**
   * JSON Web Tokens are enabled by default if you have not specified an {@link AuthConfig.adapter}.
   * JSON Web Tokens are encrypted (JWE) by default. We recommend you keep this behaviour.
   */
  jwt?: Partial<JWTOptions>
  /**
   * Specify URLs to be used if you want to create custom sign in, sign out and error pages.
   * Pages specified will override the corresponding built-in page.
   *
   * @default {}
   * @example
   *
   * ```ts
   *   pages: {
   *     signIn: '/auth/signin',
   *     signOut: '/auth/signout',
   *     error: '/auth/error',
   *     verifyRequest: '/auth/verify-request',
   *     newUser: '/auth/new-user'
   *   }
   * ```
   */
  pages?: Partial<PagesOptions>
  /**
   * Callbacks are asynchronous functions you can use to control what happens when an action is performed.
   * Callbacks are *extremely powerful*, especially in scenarios involving JSON Web Tokens
   * as they **allow you to implement access controls without a database** and to **integrate with external databases or APIs**.
   */
  callbacks?: {
    /**
     * Controls whether a user is allowed to sign in or not.
     * Returning `true` continues the sign-in flow.
     * Returning `false` or throwing an error will stop the sign-in flow and redirect the user to the error page.
     * Returning a string will redirect the user to the specified URL.
     *
     * Unhandled errors will throw an `AccessDenied` with the message set to the original error.
     *
     * [`AccessDenied`](https://authjs.dev/reference/core/errors#accessdenied)
     *
     * @example
     * ```ts
     * callbacks: {
     *  async signIn({ profile }) {
     *   // Only allow sign in for users with email addresses ending with "yourdomain.com"
     *   return profile?.email?.endsWith("@yourdomain.com")
     *  }
     * }
     * ```
     */
    signIn?: (params: {
      user: User | AdapterUser
      account?: Account | null
      /**
       * If OAuth provider is used, it contains the full
       * OAuth profile returned by your provider.
       */
      profile?: Profile
      /**
       * If Email provider is used, on the first call, it contains a
       * `verificationRequest: true` property to indicate it is being triggered in the verification request flow.
       * When the callback is invoked after a user has clicked on a sign in link,
       * this property will not be present. You can check for the `verificationRequest` property
       * to avoid sending emails to addresses or domains on a blocklist or to only explicitly generate them
       * for email address in an allow list.
       */
      email?: {
        verificationRequest?: boolean
      }
      /** If Credentials provider is used, it contains the user credentials */
      credentials?: Record<string, CredentialInput>
    }) => Awaitable<boolean | string>
    /**
     * This callback is called anytime the user is redirected to a callback URL (i.e. on signin or signout).
     * By default only URLs on the same host as the origin are allowed.
     * You can use this callback to customise that behaviour.
     *
     * [Documentation](https://authjs.dev/reference/core/types#redirect)
     *
     * @example
     * callbacks: {
     *   async redirect({ url, baseUrl }) {
     *     // Allows relative callback URLs
     *     if (url.startsWith("/")) return `${baseUrl}${url}`
     *
     *     // Allows callback URLs on the same origin
     *     if (new URL(url).origin === baseUrl) return url
     *
     *     return baseUrl
     *   }
     * }
     */
    redirect?: (params: {
      /** URL provided as callback URL by the client */
      url: string
      /** Default base URL of site (can be used as fallback) */
      baseUrl: string
    }) => Awaitable<string>
    /**
     * This callback is called whenever a session is checked.
     * (i.e. when invoking the `/api/session` endpoint, using `useSession` or `getSession`).
     * The return value will be exposed to the client, so be careful what you return here!
     * If you want to make anything available to the client which you've added to the token
     * through the JWT callback, you have to explicitly return it here as well.
     *
     * :::note
     * ⚠ By default, only a subset (email, name, image)
     * of the token is returned for increased security.
     * :::
     *
     * The token argument is only available when using the jwt session strategy, and the
     * user argument is only available when using the database session strategy.
     *
     * [`jwt` callback](https://authjs.dev/reference/core/types#jwt)
     *
     * @example
     * ```ts
     * callbacks: {
     *   async session({ session, token, user }) {
     *     // Send properties to the client, like an access_token from a provider.
     *     session.accessToken = token.accessToken
     *
     *     return session
     *   }
     * }
     * ```
     */
    session?: (
      params: ({
        session: { user: AdapterUser } & AdapterSession
        /** Available when {@link AuthConfig.session} is set to `strategy: "database"`. */
        user: AdapterUser
      } & {
        session: Session
        /** Available when {@link AuthConfig.session} is set to `strategy: "jwt"` */
        token: JWT
      }) & {
        /**
         * Available when using {@link AuthConfig.session} `strategy: "database"` and an update is triggered for the session.
         *
         * :::note
         * You should validate this data before using it.
         * :::
         */
        newSession: any
        trigger?: "update"
      }
    ) => Awaitable<Session | DefaultSession>
    /**
     * This callback is called whenever a JSON Web Token is created (i.e. at sign in)
     * or updated (i.e whenever a session is accessed in the client). Anything you
     * return here will be saved in the JWT and forwarded to the session callback.
     * There you can control what should be returned to the client. Anything else
     * will be kept from your frontend. The JWT is encrypted by default via your
     * AUTH_SECRET environment variable.
     *
     * [`session` callback](https://authjs.dev/reference/core/types#session)
     */
    jwt?: (params: {
      /**
       * When `trigger` is `"signIn"` or `"signUp"`, it will be a subset of {@link JWT},
       * `name`, `email` and `image` will be included.
       *
       * Otherwise, it will be the full {@link JWT} for subsequent calls.
       */
      token: JWT
      /**
       * Either the result of the {@link OAuthConfig.profile} or the {@link CredentialsConfig.authorize} callback.
       * @note available when `trigger` is `"signIn"` or `"signUp"`.
       *
       * Resources:
       * - [Credentials Provider](https://authjs.dev/getting-started/authentication/credentials)
       * - [User database model](https://authjs.dev/guides/creating-a-database-adapter#user-management)
       */
      user: User | AdapterUser
      /**
       * Contains information about the provider that was used to sign in.
       * Also includes {@link TokenSet}
       * @note available when `trigger` is `"signIn"` or `"signUp"`
       */
      account?: Account | null
      /**
       * The OAuth profile returned from your provider.
       * (In case of OIDC it will be the decoded ID Token or /userinfo response)
       * @note available when `trigger` is `"signIn"`.
       */
      profile?: Profile
      /**
       * Check why was the jwt callback invoked. Possible reasons are:
       * - user sign-in: First time the callback is invoked, `user`, `profile` and `account` will be present.
       * - user sign-up: a user is created for the first time in the database (when {@link AuthConfig.session}.strategy is set to `"database"`)
       * - update event: Triggered by the `useSession().update` method.
       * In case of the latter, `trigger` will be `undefined`.
       */
      trigger?: "signIn" | "signUp" | "update"
      /** @deprecated use `trigger === "signUp"` instead */
      isNewUser?: boolean
      /**
       * When using {@link AuthConfig.session} `strategy: "jwt"`, this is the data
       * sent from the client via the `useSession().update` method.
       *
       * ⚠ Note, you should validate this data before using it.
       */
      session?: any
    }) => Awaitable<JWT | null>
  }
  /**
   * Events are asynchronous functions that do not return a response, they are useful for audit logging.
   * You can specify a handler for any of these events below - e.g. for debugging or to create an audit log.
   * The content of the message object varies depending on the flow
   * (e.g. OAuth or Email authentication flow, JWT or database sessions, etc),
   * but typically contains a user object and/or contents of the JSON Web Token
   * and other information relevant to the event.
   *
   * @default {}
   */
  events?: {
    /**
     * If using a `credentials` type auth, the user is the raw response from your
     * credential provider.
     * For other providers, you'll get the User object from your adapter, the account,
     * and an indicator if the user was new to your Adapter.
     */
    signIn?: (message: {
      user: User
      account?: Account | null
      profile?: Profile
      isNewUser?: boolean
    }) => Awaitable<void>
    /**
     * The message object will contain one of these depending on
     * if you use JWT or database persisted sessions:
     * - `token`: The JWT for this session.
     * - `session`: The session object from your adapter that is being ended.
     */
    signOut?: (
      message:
        | { session: Awaited<ReturnType<Required<Adapter>["deleteSession"]>> }
        | { token: Awaited<ReturnType<JWTOptions["decode"]>> }
    ) => Awaitable<void>
    createUser?: (message: { user: User }) => Awaitable<void>
    updateUser?: (message: { user: User }) => Awaitable<void>
    linkAccount?: (message: {
      user: User | AdapterUser
      account: Account
      profile: User | AdapterUser
    }) => Awaitable<void>
    /**
     * The message object will contain one of these depending on
     * if you use JWT or database persisted sessions:
     * - `token`: The JWT for this session.
     * - `session`: The session object from your adapter.
     */
    session?: (message: { session: Session; token: JWT }) => Awaitable<void>
  }
  /** You can use the adapter option to pass in your database adapter. */
  adapter?: Adapter
  /**
   * Set debug to true to enable debug messages for authentication and database operations.
   *
   * - ⚠ If you added a custom {@link AuthConfig.logger}, this setting is ignored.
   *
   * @default false
   */
  debug?: boolean
  /**
   * Override any of the logger levels (`undefined` levels will use the built-in logger),
   * and intercept logs in NextAuth. You can use this option to send NextAuth logs to a third-party logging service.
   *
   * @example
   *
   * ```ts
   * // /auth.ts
   * import log from "logging-service"
   *
   * export const { handlers, auth, signIn, signOut } = NextAuth({
   *   logger: {
   *     error(code, ...message) {
   *       log.error(code, message)
   *     },
   *     warn(code, ...message) {
   *       log.warn(code, message)
   *     },
   *     debug(code, ...message) {
   *       log.debug(code, message)
   *     }
   *   }
   * })
   * ```
   *
   * - ⚠ When set, the {@link AuthConfig.debug} option is ignored
   *
   * @default console
   */
  logger?: Partial<LoggerInstance>
  /** Changes the theme of built-in {@link AuthConfig.pages}. */
  theme?: Theme
  /**
   * When set to `true` then all cookies set by NextAuth.js will only be accessible from HTTPS URLs.
   * This option defaults to `false` on URLs that start with `http://` (e.g. http://localhost:3000) for developer convenience.
   * You can manually set this option to `false` to disable this security feature and allow cookies
   * to be accessible from non-secured URLs (this is not recommended).
   *
   * - ⚠ **This is an advanced option.** Advanced options are passed the same way as basic options,
   * but **may have complex implications** or side effects.
   * You should **try to avoid using advanced options** unless you are very comfortable using them.
   *
   * The default is `false` HTTP and `true` for HTTPS sites.
   */
  useSecureCookies?: boolean
  /**
   * You can override the default cookie names and options for any of the cookies used by Auth.js.
   * You can specify one or more cookies with custom properties
   * and missing options will use the default values defined by Auth.js.
   * If you use this feature, you will likely want to create conditional behavior
   * to support setting different cookies policies in development and production builds,
   * as you will be opting out of the built-in dynamic policy.
   *
   * - ⚠ **This is an advanced option.** Advanced options are passed the same way as basic options,
   * but **may have complex implications** or side effects.
   * You should **try to avoid using advanced options** unless you are very comfortable using them.
   *
   * @default {}
   */
  cookies?: Partial<CookiesOptions>
  /**
   * Auth.js relies on the incoming request's `host` header to function correctly. For this reason this property needs to be set to `true`.
   *
   * Make sure that your deployment platform sets the `host` header safely.
   *
   * :::note
   * Official Auth.js-based libraries will attempt to set this value automatically for some deployment platforms (eg.: Vercel) that are known to set the `host` header safely.
   * :::
   */
  trustHost?: boolean
  skipCSRFCheck?: typeof skipCSRFCheck
  raw?: typeof raw
  /**
   * When set, during an OAuth sign-in flow,
   * the `redirect_uri` of the authorization request
   * will be set based on this value.
   *
   * This is useful if your OAuth Provider only supports a single `redirect_uri`
   * or you want to use OAuth on preview URLs (like Vercel), where you don't know the final deployment URL beforehand.
   *
   * The url needs to include the full path up to where Auth.js is initialized.
   *
   * @note This will auto-enable the `state` {@link OAuth2Config.checks} on the provider.
   *
   * @example
   * ```
   * "https://authjs.example.com/api/auth"
   * ```
   *
   * You can also override this individually for each provider.
   *
   * @example
   * ```ts
   * GitHub({
   *   ...
   *   redirectProxyUrl: "https://github.example.com/api/auth"
   * })
   * ```
   *
   * @default `AUTH_REDIRECT_PROXY_URL` environment variable
   *
   * See also: [Guide: Securing a Preview Deployment](https://authjs.dev/getting-started/deployment#securing-a-preview-deployment)
   */
  redirectProxyUrl?: string
  /**
   * Use this option to enable experimental features.
   * When enabled, it will print a warning message to the console.
   * @note Experimental features are not guaranteed to be stable and may change or be removed without notice. Please use with caution.
   * @default {}
   */
  experimental?: {
    /**
     * Enable WebAuthn support.
     *
     * @default false
     */
    enableWebAuthn?: boolean
  }
  /**
   * The base path of the Auth.js API endpoints.
   *
   * @default "/api/auth" in "next-auth"; "/auth" with all other frameworks
   */
  basePath?: string
}
⋮----
/**
   * List of authentication providers for signing in
   * (e.g. Google, Facebook, Twitter, GitHub, Email, etc) in any order.
   * This can be one of the built-in providers or an object with a custom provider.
   *
   * @default []
   */
⋮----
/**
   * A random string used to hash tokens, sign cookies and generate cryptographic keys.
   *
   * To generate a random string, you can use the Auth.js CLI: `npx auth secret`
   *
   * @note
   * You can also pass an array of secrets, in which case the first secret that successfully
   * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.
   * The newer secret should be added to the start of the array, which will be used for all new sessions.
   *
   */
⋮----
/**
   * Configure your session like if you want to use JWT or a database,
   * how long until an idle session expires, or to throttle write operations in case you are using a database.
   */
⋮----
/**
     * Choose how you want to save the user session.
     * The default is `"jwt"`, an encrypted JWT (JWE) in the session cookie.
     *
     * If you use an `adapter` however, we default it to `"database"` instead.
     * You can still force a JWT session by explicitly defining `"jwt"`.
     *
     * When using `"database"`, the session cookie will only contain a `sessionToken` value,
     * which is used to look up the session in the database.
     *
     * [Documentation](https://authjs.dev/reference/core#authconfig#session) | [Adapter](https://authjs.dev/reference/core#authconfig#adapter) | [About JSON Web Tokens](https://authjs.dev/concepts/session-strategies#jwt-session)
     */
⋮----
/**
     * Relative time from now in seconds when to expire the session
     *
     * @default 2592000 // 30 days
     */
⋮----
/**
     * How often the session should be updated in seconds.
     * If set to `0`, session is updated every time.
     *
     * @default 86400 // 1 day
     */
⋮----
/**
     * Generate a custom session token for database-based sessions.
     * By default, a random UUID or string is generated depending on the Node.js version.
     * However, you can specify your own custom string (such as CUID) to be used.
     *
     * @default `randomUUID` or `randomBytes.toHex` depending on the Node.js version
     */
⋮----
/**
   * JSON Web Tokens are enabled by default if you have not specified an {@link AuthConfig.adapter}.
   * JSON Web Tokens are encrypted (JWE) by default. We recommend you keep this behaviour.
   */
⋮----
/**
   * Specify URLs to be used if you want to create custom sign in, sign out and error pages.
   * Pages specified will override the corresponding built-in page.
   *
   * @default {}
   * @example
   *
   * ```ts
   *   pages: {
   *     signIn: '/auth/signin',
   *     signOut: '/auth/signout',
   *     error: '/auth/error',
   *     verifyRequest: '/auth/verify-request',
   *     newUser: '/auth/new-user'
   *   }
   * ```
   */
⋮----
/**
   * Callbacks are asynchronous functions you can use to control what happens when an action is performed.
   * Callbacks are *extremely powerful*, especially in scenarios involving JSON Web Tokens
   * as they **allow you to implement access controls without a database** and to **integrate with external databases or APIs**.
   */
⋮----
/**
     * Controls whether a user is allowed to sign in or not.
     * Returning `true` continues the sign-in flow.
     * Returning `false` or throwing an error will stop the sign-in flow and redirect the user to the error page.
     * Returning a string will redirect the user to the specified URL.
     *
     * Unhandled errors will throw an `AccessDenied` with the message set to the original error.
     *
     * [`AccessDenied`](https://authjs.dev/reference/core/errors#accessdenied)
     *
     * @example
     * ```ts
     * callbacks: {
     *  async signIn({ profile }) {
     *   // Only allow sign in for users with email addresses ending with "yourdomain.com"
     *   return profile?.email?.endsWith("@yourdomain.com")
     *  }
     * }
     * ```
     */
⋮----
/**
       * If OAuth provider is used, it contains the full
       * OAuth profile returned by your provider.
       */
⋮----
/**
       * If Email provider is used, on the first call, it contains a
       * `verificationRequest: true` property to indicate it is being triggered in the verification request flow.
       * When the callback is invoked after a user has clicked on a sign in link,
       * this property will not be present. You can check for the `verificationRequest` property
       * to avoid sending emails to addresses or domains on a blocklist or to only explicitly generate them
       * for email address in an allow list.
       */
⋮----
/** If Credentials provider is used, it contains the user credentials */
⋮----
/**
     * This callback is called anytime the user is redirected to a callback URL (i.e. on signin or signout).
     * By default only URLs on the same host as the origin are allowed.
     * You can use this callback to customise that behaviour.
     *
     * [Documentation](https://authjs.dev/reference/core/types#redirect)
     *
     * @example
     * callbacks: {
     *   async redirect({ url, baseUrl }) {
     *     // Allows relative callback URLs
     *     if (url.startsWith("/")) return `${baseUrl}${url}`
     *
     *     // Allows callback URLs on the same origin
     *     if (new URL(url).origin === baseUrl) return url
     *
     *     return baseUrl
     *   }
     * }
     */
⋮----
/** URL provided as callback URL by the client */
⋮----
/** Default base URL of site (can be used as fallback) */
⋮----
/**
     * This callback is called whenever a session is checked.
     * (i.e. when invoking the `/api/session` endpoint, using `useSession` or `getSession`).
     * The return value will be exposed to the client, so be careful what you return here!
     * If you want to make anything available to the client which you've added to the token
     * through the JWT callback, you have to explicitly return it here as well.
     *
     * :::note
     * ⚠ By default, only a subset (email, name, image)
     * of the token is returned for increased security.
     * :::
     *
     * The token argument is only available when using the jwt session strategy, and the
     * user argument is only available when using the database session strategy.
     *
     * [`jwt` callback](https://authjs.dev/reference/core/types#jwt)
     *
     * @example
     * ```ts
     * callbacks: {
     *   async session({ session, token, user }) {
     *     // Send properties to the client, like an access_token from a provider.
     *     session.accessToken = token.accessToken
     *
     *     return session
     *   }
     * }
     * ```
     */
⋮----
/** Available when {@link AuthConfig.session} is set to `strategy: "database"`. */
⋮----
/** Available when {@link AuthConfig.session} is set to `strategy: "jwt"` */
⋮----
/**
         * Available when using {@link AuthConfig.session} `strategy: "database"` and an update is triggered for the session.
         *
         * :::note
         * You should validate this data before using it.
         * :::
         */
⋮----
/**
     * This callback is called whenever a JSON Web Token is created (i.e. at sign in)
     * or updated (i.e whenever a session is accessed in the client). Anything you
     * return here will be saved in the JWT and forwarded to the session callback.
     * There you can control what should be returned to the client. Anything else
     * will be kept from your frontend. The JWT is encrypted by default via your
     * AUTH_SECRET environment variable.
     *
     * [`session` callback](https://authjs.dev/reference/core/types#session)
     */
⋮----
/**
       * When `trigger` is `"signIn"` or `"signUp"`, it will be a subset of {@link JWT},
       * `name`, `email` and `image` will be included.
       *
       * Otherwise, it will be the full {@link JWT} for subsequent calls.
       */
⋮----
/**
       * Either the result of the {@link OAuthConfig.profile} or the {@link CredentialsConfig.authorize} callback.
       * @note available when `trigger` is `"signIn"` or `"signUp"`.
       *
       * Resources:
       * - [Credentials Provider](https://authjs.dev/getting-started/authentication/credentials)
       * - [User database model](https://authjs.dev/guides/creating-a-database-adapter#user-management)
       */
⋮----
/**
       * Contains information about the provider that was used to sign in.
       * Also includes {@link TokenSet}
       * @note available when `trigger` is `"signIn"` or `"signUp"`
       */
⋮----
/**
       * The OAuth profile returned from your provider.
       * (In case of OIDC it will be the decoded ID Token or /userinfo response)
       * @note available when `trigger` is `"signIn"`.
       */
⋮----
/**
       * Check why was the jwt callback invoked. Possible reasons are:
       * - user sign-in: First time the callback is invoked, `user`, `profile` and `account` will be present.
       * - user sign-up: a user is created for the first time in the database (when {@link AuthConfig.session}.strategy is set to `"database"`)
       * - update event: Triggered by the `useSession().update` method.
       * In case of the latter, `trigger` will be `undefined`.
       */
⋮----
/** @deprecated use `trigger === "signUp"` instead */
⋮----
/**
       * When using {@link AuthConfig.session} `strategy: "jwt"`, this is the data
       * sent from the client via the `useSession().update` method.
       *
       * ⚠ Note, you should validate this data before using it.
       */
⋮----
/**
   * Events are asynchronous functions that do not return a response, they are useful for audit logging.
   * You can specify a handler for any of these events below - e.g. for debugging or to create an audit log.
   * The content of the message object varies depending on the flow
   * (e.g. OAuth or Email authentication flow, JWT or database sessions, etc),
   * but typically contains a user object and/or contents of the JSON Web Token
   * and other information relevant to the event.
   *
   * @default {}
   */
⋮----
/**
     * If using a `credentials` type auth, the user is the raw response from your
     * credential provider.
     * For other providers, you'll get the User object from your adapter, the account,
     * and an indicator if the user was new to your Adapter.
     */
⋮----
/**
     * The message object will contain one of these depending on
     * if you use JWT or database persisted sessions:
     * - `token`: The JWT for this session.
     * - `session`: The session object from your adapter that is being ended.
     */
⋮----
/**
     * The message object will contain one of these depending on
     * if you use JWT or database persisted sessions:
     * - `token`: The JWT for this session.
     * - `session`: The session object from your adapter.
     */
⋮----
/** You can use the adapter option to pass in your database adapter. */
⋮----
/**
   * Set debug to true to enable debug messages for authentication and database operations.
   *
   * - ⚠ If you added a custom {@link AuthConfig.logger}, this setting is ignored.
   *
   * @default false
   */
⋮----
/**
   * Override any of the logger levels (`undefined` levels will use the built-in logger),
   * and intercept logs in NextAuth. You can use this option to send NextAuth logs to a third-party logging service.
   *
   * @example
   *
   * ```ts
   * // /auth.ts
   * import log from "logging-service"
   *
   * export const { handlers, auth, signIn, signOut } = NextAuth({
   *   logger: {
   *     error(code, ...message) {
   *       log.error(code, message)
   *     },
   *     warn(code, ...message) {
   *       log.warn(code, message)
   *     },
   *     debug(code, ...message) {
   *       log.debug(code, message)
   *     }
   *   }
   * })
   * ```
   *
   * - ⚠ When set, the {@link AuthConfig.debug} option is ignored
   *
   * @default console
   */
⋮----
/** Changes the theme of built-in {@link AuthConfig.pages}. */
⋮----
/**
   * When set to `true` then all cookies set by NextAuth.js will only be accessible from HTTPS URLs.
   * This option defaults to `false` on URLs that start with `http://` (e.g. http://localhost:3000) for developer convenience.
   * You can manually set this option to `false` to disable this security feature and allow cookies
   * to be accessible from non-secured URLs (this is not recommended).
   *
   * - ⚠ **This is an advanced option.** Advanced options are passed the same way as basic options,
   * but **may have complex implications** or side effects.
   * You should **try to avoid using advanced options** unless you are very comfortable using them.
   *
   * The default is `false` HTTP and `true` for HTTPS sites.
   */
⋮----
/**
   * You can override the default cookie names and options for any of the cookies used by Auth.js.
   * You can specify one or more cookies with custom properties
   * and missing options will use the default values defined by Auth.js.
   * If you use this feature, you will likely want to create conditional behavior
   * to support setting different cookies policies in development and production builds,
   * as you will be opting out of the built-in dynamic policy.
   *
   * - ⚠ **This is an advanced option.** Advanced options are passed the same way as basic options,
   * but **may have complex implications** or side effects.
   * You should **try to avoid using advanced options** unless you are very comfortable using them.
   *
   * @default {}
   */
⋮----
/**
   * Auth.js relies on the incoming request's `host` header to function correctly. For this reason this property needs to be set to `true`.
   *
   * Make sure that your deployment platform sets the `host` header safely.
   *
   * :::note
   * Official Auth.js-based libraries will attempt to set this value automatically for some deployment platforms (eg.: Vercel) that are known to set the `host` header safely.
   * :::
   */
⋮----
/**
   * When set, during an OAuth sign-in flow,
   * the `redirect_uri` of the authorization request
   * will be set based on this value.
   *
   * This is useful if your OAuth Provider only supports a single `redirect_uri`
   * or you want to use OAuth on preview URLs (like Vercel), where you don't know the final deployment URL beforehand.
   *
   * The url needs to include the full path up to where Auth.js is initialized.
   *
   * @note This will auto-enable the `state` {@link OAuth2Config.checks} on the provider.
   *
   * @example
   * ```
   * "https://authjs.example.com/api/auth"
   * ```
   *
   * You can also override this individually for each provider.
   *
   * @example
   * ```ts
   * GitHub({
   *   ...
   *   redirectProxyUrl: "https://github.example.com/api/auth"
   * })
   * ```
   *
   * @default `AUTH_REDIRECT_PROXY_URL` environment variable
   *
   * See also: [Guide: Securing a Preview Deployment](https://authjs.dev/getting-started/deployment#securing-a-preview-deployment)
   */
⋮----
/**
   * Use this option to enable experimental features.
   * When enabled, it will print a warning message to the console.
   * @note Experimental features are not guaranteed to be stable and may change or be removed without notice. Please use with caution.
   * @default {}
   */
⋮----
/**
     * Enable WebAuthn support.
     *
     * @default false
     */
⋮----
/**
   * The base path of the Auth.js API endpoints.
   *
   * @default "/api/auth" in "next-auth"; "/auth" with all other frameworks
   */

================
File: packages/core/src/jwt.ts
================
/**
 *
 *
 * This module contains functions and types
 * to encode and decode {@link https://authjs.dev/concepts/session-strategies#jwt-session JWT}s
 * issued and used by Auth.js.
 *
 * The JWT issued by Auth.js is _encrypted by default_, using the _A256CBC-HS512_ algorithm ({@link https://www.rfc-editor.org/rfc/rfc7518.html#section-5.2.5 JWE}).
 * It uses the `AUTH_SECRET` environment variable or the passed `secret` property to derive a suitable encryption key.
 *
 * :::info Note
 * Auth.js JWTs are meant to be used by the same app that issued them.
 * If you need JWT authentication for your third-party API, you should rely on your Identity Provider instead.
 * :::
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/core
 * ```
 *
 * You can then import this submodule from `@auth/core/jwt`.
 *
 * ## Usage
 *
 * :::warning Warning
 * This module *will* be refactored/changed. We do not recommend relying on it right now.
 * :::
 *
 *
 * ## Resources
 *
 * - [What is a JWT session strategy](https://authjs.dev/concepts/session-strategies#jwt-session)
 * - [RFC7519 - JSON Web Token (JWT)](https://www.rfc-editor.org/rfc/rfc7519)
 *
 * @module jwt
 */
import { hkdf } from "@panva/hkdf"
import { EncryptJWT, base64url, calculateJwkThumbprint, jwtDecrypt } from "jose"
import { defaultCookies, SessionStore } from "./lib/utils/cookie.js"
import { Awaitable } from "./types.js"
import type { LoggerInstance } from "./lib/utils/logger.js"
import { MissingSecret } from "./errors.js"
⋮----
const DEFAULT_MAX_AGE = 30 * 24 * 60 * 60 // 30 days
const now = ()
⋮----
type Digest = Parameters<typeof calculateJwkThumbprint>[1]
/** Issues a JWT. By default, the JWT is encrypted using "A256CBC-HS512". */
export async function encode<Payload = JWT>(params: JWTEncodeParams<Payload>)
⋮----
// @ts-expect-error `jose` allows any object as payload.
⋮----
/** Decodes an Auth.js issued JWT. */
export async function decode<Payload = JWT>(
  params: JWTDecodeParams
): Promise<Payload | null>
type GetTokenParamsBase = {
  secret?: JWTDecodeParams["secret"]
  salt?: JWTDecodeParams["salt"]
}
export interface GetTokenParams<R extends boolean = false>
  extends GetTokenParamsBase {
  /** The request containing the JWT either in the cookies or in the `Authorization` header. */
  req: Request | { headers: Headers | Record<string, string> }
  /**
   * Use secure prefix for cookie name, unless URL in `NEXTAUTH_URL` is http://
   * or not set (e.g. development or test instance) case use unprefixed name
   */
  secureCookie?: boolean
  /** If the JWT is in the cookie, what name `getToken()` should look for. */
  cookieName?: string
  /**
   * `getToken()` will return the raw JWT if this is set to `true`
   *
   * @default false
   */
  raw?: R
  decode?: JWTOptions["decode"]
  logger?: LoggerInstance | Console
}
⋮----
/** The request containing the JWT either in the cookies or in the `Authorization` header. */
⋮----
/**
   * Use secure prefix for cookie name, unless URL in `NEXTAUTH_URL` is http://
   * or not set (e.g. development or test instance) case use unprefixed name
   */
⋮----
/** If the JWT is in the cookie, what name `getToken()` should look for. */
⋮----
/**
   * `getToken()` will return the raw JWT if this is set to `true`
   *
   * @default false
   */
⋮----
/**
 * Takes an Auth.js request (`req`) and returns either the Auth.js issued JWT's payload,
 * or the raw JWT string. We look for the JWT in the either the cookies, or the `Authorization` header.
 */
export async function getToken<R extends boolean = false>(
export async function getToken(
  params: GetTokenParams
): Promise<string | JWT | null>
async function getDerivedEncryptionKey(
  enc: string,
  keyMaterial: Parameters<typeof hkdf>[1],
  salt: Parameters<typeof hkdf>[2]
)
export interface DefaultJWT extends Record<string, unknown> {
  name?: string | null
  email?: string | null
  picture?: string | null
  sub?: string
  iat?: number
  exp?: number
  jti?: string
}
/**
 * Returned by the `jwt` callback when using JWT sessions
 *
 * [`jwt` callback](https://authjs.dev/reference/core/types#jwt)
 */
export interface JWT extends Record<string, unknown>, DefaultJWT {}
export interface JWTEncodeParams<Payload = JWT> {
  /**
   * The maximum age of the Auth.js issued JWT in seconds.
   *
   * @default 30 * 24 * 60 * 60 // 30 days
   */
  maxAge?: number
  /** Used in combination with `secret`, to derive the encryption secret for JWTs. */
  salt: string
  /** Used in combination with `salt`, to derive the encryption secret for JWTs. */
  secret: string | string[]
  /** The JWT payload. */
  token?: Payload
}
⋮----
/**
   * The maximum age of the Auth.js issued JWT in seconds.
   *
   * @default 30 * 24 * 60 * 60 // 30 days
   */
⋮----
/** Used in combination with `secret`, to derive the encryption secret for JWTs. */
⋮----
/** Used in combination with `salt`, to derive the encryption secret for JWTs. */
⋮----
/** The JWT payload. */
⋮----
export interface JWTDecodeParams {
  /** Used in combination with `secret`, to derive the encryption secret for JWTs. */
  salt: string
  /**
   * Used in combination with `salt`, to derive the encryption secret for JWTs.
   *
   * @note
   * You can also pass an array of secrets, in which case the first secret that successfully
   * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.
   * The newer secret should be added to the start of the array, which will be used for all new sessions.
   */
  secret: string | string[]
  /** The Auth.js issued JWT to be decoded */
  token?: string
}
⋮----
/** Used in combination with `secret`, to derive the encryption secret for JWTs. */
⋮----
/**
   * Used in combination with `salt`, to derive the encryption secret for JWTs.
   *
   * @note
   * You can also pass an array of secrets, in which case the first secret that successfully
   * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.
   * The newer secret should be added to the start of the array, which will be used for all new sessions.
   */
⋮----
/** The Auth.js issued JWT to be decoded */
⋮----
export interface JWTOptions {
  /**
   * The secret used to encode/decode the Auth.js issued JWT.
   * It can be an array of secrets, in which case the first secret that successfully
   * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.
   * @internal
   */
  secret: string | string[]
  /**
   * The maximum age of the Auth.js issued JWT in seconds.
   *
   * @default 30 * 24 * 60 * 60 // 30 days
   */
  maxAge: number
  /** Override this method to control the Auth.js issued JWT encoding. */
  encode: (params: JWTEncodeParams) => Awaitable<string>
  /** Override this method to control the Auth.js issued JWT decoding. */
  decode: (params: JWTDecodeParams) => Awaitable<JWT | null>
}
⋮----
/**
   * The secret used to encode/decode the Auth.js issued JWT.
   * It can be an array of secrets, in which case the first secret that successfully
   * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.
   * @internal
   */
⋮----
/**
   * The maximum age of the Auth.js issued JWT in seconds.
   *
   * @default 30 * 24 * 60 * 60 // 30 days
   */
⋮----
/** Override this method to control the Auth.js issued JWT encoding. */
⋮----
/** Override this method to control the Auth.js issued JWT decoding. */

================
File: packages/core/src/types.ts
================
/**
 *
 * This module contains public types and interfaces of the core package.
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/core
 * ```
 *
 * You can then import this submodule from `@auth/core/types`.
 *
 * ## Usage
 *
 * Even if you don't use TypeScript, IDEs like VS Code will pick up types to provide you with a better developer experience.
 * While you are typing, you will get suggestions about what certain objects/functions look like,
 * and sometimes links to documentation, examples, and other valuable resources.
 *
 * Generally, you will not need to import types from this module.
 * Mostly when using the `Auth` function and optionally the `AuthConfig` interface,
 * everything inside there will already be typed.
 *
 * :::tip
 * Inside the `Auth` function, you won't need to use a single type from this module.
 *
 * @example
 * ```ts title=index.ts
 * import { Auth } from "@auth/core"
 *
 * const request = new Request("https://example.com")
 * const response = await Auth(request, {
 *   callbacks: {
 *     jwt(): JWT { // <-- This is unnecessary!
 *       return { foo: "bar" }
 *     },
 *     session(
 *        { session, token }: { session: Session; token: JWT } // <-- This is unnecessary!
 *     ) {
 *       return session
 *     },
 *   }
 * })
 * ```
 * :::
 *
 * ## Resources
 *
 * - [TypeScript - The Basics](https://www.typescriptlang.org/docs/handbook/2/basic-types.html)
 * - [Extending built-in types](https://authjs.dev/getting-started/typescript#module-augmentation)
 *
 * @module types
 */
import type { SerializeOptions } from "./lib/vendored/cookie.js"
import type { TokenEndpointResponse } from "oauth4webapi"
import type { Adapter } from "./adapters.js"
import { AuthConfig } from "./index.js"
import type { JWTOptions } from "./jwt.js"
import type { Cookie } from "./lib/utils/cookie.js"
import type { LoggerInstance } from "./lib/utils/logger.js"
import type { WarningCode } from "./warnings.js"
import type {
  CredentialsConfig,
  EmailConfig,
  OAuthConfigInternal,
  OIDCConfigInternal,
  ProviderType,
} from "./providers/index.js"
import type {
  WebAuthnConfig,
  WebAuthnProviderType,
} from "./providers/webauthn.js"
⋮----
export type Awaitable<T> = T | PromiseLike<T>
export type Awaited<T> = T extends Promise<infer U> ? U : T
export type SemverString =
  | `v${number}`
  | `v${number}.${number}`
  | `v${number}.${number}.${number}`
/**
 * Change the theme of the built-in pages.
 *
 * [Documentation](https://authjs.dev/reference/core#theme) |
 * [Pages](https://authjs.dev/guides/pages/signin)
 */
export interface Theme {
  colorScheme?: "auto" | "dark" | "light"
  logo?: string
  brandColor?: string
  buttonText?: string
}
/**
 * Different tokens returned by OAuth Providers.
 * Some of them are available with different casing,
 * but they refer to the same value.
 */
export type TokenSet = Partial<TokenEndpointResponse> & {
  /**
   * Date of when the `access_token` expires in seconds.
   * This value is calculated from the `expires_in` value.
   *
   * @see https://www.ietf.org/rfc/rfc6749.html#section-4.2.2
   */
  expires_at?: number
}
⋮----
/**
   * Date of when the `access_token` expires in seconds.
   * This value is calculated from the `expires_in` value.
   *
   * @see https://www.ietf.org/rfc/rfc6749.html#section-4.2.2
   */
⋮----
/**
 * Usually contains information about the provider being used
 * and also extends `TokenSet`, which is different tokens returned by OAuth Providers.
 */
export interface Account extends Partial<TokenEndpointResponse> {
  /** Provider's id for this account. E.g. "google". See the full list at https://authjs.dev/reference/core/providers */
  provider: string
  /**
   * This value depends on the type of the provider being used to create the account.
   * - oauth/oidc: The OAuth account's id, returned from the `profile()` callback.
   * - email: The user's email address.
   * - credentials: `id` returned from the `authorize()` callback
   */
  providerAccountId: string
  /** Provider's type for this account */
  type: ProviderType
  /**
   * id of the user this account belongs to
   *
   * @see https://authjs.dev/reference/core/adapters#adapteruser
   */
  userId?: string
  /**
   * Calculated value based on {@link TokenEndpointResponse.expires_in}.
   *
   * It is the absolute timestamp (in seconds) when the {@link TokenEndpointResponse.access_token} expires.
   *
   * This value can be used for implementing token rotation together with {@link TokenEndpointResponse.refresh_token}.
   *
   * @see https://authjs.dev/guides/refresh-token-rotation#database-strategy
   * @see https://www.rfc-editor.org/rfc/rfc6749#section-5.1
   */
  expires_at?: number
}
⋮----
/** Provider's id for this account. E.g. "google". See the full list at https://authjs.dev/reference/core/providers */
⋮----
/**
   * This value depends on the type of the provider being used to create the account.
   * - oauth/oidc: The OAuth account's id, returned from the `profile()` callback.
   * - email: The user's email address.
   * - credentials: `id` returned from the `authorize()` callback
   */
⋮----
/** Provider's type for this account */
⋮----
/**
   * id of the user this account belongs to
   *
   * @see https://authjs.dev/reference/core/adapters#adapteruser
   */
⋮----
/**
   * Calculated value based on {@link TokenEndpointResponse.expires_in}.
   *
   * It is the absolute timestamp (in seconds) when the {@link TokenEndpointResponse.access_token} expires.
   *
   * This value can be used for implementing token rotation together with {@link TokenEndpointResponse.refresh_token}.
   *
   * @see https://authjs.dev/guides/refresh-token-rotation#database-strategy
   * @see https://www.rfc-editor.org/rfc/rfc6749#section-5.1
   */
⋮----
/**
 * The user info returned from your OAuth provider.
 *
 * @see https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
 */
export interface Profile {
  id?: string | null
  sub?: string | null
  name?: string | null
  given_name?: string | null
  family_name?: string | null
  middle_name?: string | null
  nickname?: string | null
  preferred_username?: string | null
  profile?: string | null
  picture?: string | null | any
  website?: string | null
  email?: string | null
  email_verified?: boolean | null
  gender?: string | null
  birthdate?: string | null
  zoneinfo?: string | null
  locale?: string | null
  phone_number?: string | null
  updated_at?: Date | string | number | null
  address?: {
    formatted?: string | null
    street_address?: string | null
    locality?: string | null
    region?: string | null
    postal_code?: string | null
    country?: string | null
  } | null
  [claim: string]: unknown
}
/** [Documentation](https://authjs.dev/reference/core#cookies) */
export interface CookieOption {
  name: string
  options: SerializeOptions
}
/** [Documentation](https://authjs.dev/reference/core#cookies) */
export interface CookiesOptions {
  sessionToken: Partial<CookieOption>
  callbackUrl: Partial<CookieOption>
  csrfToken: Partial<CookieOption>
  pkceCodeVerifier: Partial<CookieOption>
  state: Partial<CookieOption>
  nonce: Partial<CookieOption>
  webauthnChallenge: Partial<CookieOption>
}
/** TODO: Check if all these are used/correct */
export type ErrorPageParam = "Configuration" | "AccessDenied" | "Verification"
/** TODO: Check if all these are used/correct */
export type SignInPageErrorParam =
  | "Signin"
  | "OAuthSignin"
  | "OAuthCallbackError"
  | "OAuthCreateAccount"
  | "EmailCreateAccount"
  | "Callback"
  | "OAuthAccountNotLinked"
  | "EmailSignin"
  | "CredentialsSignin"
  | "SessionRequired"
export interface PagesOptions {
  /**
   * The path to the sign in page.
   *
   * The optional "error" query parameter is set to
   * one of the {@link SignInPageErrorParam available} values.
   *
   * @default "/signin"
   */
  signIn: string
  signOut: string
  /**
   * The path to the error page.
   *
   * The optional "error" query parameter is set to
   * one of the {@link ErrorPageParam available} values.
   *
   * @default "/error"
   */
  error: string
  verifyRequest: string
  /** If set, new users will be directed here on first sign in */
  newUser: string
}
⋮----
/**
   * The path to the sign in page.
   *
   * The optional "error" query parameter is set to
   * one of the {@link SignInPageErrorParam available} values.
   *
   * @default "/signin"
   */
⋮----
/**
   * The path to the error page.
   *
   * The optional "error" query parameter is set to
   * one of the {@link ErrorPageParam available} values.
   *
   * @default "/error"
   */
⋮----
/** If set, new users will be directed here on first sign in */
⋮----
type ISODateString = string
export interface DefaultSession {
  user?: User
  expires: ISODateString
}
/** The active session of the logged in user. */
export interface Session extends DefaultSession {}
export interface DefaultUser {
  id?: string
  name?: string | null
  email?: string | null
  image?: string | null
}
/**
 * The shape of the returned object in the OAuth providers' `profile` callback,
 * available in the `jwt` and `session` callbacks,
 * or the second parameter of the `session` callback, when using a database.
 */
export interface User extends DefaultUser {}
// Below are types that are only supposed be used by next-auth internally
/** @internal */
export type InternalProvider<T = ProviderType> = (T extends "oauth"
  ? OAuthConfigInternal<any>
  : T extends "oidc"
    ? OIDCConfigInternal<any>
    : T extends "email"
      ? EmailConfig
      : T extends "credentials"
        ? CredentialsConfig
        : T extends WebAuthnProviderType
          ? WebAuthnConfig
          : never) & {
  signinUrl: string
  /** @example `"https://example.com/api/auth/callback/id"` */
  callbackUrl: string
}
⋮----
/** @example `"https://example.com/api/auth/callback/id"` */
⋮----
export interface PublicProvider {
  id: string
  name: string
  type: string
  signinUrl: string
  callbackUrl: string
}
/**
 * Supported actions by Auth.js. Each action map to a REST API endpoint.
 * Some actions have a `GET` and `POST` variant, depending on if the action
 * changes the state of the server.
 *
 * - **`"callback"`**:
 *   - **`GET`**: Handles the callback from an [OAuth provider](https://authjs.dev/reference/core/providers#oauth2configprofile).
 *   - **`POST`**: Handles the callback from a [Credentials provider](https://authjs.dev/getting-started/providers/credentials#credentialsconfigcredentialsinputs).
 * - **`"csrf"`**: Returns the raw CSRF token, which is saved in a cookie (encrypted).
 * It is used for CSRF protection, implementing the [double submit cookie](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie) technique.
 * :::note
 * Some frameworks have built-in CSRF protection and can therefore disable this action. In this case, the corresponding endpoint will return a 404 response. Read more at [`skipCSRFCheck`](https://authjs.dev/reference/core#skipcsrfcheck).
 * _⚠ We don't recommend manually disabling CSRF protection, unless you know what you're doing._
 * :::
 * - **`"error"`**: Renders the built-in error page.
 * - **`"providers"`**: Returns a client-safe list of all configured providers.
 * - **`"session"`**:
 *   - **`GET`**: Returns the user's session if it exists, otherwise `null`.
 *   - **`POST`**: Updates the user's session and returns the updated session.
 * - **`"signin"`**:
 *   - **`GET`**: Renders the built-in sign-in page.
 *   - **`POST`**: Initiates the sign-in flow.
 * - **`"signout"`**:
 *   - **`GET`**: Renders the built-in sign-out page.
 *   - **`POST`**: Initiates the sign-out flow. This will invalidate the user's session (deleting the cookie, and if there is a session in the database, it will be deleted as well).
 * - **`"verify-request"`**: Renders the built-in verification request page.
 * - **`"webauthn-options"`**:
 *   - **`GET`**: Returns the options for the WebAuthn authentication and registration flows.
 */
export type AuthAction =
  | "callback"
  | "csrf"
  | "error"
  | "providers"
  | "session"
  | "signin"
  | "signout"
  | "verify-request"
  | "webauthn-options"
/** @internal */
export interface RequestInternal {
  url: URL
  method: "GET" | "POST"
  cookies?: Partial<Record<string, string>>
  headers?: Record<string, any>
  query?: Record<string, any>
  body?: Record<string, any>
  action: AuthAction
  providerId?: string
  error?: string
}
// Should only be used by frameworks
export interface ResponseInternal<
  Body extends string | Record<string, any> | any[] | null = any,
> {
  status?: number
  headers?: Headers | HeadersInit
  body?: Body
  redirect?: string
  cookies?: Cookie[]
}
/**
 * A webauthn authenticator.
 * Represents an entity capable of authenticating the account it references,
 * and contains the auhtenticator's credentials and related information.
 *
 * @see https://www.w3.org/TR/webauthn/#authenticator
 */
export interface Authenticator {
  /**
   * ID of the user this authenticator belongs to.
   */
  userId?: string
  /**
   * The provider account ID connected to the authenticator.
   */
  providerAccountId: string
  /**
   * Number of times the authenticator has been used.
   */
  counter: number
  /**
   * Whether the client authenticator backed up the credential.
   */
  credentialBackedUp: boolean
  /**
   * Base64 encoded credential ID.
   */
  credentialID: string
  /**
   * Base64 encoded credential public key.
   */
  credentialPublicKey: string
  /**
   * Concatenated transport flags.
   */
  transports?: string | null
  /**
   * Device type of the authenticator.
   */
  credentialDeviceType: string
}
⋮----
/**
   * ID of the user this authenticator belongs to.
   */
⋮----
/**
   * The provider account ID connected to the authenticator.
   */
⋮----
/**
   * Number of times the authenticator has been used.
   */
⋮----
/**
   * Whether the client authenticator backed up the credential.
   */
⋮----
/**
   * Base64 encoded credential ID.
   */
⋮----
/**
   * Base64 encoded credential public key.
   */
⋮----
/**
   * Concatenated transport flags.
   */
⋮----
/**
   * Device type of the authenticator.
   */
⋮----
/** @internal */
export interface InternalOptions<TProviderType = ProviderType> {
  providers: InternalProvider[]
  url: URL
  action: AuthAction
  provider: InternalProvider<TProviderType>
  csrfToken?: string
  /**
   * `true` if the [Double-submit CSRF check](https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf) was successful
   * or [`skipCSRFCheck`](https://authjs.dev/reference/core#skipcsrfcheck) was enabled.
   */
  csrfTokenVerified?: boolean
  secret: string | string[]
  theme: Theme
  debug: boolean
  logger: LoggerInstance
  session: NonNullable<Required<AuthConfig["session"]>>
  pages: Partial<PagesOptions>
  jwt: JWTOptions
  events: NonNullable<AuthConfig["events"]>
  adapter: Required<Adapter> | undefined
  callbacks: NonNullable<Required<AuthConfig["callbacks"]>>
  cookies: Record<keyof CookiesOptions, CookieOption>
  callbackUrl: string
  /**
   * If true, the OAuth callback is being proxied by the server to the original URL.
   * See also {@link OAuthConfigInternal.redirectProxyUrl}.
   */
  isOnRedirectProxy: boolean
  experimental: NonNullable<AuthConfig["experimental"]>
  basePath: string
}
⋮----
/**
   * `true` if the [Double-submit CSRF check](https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf) was successful
   * or [`skipCSRFCheck`](https://authjs.dev/reference/core#skipcsrfcheck) was enabled.
   */
⋮----
/**
   * If true, the OAuth callback is being proxied by the server to the original URL.
   * See also {@link OAuthConfigInternal.redirectProxyUrl}.
   */

================
File: packages/core/src/warnings.ts
================
/**
 * - `debug-enabled`: The `debug` option was evaluated to `true`. It adds extra logs in the terminal which is useful in development,
 *   but since it can print sensitive information about users, make sure to set this to `false` in production.
 *   In Node.js environments, you can for example set `debug: process.env.NODE_ENV !== "production"`.
 *   Consult with your runtime/framework on how to set this value correctly.
 * - `csrf-disabled`: You were trying to get a CSRF response from Auth.js (eg.: by calling a `/csrf` endpoint),
 *   but in this setup, CSRF protection via Auth.js was turned off. This is likely if you are not directly using `@auth/core`
 *   but a framework library (like `@auth/sveltekit`) that already has CSRF protection built-in. You likely won't need the CSRF response.
 * - `env-url-basepath-redundant`: `AUTH_URL` (or `NEXTAUTH_URL`) and `authConfig.basePath` are both declared. This is a configuration mistake - you should either remove the `authConfig.basePath` configuration,
 *   or remove the `pathname` of `AUTH_URL` (or `NEXTAUTH_URL`). Only one of them is needed.
 * - `env-url-basepath-mismatch`: `AUTH_URL` (or `NEXTAUTH_URL`) and `authConfig.basePath` are both declared, but they don't match. This is a configuration mistake.
 *   `@auth/core` will use `basePath` to construct the full URL to the corresponding action (/signin, /signout, etc.) in this case.
 * - `experimental-webauthn`: Experimental WebAuthn feature is enabled.
 *
 */
export type WarningCode =
  | "debug-enabled"
  | "csrf-disabled"
  | "env-url-basepath-redundant"
  | "env-url-basepath-mismatch"
  | "experimental-webauthn"

================
File: packages/core/test/actions/callback.test.ts
================
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest"
import GitHub from "../../src/providers/github.js"
import Credentials from "../../src/providers/credentials.js"
import { logger, makeAuthRequest, testConfig } from "../utils.js"
import { skipCSRFCheck } from "../../src/index.js"
import { CredentialsSignin, InvalidCheck } from "../../src/errors.js"
import { state } from "../../src/lib/actions/callback/oauth/checks.js"
⋮----
authorize()
⋮----
class CustomSigninError extends CredentialsSignin

================
File: packages/core/test/actions/csrf.test.ts
================
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest"
import {
  makeAuthRequest,
  testConfig,
  assertNoCacheResponseHeaders,
} from "../utils.js"

================
File: packages/core/test/actions/session.test.ts
================
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest"
⋮----
import { MemoryAdapter, initMemory } from "../memory-adapter.js"
import { randomString } from "../../src/lib/utils/web.js"
import type { AdapterUser } from "../../src/adapters.js"
import { decode, encode } from "../../src/jwt.js"
import {
  callbacks,
  getExpires,
  events,
  logger,
  makeAuthRequest,
  testConfig,
  AUTH_SECRET,
  SESSION_COOKIE_NAME,
  assertNoCacheResponseHeaders,
} from "../utils.js"
⋮----
const currentExpires = getExpires(24 * 60 * 60 * 1000) // 1 day from now
⋮----
// const expectedUserId = randomString(32)
⋮----
const currentExpires = getExpires(-24 * 60 * 60 * 1000) // 1 day before

================
File: packages/core/test/fixtures/oauth-callback.ts
================
// request: async () => {},

================
File: packages/core/test/fixtures/pages.ts
================
import type { AuthConfig } from "../../src/types"
⋮----
async request()

================
File: packages/core/test/assert-config.test.ts
================
import { vi, expect, it, describe, beforeEach } from "vitest"
import { makeAuthRequest } from "./utils"
import {
  InvalidCallbackUrl,
  InvalidEndpoints,
  MissingAuthorize,
  MissingSecret,
  UnsupportedStrategy,
  UntrustedHost,
} from "../src/errors"
import { Provider } from "../src/providers"
import { AuthConfig } from "../src"
import Credentials from "../src/providers/credentials"
⋮----
// @ts-expect-error Purposefully testing invalid config

================
File: packages/core/test/authorize.test.ts
================
import { describe, expect, it, vi, beforeEach } from "vitest"
import { Auth, AuthConfig, skipCSRFCheck } from "../src"
import { Adapter } from "../src/adapters"
import SendGrid from "../src/providers/sendgrid"
import { getUserAndAccount } from "../src/lib/actions/callback/oauth/callback"
import { getUserAndAccountArgs } from "./fixtures/oauth-callback.ts"
⋮----
async function signIn(config: Partial<AuthConfig> =
⋮----
// Not allowed by our default redirect callback
⋮----
signIn()
⋮----
// Test 'user.id' is a valid UUIDv4 from `crypto.randomUUID()`
⋮----
// TODO: We need an OAuth provider to test against

================
File: packages/core/test/env.test.ts
================
import { beforeEach, describe, expect, it, vi } from "vitest"
import { AuthConfig } from "../src/index.js"
import { setEnvDefaults, createActionURL } from "../src/lib/utils/env.js"
import Auth0 from "../src/providers/auth0.js"
import Resend from "../src/providers/resend.js"
⋮----
authConfig = { ...testConfig } // clone
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error

================
File: packages/core/test/jwt.test.ts
================
import { describe, it, expect } from "vitest"
import { encode, decode } from "../jwt"

================
File: packages/core/test/memory-adapter.ts
================
/**
 * This is a simple in-memory adapter for NextAuth.js that is intended for use in tests only.
 * Original source: https://github.com/nextauthjs/next-auth/pull/8809
 */
import {
  Adapter,
  AdapterAccount,
  AdapterSession,
  AdapterUser,
  VerificationToken,
} from "../adapters.js"
/**
 * Represents the in-memory data structure for the adapter.
 */
export type Memory = {
  users: Map<string, AdapterUser>
  accounts: Map<string, AdapterAccount>
  sessions: Map<string, AdapterSession>
  verificationTokens: Map<string, VerificationToken>
}
/**
 * Initializes a new instance of the Memory object.
 * @returns A Memory object with empty maps for users, accounts, sessions, etc.
 */
export function initMemory(): Memory
export function MemoryAdapter(memory?: Memory): Adapter
⋮----
// Create the adapter object first and then populate it.
// This allows us to call adapter functions from within.
⋮----
// Assign all functions in place
⋮----
async createUser(user: AdapterUser)
async getUser(id: string)
async getUserByEmail(email: string)
async getUserByAccount(
      providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">
)
async updateUser(user: Partial<AdapterUser> & Pick<AdapterUser, "id">)
async deleteUser(id: string)
⋮----
// Delete sessions
⋮----
// Delete accounts
⋮----
// Delete verification tokens
⋮----
// Delete user
⋮----
async linkAccount(account: AdapterAccount)
async unlinkAccount(
      account: Pick<AdapterAccount, "provider" | "providerAccountId">
)
⋮----
// Find account
⋮----
// Delete account
⋮----
async listLinkedAccounts(userId: string)
async createSession(session: {
      sessionToken: string
      userId: string
      expires: Date
})
async getSessionAndUser(sessionToken: string)
⋮----
// Remove if expired
⋮----
async updateSession(
      session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
)
async deleteSession(sessionToken: string)
async createVerificationToken(verificationToken: VerificationToken)
async useVerificationToken(params:
⋮----
// Find verification token
⋮----
// Delete used verification token
⋮----
/**
 * Generates a random string of the specified length.
 * @param length The length of the generated string.
 * @returns The randomly generated string.
 */
function makeid(length: number)
⋮----
// Build a string of the specified length by randomly selecting
// characters from the alphabet at each iteration.
⋮----
export function asBase64(buffer: Uint8Array): string

================
File: packages/core/test/merge.test.ts
================
import { describe, it, expect } from "vitest"
import { merge } from "../src/lib/utils/merge"

================
File: packages/core/test/pages.test.ts
================
import { vi, expect, it, describe, beforeEach } from "vitest"
import renderPage from "../src/lib/pages/index"
import { authOptions } from "./fixtures/pages"
import { init } from "../src/lib/init"
⋮----
// Generated when visiting `/auth/signout`
⋮----
// When visiting `/auth/signout`, for example
⋮----
// Generated when visiting `/auth/signin`

================
File: packages/core/test/url-parsing.test.ts
================
import { describe, expect, it } from "vitest"
import { parseActionAndProviderId } from "../src/lib/utils/web"
import { UnknownAction } from "../src/errors"

================
File: packages/core/test/utils.ts
================
import { expect, vi } from "vitest"
import { Auth, createActionURL } from "../src"
import type { Adapter } from "../src/adapters"
import type { AuthAction, AuthConfig, LoggerInstance } from "../src/types"
import { defaultCallbacks } from "../src/lib/init.ts"
⋮----
export function TestAdapter(): Adapter
⋮----
export const getExpires = (maxAge = 30 * 24 * 60 * 60 * 1000) =>
export function testConfig(overrides?: Partial<AuthConfig>): AuthConfig
export async function makeAuthRequest(params: {
  action: AuthAction
  cookies?: Record<string, string>
  host?: string
  path?: string
  query?: Record<string, string>
  body?: any
  config?: Partial<AuthConfig>
})
export const assertNoCacheResponseHeaders = (response: Response) =>

================
File: packages/core/test/webauthn-utils.test.ts
================
import { describe, expect, it, vi, test, afterEach } from "vitest"
import {
  GenerateAuthenticationOptionsOpts,
  GenerateRegistrationOptionsOpts,
  generateAuthenticationOptions,
  generateRegistrationOptions,
  verifyAuthenticationResponse,
  verifyRegistrationResponse,
} from "@simplewebauthn/server"
import type {
  Adapter,
  AdapterAccount,
  AdapterUser,
  AdapterAuthenticator,
} from "../src/adapters"
import WebAuthn, {
  GetUserInfo,
  WebAuthnConfig,
  WebAuthnProviderType,
} from "../src/providers/webauthn"
import {
  WebAuthnAction,
  assertInternalOptionsWebAuthn,
  getAuthenticationResponse,
  getRegistrationResponse,
  inferWebAuthnOptions,
  verifyAuthenticate,
  verifyRegister,
  fromBase64,
  toBase64,
  stringToTransports,
  transportsToString,
} from "../src/lib/utils/webauthn-utils"
import { webauthnChallenge } from "../src/lib/actions/callback/oauth/checks"
import {
  InternalOptions,
  InternalProvider,
  RequestInternal,
} from "../src/types"
import {
  AdapterError,
  AuthError,
  InvalidProvider,
  MissingAdapter,
  WebAuthnVerificationError,
} from "../src/errors"
import { randomString } from "../src/lib/utils/web"
import { PublicKeyCredentialCreationOptionsJSON } from "@simplewebauthn/server/script/deps"
import { Cookie } from "../src/lib/utils/cookie"
import { randomInt } from "crypto"
const getMockAdapter = ()
function getMockOptions(
  defaultOptions?: Partial<InternalOptions>,
  defaultProvider?: Partial<WebAuthnConfig>
)
function createAuthenticator(
  partial?: Partial<AdapterAuthenticator>
): AdapterAuthenticator
function getExpectedResponse(
  action: WebAuthnAction,
  options: unknown,
  cookies: Cookie[] = []
)
/**
 * Generates default params for verifyAuthenticate and verifyRegister tests
 */
function prepareVerifyTest(
  action: WebAuthnAction,
  requestData?: Record<string, unknown>
)
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error

================
File: packages/core/package.json
================
{
  "name": "@auth/core",
  "version": "0.39.1",
  "description": "Authentication for the Web.",
  "keywords": [
    "authentication",
    "authjs",
    "jwt",
    "oauth",
    "oidc",
    "passwordless",
    "standard",
    "vanilla",
    "webapi"
  ],
  "homepage": "https://authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth.git",
  "author": "Balázs Orbán <info@balazsorban.com>",
  "contributors": [
    "Balázs Orbán <info@balazsorban.com>",
    "Nico Domino <yo@ndo.dev>",
    "Lluis Agusti <hi@llu.lu>",
    "Thang Huu Vu <hi@thvu.dev>",
    "Iain Collins <me@iaincollins.com>"
  ],
  "type": "module",
  "types": "./index.d.ts",
  "files": [
    "*.js",
    "*.d.ts*",
    "lib",
    "providers",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js",
      "default": "./index.js"
    },
    "./adapters": {
      "types": "./adapters.d.ts",
      "import": "./adapters.js",
      "default": "./adapters.js"
    },
    "./errors": {
      "types": "./errors.d.ts",
      "import": "./errors.js",
      "default": "./errors.js"
    },
    "./jwt": {
      "types": "./jwt.d.ts",
      "import": "./jwt.js",
      "default": "./jwt.js"
    },
    "./providers": {
      "types": "./providers/index.d.ts"
    },
    "./providers/*": {
      "types": "./providers/*.d.ts",
      "import": "./providers/*.js",
      "default": "./providers/*.js"
    },
    "./types": {
      "types": "./types.d.ts"
    }
  },
  "license": "ISC",
  "dependencies": {
    "@panva/hkdf": "^1.2.1",
    "jose": "^6.0.6",
    "oauth4webapi": "^3.3.0",
    "preact": "10.24.3",
    "preact-render-to-string": "6.5.11"
  },
  "peerDependencies": {
    "@simplewebauthn/browser": "^9.0.1",
    "@simplewebauthn/server": "^9.0.2",
    "nodemailer": "^6.8.0"
  },
  "peerDependenciesMeta": {
    "@simplewebauthn/browser": {
      "optional": true
    },
    "@simplewebauthn/server": {
      "optional": true
    },
    "nodemailer": {
      "optional": true
    }
  },
  "scripts": {
    "build": "pnpm css && pnpm providers && tsc",
    "clean": "rm -rf *.js *.d.ts* lib providers",
    "css": "node scripts/generate-css",
    "dev": "pnpm css && pnpm providers && tsc -w",
    "test": "vitest run -c ../utils/vitest.config.ts",
    "test:watch": "vitest -c ../utils/vitest.config.ts",
    "providers": "node scripts/generate-providers"
  },
  "devDependencies": {
    "@simplewebauthn/browser": "9.0.1",
    "@simplewebauthn/server": "9.0.3",
    "@simplewebauthn/types": "^9.0.1",
    "@types/node": "18.11.10",
    "@types/nodemailer": "6.4.6",
    "@types/react": "18.0.37",
    "autoprefixer": "10.4.13",
    "postcss": "8.4.19",
    "postcss-nesting": "^12.1.5",
    "typedoc": "^0.25.12",
    "typedoc-plugin-markdown": "4.0.0-next.53"
  }
}

================
File: packages/core/README.md
================
<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center">Auth.js core library</a></h3>
   <h4 align="center">Authentication for the Web.</h4>
   <p align="center" style="align: center;">
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
      <a href="https://npm.im/@auth/core">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/core?color=green&label=@auth/core&style=flat-square">
      </a>
      <a href="https://www.npmtrends.com/@auth/core">
        <img src="https://img.shields.io/npm/dm/@auth/core?label=%20downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://github.com/nextauthjs/next-auth/stargazers">
        <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
      </a>
   </p>
</p>

---

Check out the documentation at [authjs.dev](https://authjs.dev/reference/core).

================
File: packages/core/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "preact",
    "lib": ["dom", "dom.iterable", "esnext"],
    "outDir": ".",
    "rootDir": "src",
    "declaration": true,
    "declarationMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["*.js", "*.d.ts", "lib", "providers"]
}

================
File: packages/core/typedoc.config.cjs
================
// @ts-check
⋮----
.readdirSync(path.join(__dirname, "src", "providers"))
.filter((file) => file.endsWith(".ts") && !file.startsWith("oauth"))
.map((p) => `src/providers/${p}`)
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').PluginOptions}
 */
⋮----
entryPoints: ["src/index.ts", "src/adapters.ts", "src/errors.ts", "src/jwt.ts", "src/types.ts"].concat(providers),

================
File: packages/frameworks-express/src/lib/http-api-adapters.ts
================
import { Request as ExpressRequest, Response as ExpressResponse } from "express"
/**
 * Encodes an object as url-encoded string.
 */
export function encodeUrlEncoded(object: Record<string, any> =
/**
 * Encodes an object as JSON
 */
function encodeJson(obj: Record<string, any>)
/**
 * Encodes an Express Request body based on the content type header.
 */
function encodeRequestBody(req: ExpressRequest)
/**
 * Adapts an Express Request to a Web Request, returning the Web Request.
 */
export function toWebRequest(req: ExpressRequest)
⋮----
// GET and HEAD not allowed to receive body
⋮----
/**
 * Adapts a Web Response to an Express Response, invoking appropriate
 * Express response methods to handle the response.
 */
export async function toExpressResponse(
  response: Response,
  res: ExpressResponse
)
⋮----
// Explicitly write the headers for content-type
// https://stackoverflow.com/a/59449326/13944042

================
File: packages/frameworks-express/src/lib/index.ts
================


================
File: packages/frameworks-express/src/adapters.ts
================


================
File: packages/frameworks-express/src/index.ts
================
/**
 *
 * :::warning
 * `@auth/express` is currently experimental. The API _will_ change in the future.
 * :::
 *
 * Express Auth is the official Express integration for Auth.js.
 * It provides a simple way to add authentication to your Express app in a few lines of code.
 *
 * ## Installation
 * ```bash npm2yarn
 * npm install @auth/express
 * ```
 *
 * ## Usage
 *
 * ```ts title="src/routes/auth.route.ts"
 * import { ExpressAuth } from "@auth/express"
 * import GitHub from "@auth/express/providers/github"
 * import express from "express"
 *
 * const app = express()
 *
 * // If app is served through a proxy, trust the proxy to allow HTTPS protocol to be detected
 * // https://expressjs.com/en/guide/behind-proxies.html
 * app.set('trust proxy', true)
 * app.use("/auth/*", ExpressAuth({ providers: [ GitHub ] }))
 * ```
 *
 * Don't forget to set the `AUTH_SECRET` environment variable. This should be a minimum of 32 characters, random string. On UNIX systems you can use `openssl rand -hex 32` or check out `https://generate-secret.vercel.app/32`.
 *
 * You will also need to load the environment variables into your runtime environment. For example in Node.js with a package like [`dotenv`](https://www.npmjs.com/package/dotenv) or `Deno.env` in Deno.
 *
 * ### Provider Configuration
 * The callback URL used by the [providers](https://authjs.dev/reference/core/providers) must be set to the following, unless you mount the `ExpressAuth` handler on a different path:
 *
 * ```
 * [origin]/auth/callback/[provider]
 * ```
 *
 * ## Signing in and signing out
 * Once your application is mounted you can sign in or out by making requests to the following [REST API endpoints](https://authjs.dev/reference/core/types#authaction) from your client-side code.
 * NB: Make sure to include the `csrfToken` in the request body for all sign-in and sign-out requests.
 *
 * ## Managing the session
 * If you are using Express with a template engine (e.g EJS, Pug), you can make the session data available to all routes via middleware as follows
 *
 * ```ts title="app.ts"
 * import { getSession } from "@auth/express"
 *
 * export function authSession(req: Request, res: Response, next: NextFunction) {
 *   res.locals.session = await getSession(req)
 *   next()
 * }
 *
 * app.use(authSession)
 *
 * // Now in your route
 * app.get("/", (req, res) => {
 *   const { session } = res.locals
 *   res.render("index", { user: session?.user })
 * })
 * ```
 *
 * ## Authorization
 * You can protect routes by checking for the presence of a session and then redirect to a login page if the session is not present.
 * This can either be done per route, or for a group of routes using a middleware such as the following:
 *
 * ```ts
 * export async function authenticatedUser(
 *   req: Request,
 *   res: Response,
 *   next: NextFunction
 * ) {
 *   const session = res.locals.session ?? (await getSession(req, authConfig))
 *   if (!session?.user) {
 *     res.redirect("/login")
 *   } else {
 *     next()
 *   }
 * }
 * ```
 *
 * ### Per Route
 * To protect a single route, simply add the middleware to the route as follows:
 * ```ts title="app.ts"
 * // This route is protected
 * app.get("/profile", authenticatedUser, (req, res) => {
 *   const { session } = res.locals
 *   res.render("profile", { user: session?.user })
 * })
 *
 * // This route is not protected
 * app.get("/", (req, res) => {
 *   res.render("index")
 * })
 *
 * app.use("/", root)
 * ```
 * ### Per Group of Routes
 * To protect a group of routes, define a router and add the middleware to the router as follows:
 *
 * ```ts title="routes/protected.route.ts"
 * import { Router } from "express"
 *
 * const router = Router()
 *
 * router.use(authenticatedUser) // All routes defined after this will be protected
 *
 * router.get("/", (req, res) => {
 *   res.render("protected")
 * })
 *
 * export default router
 * ```
 *
 * Then we mount the router as follows:
 * ```ts title="app.ts"
 * import protected from "./routes/protected.route"
 *
 * app.use("/protected", protected)
 * ```
 *
 * ## Notes on ESM
 * @auth/express is ESM only. This means your package.json must contain `"type": "module"` and tsconfig.json should contain `"module": "NodeNext"` or `ESNext`.
 * File imports must use the `.js` extension, e.g. `import { MyRouter } from "./my-router.js"`.
 *
 * Your dev server should either be run with [tsx](https://www.npmjs.com/package/tsx) with `tsx index.ts` (fast startup, with no type checking), or ts-node with 'node --loader ts-node/esm index.ts' (slower startup, but has type checking).
 *
 * While it is NOT recommended, if you wish to use @auth/express within a CommonJS project without migrating and making the above changes, you can run the dev server with tsx and may be able to compile with [pkgroll](https://tsx.is/compilation).
 * Add '"name": "./dist/index.js"' or '"name": "./dist/index.mjs"' to your package.json and run 'pkgroll' to compile with both ESM and CommonJS support. For new projects it is recommended to just use ESM.
 *
 * @module @auth/express
 */
import {
  Auth,
  type AuthConfig,
  setEnvDefaults,
  createActionURL,
  customFetch,
} from "@auth/core"
import type { Session } from "@auth/core/types"
⋮----
import { toWebRequest, toExpressResponse } from "./lib/index.js"
⋮----
export type ExpressAuthConfig = Omit<AuthConfig, "raw">
export function ExpressAuth(config: ExpressAuthConfig)
export type GetSessionResult = Promise<Session | null>
export async function getSession(
  req: e.Request,
  config: ExpressAuthConfig
): GetSessionResult
⋮----
// @ts-expect-error
⋮----
function getBasePath(req: e.Request)

================
File: packages/frameworks-express/test/http-api-adapters/request.test.ts
================
import { describe, beforeEach, it, expect } from "vitest"
import { encodeUrlEncoded, toWebRequest } from "../../src/lib"
import { Request as ExpressRequest } from "express"
import supertest from "supertest"
import express from "express"
function expectMatchingRequestHeaders(req: ExpressRequest, request: Request)
async function expectMatchingJsonRequestBody(
  req: ExpressRequest,
  request: Request
)
async function expectMatchingUrlEncodedRequestBody(
  req: ExpressRequest,
  request: Request
)
⋮----
let expectations: Function = () =>
⋮----
expectations = async () =>

================
File: packages/frameworks-express/test/http-api-adapters/response.test.ts
================
import { describe, beforeEach, it, expect } from "vitest"
import supertest from "supertest"
import express from "express"
import { toExpressResponse } from "../../src/lib"
function expectMatchingResponseHeaders(
  response: Response,
  res: supertest.Response
)

================
File: packages/frameworks-express/test/login.test.ts
================
import { describe, beforeEach, it, expect } from "vitest"
import supertest from "supertest"
import express from "express"
import { ExpressAuth, getSession } from "../src/index.js"
import CredentialsProvider from "@auth/core/providers/credentials"
import type { AuthConfig } from "@auth/core"
⋮----
async authorize(credentials)
⋮----
const extractCookieValue = (cookieHeader: string | string[], name: string) =>
⋮----
let expectations = () =>
⋮----
expectations = async () =>
⋮----
// Get signin page
⋮----
// Parse cookies for csrf token and callback url
⋮----
// Sign in
⋮----
.set("Cookie", [csrfTokenCookie, callbackCookie]) // Send the cookie with the request
⋮----
// Parse cookie for session token
⋮----
// Call test route

================
File: packages/frameworks-express/test/routing.test.ts
================
import { describe, beforeEach, it, expect, vi } from "vitest"
import supertest from "supertest"
import express from "express"
import { ExpressAuth } from "../src/index.js"
import CredentialsProvider from "@auth/core/providers/credentials"
import type { AuthConfig } from "@auth/core"
// mock the toWebRequest, make it throw if "X-Test-Header" = 'throw'
⋮----
async authorize(credentials)
⋮----
// send header that causes mock to throw

================
File: packages/frameworks-express/test/session.test.ts
================
import { vi, describe, it, beforeEach, expect } from "vitest"
import supertest from "supertest"
import express from "express"
⋮----
// dynamic import to avoid loading Auth before hoisting
⋮----
let expectations: Function = () =>
⋮----
expectations = async () =>

================
File: packages/frameworks-express/package.json
================
{
  "name": "@auth/express",
  "description": "Authentication for Express.",
  "version": "0.10.1",
  "type": "module",
  "files": [
    "*.js",
    "*.d.ts*",
    "lib",
    "providers",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js",
      "default": "./index.js"
    },
    "./providers": {
      "types": "./providers/index.d.ts"
    },
    "./adapters": {
      "types": "./adapters.d.ts"
    },
    "./providers/*": {
      "types": "./providers/*.d.ts",
      "import": "./providers/*.js",
      "default": "./providers/*.js"
    },
    "./package.json": "./package.json"
  },
  "scripts": {
    "build": "pnpm clean && pnpm providers && tsc",
    "clean": "rm -rf lib *.js *.d.ts* src/lib/providers",
    "test": "vitest run -c ../utils/vitest.config.ts",
    "providers": "node ../utils/scripts/providers"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "@auth/core": "workspace:*",
    "@types/express": "^4.17.17",
    "@types/supertest": "^2.0.12",
    "supertest": "^6.3.3"
  },
  "peerDependencies": {
    "express": "^4.18.2 || ^5.0.0"
  },
  "keywords": [
    "Express",
    "Auth.js"
  ],
  "author": "Rexford Essilfie <rexfordessilfie09@gmail.com>",
  "contributors": [
    "Rexford Essilfie <rexfordessilfie09@gmail.com>",
    "Lachie Hill <lachiehill@gmail.com>"
  ],
  "repository": "https://github.com/nextauthjs/next-auth",
  "license": "ISC"
}

================
File: packages/frameworks-express/README.md
================
<p align="center">
  <a href="https://expressjs.com" target="_blank"><img height="96px" src="https://authjs.dev/img/etc/express.svg" /></a>
  <a href="https://express.authjs.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/logo-sm.png" /></a>
  <h1 align="center">Express Auth</h1>
</p>
<p align="center">
  Authentication for Express.
</p>
<p align="center">
  <a href="https://www.npmjs.com/package/@auth/express"><img src="https://img.shields.io/npm/v/@auth/express?style=flat-square&label=latest&color=purple" alt="npm latest release" /></a>
  <a href="https://www.npmtrends.com/@auth/express"><img src="https://img.shields.io/npm/dm/@auth/express?style=flat-square&color=cyan" alt="Downloads" /></a>
  <a href="https://github.com/nextauthjs/next-auth/stargazers"><img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&color=orange" alt="GitHub Stars" /></a>
  <img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&logoColor=fff&style=flat-square" alt="TypeScript" />
</p>

---

Check out the documentation at [express.authjs.dev](https://express.authjs.dev).

================
File: packages/frameworks-express/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "outDir": ".",
    "rootDir": "src"
  },
  "include": ["src/**/*"],
  "exclude": ["*.js", "*.d.ts", "lib"]
}

================
File: packages/frameworks-express/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/frameworks-qwik/src/adapters.ts
================


================
File: packages/frameworks-qwik/src/index.ts
================
/**
 *
 * :::warning
 * `@auth/qwik` is currently experimental. The API _will_ change in the future.
 * :::
 *
 * Qwik Auth is the official Qwik integration for Auth.js.
 * It provides a simple way to add authentication to your Qwik app in a few lines of code.
 *
 * ## Installation
 * ```bash npm2yarn
 * npm install @auth/qwik
 * ```
 *
 * ## Usage
 *
 * ### Provider Configuration
 *
 * Create a `plugin@auth.ts` file in the routes folder
 *
 * import { QwikAuth$ } from "@auth/qwik"
 * import GitHub from "@auth/qwik/providers/github"
 *
 * export const {
 *   onRequest, useSession, useSignIn, useSignOut
 * } = QwikAuth$(() => ({ providers: [GitHub] }))
 *
 * ## Signing in and signing out
 *
 * Sign In via form
 *
 * import { component$ } from '@builder.io/qwik';
 * import { Form } from '@builder.io/qwik-city';
 * import { useSignIn } from '~/routes/plugin@auth';
 *
 * export default component$(() => {
 *   const signIn = useSignIn();
 *   return (
 *     <Form action={signIn}>
 *       <input type="hidden" name="providerId" value="github" />
 *       <input type="hidden" name="options.redirectTo" value="http://qwik-auth-example.com/dashboard" />
 *       <button>Sign In</button>
 *     </Form>
 *   );
 * });
 *
 * Sign In via code
 *
 * import { component$ } from '@builder.io/qwik';
 * import { useSignIn } from '~/routes/plugin@auth';
 *
 * export default component$(() => {
 *   const signIn = useSignIn();
 *   return (
 *     <button onClick$={() => signIn.submit({ providerId: 'github', options: { redirectTo: 'http://qwik-auth-example.com/dashboard' } })}>Sign In</button>
 *   );
 * });
 *
 * Sign out via form
 *
 * import { component$ } from '@builder.io/qwik';
 * import { Form } from '@builder.io/qwik-city';
 * import { useSignOut } from '~/routes/plugin@auth';
 *
 * export default component$(() => {
 *   const signOut = useSignOut();
 *   return (
 *     <Form action={signOut}>
 *       <input type="hidden" name="redirectTo" value="/signedout" />
 *       <button>Sign Out</button>
 *     </Form>
 *   );
 * });
 *
 * Sign out via code
 *
 * import { component$ } from '@builder.io/qwik';
 * import { useSignOut } from '~/routes/plugin@auth';
 *
 * export default component$(() => {
 *   const signOut = useSignOut();
 *   return <button onClick$={() => signOut.submit({ redirectTo: '/signedout' })}>Sign Out</button>;
 * });
 *
 * ## Managing the session
 *
 * import { component$ } from '@builder.io/qwik';
 * import { useSession } from '~/routes/plugin@auth';
 *
 * export default component$(() => {
 *   const session = useSession();
 *   return <p>{session.value?.user?.email}</p>;
 * });
 *
 * ## Authorization
 *
 * Session data can be accessed via the route event.sharedMap.
 * So a route can be protected and redirect using something like this located in a layout.tsx or page index.tsx:
 *
 * export const onRequest: RequestHandler = (event) => {
 *   const session = event.sharedMap.get("session")
 *   if (!session || new Date(session.expires) < new Date()) {
 *     throw event.redirect(302, `/auth/signin?redirectTo=${event.url.pathname}`);
 *   }
 * };
 *
 * ```
 *
 * @module @auth/qwik
 */
import type { AuthConfig } from "@auth/core"
import {
  Auth,
  isAuthAction,
  skipCSRFCheck,
  customFetch as _customFetch,
} from "@auth/core"
import { AuthAction, Session } from "@auth/core/types"
import { implicit$FirstArg, type QRL } from "@builder.io/qwik"
import {
  globalAction$,
  routeLoader$,
  z,
  zod$,
  type RequestEventCommon,
} from "@builder.io/qwik-city"
import { EnvGetter } from "@builder.io/qwik-city/middleware/request-handler"
import { isServer } from "@builder.io/qwik/build"
import { parseString, splitCookiesString } from "set-cookie-parser"
⋮----
/** Configure the {@link QwikAuth$} method. */
export interface QwikAuthConfig extends Omit<AuthConfig, "raw"> {}
export type GetSessionResult = Promise<{ data: Session | null; cookie: any }>
/** @internal */
export function QwikAuthQrl(
  authOptions: QRL<(ev: RequestEventCommon) => QwikAuthConfig>
)
⋮----
const onRequest = async (req: RequestEventCommon) =>
⋮----
/**
 *  Initialize Qwik Auth.
 *
 *  @example
 * ```ts title="plugin@auth.ts"
 * import { QwikAuth } from "@auth/qwik"
 * import GitHub from "@auth/qwik/providers/github"
 *
 * export const {
 *   onRequest, useSession, useSignIn, useSignOut
 * } = QwikAuth$(() => ({ providers: [GitHub] }))
 * ```
 */
export const QwikAuth$ = /*#__PURE__*/ implicit$FirstArg(QwikAuthQrl)
async function authAction(
  body: URLSearchParams | undefined,
  req: RequestEventCommon,
  path: string,
  authOptions: QwikAuthConfig
)
⋮----
// while browsers would support setting multiple cookies, the fetch implementation does not, so we join them later.
⋮----
const fixCookies = (req: RequestEventCommon) =>
const defaultRedirectTo = (req: RequestEventCommon) =>
async function getSessionData(
  req: Request,
  options: AuthConfig
): GetSessionResult
export const setEnvDefaults = (env: EnvGetter, config: AuthConfig) =>

================
File: packages/frameworks-qwik/package.json
================
{
  "name": "@auth/qwik",
  "version": "0.7.1",
  "description": "Authentication for Qwik.",
  "license": "ISC",
  "author": "gioboa <giorgiob.boa@gmail.com>",
  "homepage": "https://qwik.authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "keywords": [
    "Qwik",
    "oauth",
    "jwt",
    "oauth2",
    "authentication",
    "csrf",
    "oidc",
    "Auth.js"
  ],
  "publishConfig": {
    "access": "public"
  },
  "type": "module",
  "engines": {
    "node": ">=18.17"
  },
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.qwik.js"
    },
    "./adapters": {
      "types": "./adapters.d.ts"
    },
    "./providers": {
      "types": "./providers/index.d.ts"
    },
    "./providers/*": {
      "types": "./providers/*.d.ts",
      "import": "./providers/*.js"
    }
  },
  "qwik": "./index.qwik.js",
  "files": [
    "*.d.ts*",
    "*.js",
    "*.qwik.js",
    "providers",
    "src"
  ],
  "scripts": {
    "build": "pnpm clean && pnpm providers && vite build --mode lib",
    "clean": "rm -rf *.mjs *.js *.d.ts* providers src/providers",
    "providers": "node ../utils/scripts/providers"
  },
  "dependencies": {
    "@auth/core": "workspace:*",
    "set-cookie-parser": "^2.6.0"
  },
  "devDependencies": {
    "@builder.io/qwik": "1.7.3",
    "@builder.io/qwik-city": "1.5.5",
    "@types/set-cookie-parser": "^2.4.7",
    "typescript": "^5.4.5",
    "vite-plugin-dts": "^3.9.1",
    "vite-plugin-static-copy": "^1.0.5"
  }
}

================
File: packages/frameworks-qwik/README.md
================
<p align="center">
  <a href="https://qwik.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/etc/qwik.svg" /></a>
  <a href="https://qwik.authjs.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/logo-sm.png" /></a>
  <h1 align="center">Qwik Auth</h1>
</p>
<p align="center">
  Authentication for Qwik.
</p>
<p align="center">
  <a href="https://www.npmjs.com/package/@auth/qwik"><img src="https://img.shields.io/npm/v/@auth/qwik?style=flat-square&label=latest&color=purple" alt="npm latest release" /></a>
  <a href="https://www.npmtrends.com/@auth/qwik"><img src="https://img.shields.io/npm/dm/@auth/qwik?style=flat-square&color=cyan" alt="Downloads" /></a>
  <a href="https://github.com/nextauthjs/next-auth/stargazers"><img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&color=orange" alt="GitHub Stars" /></a>
  <img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&logoColor=fff&style=flat-square" alt="TypeScript" />
</p>

---

Check out the documentation at [qwik.authjs.dev](https://qwik.authjs.dev).

================
File: packages/frameworks-qwik/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "outDir": ".",
    "rootDir": "src"
  },
  "include": ["src/**/*"],
  "exclude": ["*.js", "*.d.ts", "lib"]
}

================
File: packages/frameworks-qwik/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/frameworks-qwik/vite.config.ts
================
import { qwikVite } from "@builder.io/qwik/optimizer"
import { join } from "path"
import { defineConfig } from "vite"
import dts from "vite-plugin-dts"
import { viteStaticCopy } from "vite-plugin-static-copy"

================
File: packages/frameworks-solid-start/src/adapters.ts
================


================
File: packages/frameworks-solid-start/src/client.ts
================
import type { ProviderId } from "@auth/core/providers"
interface SignInOptions<Redirect extends boolean = true>
  extends Record<string, unknown> {
  /** @deprecated Use `redirectTo` instead. */
  callbackUrl?: string
  /**
   * Specify where the user should be redirected to after a successful signin.
   *
   * By default, it is the page the sign-in was initiated from.
   */
  redirectTo?: string
  /**
   * You might want to deal with the signin response on the same page, instead of redirecting to another page.
   * For example, if an error occurs (like wrong credentials given by the user), you might want to show an inline error message on the input field.
   *
   * For this purpose, you can set this to option `redirect: false`.
   */
  redirect?: Redirect
}
⋮----
/** @deprecated Use `redirectTo` instead. */
⋮----
/**
   * Specify where the user should be redirected to after a successful signin.
   *
   * By default, it is the page the sign-in was initiated from.
   */
⋮----
/**
   * You might want to deal with the signin response on the same page, instead of redirecting to another page.
   * For example, if an error occurs (like wrong credentials given by the user), you might want to show an inline error message on the input field.
   *
   * For this purpose, you can set this to option `redirect: false`.
   */
⋮----
export interface SignInResponse {
  error: string | undefined
  code: string | undefined
  status: number
  ok: boolean
  url: string | null
}
interface SignOutParams<R extends boolean = true> {
  /** [Documentation](https://next-auth.js.org/getting-started/client#specifying-a-callbackurl-1) */
  callbackUrl?: string
  /** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1 */
  redirect?: R
}
⋮----
/** [Documentation](https://next-auth.js.org/getting-started/client#specifying-a-callbackurl-1) */
⋮----
/** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1 */
⋮----
/** Match `inputType` of `new URLSearchParams(inputType)` */
export type SignInAuthorizationParams =
  | string
  | string[][]
  | Record<string, string>
  | URLSearchParams
/**
 * Client-side method to initiate a signin flow
 * or send the user to the signin page listing all possible providers.
 * Automatically adds the CSRF token to the request.
 *
 * ```ts
 * import { signIn } from "@auth/solid-start/client"
 * signIn()
 * signIn("provider") // example: signIn("github")
 * ```
 */
/**
 * Initiates a signin flow or sends the user to the signin page listing all possible providers.
 * Handles CSRF protection.
 *
 * @note This method can only be used from Client Components ("use client" or Pages Router).
 * For Server Actions, use the `signIn` method imported from the `auth` config.
 */
export async function signIn(
⋮----
export async function signIn<Redirect extends boolean = true>(
  provider?: ProviderId,
  options?: SignInOptions<Redirect>,
  authorizationParams?: SignInAuthorizationParams
): Promise<SignInResponse | void>
⋮----
// TODO: Handle custom base path
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually
⋮----
/**
 * Signs the user out, by removing the session cookie.
 * Automatically adds the CSRF token to the request.
 *
 * ```ts
 * import { signOut } from "@auth/solid-start/client"
 * signOut()
 * ```
 */
export async function signOut(options?: SignOutParams)
⋮----
// TODO: Custom base path
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually

================
File: packages/frameworks-solid-start/src/index.ts
================
/**
 *
 * :::warning
 * `@auth/solid-start` is currently experimental. The API _will_ change in the future.
 * :::
 *
 * SolidStart Auth is the official SolidStart integration for Auth.js.
 * It provides a simple way to add authentication to your SolidStart app in a few lines of code.
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/core @auth/solid-start
 * ```
 *
 * @module @auth/solid-start
 */
import { Auth, type AuthConfig, customFetch } from "@auth/core"
import type { AuthAction, Session } from "@auth/core/types"
⋮----
export interface SolidAuthConfig extends AuthConfig {
  /**
   * Defines the base path for the auth routes.
   * @default '/api/auth'
   */
  prefix?: string
}
⋮----
/**
   * Defines the base path for the auth routes.
   * @default '/api/auth'
   */
⋮----
function SolidAuthHandler(prefix: string, authOptions: SolidAuthConfig)
/**
 * ## Setup
 *
 * [Generate an auth secret](https://generate-secret.vercel.app/32), then set it as an environment variable:
 *
 * ```
 * AUTH_SECRET=your_auth_secret
 * ```
 *
 * ## Creating the API handler
 *
 * This example uses github, make sure to set the following environment variables:
 *
 * ```
 * GITHUB_ID=your_github_oauth_id
 * GITHUB_SECRET=your_github_oauth_secret
 * ```
 *
 * ```ts
 * // routes/api/auth/[...solidauth].ts
 * import { SolidAuth, type SolidAuthConfig } from "@auth/solid-start"
 * import GitHub from "@auth/core/providers/github"
 *
 * export const authOpts: SolidAuthConfig = {
 *   providers: [
 *     GitHub({
 *       clientId: process.env.GITHUB_ID,
 *       clientSecret: process.env.GITHUB_SECRET,
 *     }),
 *   ],
 *   debug: false,
 * }
 *
 * export const { GET, POST } = SolidAuth(authOpts)
 * ```
 *
 * ## Getting the current session
 *
 * ```ts
 * import { getSession } from "@auth/solid-start"
 * import { createServerData$ } from "solid-start/server"
 * import { authOpts } from "~/routes/api/auth/[...solidauth]"
 *
 * export const useSession = () => {
 *   return createServerData$(
 *     async (_, { request }) => {
 *       return await getSession(request, authOpts)
 *     },
 *     { key: () => ["auth_user"] }
 *   )
 * }
 *
 * // useSession returns a resource:
 * const session = useSession()
 * const loading = session.loading
 * const user = () => session()?.user
 * ```
 * ## Protected Routes
 *
 * ### When Using SSR
 *
 * When using SSR, it is recommended to create a `Protected` component that will trigger suspense using the `Show` component. It should look like this:
 *
 *
 * ```tsx
 * // components/Protected.tsx
 * import { type Session } from "@auth/core/types";
 * import { getSession } from "@auth/solid-start";
 * import { Component, Show } from "solid-js";
 * import { useRouteData } from "solid-start";
 * import { createServerData$, redirect } from "solid-start/server";
 * import { authOpts } from "~/routes/api/auth/[...solidauth]";
 *
 * const Protected = (Comp: IProtectedComponent) => {
 *   const routeData = () => {
 *     return createServerData$(
 *       async (_, event) => {
 *         const session = await getSession(event.request, authOpts);
 *         if (!session || !session.user) {
 *           throw redirect("/");
 *         }
 *         return session;
 *       },
 *       { key: () => ["auth_user"] }
 *     );
 *   };
 *
 *   return {
 *     routeData,
 *     Page: () => {
 *       const session = useRouteData<typeof routeData>();
 *       return (
 *         <Show when={session()} keyed>
 *           {(sess) => <Comp {...sess} />}
 *         </Show>
 *       );
 *     },
 *   };
 * };
 *
 * type IProtectedComponent = Component<Session>;
 *
 * export default Protected;
 * ```
 *
 * It can be used like this:
 *
 *
 * ```tsx
 * // routes/protected.tsx
 * import Protected from "~/components/Protected";
 *
 * export const { routeData, Page } = Protected((session) => {
 *   return (
 *     <main class="flex flex-col gap-2 items-center">
 *       <h1>This is a protected route</h1>
 *     </main>
 *   );
 * });
 *
 * export default Page;
 * ```
 *
 * ### When Using CSR
 *
 * When using CSR, the `Protected` component will not work as expected and will cause the screen to flash. To fix this, a Solid-Start middleware is used:
 *
 * ```tsx
 * // entry-server.tsx
 * import { Session } from "@auth/core";
 * import { getSession } from "@auth/solid-start";
 * import { redirect } from "solid-start";
 * import {
 *   StartServer,
 *   createHandler,
 *   renderAsync,
 * } from "solid-start/entry-server";
 * import { authOpts } from "./routes/api/auth/[...solidauth]";
 *
 * const protectedPaths = ["/protected"]; // add any route you wish in here
 *
 * export default createHandler(
 *   ({ forward }) => {
 *     return async (event) => {
 *       if (protectedPaths.includes(new URL(event.request.url).pathname)) {
 *         const session = await getSession(event.request, authOpts);
 *         if (!session) {
 *           return redirect("/");
 *         }
 *       }
 *       return forward(event);
 *     };
 *   },
 *   renderAsync((event) => <StartServer event={event} />)
 * );
 * ```
 *
 * And now a protected route can be created:
 *
 *
 * ```tsx
 * // routes/protected.tsx
 * export default () => {
 *   return (
 *     <main class="flex flex-col gap-2 items-center">
 *       <h1>This is a protected route</h1>
 *     </main>
 *   );
 * };
 * ```
 *
 * :::note
 * The CSR method should also work when using SSR, the SSR method shouldn't work when using CSR
 * :::
 *
 */
export function SolidAuth(config: SolidAuthConfig)
⋮----
async GET(event: any)
async POST(event: any)
⋮----
export type GetSessionResult = Promise<Session | null>
export async function getSession(
  req: Request,
  options: Omit<AuthConfig, "raw">
): GetSessionResult

================
File: packages/frameworks-solid-start/test/index.test.ts
================
import { describe, test, expect } from "vitest"

================
File: packages/frameworks-solid-start/.gitignore
================
node_modules
dist
**/*.d.ts
**/*.js
!tsup.config.js
!scripts/**/*.js
.vercel

================
File: packages/frameworks-solid-start/package.json
================
{
  "name": "@auth/solid-start",
  "version": "0.17.1",
  "description": "Authentication for SolidStart.",
  "license": "ISC",
  "author": "OrJDev <orjdeveloper@gmail.com>",
  "homepage": "https://solid-start.authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth",
  "keywords": [
    "SolidJS",
    "SolidStart",
    "oauth",
    "jwt",
    "oauth2",
    "authentication",
    "nextjs",
    "csrf",
    "oidc",
    "Auth.js"
  ],
  "publishConfig": {
    "access": "public"
  },
  "type": "module",
  "files": [
    "*.js",
    "*.d.ts*",
    "providers",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    },
    "./adapters": {
      "types": "./adapters.d.ts"
    },
    "./client": {
      "types": "./client.d.ts",
      "import": "./client.js"
    },
    "./providers": {
      "types": "./providers/index.d.ts"
    },
    "./providers/*": {
      "types": "./providers/*.d.ts",
      "import": "./providers/*.js"
    }
  },
  "scripts": {
    "build": "pnpm clean && pnpm providers && tsc",
    "test": "vitest run -c ../utils/vitest.config.ts",
    "providers": "node ../utils/scripts/providers",
    "clean": "rm -rf *.js *.d.ts* providers src/providers"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "devDependencies": {
    "@solidjs/meta": "^0.28.0",
    "@types/node": "^18.7.14",
    "solid-js": "^1.5.7",
    "solid-start": "^0.2.14"
  },
  "peerDependencies": {
    "solid-js": "^1.5.7",
    "solid-start": "^0.2.14"
  }
}

================
File: packages/frameworks-solid-start/README.MD
================
<p align="center">
  <a href="https://start.solidjs.com" target="_blank"><img height="96px" src="https://authjs.dev/img/etc/solidstart.svg" /></a>
  <a href="https://solid-start.authjs.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/logo-sm.png" /></a>
  <h1 align="center">SolidStart Auth</h1>
</p>
<p align="center">
  Authentication for SolidStart.
</p>
<p align="center">
  <a href="https://www.npmjs.com/package/@auth/solid-start"><img src="https://img.shields.io/npm/v/@auth/solid-start?style=flat-square&label=latest&color=purple" alt="npm latest release" /></a>
  <a href="https://www.npmtrends.com/@auth/solid-start"><img src="https://img.shields.io/npm/dm/@auth/solid-start?style=flat-square&color=cyan" alt="Downloads" /></a>
  <a href="https://github.com/nextauthjs/next-auth/stargazers"><img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&color=orange" alt="GitHub Stars" /></a>
  <img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&logoColor=fff&style=flat-square" alt="TypeScript" />
</p>

---

Check out the documentation at [solid-start.authjs.dev](https://solid-start.authjs.dev).

================
File: packages/frameworks-solid-start/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "jsx": "preserve",
    "jsxImportSource": "solid-js",
    "outDir": ".",
    "rootDir": "./src"
  },
  "include": ["./src/**/*"],
  "exclude": ["*.js", "*.d.ts"]
}

================
File: packages/frameworks-solid-start/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/frameworks-sveltekit/scripts/postbuild.js
================
// After build, copy the files in ./package to the root directory, excluding the package.json file.
⋮----
let __dirname = path.dirname(new URL(import.meta.url).pathname)
// The above hack to polyfill "__dirname" for ESM does not work on Windows computers,
// so we might have to manually perform more steps.
__dirname = __dirname.split(path.sep).join(path.posix.sep)
if (__dirname.match(/^\/\w:\//)) {
__dirname = __dirname.slice(3) // Remove the drive prefix.
⋮----
const root = path.join(__dirname, "..")
const pkgDir = path.join(root, "package")
await fs.cp(pkgDir, root, {
⋮----
filter: (src) => !src.includes("package.json"),

================
File: packages/frameworks-sveltekit/src/lib/components/index.ts
================
import SignIn from "./SignIn.svelte"
import SignOut from "./SignOut.svelte"

================
File: packages/frameworks-sveltekit/src/lib/components/SignIn.svelte
================
<script lang="ts">
  import { enhance } from "$app/forms"
  import type { signIn } from "$lib/actions"
  export let className = ""
  // TODO: Lookup provider type by id
  export let provider: Partial<Parameters<typeof signIn>[0]> = ""
  /** The path to the FormAction file in your route. @default signin */
  export let signInPage = "signin"
  export let options: Parameters<typeof signIn>[1] | undefined = undefined
  export let authorizationParams: Parameters<typeof signIn>[2] | undefined =
    undefined
  const callbackUrl =
    options instanceof FormData
      ? options.get("redirectTo")
      : options?.redirectTo
  const redirect =
    options instanceof FormData ? options.get("redirect") : options?.redirectTo
  const redirectTo = callbackUrl
  const authorizationParamsInputs = authorizationParams
    ? typeof authorizationParams === "string" && authorizationParams
      ? new URLSearchParams(authorizationParams)
      : authorizationParams
    : undefined
</script>
<form
  method="POST"
  action={`/${signInPage}`}
  use:enhance
  class={`signInButton ${className}`}
  {...$$restProps}
>
  <input type="hidden" name="providerId" value={provider} />
  {#if callbackUrl}
    <input type="hidden" name="callbackUrl" value={callbackUrl} />
  {/if}
  {#if redirect}
    <input type="hidden" name="redirect" value={redirect} />
  {/if}
  {#if redirectTo}
    <input type="hidden" name="redirectTo" value={redirectTo} />
  {/if}
  {#if authorizationParamsInputs}
    {#each Object.entries(authorizationParamsInputs) as [key, value]}
      <input type="hidden" name={`authorizationParams-${key}`} {value} />
    {/each}
  {/if}
  {#if provider === "credentials"}
    <slot name="credentials" />
  {/if}
  <!-- TODO: Filter by provider type only -->
  {#if provider === "email" || provider === "sendgrid" || provider === "resend"}
    <slot name="email">
      <label
        class="section-header"
        for={`input-email-for-${provider}-provider`}
      >
        Email
      </label>
      <input
        id="input-email-for-email-provider"
        type="email"
        name="email"
        placeholder="email@example.com"
        required
      />
    </slot>
  {/if}
  <button type="submit">
    <slot name="submitButton">Signin{provider ? ` with ${provider}` : ""}</slot>
  </button>
</form>

================
File: packages/frameworks-sveltekit/src/lib/components/SignOut.svelte
================
<script lang="ts">
  import { enhance } from "$app/forms"
  import type { signOut } from "$lib/actions"
  export let className = ""
  export let options: Parameters<typeof signOut>[0] = undefined
  export let signOutPage = "signout"
</script>
<form
  method="POST"
  action={`/${signOutPage}`}
  use:enhance
  class={`signOutButton ${className}`}
  {...$$restProps}
>
  {#if options}
    {#if options?.redirect}
      <input type="hidden" name="redirect" value={options.redirect} />
    {/if}
    {#if options?.redirectTo}
      <input type="hidden" name="redirectTo" value={options.redirectTo} />
    {/if}
  {/if}
  <button type="submit">
    <slot name="submitButton">Sign Out</slot>
  </button>
</form>

================
File: packages/frameworks-sveltekit/src/lib/actions.ts
================
import { redirect } from "@sveltejs/kit"
import type { RequestEvent } from "@sveltejs/kit"
import { parse } from "set-cookie-parser"
import { env } from "$env/dynamic/private"
import { Auth, createActionURL, raw } from "@auth/core"
import type { ProviderType } from "@auth/core/providers"
import type { SvelteKitAuthConfig } from "./types"
import { setEnvDefaults } from "./env"
type SignInParams = Parameters<App.Locals["signIn"]>
export async function signIn(
  provider: SignInParams[0],
  options: SignInParams[1] = {},
  authorizationParams: SignInParams[2],
  config: SvelteKitAuthConfig,
  event: RequestEvent
)
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
type SignOutParams = Parameters<App.Locals["signOut"]>
export async function signOut(
  options: SignOutParams[0],
  config: SvelteKitAuthConfig,
  event: RequestEvent
)
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
export async function auth(
  event: RequestEvent,
  config: SvelteKitAuthConfig
): ReturnType<App.Locals["auth"]>
⋮----
// @ts-expect-error - Review: SvelteKit and set-cookie-parser are mismatching

================
File: packages/frameworks-sveltekit/src/lib/adapters.ts
================


================
File: packages/frameworks-sveltekit/src/lib/client.ts
================
import { base } from "$app/paths"
import type { ProviderId } from "@auth/core/providers"
export interface SignInOptions<Redirect extends boolean = true>
  extends Record<string, unknown> {
  /** @deprecated Use `redirectTo` instead. */
  callbackUrl?: string
  /**
   * Specify where the user should be redirected to after a successful signin.
   *
   * By default, it is the page the sign-in was initiated from.
   */
  redirectTo?: string
  /**
   * You might want to deal with the signin response on the same page, instead of redirecting to another page.
   * For example, if an error occurs (like wrong credentials given by the user), you might want to show an inline error message on the input field.
   *
   * For this purpose, you can set this to option `redirect: false`.
   */
  redirect?: Redirect
}
⋮----
/** @deprecated Use `redirectTo` instead. */
⋮----
/**
   * Specify where the user should be redirected to after a successful signin.
   *
   * By default, it is the page the sign-in was initiated from.
   */
⋮----
/**
   * You might want to deal with the signin response on the same page, instead of redirecting to another page.
   * For example, if an error occurs (like wrong credentials given by the user), you might want to show an inline error message on the input field.
   *
   * For this purpose, you can set this to option `redirect: false`.
   */
⋮----
export interface SignInResponse {
  error: string | undefined
  code: string | undefined
  status: number
  ok: boolean
  url: string | null
}
export interface SignOutParams<Redirect extends boolean = true> {
  /** @deprecated Use `redirectTo` instead. */
  callbackUrl?: string
  /**
   * If you pass `redirect: false`, the page will not reload.
   * The session will be deleted, and `useSession` is notified, so any indication about the user will be shown as logged out automatically.
   * It can give a very nice experience for the user.
   */
  redirectTo?: string
  /** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1 */
  redirect?: Redirect
}
⋮----
/** @deprecated Use `redirectTo` instead. */
⋮----
/**
   * If you pass `redirect: false`, the page will not reload.
   * The session will be deleted, and `useSession` is notified, so any indication about the user will be shown as logged out automatically.
   * It can give a very nice experience for the user.
   */
⋮----
/** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1 */
⋮----
/** Match `inputType` of `new URLSearchParams(inputType)` */
export type SignInAuthorizationParams =
  | string
  | string[][]
  | Record<string, string>
  | URLSearchParams
/**
 * Client-side method to initiate a signin flow
 * or send the user to the signin page listing all possible providers.
 *
 * [Documentation](https://authjs.dev/reference/sveltekit/client#signin)
 */
/**
 * Initiates a signin flow or sends the user to the signin page listing all possible providers.
 * Handles CSRF protection.
 *
 * @note This method can only be used from Client Components ("use client" or Pages Router).
 * For Server Actions, use the `signIn` method imported from the `auth` config.
 */
export async function signIn(
⋮----
export async function signIn<Redirect extends boolean = true>(
  provider?: ProviderId,
  options?: SignInOptions<Redirect>,
  authorizationParams?: SignInAuthorizationParams
): Promise<SignInResponse | void>
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually
⋮----
export interface SignOutResponse {
  url: string
}
/**
 * Initiate a signout, by destroying the current session.
 * Handles CSRF protection.
 *
 * @note This method can only be used from Client Components ("use client" or Pages Router).
 * For Server Actions, use the `signOut` method imported from the `auth` config.
 */
export async function signOut(options?: SignOutParams<true>): Promise<void>
export async function signOut(
export async function signOut<R extends boolean = true>(
  options?: SignOutParams<R>
): Promise<SignOutResponse | void>
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually

================
File: packages/frameworks-sveltekit/src/lib/env.ts
================
import { setEnvDefaults as coreSetEnvDefaults, skipCSRFCheck } from "@auth/core"
import { dev, building } from "$app/environment"
import { base } from "$app/paths"
import type { SvelteKitAuthConfig } from "./types"
export function setEnvDefaults(
  envObject: Record<string, string | undefined>,
  config: SvelteKitAuthConfig
)

================
File: packages/frameworks-sveltekit/src/lib/index.ts
================
/**
 * :::warning
 * `@auth/sveltekit` is currently experimental. The API _might_ change.
 * :::
 *
 * SvelteKit Auth is the official SvelteKit integration for Auth.js.
 * It provides a simple way to add authentication to your SvelteKit app in a few lines of code.
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install @auth/sveltekit
 * ```
 *
 * ## Usage
 *
 * ```ts title="src/auth.ts"
 *
 * import { SvelteKitAuth } from "@auth/sveltekit"
 * import GitHub from "@auth/sveltekit/providers/github"
 *
 * export const { handle, signIn, signOut } = SvelteKitAuth({
 *   providers: [GitHub],
 * })
 * ```
 *
 * ### Lazy initialization
 * `@auth/sveltekit` supports lazy initialization where you can read the `event` object to lazily set the configuration. This is especially useful when you have to get the environment variables from `event.platform` for platforms like Cloudflare Workers.
 *
 * ```ts title="src/auth.ts"
 * import { SvelteKitAuth } from "@auth/sveltekit"
 * import GitHub from "@auth/sveltekit/providers/github"
 *
 * export const { handle, signIn, signOut } = SvelteKitAuth(async (event) => {
 *   const authOptions = {
 *     providers: [
 *       GitHub({
 *         clientId: event.platform.env.AUTH_GITHUB_ID,
 *         clientSecret: event.platform.env.AUTH_GITHUB_SECRET
 *       })
 *     ],
 *     secret: event.platform.env.AUTH_SECRET,
 *     trustHost: true
 *   }
 *   return authOptions
 * })
 * ```
 *
 * Re-export the handle in `src/hooks.server.ts`:
 * ```ts title="src/hooks.server.ts"
 * export { handle } from "./auth"
 * ```
 *
 * Remember to set the `AUTH_SECRET` [environment variable](https://kit.svelte.dev/docs/modules#$env-dynamic-private). This should be a minimum of 32 characters, random string. On UNIX systems you can use `openssl rand -hex 32` or check out `https://generate-secret.vercel.app/32`.
 *
 * When deploying your app outside Vercel, set the `AUTH_TRUST_HOST` variable to `true` for other hosting providers like Cloudflare Pages or Netlify.
 *
 * The callback URL used by the [providers](https://authjs.dev/getting-started/providers) must be set to the following, unless you override {@link SvelteKitAuthConfig.basePath}:
 *
 * ```
 * [origin]/auth/callback/[provider]
 * ```
 *
 * ## Signing in and Signing out
 *
 * ### Server-side
 *
 * `<SignIn />` and `<SignOut />` are components that `@auth/sveltekit` provides out of the box - they handle the sign-in/signout flow, and can be used as-is as a starting point or customized for your own components. This is an example of how to use the `SignIn` and `SignOut` components to login and logout using SvelteKit's server-side form actions. Another example is available on [our svelte-auth-example repo](https://github.com/nextauthjs/sveltekit-auth-example).
 *
 * You will need two things to make this work:
 *
 * 1. Using the components in your SvelteKit app's frontend (for instance `src/routes/+page.svelte`)
 * 2. Add the required `page.server.ts` at `/signin` (for `SignIn`) and `/signout` (for `SignOut`) to handle the form actions
 *
 * ```ts title="src/routes/+page.svelte"
 * <script>
 *   import { SignIn, SignOut } from "@auth/sveltekit/components"
 *   import { page } from "$app/stores"
 * </script>
 *
 * <h1>SvelteKit Auth Example</h1>
 * <div>
 *   {#if $page.data.session}
 *     {#if $page.data.session.user?.image}
 *       <img
 *         src={$page.data.session.user.image}
 *         class="avatar"
 *         alt="User Avatar"
 *       />
 *     {/if}
 *     <span class="signedInText">
 *       <small>Signed in as</small><br />
 *       <strong>{$page.data.session.user?.name ?? "User"}</strong>
 *     </span>
 *     <SignOut>
 *       <div slot="submitButton" class="buttonPrimary">Sign out</div>
 *     </SignOut>
 *   {:else}
 *     <span class="notSignedInText">You are not signed in</span>
 *     <SignIn>
 *       <div slot="submitButton" class="buttonPrimary">Sign in</div>
 *     </SignIn>
 *     <SignIn provider="facebook"/>
 *   {/if}
 * </div>
 * ```
 *
 * To set up the form actions, we need to define the files in `src/routes`:
 *
 * ```ts title="src/routes/signin/+page.server.ts"
 * import { signIn } from "../../auth"
 * import type { Actions } from "./$types"
 * export const actions: Actions = { default: signIn }
 * ```
 *
 * ```ts title="src/routes/signout/+page.server.ts"
 * import { signOut } from "../../auth"
 * import type { Actions } from "./$types"
 * export const actions: Actions = { default: signOut }
 * ```
 *
 * These routes are customizeable with the `signInPage` and `signOutPage` props on the respective comopnents.
 *
 * ### Client-Side
 *
 * We also export two methods from `@auth/sveltekit/client` in order to do client-side sign-in and sign-out actions.
 *
 * ```ts title="src/routes/+page.svelte"
 * <script>
 *   import { signIn, signOut } from "@auth/sveltekit/client"
 *   let password
 * </script>
 *
 * <nav>
 *   <p>
 *     These actions are all using the methods exported from
 *     <code>@auth/sveltekit/client</code>
 *   </p>
 *   <div class="actions">
 *     <div class="wrapper-form">
 *       <button on:click={() => signIn("github")}>Sign In with GitHub</button>
 *     </div>
 *     <div class="wrapper-form">
 *       <button on:click={() => signIn("discord")}>Sign In with Discord</button>
 *     </div>
 *     <div class="wrapper-form">
 *       <div class="input-wrapper">
 *         <label for="password">Password</label>
 *         <input
 *           bind:value={password}
 *           type="password"
 *           id="password"
 *           name="password"
 *           required
 *         />
 *       </div>
 *       <button on:click={() => signIn("credentials", { password })}>
 *         Sign In with Credentials
 *       </button>
 *       <button on:click={() => signOut()}>
 *         Sign Out
 *       </button>
 *     </div>
 *   </div>
 * </nav>
 * ```
 *
 * ## Managing the session
 *
 * The above example checks for a session available in `$page.data.session`, however that needs to be set by us somewhere.
 * If you want this data to be available to all your routes you can add this to `src/routes/+layout.server.ts`.
 * The following code sets the session data in the `$page` store to be available to all routes.
 *
 * ```ts
 * import type { LayoutServerLoad } from './$types';
 *
 * export const load: LayoutServerLoad = async (event) => {
 *   return {
 *     session: await event.locals.auth()
 *   };
 * };
 * ```
 *
 * What you return in the function `LayoutServerLoad` will be available inside the `$page` store, in the `data` property: `$page.data`.
 * In this case we return an object with the `session` property which is what we are accessing in the other code paths.
 *
 * ## Handling authorization
 *
 * In SvelteKit there are a few ways you could protect routes from unauthenticated users.
 *
 * ### Per component
 *
 * The simplest case is protecting a single page, in which case you should put the logic in the `+page.server.ts` file.
 * Notice in this case that you could also `await event.parent` and grab the session from there, however this implementation works even if you haven't done the above in your root `+layout.server.ts`
 *
 * ```ts
 * import { redirect } from '@sveltejs/kit';
 * import type { PageServerLoad } from './$types';
 *
 * export const load: PageServerLoad = async (event) => {
 *   const session = await event.locals.auth();
 *   if (!session?.user) throw redirect(303, '/auth');
 *   return {};
 * };
 * ```
 *
 * :::danger
 * Make sure to ALWAYS grab the session information from the parent instead of using the store in the case of a `PageLoad`.
 * Not doing so can lead to users being able to incorrectly access protected information in the case the `+layout.server.ts` does not run for that page load.
 * For more information on SvelteKit's `load` functionality behaviour and its implications on authentication, see this [SvelteKit docs section](https://kit.svelte.dev/docs/load#implications-for-authentication).
 * :::
 *
 * You should NOT put authorization logic in a `+layout.server.ts` as the logic is not guaranteed to propagate to leafs in the tree.
 * Prefer to manually protect each route through the `+page.server.ts` file to avoid mistakes.
 * It is possible to force the layout file to run the load function on all routes, however that relies certain behaviours that can change and are not easily checked.
 * For more information about these caveats make sure to read this issue in the SvelteKit repository: https://github.com/sveltejs/kit/issues/6315
 *
 * ### Per path
 *
 * Another method that's possible for handling authorization is by restricting certain URIs from being available.
 * For many projects this is better because:
 * - This automatically protects actions and api routes in those URIs
 * - No code duplication between components
 * - Very easy to modify
 *
 * The way to handle authorization through the URI is to override your handle hook.
 * The handle hook, returned from `SvelteKitAuth` in your `src/auth.ts`, is a function that is designed to receive ALL requests sent to your SvelteKit webapp.
 * You should export it from `src/auth.ts` and import it in your `src/hooks.server.ts`.
 * To use multiple handles in your `hooks.server.ts`, we can use SvelteKit's `sequence` to execute all of them in series.
 *
 * ```ts title="src/auth.ts"
 * import { SvelteKitAuth } from '@auth/sveltekit';
 * import GitHub from '@auth/sveltekit/providers/github';
 *
 * export const { handle, signIn, signOut } = SvelteKitAuth({
 *   providers: [GitHub]
 * }),
 * ```
 *
 * ```ts title="src/hooks.server.ts"
 * import { redirect, type Handle } from '@sveltejs/kit';
 * import { handle as authenticationHandle } from './auth';
 * import { sequence } from '@sveltejs/kit/hooks';
 *
 * async function authorizationHandle({ event, resolve }) {
 *   // Protect any routes under /authenticated
 *   if (event.url.pathname.startsWith('/authenticated')) {
 *     const session = await event.locals.auth();
 *     if (!session) {
 *       // Redirect to the signin page
 *       throw redirect(303, '/auth/signin');
 *     }
 *   }
 *
 *   // If the request is still here, just proceed as normally
 *   return resolve(event);
 * }
 *
 * // First handle authentication, then authorization
 * // Each function acts as a middleware, receiving the request handle
 * // And returning a handle which gets passed to the next function
 * export const handle: Handle = sequence(authenticationHandle, authorizationHandle)
 * ```
 *
 * :::info
 * Learn more about SvelteKit's handle hooks and sequence [here](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence).
 * :::
 *
 * Now any routes under `/authenticated` will be transparently protected by the handle hook.
 * You may add more middleware-like functions to the sequence and also implement more complex authorization business logic inside this file.
 * This can also be used along with the component-based approach in case you need a specific page to be protected and doing it by URI could be faulty.
 *
 * ## Notes
 *
 * - If you build your SvelteKit application with `prerender` enabled, pages which have an anchor tag to the default signin page (i.e. `<a href="/auth/signin" ...`) will have trouble building. Please use the [builtin functions or components](https://authjs.dev/getting-started/session-management/login?framework=sveltekit) to sign in or out instead.
 *
 * :::info
 * Learn more about `@auth/sveltekit` [here](https://vercel.com/blog/announcing-sveltekit-auth).
 * :::
 *
 * @module @auth/sveltekit
 */
⋮----
import type { Action, Handle, RequestEvent } from "@sveltejs/kit"
import { env } from "$env/dynamic/private"
import type { SvelteKitAuthConfig } from "./types"
import { setEnvDefaults } from "./env"
import { auth, signIn, signOut } from "./actions"
import { Auth, isAuthAction, customFetch } from "@auth/core"
import { building } from "$app/environment"
⋮----
/**
 * The main entry point to `@auth/sveltekit`
 * @see https://sveltekit.authjs.dev
 */
export function SvelteKitAuth(
  config:
    | SvelteKitAuthConfig
    | ((event: RequestEvent) => PromiseLike<SvelteKitAuthConfig>)
):
⋮----
// get the authorization params from the options prefixed with `authorizationParams-`
⋮----
async handle(
⋮----
// @ts-expect-error - basePath is defined in setEnvDefaults

================
File: packages/frameworks-sveltekit/src/lib/types.ts
================
import type { AuthConfig } from "@auth/core"
import type { ProviderId } from "@auth/core/providers"
import type { Session } from "@auth/core/types"
/** Configure the {@link SvelteKitAuth} method. */
export interface SvelteKitAuthConfig extends Omit<AuthConfig, "raw"> {}
⋮----
// eslint-disable-next-line @typescript-eslint/no-namespace
⋮----
interface Locals {
      auth(): Promise<Session | null>
      /** @deprecated Use `auth` instead. */
      getSession(): Promise<Session | null>
      signIn: <Redirect extends boolean = true>(
        /** Provider to sign in to */
        provider?: ProviderId, // See: https://github.com/microsoft/TypeScript/issues/29729
        options?:
          | FormData
          | ({
              /** The URL to redirect to after signing in. By default, the user is redirected to the current page. */
              redirectTo?: string
              /** If set to `false`, the `signIn` method will return the URL to redirect to instead of redirecting automatically. */
              redirect?: Redirect
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            } & Record<string, any>),
        authorizationParams?:
          | string[][]
          | Record<string, string>
          | string
          | URLSearchParams
      ) => Promise<
        Redirect extends false
          ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
            any
          : never
      >
      signOut: <Redirect extends boolean = true>(options?: {
        /** The URL to redirect to after signing out. By default, the user is redirected to the current page. */
        redirectTo?: string
        /** If set to `false`, the `signOut` method will return the URL to redirect to instead of redirecting automatically. */
        redirect?: Redirect
      }) => Promise<
        Redirect extends false
          ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
            any
          : never
      >
    }
⋮----
auth(): Promise<Session | null>
/** @deprecated Use `auth` instead. */
getSession(): Promise<Session | null>
⋮----
/** Provider to sign in to */
provider?: ProviderId, // See: https://github.com/microsoft/TypeScript/issues/29729
⋮----
/** The URL to redirect to after signing in. By default, the user is redirected to the current page. */
⋮----
/** If set to `false`, the `signIn` method will return the URL to redirect to instead of redirecting automatically. */
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
? // eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
/** The URL to redirect to after signing out. By default, the user is redirected to the current page. */
⋮----
/** If set to `false`, the `signOut` method will return the URL to redirect to instead of redirecting automatically. */
⋮----
? // eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
interface PageData {
      session?: Session | null
    }

================
File: packages/frameworks-sveltekit/src/lib/webauthn.ts
================
import { base } from "$app/paths"
import { startAuthentication, startRegistration } from "@simplewebauthn/browser"
import type { LoggerInstance } from "@auth/core/types"
import type { WebAuthnOptionsResponseBody } from "@auth/core/types"
import type { ProviderId } from "@auth/core/providers"
import type {
  SignInAuthorizationParams,
  SignInOptions,
  SignInResponse,
} from "./client.js"
⋮----
/**
 * Fetch webauthn options from server and prompt user for authentication or registration.
 * Returns either the completed WebAuthn response or an error request.
 */
async function webAuthnOptions(
  providerID: ProviderId,
  options?: Omit<SignInOptions, "redirect">
)
⋮----
// @ts-expect-error
⋮----
/**
 * Initiate a WebAuthn signin flow.
 * @see https://authjs.dev/getting-started/authentication/webauthn
 */
export async function signIn(
⋮----
export async function signIn<Redirect extends boolean = true>(
  provider?: ProviderId,
  options?: SignInOptions<Redirect>,
  authorizationParams?: SignInAuthorizationParams
): Promise<SignInResponse | void>
⋮----
// TODO: Add docs link with explanation
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually

================
File: packages/frameworks-sveltekit/test/index.test.ts
================
import { describe, it, expect } from "vitest"

================
File: packages/frameworks-sveltekit/package.json
================
{
  "name": "@auth/sveltekit",
  "version": "1.9.2",
  "description": "Authentication for SvelteKit.",
  "keywords": [
    "authentication",
    "authjs",
    "jwt",
    "sveltekit",
    "oauth",
    "oidc",
    "passwordless",
    "svelte"
  ],
  "license": "ISC",
  "homepage": "https://sveltekit.authjs.dev",
  "repository": {
    "type": "git",
    "url": "https://github.com/nextauthjs/next-auth",
    "directory": "packages/frameworks-sveltekit"
  },
  "author": "Thang Huu Vu <hi@thvu.dev>",
  "contributors": [
    "Thang Huu Vu <hi@thvu.dev>",
    "Balázs Orbán <info@balazsorban.com>",
    "Nico Domino <yo@ndo.dev>",
    "Lluis Agusti <hi@llu.lu>",
    "Iain Collins <me@iaincollins.com>"
  ],
  "scripts": {
    "build": "pnpm clean && pnpm providers && pnpm check && svelte-package",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "clean": "rm -rf dist src/lib/providers",
    "dev": "pnpm providers && svelte-package -w",
    "preview": "vite preview",
    "providers": "node ../utils/scripts/providers.js --out src/lib",
    "test": "vitest run -c ../utils/vitest.config.ts"
  },
  "devDependencies": {
    "@sveltejs/adapter-auto": "^3.2.5",
    "@sveltejs/kit": "^2.6.4",
    "@sveltejs/package": "^2.3.5",
    "@sveltejs/vite-plugin-svelte": "^3.1.2",
    "@types/set-cookie-parser": "^2.4.10",
    "svelte": "^4.2.19",
    "svelte-check": "^4.0.4",
    "tslib": "^2.7.0",
    "typedoc": "^0.25.12",
    "typedoc-plugin-markdown": "4.0.0-next.53"
  },
  "dependencies": {
    "@auth/core": "workspace:*",
    "set-cookie-parser": "^2.7.0"
  },
  "peerDependencies": {
    "@simplewebauthn/browser": "^9.0.1",
    "@simplewebauthn/server": "^9.0.3",
    "@sveltejs/kit": "^1.0.0 || ^2.0.0",
    "nodemailer": "^6.6.5",
    "svelte": "^3.54.0 || ^4.0.0 || ^5.0.0-0"
  },
  "peerDependenciesMeta": {
    "@simplewebauthn/browser": {
      "optional": true
    },
    "@simplewebauthn/server": {
      "optional": true
    },
    "nodemailer": {
      "optional": true
    }
  },
  "type": "module",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "src"
  ],
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js"
    },
    "./client": {
      "types": "./dist/client.d.ts",
      "import": "./dist/client.js"
    },
    "./webauthn": {
      "types": "./dist/webauthn.d.ts",
      "import": "./dist/webauthn.js"
    },
    "./components": {
      "types": "./dist/components/index.d.ts",
      "svelte": "./dist/components/index.js"
    },
    "./adapters": {
      "types": "./dist/adapters.d.ts"
    },
    "./providers": {
      "types": "./dist/providers/index.d.ts"
    },
    "./providers/*": {
      "types": "./dist/providers/*.d.ts",
      "import": "./dist/providers/*.js"
    },
    "./package.json": "./package.json"
  }
}

================
File: packages/frameworks-sveltekit/playwright.config.ts
================
import type { PlaywrightTestConfig } from "@playwright/test"

================
File: packages/frameworks-sveltekit/README.md
================
<p align="center">
  <a href="https://kit.svelte.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/etc/sveltekit.svg" /></a>
  <a href="https://sveltekit.authjs.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/logo-sm.png" /></a>
  <h1 align="center">SvelteKit Auth</h1>
</p>
<p align="center">
  Authentication for SvelteKit.
</p>
<p align="center">
  <a href="https://www.npmjs.com/package/@auth/sveltekit"><img src="https://img.shields.io/npm/v/@auth/sveltekit?style=flat-square&label=latest&color=purple" alt="npm latest release" /></a>
  <a href="https://www.npmtrends.com/@auth/sveltekit"><img src="https://img.shields.io/npm/dm/@auth/sveltekit?style=flat-square&color=cyan" alt="Downloads" /></a>
  <a href="https://github.com/nextauthjs/next-auth/stargazers"><img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&color=orange" alt="GitHub Stars" /></a>
  <img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&logoColor=fff&style=flat-square" alt="TypeScript" />
</p>

---

Check out the documentation at [sveltekit.authjs.dev](https://sveltekit.authjs.dev).

================
File: packages/frameworks-sveltekit/tsconfig.json
================
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "declaration": true,
    "declarationMap": true
  },
  // Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
  "exclude": ["scripts", "*.js", "../node_modules/**", "./[!ambient.d.ts]**"]
}

================
File: packages/frameworks-sveltekit/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/frameworks-template/src/index.ts
================
/**
 *
 * :::warning
 * `@auth/<framework-id>` is currently experimental. The API _will_ change in the future.
 * :::
 *
 * <framework-name> Auth is the official <framework-name> integration for Auth.js.
 * It provides a simple way to add authentication to your <framework-name> app in a few lines of code.
 *
 * ## Installation
 * ```bash npm2yarn
 * npm install @auth/<framework-id>
 * ```
 *
 * ## Usage
 *
 * ### Provider Configuration
 *
 * ## Signing in and signing out
 *
 * ## Managing the session
 *
 * ## Authorization
 *
 * ```
 *
 * @module @auth/<framework-id>
 */
// Re-export types of Auth.js
⋮----
export function FrameworkAuth()

================
File: packages/frameworks-template/test/index.test.ts
================
import { describe, expect, it } from "vitest"
import { FrameworkAuth } from "../src"

================
File: packages/frameworks-template/test/test-setup.ts
================


================
File: packages/frameworks-template/package.json
================
{
  "name": "@auth/frameworks-template",
  "description": "Authentication for <framework-name>.",
  "version": "0.3.0",
  "private": true,
  "type": "module",
  "files": [
    "*.js",
    "*.d.ts*",
    "lib",
    "providers",
    "src",
    "!vitest.config.js"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js"
    },
    "./providers": {
      "types": "./providers/index.d.ts"
    },
    "./providers/*": {
      "types": "./providers/*.d.ts",
      "import": "./providers/*.js"
    }
  },
  "scripts": {
    "build": "pnpm clean && pnpm providers && tsc",
    "clean": "rm -rf lib index.* src/lib/providers",
    "test": "vitest run",
    "providers": "node ../utils/scripts/providers"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {},
  "keywords": [
    "<framework-name>",
    "oauth",
    "jwt",
    "oauth2",
    "authentication",
    "csrf",
    "oidc",
    "Auth.js"
  ],
  "author": "",
  "contributors": [],
  "repository": "https://github.com/nextauthjs/next-auth",
  "license": "ISC"
}

================
File: packages/frameworks-template/README.md
================
<p align="center">
   <br/>
   <a href="https://authjs.dev" target="_blank"><img width="150px" src="https://authjs.dev/img/logo-sm.png" /></a>
   <h3 align="center"><framework-name> Auth</a></h3>
   <h4 align="center">Authentication for <framework-name>.</h4>
   <p align="center" style="align: center;">
      <a href="https://npm.im/next-auth">
        <img src="https://img.shields.io/badge/TypeScript-blue?style=flat-square" alt="TypeScript" />
      </a>
      <a href="https://npm.im/@auth/<framework-id>">
        <img alt="npm" src="https://img.shields.io/npm/v/@auth/<framework-id>?color=green&label=@auth/<framework-id>&style=flat-square">
      </a>
      <a href="https://www.npmtrends.com/@auth/<framework-id>">
        <img src="https://img.shields.io/npm/dm/@auth/<framework-id>?label=%20downloads&style=flat-square" alt="Downloads" />
      </a>
      <a href="https://github.com/nextauthjs/next-auth/stargazers">
        <img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square" alt="GitHub Stars" />
      </a>
   </p>
</p>

---

Check out the documentation at [<framework-id>.authjs.dev](https://<framework-id>.authjs.dev).

================
File: packages/frameworks-template/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "outDir": ".",
    "rootDir": "src"
  },
  "include": ["src/**/*"],
  "exclude": ["*.js", "*.d.ts", "lib"]
}

================
File: packages/frameworks-template/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').MarkdownTheme}
 */

================
File: packages/next-auth/src/lib/actions.ts
================
import { Auth, raw, skipCSRFCheck, createActionURL } from "@auth/core"
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import { headers as nextHeaders, cookies } from "next/headers"
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import { redirect } from "next/navigation"
import type { NextAuthConfig } from "./index.js"
import type { NextAuthResult, Session } from "../index.js"
import type { ProviderType } from "@auth/core/providers"
type SignInParams = Parameters<NextAuthResult["signIn"]>
export async function signIn(
  provider: SignInParams[0],
  options: SignInParams[1] = {},
  authorizationParams: SignInParams[2],
  config: NextAuthConfig
)
⋮----
// @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
⋮----
// NOTE: if for some unexpected reason the responseUrl is not set,
// we redirect to the original url
⋮----
type SignOutParams = Parameters<NextAuthResult["signOut"]>
export async function signOut(
  options: SignOutParams[0],
  config: NextAuthConfig
)
⋮----
// @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
⋮----
type UpdateParams = Parameters<NextAuthResult["unstable_update"]>
export async function update(
  data: UpdateParams[0],
  config: NextAuthConfig
): Promise<Session | null>
⋮----
// @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default

================
File: packages/next-auth/src/lib/client.ts
================
import type { ProviderId, ProviderType } from "@auth/core/providers"
import type { LoggerInstance, Session } from "@auth/core/types"
import { AuthError } from "@auth/core/errors"
/** @todo */
class ClientFetchError extends AuthError
/** @todo */
export class ClientSessionError extends AuthError
export interface AuthClientConfig {
  baseUrl: string
  basePath: string
  baseUrlServer: string
  basePathServer: string
  /** Stores last session response */
  _session?: Session | null | undefined
  /** Used for timestamp since last sycned (in seconds) */
  _lastSync: number
  /**
   * Stores the `SessionProvider`'s session update method to be able to
   * trigger session updates from places like `signIn` or `signOut`
   */
  _getSession: (...args: any[]) => any
}
⋮----
/** Stores last session response */
⋮----
/** Used for timestamp since last sycned (in seconds) */
⋮----
/**
   * Stores the `SessionProvider`'s session update method to be able to
   * trigger session updates from places like `signIn` or `signOut`
   */
⋮----
export interface UseSessionOptions<R extends boolean> {
  required: R
  /** Defaults to `signIn` */
  onUnauthenticated?: () => void
}
⋮----
/** Defaults to `signIn` */
⋮----
export interface ClientSafeProvider {
  id: ProviderId
  name: string
  type: ProviderType
  signinUrl: string
  callbackUrl: string
  redirectTo: string
}
export interface SignInOptions<Redirect extends boolean = true>
  extends Record<string, unknown> {
  /** @deprecated Use `redirectTo` instead. */
  callbackUrl?: string
  /**
   * Specify where the user should be redirected to after a successful signin.
   *
   * By default, it is the page the sign-in was initiated from.
   */
  redirectTo?: string
  /**
   * You might want to deal with the signin response on the same page, instead of redirecting to another page.
   * For example, if an error occurs (like wrong credentials given by the user), you might want to show an inline error message on the input field.
   *
   * For this purpose, you can set this to option `redirect: false`.
   */
  redirect?: Redirect
}
⋮----
/** @deprecated Use `redirectTo` instead. */
⋮----
/**
   * Specify where the user should be redirected to after a successful signin.
   *
   * By default, it is the page the sign-in was initiated from.
   */
⋮----
/**
   * You might want to deal with the signin response on the same page, instead of redirecting to another page.
   * For example, if an error occurs (like wrong credentials given by the user), you might want to show an inline error message on the input field.
   *
   * For this purpose, you can set this to option `redirect: false`.
   */
⋮----
export interface SignInResponse {
  error: string | undefined
  code: string | undefined
  status: number
  ok: boolean
  url: string | null
}
/**
 * Match `inputType` of `new URLSearchParams(inputType)`
 * @internal
 */
export type SignInAuthorizationParams =
  | string
  | string[][]
  | Record<string, string>
  | URLSearchParams
/** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1) */
export interface SignOutResponse {
  url: string
}
export interface SignOutParams<Redirect extends boolean = true> {
  /** @deprecated Use `redirectTo` instead. */
  callbackUrl?: string
  /**
   * If you pass `redirect: false`, the page will not reload.
   * The session will be deleted, and `useSession` is notified, so any indication about the user will be shown as logged out automatically.
   * It can give a very nice experience for the user.
   */
  redirectTo?: string
  /** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1 */
  redirect?: Redirect
}
⋮----
/** @deprecated Use `redirectTo` instead. */
⋮----
/**
   * If you pass `redirect: false`, the page will not reload.
   * The session will be deleted, and `useSession` is notified, so any indication about the user will be shown as logged out automatically.
   * It can give a very nice experience for the user.
   */
⋮----
/** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option-1 */
⋮----
/**
 * If you have session expiry times of 30 days (the default) or more, then you probably don't need to change any of the default options.
 *
 * However, if you need to customize the session behavior and/or are using short session expiry times, you can pass options to the provider to customize the behavior of the {@link useSession} hook.
 */
export interface SessionProviderProps {
  children: React.ReactNode
  session?: Session | null
  baseUrl?: string
  basePath?: string
  /**
   * A time interval (in seconds) after which the session will be re-fetched.
   * If set to `0` (default), the session is not polled.
   */
  refetchInterval?: number
  /**
   * `SessionProvider` automatically refetches the session when the user switches between windows.
   * This option activates this behaviour if set to `true` (default).
   */
  refetchOnWindowFocus?: boolean
  /**
   * Set to `false` to stop polling when the device has no internet access offline (determined by `navigator.onLine`)
   *
   * [`navigator.onLine` documentation](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine)
   */
  refetchWhenOffline?: false
}
⋮----
/**
   * A time interval (in seconds) after which the session will be re-fetched.
   * If set to `0` (default), the session is not polled.
   */
⋮----
/**
   * `SessionProvider` automatically refetches the session when the user switches between windows.
   * This option activates this behaviour if set to `true` (default).
   */
⋮----
/**
   * Set to `false` to stop polling when the device has no internet access offline (determined by `navigator.onLine`)
   *
   * [`navigator.onLine` documentation](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine)
   */
⋮----
// ------------------------ Internal ------------------------
/**
 * If passed 'appContext' via getInitialProps() in _app.js
 * then get the req object from ctx and use that for the
 * req value to allow `fetchData` to
 * work seemlessly in getInitialProps() on server side
 * pages *and* in _app.js.
 * @internal
 */
export async function fetchData<T = any>(
  path: string,
  __NEXTAUTH: AuthClientConfig,
  logger: LoggerInstance,
  req: any = {}
): Promise<T | null>
/** @internal */
export function apiBaseUrl(__NEXTAUTH: AuthClientConfig)
⋮----
// Return absolute path when called server side
⋮----
// Return relative path when called client side
⋮----
/** @internal  */
export function useOnline()
⋮----
const setOnline = ()
const setOffline = ()
⋮----
/**
 * Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC.
 * @internal
 */
export function now()
/**
 * Returns an `URL` like object to make requests/redirects from server-side
 * @internal
 */
export function parseUrl(url?: string):
⋮----
/** @default "http://localhost:3000" */
⋮----
/** @default "localhost:3000" */
⋮----
/** @default "/api/auth" */
⋮----
/** @default "http://localhost:3000/api/auth" */
⋮----
/** @default "http://localhost:3000/api/auth" */
⋮----
// Remove trailing slash

================
File: packages/next-auth/src/lib/env.ts
================
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import { NextRequest } from "next/server"
import type { NextAuthConfig } from "./index.js"
import { setEnvDefaults as coreSetEnvDefaults } from "@auth/core"
/** If `NEXTAUTH_URL` or `AUTH_URL` is defined, override the request's URL. */
export function reqWithEnvURL(req: NextRequest): NextRequest
/**
 * For backwards compatibility, `next-auth` checks for `NEXTAUTH_URL`
 * and the `basePath` by default is `/api/auth` instead of `/auth`
 * (which is the default for all other Auth.js integrations).
 *
 * For the same reason, `NEXTAUTH_SECRET` is also checked.
 */
export function setEnvDefaults(config: NextAuthConfig)
⋮----
// Catching and swallowing potential URL parsing errors, we'll fall
// back to `/api/auth` below.

================
File: packages/next-auth/src/lib/index.ts
================
import { Auth, createActionURL, type AuthConfig } from "@auth/core"
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import { headers } from "next/headers"
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import { NextResponse } from "next/server"
import { reqWithEnvURL } from "./env.js"
import type { AuthAction, Awaitable, Session } from "@auth/core/types"
import type {
  GetServerSidePropsContext,
  NextApiRequest,
  NextApiResponse,
} from "next"
import type { AppRouteHandlerFn } from "./types.js"
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import type { NextFetchEvent, NextMiddleware, NextRequest } from "next/server"
/** Configure NextAuth.js. */
export interface NextAuthConfig extends Omit<AuthConfig, "raw"> {
  /**
   * Callbacks are asynchronous functions you can use to control what happens when an auth-related action is performed.
   * Callbacks **allow you to implement access controls without a database** or to **integrate with external databases or APIs**.
   */
  callbacks?: AuthConfig["callbacks"] & {
    /**
     * Invoked when a user needs authorization, using [Middleware](https://nextjs.org/docs/advanced-features/middleware).
     *
     * You can override this behavior by returning a {@link NextResponse}.
     *
     * @example
     * ```ts title="app/auth.ts"
     * async authorized({ request, auth }) {
     *   const url = request.nextUrl
     *
     *   if(request.method === "POST") {
     *     const { authToken } = (await request.json()) ?? {}
     *     // If the request has a valid auth token, it is authorized
     *     const valid = await validateAuthToken(authToken)
     *     if(valid) return true
     *     return NextResponse.json("Invalid auth token", { status: 401 })
     *   }
     *
     *   // Logged in users are authenticated, otherwise redirect to login page
     *   return !!auth.user
     * }
     * ```
     *
     * :::warning
     * If you are returning a redirect response, make sure that the page you are redirecting to is not protected by this callback,
     * otherwise you could end up in an infinite redirect loop.
     * :::
     */
    authorized?: (params: {
      /** The request to be authorized. */
      request: NextRequest
      /** The authenticated user or token, if any. */
      auth: Session | null
    }) => Awaitable<boolean | NextResponse | Response | undefined>
  }
}
⋮----
/**
   * Callbacks are asynchronous functions you can use to control what happens when an auth-related action is performed.
   * Callbacks **allow you to implement access controls without a database** or to **integrate with external databases or APIs**.
   */
⋮----
/**
     * Invoked when a user needs authorization, using [Middleware](https://nextjs.org/docs/advanced-features/middleware).
     *
     * You can override this behavior by returning a {@link NextResponse}.
     *
     * @example
     * ```ts title="app/auth.ts"
     * async authorized({ request, auth }) {
     *   const url = request.nextUrl
     *
     *   if(request.method === "POST") {
     *     const { authToken } = (await request.json()) ?? {}
     *     // If the request has a valid auth token, it is authorized
     *     const valid = await validateAuthToken(authToken)
     *     if(valid) return true
     *     return NextResponse.json("Invalid auth token", { status: 401 })
     *   }
     *
     *   // Logged in users are authenticated, otherwise redirect to login page
     *   return !!auth.user
     * }
     * ```
     *
     * :::warning
     * If you are returning a redirect response, make sure that the page you are redirecting to is not protected by this callback,
     * otherwise you could end up in an infinite redirect loop.
     * :::
     */
⋮----
/** The request to be authorized. */
⋮----
/** The authenticated user or token, if any. */
⋮----
async function getSession(headers: Headers, config: NextAuthConfig)
⋮----
// @ts-expect-error `x-forwarded-proto` is not nullable, next.js sets it by default
⋮----
// Since we are server-side, we don't need to filter out the session data
// See https://authjs.dev/getting-started/migrating-to-v5#authenticating-server-side
// TODO: Taint the session data to prevent accidental leakage to the client
// https://react.dev/reference/react/experimental_taintObjectReference
async session(...args)
⋮----
// If the user defined a custom session callback, use that instead
⋮----
export interface NextAuthRequest extends NextRequest {
  auth: Session | null
}
export type NextAuthMiddleware = (
  request: NextAuthRequest,
  event: NextFetchEvent
) => ReturnType<NextMiddleware>
export type WithAuthArgs =
  | [NextAuthRequest, any]
  | [NextAuthMiddleware]
  | [AppRouteHandlerFn]
  | [NextApiRequest, NextApiResponse]
  | [GetServerSidePropsContext]
  | []
function isReqWrapper(arg: any): arg is NextAuthMiddleware | AppRouteHandlerFn
export function initAuth(
  config:
    | NextAuthConfig
    | ((request: NextRequest | undefined) => Awaitable<NextAuthConfig>),
  onLazyLoad?: (config: NextAuthConfig) => void // To set the default env vars
)
⋮----
onLazyLoad?: (config: NextAuthConfig) => void // To set the default env vars
⋮----
// React Server Components
⋮----
const _config = await config(undefined) // Review: Should we pass headers() here instead?
⋮----
// middleware.ts inline
// export { auth as default } from "auth"
⋮----
// args[0] is supposed to be NextRequest but the instanceof check is failing.
⋮----
// middleware.ts wrapper/route.ts
// import { auth } from "auth"
// export default auth((req) => { console.log(req.auth) }})
⋮----
// API Routes, getServerSideProps
⋮----
// @ts-expect-error -- request is NextRequest
⋮----
// React Server Components
⋮----
// middleware.ts inline
// export { auth as default } from "auth"
⋮----
// middleware.ts wrapper/route.ts
// import { auth } from "auth"
// export default auth((req) => { console.log(req.auth) }})
⋮----
// API Routes, getServerSideProps
⋮----
// @ts-expect-error
⋮----
async function handleAuth(
  args: Parameters<NextMiddleware | AppRouteHandlerFn>,
  config: NextAuthConfig,
  userMiddlewareOrRoute?: NextAuthMiddleware | AppRouteHandlerFn
)
⋮----
// User returned a custom response, like redirecting to a page or 401, respect it
⋮----
// If the user is redirecting to the same NextAuth.js action path as the current request,
// don't allow the redirect to prevent an infinite loop
⋮----
// Execute user's middleware/handler with the augmented request
⋮----
// Redirect to signin page by default if not authorized
⋮----
// Preserve cookies from the session response
⋮----
function isSameAuthAction(
  requestPath: string,
  redirectPath: string,
  config: NextAuthConfig
)

================
File: packages/next-auth/src/lib/types.ts
================
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import type { NextRequest } from "next/server"
/**
 * AppRouteHandlerFnContext is the context that is passed to the handler as the
 * second argument.
 */
export type AppRouteHandlerFnContext = {
  params: Promise<any>
}
/**
 * Handler function for app routes. If a non-Response value is returned, an error
 * will be thrown.
 */
export type AppRouteHandlerFn = (
  /**
   * Incoming request object.
   */
  req: NextRequest,
  /**
   * Context properties on the request (including the parameters if this was a
   * dynamic route).
   */
  ctx: AppRouteHandlerFnContext
) => void | Response | Promise<void | Response>
⋮----
/**
   * Incoming request object.
   */
⋮----
/**
   * Context properties on the request (including the parameters if this was a
   * dynamic route).
   */
⋮----
export type AppRouteHandlers = Record<
  "GET" | "POST",
  (req: NextRequest) => Promise<Response>
>

================
File: packages/next-auth/src/adapters.ts
================


================
File: packages/next-auth/src/index.ts
================
/**
 * _If you are looking to migrate from v4, visit the [Upgrade Guide (v5)](https://authjs.dev/getting-started/migrating-to-v5)._
 *
 * ## Installation
 *
 * ```bash npm2yarn
 * npm install next-auth@beta
 * ```
 *
 * ## Environment variable inference
 *
 * `NEXTAUTH_URL` and `NEXTAUTH_SECRET` have been inferred since v4.
 *
 * Since NextAuth.js v5 can also automatically infer environment variables that are prefixed with `AUTH_`.
 *
 * For example `AUTH_GITHUB_ID` and `AUTH_GITHUB_SECRET` will be used as the `clientId` and `clientSecret` options for the GitHub provider.
 *
 * :::tip
 * The environment variable name inferring has the following format for OAuth providers: `AUTH_{PROVIDER}_{ID|SECRET}`.
 *
 * `PROVIDER` is the uppercase snake case version of the provider's id, followed by either `ID` or `SECRET` respectively.
 * :::
 *
 * `AUTH_SECRET` and `AUTH_URL` are also aliased for `NEXTAUTH_SECRET` and `NEXTAUTH_URL` for consistency.
 *
 * To add social login to your app, the configuration becomes:
 *
 * ```ts title="auth.ts"
 * import NextAuth from "next-auth"
 * import GitHub from "next-auth/providers/github"
 * export const { handlers, auth } = NextAuth({ providers: [ GitHub ] })
 * ```
 *
 * And the `.env.local` file:
 *
 * ```sh title=".env.local"
 * AUTH_GITHUB_ID=...
 * AUTH_GITHUB_SECRET=...
 * AUTH_SECRET=...
 * ```
 *
 * :::tip
 * In production, `AUTH_SECRET` is a required environment variable - if not set, NextAuth.js will throw an error. See [MissingSecretError](https://authjs.dev/reference/core/errors#missingsecret) for more details.
 * :::
 *
 * If you need to override the default values for a provider, you can still call it as a function `GitHub({...})` as before.
 *
 * ## Lazy initialization
 * You can also initialize NextAuth.js lazily (previously known as advanced intialization), which allows you to access the request context in the configuration in some cases, like Route Handlers, Middleware, API Routes or `getServerSideProps`.
 * The above example becomes:
 *
 * ```ts title="auth.ts"
 * import NextAuth from "next-auth"
 * import GitHub from "next-auth/providers/github"
 * export const { handlers, auth } = NextAuth(req => {
 *  if (req) {
 *   console.log(req) // do something with the request
 *  }
 *  return { providers: [ GitHub ] }
 * })
 * ```
 *
 * :::tip
 * This is useful if you want to customize the configuration based on the request, for example, to add a different provider in staging/dev environments.
 * :::
 *
 * @module next-auth
 */
import { Auth, customFetch } from "@auth/core"
import { reqWithEnvURL, setEnvDefaults } from "./lib/env.js"
import { initAuth } from "./lib/index.js"
import { signIn, signOut, update } from "./lib/actions.js"
import type { Awaitable, Session } from "@auth/core/types"
import type { ProviderId } from "@auth/core/providers"
import type {
  GetServerSidePropsContext,
  NextApiRequest,
  NextApiResponse,
} from "next"
import type {
  AppRouteHandlerFn,
  AppRouteHandlerFnContext,
} from "./lib/types.js"
// @ts-expect-error Next.js does not yet correctly use the `package.json#exports` field
import type { NextRequest } from "next/server"
import type { NextAuthConfig, NextAuthRequest } from "./lib/index.js"
⋮----
type AppRouteHandlers = Record<
  "GET" | "POST",
  (req: NextRequest) => Promise<Response>
>
⋮----
/**
 * The result of invoking {@link NextAuth|NextAuth}, initialized with the {@link NextAuthConfig}.
 * It contains methods to set up and interact with NextAuth.js in your Next.js app.
 */
export interface NextAuthResult {
  /**
   * The NextAuth.js [Route Handler](https://beta.nextjs.org/docs/routing/route-handlers) methods. These are used to expose an endpoint for OAuth/Email providers,
   * as well as REST API endpoints (such as `/api/auth/session`) that can be contacted from the client.
   *
   * After initializing NextAuth.js in `auth.ts`,
   * re-export these methods.
   *
   * In `app/api/auth/[...nextauth]/route.ts`:
   *
   * ```ts title="app/api/auth/[...nextauth]/route.ts"
   * export { GET, POST } from "../../../../auth"
   * export const runtime = "edge" // optional
   * ```
   * Then `auth.ts`:
   * ```ts title="auth.ts"
   * // ...
   * export const { handlers: { GET, POST }, auth } = NextAuth({...})
   * ```
   */
  handlers: AppRouteHandlers
  /**
   * A universal method to interact with NextAuth.js in your Next.js app.
   * After initializing NextAuth.js in `auth.ts`, use this method in Middleware, Server Components, Route Handlers (`app/`), and Edge or Node.js API Routes (`pages/`).
   *
   * #### In Middleware
   *
   * :::info
   * Adding `auth` to your Middleware is optional, but recommended to keep the user session alive.
   * :::
   *
   * Authentication is done by the {@link NextAuthConfig.callbacks|callbacks.authorized} callback.
   * @example
   * ```ts title="middleware.ts"
   * export { auth as middleware } from "./auth"
   * ```
   *
   * Alternatively you can wrap your own middleware with `auth`, where `req` is extended with `auth`:
   * @example
   * ```ts title="middleware.ts"
   * import { auth } from "./auth"
   * export default auth((req) => {
   *   // req.auth
   * })
   * ```
   *
   * ```ts
   * // Optionally, don't invoke Middleware on some paths
   * // Read more: https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher
   * export const config = {
   *   matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
   * }
   * ```
   *
   * #### In Server Components
   *
   * @example
   * ```ts title="app/page.ts"
   * import { auth } from "../auth"
   *
   * export default async function Page() {
   *   const { user } = await auth()
   *   return <p>Hello {user?.name}</p>
   * }
   * ```
   *
   * #### In Route Handlers
   * @example
   * ```ts title="app/api/route.ts"
   * import { auth } from "../../auth"
   *
   * export const POST = auth((req) => {
   *   // req.auth
   * })
   * ```
   *
   * #### In Edge API Routes
   *
   * @example
   * ```ts title="pages/api/protected.ts"
   * import { auth } from "../../auth"
   *
   * export default auth((req) => {
   *   // req.auth
   * })
   *
   * export const config = { runtime: "edge" }
   * ```
   *
   * #### In API Routes
   *
   * @example
   * ```ts title="pages/api/protected.ts"
   * import { auth } from "../auth"
   * import type { NextApiRequest, NextApiResponse } from "next"
   *
   * export default async (req: NextApiRequest, res: NextApiResponse) => {
   *   const session = await auth(req, res)
   *   if (session) {
   *     // Do something with the session
   *     return res.json("This is protected content.")
   *   }
   *   res.status(401).json("You must be signed in.")
   * }
   * ```
   *
   * #### In `getServerSideProps`
   *
   * @example
   * ```ts title="pages/protected-ssr.ts"
   * import { auth } from "../auth"
   *
   * export const getServerSideProps: GetServerSideProps = async (context) => {
   *   const session = await auth(context)
   *
   *   if (session) {
   *     // Do something with the session
   *     return { props: { session, content: (await res.json()).content } }
   *   }
   *
   *   return { props: {} }
   * }
   * ```
   */
  auth: ((
    ...args: [NextApiRequest, NextApiResponse]
  ) => Promise<Session | null>) &
    ((...args: []) => Promise<Session | null>) &
    ((...args: [GetServerSidePropsContext]) => Promise<Session | null>) &
    ((
      ...args: [
        (
          req: NextAuthRequest,
          ctx: AppRouteHandlerFnContext
        ) => ReturnType<AppRouteHandlerFn>,
      ]
    ) => AppRouteHandlerFn)
  /**
   * Sign in with a provider. If no provider is specified, the user will be redirected to the sign in page.
   *
   * By default, the user is redirected to the current page after signing in. You can override this behavior by setting the `redirectTo` option with a relative path.
   *
   * @example
   * ```ts title="app/layout.tsx"
   * import { signIn } from "../auth"
   *
   * export default function Layout() {
   *  return (
   *   <form action={async () => {
   *     "use server"
   *     await signIn("github")
   *   }}>
   *    <button>Sign in with GitHub</button>
   *   </form>
   * )
   * ```
   *
   * If an error occurs during signin, an instance of {@link AuthError} will be thrown. You can catch it like this:
   * ```ts title="app/layout.tsx"
   * import { AuthError } from "next-auth"
   * import { signIn } from "../auth"
   *
   * export default function Layout() {
   *  return (
   *    <form action={async (formData) => {
   *      "use server"
   *      try {
   *        await signIn("credentials", formData)
   *     } catch(error) {
   *       if (error instanceof AuthError) // Handle auth errors
   *       throw error // Rethrow all other errors
   *     }
   *    }}>
   *     <button>Sign in</button>
   *   </form>
   *  )
   * }
   * ```
   *
   */
  signIn: <P extends ProviderId, R extends boolean = true>(
    /** Provider to sign in to */
    provider?: P, // See: https://github.com/microsoft/TypeScript/issues/29729
    options?:
      | FormData
      | ({
          /** The relative path to redirect to after signing in. By default, the user is redirected to the current page. */
          redirectTo?: string
          /** If set to `false`, the `signIn` method will return the URL to redirect to instead of redirecting automatically. */
          redirect?: R
        } & Record<string, any>),
    authorizationParams?:
      | string[][]
      | Record<string, string>
      | string
      | URLSearchParams
  ) => Promise<R extends false ? any : never>
  /**
   * Sign out the user. If the session was created using a database strategy, the session will be removed from the database and the related cookie is invalidated.
   * If the session was created using a JWT, the cookie is invalidated.
   *
   * By default the user is redirected to the current page after signing out. You can override this behavior by setting the `redirectTo` option with a relative path.
   *
   * @example
   * ```ts title="app/layout.tsx"
   * import { signOut } from "../auth"
   *
   * export default function Layout() {
   *  return (
   *   <form action={async () => {
   *     "use server"
   *     await signOut()
   *   }}>
   *    <button>Sign out</button>
   *   </form>
   * )
   * ```
   *
   *
   */
  signOut: <R extends boolean = true>(options?: {
    /** The relative path to redirect to after signing out. By default, the user is redirected to the current page. */
    redirectTo?: string
    /** If set to `false`, the `signOut` method will return the URL to redirect to instead of redirecting automatically. */
    redirect?: R
  }) => Promise<R extends false ? any : never>
  unstable_update: (
    data: Partial<Session | { user: Partial<Session["user"]> }>
  ) => Promise<Session | null>
}
⋮----
/**
   * The NextAuth.js [Route Handler](https://beta.nextjs.org/docs/routing/route-handlers) methods. These are used to expose an endpoint for OAuth/Email providers,
   * as well as REST API endpoints (such as `/api/auth/session`) that can be contacted from the client.
   *
   * After initializing NextAuth.js in `auth.ts`,
   * re-export these methods.
   *
   * In `app/api/auth/[...nextauth]/route.ts`:
   *
   * ```ts title="app/api/auth/[...nextauth]/route.ts"
   * export { GET, POST } from "../../../../auth"
   * export const runtime = "edge" // optional
   * ```
   * Then `auth.ts`:
   * ```ts title="auth.ts"
   * // ...
   * export const { handlers: { GET, POST }, auth } = NextAuth({...})
   * ```
   */
⋮----
/**
   * A universal method to interact with NextAuth.js in your Next.js app.
   * After initializing NextAuth.js in `auth.ts`, use this method in Middleware, Server Components, Route Handlers (`app/`), and Edge or Node.js API Routes (`pages/`).
   *
   * #### In Middleware
   *
   * :::info
   * Adding `auth` to your Middleware is optional, but recommended to keep the user session alive.
   * :::
   *
   * Authentication is done by the {@link NextAuthConfig.callbacks|callbacks.authorized} callback.
   * @example
   * ```ts title="middleware.ts"
   * export { auth as middleware } from "./auth"
   * ```
   *
   * Alternatively you can wrap your own middleware with `auth`, where `req` is extended with `auth`:
   * @example
   * ```ts title="middleware.ts"
   * import { auth } from "./auth"
   * export default auth((req) => {
   *   // req.auth
   * })
   * ```
   *
   * ```ts
   * // Optionally, don't invoke Middleware on some paths
   * // Read more: https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher
   * export const config = {
   *   matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
   * }
   * ```
   *
   * #### In Server Components
   *
   * @example
   * ```ts title="app/page.ts"
   * import { auth } from "../auth"
   *
   * export default async function Page() {
   *   const { user } = await auth()
   *   return <p>Hello {user?.name}</p>
   * }
   * ```
   *
   * #### In Route Handlers
   * @example
   * ```ts title="app/api/route.ts"
   * import { auth } from "../../auth"
   *
   * export const POST = auth((req) => {
   *   // req.auth
   * })
   * ```
   *
   * #### In Edge API Routes
   *
   * @example
   * ```ts title="pages/api/protected.ts"
   * import { auth } from "../../auth"
   *
   * export default auth((req) => {
   *   // req.auth
   * })
   *
   * export const config = { runtime: "edge" }
   * ```
   *
   * #### In API Routes
   *
   * @example
   * ```ts title="pages/api/protected.ts"
   * import { auth } from "../auth"
   * import type { NextApiRequest, NextApiResponse } from "next"
   *
   * export default async (req: NextApiRequest, res: NextApiResponse) => {
   *   const session = await auth(req, res)
   *   if (session) {
   *     // Do something with the session
   *     return res.json("This is protected content.")
   *   }
   *   res.status(401).json("You must be signed in.")
   * }
   * ```
   *
   * #### In `getServerSideProps`
   *
   * @example
   * ```ts title="pages/protected-ssr.ts"
   * import { auth } from "../auth"
   *
   * export const getServerSideProps: GetServerSideProps = async (context) => {
   *   const session = await auth(context)
   *
   *   if (session) {
   *     // Do something with the session
   *     return { props: { session, content: (await res.json()).content } }
   *   }
   *
   *   return { props: {} }
   * }
   * ```
   */
⋮----
/**
   * Sign in with a provider. If no provider is specified, the user will be redirected to the sign in page.
   *
   * By default, the user is redirected to the current page after signing in. You can override this behavior by setting the `redirectTo` option with a relative path.
   *
   * @example
   * ```ts title="app/layout.tsx"
   * import { signIn } from "../auth"
   *
   * export default function Layout() {
   *  return (
   *   <form action={async () => {
   *     "use server"
   *     await signIn("github")
   *   }}>
   *    <button>Sign in with GitHub</button>
   *   </form>
   * )
   * ```
   *
   * If an error occurs during signin, an instance of {@link AuthError} will be thrown. You can catch it like this:
   * ```ts title="app/layout.tsx"
   * import { AuthError } from "next-auth"
   * import { signIn } from "../auth"
   *
   * export default function Layout() {
   *  return (
   *    <form action={async (formData) => {
   *      "use server"
   *      try {
   *        await signIn("credentials", formData)
   *     } catch(error) {
   *       if (error instanceof AuthError) // Handle auth errors
   *       throw error // Rethrow all other errors
   *     }
   *    }}>
   *     <button>Sign in</button>
   *   </form>
   *  )
   * }
   * ```
   *
   */
⋮----
/** Provider to sign in to */
provider?: P, // See: https://github.com/microsoft/TypeScript/issues/29729
⋮----
/** The relative path to redirect to after signing in. By default, the user is redirected to the current page. */
⋮----
/** If set to `false`, the `signIn` method will return the URL to redirect to instead of redirecting automatically. */
⋮----
/**
   * Sign out the user. If the session was created using a database strategy, the session will be removed from the database and the related cookie is invalidated.
   * If the session was created using a JWT, the cookie is invalidated.
   *
   * By default the user is redirected to the current page after signing out. You can override this behavior by setting the `redirectTo` option with a relative path.
   *
   * @example
   * ```ts title="app/layout.tsx"
   * import { signOut } from "../auth"
   *
   * export default function Layout() {
   *  return (
   *   <form action={async () => {
   *     "use server"
   *     await signOut()
   *   }}>
   *    <button>Sign out</button>
   *   </form>
   * )
   * ```
   *
   *
   */
⋮----
/** The relative path to redirect to after signing out. By default, the user is redirected to the current page. */
⋮----
/** If set to `false`, the `signOut` method will return the URL to redirect to instead of redirecting automatically. */
⋮----
/**
 *  Initialize NextAuth.js.
 *
 *  @example
 * ```ts title="auth.ts"
 * import NextAuth from "next-auth"
 * import GitHub from "@auth/core/providers/github"
 *
 * export const { handlers, auth } = NextAuth({ providers: [GitHub] })
 * ```
 *
 * Lazy initialization:
 *
 * @example
 * ```ts title="auth.ts"
 * import NextAuth from "next-auth"
 * import GitHub from "@auth/core/providers/github"
 *
 * export const { handlers, auth } = NextAuth(async (req) => {
 *   console.log(req) // do something with the request
 *   return {
 *     providers: [GitHub],
 *   },
 * })
 * ```
 */
export default function NextAuth(
  config:
    | NextAuthConfig
    | ((request: NextRequest | undefined) => Awaitable<NextAuthConfig>)
): NextAuthResult
⋮----
const httpHandler = async (req: NextRequest) =>
⋮----
// @ts-expect-error
⋮----
// @ts-expect-error

================
File: packages/next-auth/src/jwt.ts
================
/**
 * :::warning Not recommended
 * In NextAuth.js v5 or newer, we recommend other authentication methods server-side. Read more at: https://authjs.dev/getting-started/migrating-to-v5#authenticating-server-side
 * :::
 *
 * @module jwt
 */

================
File: packages/next-auth/src/middleware.ts
================
/**
 * :::warning Deprecated
 * This module is replaced in v5. Read more at: https://authjs.dev/getting-started/migrating-to-v5#authenticating-server-side
 * :::
 *
 * @module middleware
 */

================
File: packages/next-auth/src/next.ts
================
/**
 * :::warning Deprecated
 * This module is replaced in v5. Read more at: https://authjs.dev/getting-started/migrating-to-v5#authenticating-server-side
 * :::
 *
 * @module next
 */

================
File: packages/next-auth/src/react.tsx
================
/**
 *
 * NextAuth.js is the official integration of Auth.js for Next.js applications. It supports both
 * [Client Components](https://nextjs.org/docs/app/building-your-application/rendering/client-components) and the
 * [Pages Router](https://nextjs.org/docs/pages). It includes methods for signing in, signing out, hooks, and a React
 * Context provider to wrap your application and make session data available anywhere.
 *
 * For use in [Server Actions](https://nextjs.org/docs/app/api-reference/functions/server-actions), check out [these methods](https://authjs.dev/guides/upgrade-to-v5#methods)
 *
 * @module react
 */
⋮----
import {
  apiBaseUrl,
  ClientSessionError,
  fetchData,
  now,
  parseUrl,
  useOnline,
} from "./lib/client.js"
import type { ProviderId } from "@auth/core/providers"
import type { LoggerInstance, Session } from "@auth/core/types"
import type {
  AuthClientConfig,
  ClientSafeProvider,
  SessionProviderProps,
  SignInAuthorizationParams,
  SignInOptions,
  SignInResponse,
  SignOutParams,
  SignOutResponse,
  UseSessionOptions,
} from "./lib/client.js"
// TODO: Remove/move to core?
⋮----
// This behaviour mirrors the default behaviour for getting the site name that
// happens server side in server/index.js
// 1. An empty value is legitimate when the code is being invoked client side as
//    relative URLs are valid in that context and so defaults to empty.
// 2. When invoked server side the value is picked up from an environment
//    variable and defaults to 'http://localhost:3000'.
⋮----
// https://github.com/nextauthjs/next-auth/pull/10762
⋮----
function getNewBroadcastChannel()
function broadcast()
// TODO:
⋮----
/** @todo Document */
export type UpdateSession = (data?: any) => Promise<Session | null>
/**
 * useSession() returns an object containing three things: a method called {@link UpdateSession|update}, `data` and `status`.
 */
export type SessionContextValue<R extends boolean = false> = R extends true
  ?
      | { update: UpdateSession; data: Session; status: "authenticated" }
      | { update: UpdateSession; data: null; status: "loading" }
  :
      | { update: UpdateSession; data: Session; status: "authenticated" }
      | {
          update: UpdateSession
          data: null
          status: "unauthenticated" | "loading"
        }
⋮----
/**
 * React Hook that gives you access to the logged in user's session data and lets you modify it.
 *
 * :::info
 * `useSession` is for client-side use only and when using [Next.js App Router (`app/`)](https://nextjs.org/blog/next-13-4#nextjs-app-router) you should prefer the `auth()` export.
 * :::
 */
export function useSession<R extends boolean>(
  options?: UseSessionOptions<R>
): SessionContextValue<R>
⋮----
// @ts-expect-error Satisfy TS if branch on line below
⋮----
export interface GetSessionParams {
  event?: "storage" | "timer" | "hidden" | string
  triggerEvent?: boolean
  broadcast?: boolean
}
export async function getSession(params?: GetSessionParams)
⋮----
// https://github.com/nextauthjs/next-auth/pull/11470
⋮----
/**
 * Returns the current Cross-Site Request Forgery Token (CSRF Token)
 * required to make requests that changes state. (e.g. signing in or out, or updating the session).
 *
 * [CSRF Prevention: Double Submit Cookie](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie)
 */
export async function getCsrfToken()
export async function getProviders()
/**
 * Initiates a signin flow or sends the user to the signin page listing all possible providers.
 * Handles CSRF protection.
 *
 * @note This method can only be used from Client Components ("use client" or Pages Router).
 * For Server Actions, use the `signIn` method imported from the `auth` config.
 */
export async function signIn(
⋮----
export async function signIn<Redirect extends boolean = true>(
  provider?: ProviderId,
  options?: SignInOptions<Redirect>,
  authorizationParams?: SignInAuthorizationParams
): Promise<SignInResponse | void>
⋮----
return // TODO: Return error if `redirect: false`
⋮----
return // TODO: Return error if `redirect: false`
⋮----
// TODO: Add docs link with explanation
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually
⋮----
/**
 * Initiate a signout, by destroying the current session.
 * Handles CSRF protection.
 *
 * @note This method can only be used from Client Components ("use client" or Pages Router).
 * For Server Actions, use the `signOut` method imported from the `auth` config.
 */
export async function signOut(options?: SignOutParams<true>): Promise<void>
export async function signOut(
export async function signOut<R extends boolean = true>(
  options?: SignOutParams<R>
): Promise<SignOutResponse | void>
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually
⋮----
/**
 * [React Context](https://react.dev/learn/passing-data-deeply-with-context) provider to wrap the app (`pages/`) to make session data available anywhere.
 *
 * When used, the session state is automatically synchronized across all open tabs/windows and they are all updated whenever they gain or lose focus
 * or the state changes (e.g. a user signs in or out) when {@link SessionProviderProps.refetchOnWindowFocus} is `true`.
 *
 * :::info
 * `SessionProvider` is for client-side use only and when using [Next.js App Router (`app/`)](https://nextjs.org/blog/next-13-4#nextjs-app-router) you should prefer the `auth()` export.
 * :::
 */
export function SessionProvider(props: SessionProviderProps)
⋮----
/**
   * If session was `null`, there was an attempt to fetch it,
   * but it failed, but we still treat it as a valid initial value.
   */
⋮----
/** If session was passed, initialize as already synced */
⋮----
/** If session was passed, initialize as not loading */
⋮----
// We should always update if we don't have a client session yet
// or if there are events from other tabs/windows
⋮----
// If there is no time defined for when a session should be considered
// stale, then it's okay to use the value we have until an event is
// triggered which updates it
⋮----
// If the client doesn't have a session then we don't need to call
// the server to check if it does (if they have signed in via another
// tab or window that will come through as a "stroage" event
// event anyway)
⋮----
// Bail out early if the client session is not stale yet
⋮----
// An event or session staleness occurred, update the client session.
⋮----
const handle = () => __NEXTAUTH._getSession(
// Listen for storage events and update session if event fired from
// another window (but suppress firing another event to avoid a loop)
// Fetch new session data but tell it to not to fire another event to
// avoid an infinite loop.
// Note: We could pass session data through and do something like
// `setData(message.data)` but that can cause problems depending
// on how the session object is being used in the client; it is
// more robust to have each window/tab fetch it's own copy of the
// session object rather than share it across instances.
⋮----
// Listen for when the page is visible, if the user switches tabs
// and makes our tab visible again, re-fetch the session, but only if
// this feature is not disabled.
const visibilityHandler = () =>
⋮----
// TODO: Flip this behavior in next major version
⋮----
async update(data: any)
⋮----
// @ts-expect-error

================
File: packages/next-auth/src/webauthn.ts
================
import { apiBaseUrl } from "./lib/client.js"
import { startAuthentication, startRegistration } from "@simplewebauthn/browser"
import { getCsrfToken, getProviders, __NEXTAUTH } from "./react.js"
import type { LoggerInstance } from "@auth/core/types"
import type { WebAuthnOptionsResponseBody } from "@auth/core/types"
import type { ProviderId } from "@auth/core/providers"
import type {
  AuthClientConfig,
  SignInAuthorizationParams,
  SignInOptions,
  SignInResponse,
} from "./lib/client.js"
⋮----
/**
 * Fetch webauthn options from server and prompt user for authentication or registration.
 * Returns either the completed WebAuthn response or an error request.
 */
async function webAuthnOptions(
  providerID: ProviderId,
  nextAuthConfig: AuthClientConfig,
  options?: Omit<SignInOptions, "redirect">
)
⋮----
// @ts-expect-error
⋮----
/**
 * Initiate a WebAuthn signin flow.
 * @see https://authjs.dev/getting-started/authentication/webauthn
 */
export async function signIn(
⋮----
export async function signIn<Redirect extends boolean = true>(
  provider?: ProviderId,
  options?: SignInOptions<Redirect>,
  authorizationParams?: SignInAuthorizationParams
): Promise<SignInResponse | void>
⋮----
return // TODO: Return error if `redirect: false`
⋮----
// TODO: Add docs link with explanation
⋮----
// If url contains a hash, the browser does not reload the page. We reload manually

================
File: packages/next-auth/test/e2e/fixtures/auth.ts
================
export type AuthFixture = {
  environmentUrl: string
  loginUser: string
  loginPassword: string
}
export function createAuthFixture(): AuthFixture
⋮----
get environmentUrl()
get loginUser()
get loginPassword()

================
File: packages/next-auth/test/e2e/fixtures/webApp.ts
================
import {
  expect,
  type BrowserContext,
  type Locator,
  type Page,
} from "@playwright/test"
import { AuthFixture } from "./auth"
import { KeycloakLoginPom } from "../poms/keycloakLoginPom"
/**
 * This fixture provides utility methods for logging in,
 * navigating and clicking common elements.
 */
export class WebApp
⋮----
// locators
⋮----
constructor({
    page,
    context,
    auth,
    keycloak,
  }: {
    page: Page
    context: BrowserContext
    auth: AuthFixture
    keycloak: KeycloakLoginPom
})
async login({
    environmentUrl = this.#auth.environmentUrl,
    username,
    password,
  }: {
    environmentUrl?: string
    username?: string
    password?: string
} =
⋮----
// Go to homepage
⋮----
// On built-in signin page, select Keycloak
⋮----
// Use keycloak POM to login
⋮----
// Ensure we've landed back at the dev app logged in
⋮----
async getSession({
    environmentUrl = this.#auth.environmentUrl,
  }: {
    environmentUrl?: string
} =

================
File: packages/next-auth/test/e2e/helpers/authTest.ts
================
import { test as base } from "@playwright/test"
import { AuthFixture, createAuthFixture } from "../fixtures/auth"
import { WebApp } from "../fixtures/webApp"
import { KeycloakLoginPom } from "../poms/keycloakLoginPom"
type AuthJsWebappFixtures = {
  auth: AuthFixture
  keycloak: KeycloakLoginPom
  webapp: WebApp
}

================
File: packages/next-auth/test/e2e/poms/keycloakLoginPom.ts
================
import { expect, type Locator, type Page } from "@playwright/test"
import type { AuthFixture } from "../fixtures/auth"
export class KeycloakLoginPom
⋮----
constructor(
async login({
    username = this.#auth.loginUser,
    password = this.#auth.loginPassword,
  }: {
    username?: string
    password?: string
} =
isVisible()

================
File: packages/next-auth/test/e2e/tests/api/session.spec.ts
================
import { expect, test } from "../../helpers/authTest"

================
File: packages/next-auth/test/e2e/tests/providers/credentials.spec.ts
================
import { test, expect } from "@playwright/test"
⋮----
// Wait on server-side signout req

================
File: packages/next-auth/test/e2e/tests/providers/keycloak.spec.ts
================
import { test, expect } from "@playwright/test"
⋮----
// Keycloak-hosted login form
⋮----
// Should return to dev app
⋮----
// TODO: Enable the test
⋮----
// Wait on server-side signout req

================
File: packages/next-auth/test/actions.test.ts
================
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest"
import NextAuth, { NextAuthConfig } from "../src"
// TODO: Move the MemoryAdapter to utils package
import { MemoryAdapter } from "../../core/test/memory-adapter"
import Nodemailer from "@auth/core/providers/nodemailer"
⋮----
// @ts-expect-error - not typed
⋮----
// @ts-expect-error - not typed
⋮----
sendVerificationRequest()
⋮----
// ignore

================
File: packages/next-auth/test/env.test.ts
================
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest"
import { NextRequest } from "next/server.js"
import { reqWithEnvURL, setEnvDefaults } from "../lib/env"
import { setEnvDefaults as coreSetEnvDefaults } from "@auth/core"
import type { NextAuthConfig } from "../lib/index.js"

================
File: packages/next-auth/package.json
================
{
  "name": "next-auth",
  "version": "5.0.0-beta.28",
  "description": "Authentication for Next.js",
  "homepage": "https://nextjs.authjs.dev",
  "repository": "https://github.com/nextauthjs/next-auth.git",
  "author": "Balázs Orbán <info@balazsorban.com>",
  "contributors": [
    "Iain Collins <me@iaincollins.com>",
    "Nico Domino <yo@ndo.dev>",
    "Lluis Agusti <hi@llu.lu>",
    "Thang Huu Vu <hi@thvu.dev>"
  ],
  "type": "module",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./index.js",
      "default": "./index.js"
    },
    "./jwt": {
      "types": "./jwt.d.ts",
      "import": "./jwt.js",
      "default": "./jwt.js"
    },
    "./middleware": {
      "types": "./middleware.d.ts",
      "import": "./middleware.js",
      "default": "./middleware.js"
    },
    "./next": {
      "types": "./next.d.ts",
      "import": "./next.js",
      "default": "./next.js"
    },
    "./providers": {
      "types": "./providers/index.d.ts"
    },
    "./adapters": {
      "types": "./adapters.d.ts"
    },
    "./providers/*": {
      "types": "./providers/*.d.ts",
      "import": "./providers/*.js",
      "default": "./providers/*.js"
    },
    "./react": {
      "types": "./react.d.ts",
      "import": "./react.js",
      "default": "./react.js"
    },
    "./webauthn": {
      "types": "./webauthn.d.ts",
      "import": "./webauthn.js",
      "default": "./webauthn.js"
    },
    "./package.json": "./package.json"
  },
  "keywords": [
    "react",
    "nodejs",
    "oauth",
    "jwt",
    "oauth2",
    "authentication",
    "nextjs",
    "csrf",
    "oidc",
    "nextauth"
  ],
  "scripts": {
    "build": "pnpm clean && pnpm providers && tsc",
    "clean": "rm -rf *.js *.d.ts* lib providers",
    "dev": "pnpm providers && tsc -w",
    "test": "vitest run -c ../utils/vitest.config.ts",
    "test:watch": "vitest -c ../utils/vitest.config.ts",
    "test:e2e": "playwright test",
    "providers": "node ../utils/scripts/providers"
  },
  "files": [
    "*.d.ts*",
    "*.js",
    "lib",
    "providers",
    "src"
  ],
  "license": "ISC",
  "dependencies": {
    "@auth/core": "workspace:*"
  },
  "peerDependencies": {
    "@simplewebauthn/browser": "^9.0.1",
    "@simplewebauthn/server": "^9.0.2",
    "next": "^14.0.0-0 || ^15.0.0-0",
    "nodemailer": "^6.6.5",
    "react": "^18.2.0 || ^19.0.0-0"
  },
  "peerDependenciesMeta": {
    "@simplewebauthn/browser": {
      "optional": true
    },
    "@simplewebauthn/server": {
      "optional": true
    },
    "nodemailer": {
      "optional": true
    }
  },
  "devDependencies": {
    "@types/react": "18.0.37",
    "dotenv": "^10.0.0",
    "next": "15.3.1",
    "nodemailer": "^6.9.3",
    "react": "^18.2.0"
  }
}

================
File: packages/next-auth/playwright.config.ts
================
// import { join } from "node:path"
import { defineConfig, devices } from "@playwright/test"
// import * as dotenv from "dotenv"
// Use process.env.PORT by default and fallback to port 3000
⋮----
// Set webServer.url and use.baseURL with the location of the WebServer respecting the correct set port
⋮----
// if (!process.env.CI) {
//   const path = process.env.TEST_DOCKER
//     ? join(process.cwd(), "..", "..", "..", "packages", "core", ".env")
//     : join(process.cwd(), "..", "core", ".env")
//   dotenv.config({ path })
// }
/** See https://playwright.dev/docs/api/class-testconfig. */
⋮----
// Artifacts folder where screenshots, videos, and traces are stored.
⋮----
// Use baseURL so to make navigations relative.
// More information: https://playwright.dev/docs/api/class-testoptions#test-options-base-url
⋮----
// Retry a test if its failing with enabled tracing. This allows you to analyze the DOM, console logs, network traffic etc.
// More information: https://playwright.dev/docs/trace-viewer

================
File: packages/next-auth/README.md
================
<p align="center">
  <a href="https://nextjs.org" target="_blank"><img height="96px" src="https://authjs.dev/img/etc/nextjs.svg" /></a>
  <a href="https://nextjs.authjs.dev" target="_blank"><img height="96px" src="https://authjs.dev/img/logo-sm.png" /></a>
  <h1 align="center">NextAuth.js</h1>
</p>
<p align="center">
  Authentication for Next.js.
</p>
<p align="center">
  <a href="https://www.npmjs.com/package/next-auth"><img src="https://img.shields.io/npm/v/next-auth/beta?style=flat-square&label=latest&color=purple" alt="npm beta release" /></a>
  <a href="https://www.npmtrends.com/next-auth"><img src="https://img.shields.io/npm/dm/next-auth?style=flat-square&color=cyan" alt="Downloads" /></a>
  <a href="https://github.com/nextauthjs/next-auth/stargazers"><img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&color=orange" alt="GitHub Stars" /></a>
  <img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&logoColor=fff&style=flat-square" alt="TypeScript" />
</p>

---

Check out the documentation at [nextjs.authjs.dev](https://nextjs.authjs.dev).

================
File: packages/next-auth/tsconfig.json
================
{
  "extends": "../utils/tsconfig.json",
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "react-jsx",
    "outDir": ".",
    "rootDir": "src"
  },
  "include": ["src/**/*"],
  "exclude": ["*.js", "*.d.ts"]
}

================
File: packages/next-auth/typedoc.config.cjs
================
// @ts-check
⋮----
/**
 * @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').PluginOptions}
 */

================
File: packages/utils/scripts/providers.js
================
// Use this script to re-export all providers from core in Auth.js frameworks
⋮----
const sourceDir = resolve(process.cwd(), "../core/src/providers")
const args = parseArgs({
args: process.argv.slice(2),
⋮----
const destinationDir = resolve(process.cwd(), join(out, "providers"))
⋮----
await fs.mkdir(destinationDir, { recursive: true })
const files = (await fs.readdir(sourceDir)).filter(
(file) => !nonProvider.includes(file)
⋮----
const destinationPath = resolve(destinationDir, file)
const provider = file.substring(0, file.indexOf("."))
⋮----
content = content.replace(/\/index/g, "")
await fs.writeFile(destinationPath, content)
⋮----
console.log("All files copied successfully!")
⋮----
console.error("Error occurred while copying files:", error)

================
File: packages/utils/scripts/setup-fw-integration.js
================
const __dirname = path.dirname(new URL(import.meta.url).pathname)
// Check if name is provided
⋮----
console.error("Error: No name provided")
process.exit(1)
⋮----
// Convert name to lowercase
⋮----
.toLowerCase()
// replace dots with empty string & replace spaces with dashes
.replace(/\./g, "")
.replace(/\s/g, "-")
// Delete directory if it exists
⋮----
await fs.rm(path.join(__dirname, "../..", `frameworks-${id}`), {
⋮----
// ignore
⋮----
// Copy directory
const sourceDir = path.join(__dirname, "../..", "frameworks-template")
const destinationDir = path.join(__dirname, "../..", `frameworks-${id}`)
await fs.mkdir(destinationDir)
console.log(`📂 Copying ${sourceDir} to ${destinationDir}`)
// copy the whole directory recursively
await fs.cp(sourceDir, destinationDir, { recursive: true })
// Delete node_modules & providers
await fs.rm(path.join(destinationDir, "node_modules"), { recursive: true })
await fs.rm(path.join(destinationDir, "providers"), { recursive: true })
// Replace placeholders in files
const files = await fs.readdir(destinationDir, { withFileTypes: true })
⋮----
if (file.isFile()) {
const filePath = path.join(destinationDir, file.name)
let content = await fs.readFile(filePath, "utf8")
⋮----
.replace(/<framework-id>/g, id)
.replace(/<framework-name>/g, name)
await fs.writeFile(filePath, content, "utf8")
⋮----
// Rename `name` field in package.json
const packageJsonPath = path.join(destinationDir, "package.json")
let packageJson = JSON.parse(await fs.readFile(packageJsonPath, "utf8"))
⋮----
await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2))
// Update redirects in vercel.json
const vercelJsonPath = path.join(__dirname, "../../..", "docs", "vercel.json")
let vercelJson = JSON.parse(await fs.readFile(vercelJsonPath, "utf8"))
⋮----
await fs.writeFile(vercelJsonPath, JSON.stringify(vercelJson, null, 2))
// add a new line in pr-labeler.yml
const prLabelerPath = path.join(
⋮----
let prLabeler = await fs.readFile(prLabelerPath, "utf8")
⋮----
// replace frameworkId with the id
prLabeler = prLabeler.replace(/frameworkId/g, id)
await fs.writeFile(prLabelerPath, prLabeler)
console.log("✅ Success. Please run `pnpm i` to install dependencies.")

================
File: packages/utils/adapter.ts
================
import { afterAll, beforeAll, expect, test } from "vitest"
import type { Adapter, VerificationToken } from "@auth/core/adapters"
import { createHash, randomInt, randomUUID } from "crypto"
export interface TestOptions {
  adapter: Adapter
  fixtures?: {
    user?: any
    session?: any
    account?: any
    sessionUpdateExpires?: Date
    verificationTokenExpires?: Date
  }
  db: {
    /** Generates UUID v4 by default. Use it to override how the test suite should generate IDs, like user id. */
    id?: () => string | undefined
    /**
     * Manually disconnect database after all tests have been run,
     * if your adapter doesn't do it automatically
     */
    disconnect?: () => Promise<any>
    /**
     * Manually establishes a db connection before all tests,
     * if your db doesn't do this automatically
     */
    connect?: () => Promise<any>
    /** A simple query function that returns a session directly from the db. */
    session: (sessionToken: string) => any
    /** A simple query function that returns a user directly from the db. */
    user: (id: string) => any
    /** A simple query function that returns an account directly from the db. */
    account: (providerAccountId: {
      provider: string
      providerAccountId: string
    }) => any
    /**
     * A simple query function that returns an verification token directly from the db,
     * based on the user identifier and the verification token (hashed).
     */
    verificationToken: (params: { identifier: string; token: string }) => any
    /**
     * A simple query function that returns an authenticator directly from the db.
     */
    authenticator?: (credentialID: string) => any
  }
  skipTests?: string[]
  /**
   * Enables testing of WebAuthn methods.
   */
  testWebAuthnMethods?: boolean
}
⋮----
/** Generates UUID v4 by default. Use it to override how the test suite should generate IDs, like user id. */
⋮----
/**
     * Manually disconnect database after all tests have been run,
     * if your adapter doesn't do it automatically
     */
⋮----
/**
     * Manually establishes a db connection before all tests,
     * if your db doesn't do this automatically
     */
⋮----
/** A simple query function that returns a session directly from the db. */
⋮----
/** A simple query function that returns a user directly from the db. */
⋮----
/** A simple query function that returns an account directly from the db. */
⋮----
/**
     * A simple query function that returns an verification token directly from the db,
     * based on the user identifier and the verification token (hashed).
     */
⋮----
/**
     * A simple query function that returns an authenticator directly from the db.
     */
⋮----
/**
   * Enables testing of WebAuthn methods.
   */
⋮----
/**
 * A wrapper to run the most basic tests.
 * Run this at the top of your test file.
 * You can add additional tests below, if you wish.
 */
export async function runBasicTests(options: TestOptions)
⋮----
const id = ()
// Init
⋮----
const maybeTest = (
    method: keyof Adapter,
    ...args: Parameters<typeof test> extends [any, ...infer U] ? U : never
)
⋮----
// @ts-expect-error This is only used for the TypeORM adapter
⋮----
// All adapters must define these methods
⋮----
// These are optional for custom adapters, but we require them for the official adapters
⋮----
// Should only return if the identifier matches
⋮----
// Future methods
// These methods are not yet invoked in the core, but built-in adapters must implement them
⋮----
// Re-populate db with session and account
⋮----
// User should not exist after it is deleted
⋮----
// Session should not exist after user is deleted
⋮----
// Account should not exist after user is deleted
⋮----
// Setup
⋮----
// Test
⋮----
// Setup
⋮----
// Test
⋮----
// Setup
⋮----
// Test
⋮----
// Setup
⋮----
// Test
⋮----
// Setup
⋮----
// Test
⋮----
// UTILS
export function hashToken(token: string)

================
File: packages/utils/package.json
================
{
  "name": "utils",
  "private": true,
  "version": "0.0.0",
  "devDependencies": {
    "@auth/core": "workspace:*",
    "@preact/preset-vite": "^2.8.1",
    "dotenv": "^10.0.0"
  },
  "type": "module",
  "dependencies": {
    "unplugin-swc": "^1.4.4"
  }
}

================
File: packages/utils/tsconfig.eslint.json
================
{
  "extends": "./tsconfig.json",
  "include": ["../../packages/**/*", "../../apps/**/*"]
}

================
File: packages/utils/tsconfig.json
================
{
  "compilerOptions": {
    "allowJs": true,
    "baseUrl": ".",
    "declaration": true,
    "declarationMap": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "skipDefaultLibCheck": true,
    "skipLibCheck": true,
    "strict": true,
    "strictNullChecks": true,
    "stripInternal": true,
    "target": "es2020"
  }
}

================
File: packages/utils/vitest-setup.ts
================
// TODO: Drop this file when Node.js 18 is deprecated

================
File: packages/utils/vitest.config.ts
================
/// <reference types="vitest" />
import { defineConfig } from "vite"
import swc from "unplugin-swc"
import preact from "@preact/preset-vite"
// https://vitejs.dev/config/
⋮----
// NOTE: `.spec` is reserved for Playwright tests

================
File: patches/@balazsorban__monorepo-release@0.5.1.patch
================
diff --git a/dist/index.js b/dist/index.js
index a6899bbf1a545f9581a1f3c4b83e433e35c7cee9..329107182487c1b8321ff48374dcbeb1ebc86572 100755
--- a/dist/index.js
+++ b/dist/index.js
@@ -5,7 +5,7 @@ import { publish } from "./publish.js";
 import { log } from "./utils.js";
 import { bold } from "yoctocolors";
 // TODO: Allow user config
-const userConfig = {};
+const userConfig = { ignorePackages: ["next-auth"] };
 const config = { ...defaultConfig, ...userConfig };
 const endMsg = bold("Done");
 console.time(endMsg);

================
File: .dockerignore
================
# Files
/**/*/.env
/**/*/.env.*
/**/*/README.md
/**/*/.git
/**/*/.github
/**/*/.gitignore
/**/*/.dockerignore
/**/*/.turbo
/**/*/npm-debug.log
/**/*/Dockerfile

# Directories
/**/*/node_modules
/**/*/test
/**/*/dist

# Auth.js Dirs
apps/*
docs/**
packages/**
!packages/next-auth
!packages/core
!packages/utils
!apps/examples/nextjs-docker

================
File: .gitignore
================
# Misc
.DS_Store
.eslintcache
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
packages/*/.npmrc


npm-debug.log*
yarn-debug.log*
yarn-error.log*
firebase-debug.log
ui-debug.log
.pnpm-debug.log
.husky
tmp

# Dependencies
node_modules

# Build dirs
.next
build
dist

# Generated files
.cache-loader
packages/next-auth/providers
# copied from @auth/core
packages/frameworks-*/**/providers
packages/*/*.js
!packages/*/typedoc.config.js
packages/*/*.d.ts
packages/*/*.d.ts.map
packages/*/lib
packages/**/generated
.xata*

# Qwik needs to use .mjs. REVIEW: Check back, can we just use .js?
packages/*/*.mjs

# Development app
apps/dev/src/css
apps/dev/prisma/migrations
apps/dev/typeorm
apps/dev/nextjs-2

# VS
/.vs/slnx.sqlite-journal
/.vs/slnx.sqlite
/.vs
.vscode/generated*

# Jetbrains
.idea

# GitHub Actions runner
/actions-runner
/_work

# DB
dev.db*
packages/adapter-prisma/prisma/dev.db
packages/adapter-prisma/prisma/migrations
db.sqlite
packages/adapter-supabase/supabase/.branches
packages/adapter-drizzle/.drizzle

# Tests
coverage
dynamodblocal-bin
firestore-debug.log
test.schema.gql
test-results
playwright-report
blob-report
playwright/.cache


# Turborepo
.turbo

# Docs
docs/.next
docs/manifest.mjs

# Core
packages/core/src/providers/provider-types.ts
packages/core/lib
packages/core/providers
packages/core/src/lib/pages/styles.ts
docs/docs/reference/core

# Next.js
packages/next-auth/lib
packages/next-auth/providers
# copied from @auth/core
packages/next-auth/src/providers
docs/docs/reference/nextjs

# SvelteKit
packages/frameworks-sveltekit/index.*
packages/frameworks-sveltekit/client.*
packages/frameworks-sveltekit/.svelte-kit
packages/frameworks-sveltekit/package
packages/frameworks-sveltekit/vite.config.js.timestamp-*
packages/frameworks-sveltekit/vite.config.ts.timestamp-*
docs/docs/reference/sveltekit

# SolidStart
docs/docs/reference/solidstart


# Express
docs/docs/reference/express


# Adapters
docs/docs/reference/adapter

## Drizzle migration folder
.drizzle

================
File: .nvmrc
================
18

================
File: .prettierignore
================
.cache-loader
.DS_Store
.pnpm-debug.log
.turbo
.vscode/generated*
/_work
/actions-runner
node_modules
patches
pnpm-lock.yaml
.github/actions/issue-validator/index.mjs
*.d.ts
*.d.ts.map

.svelte-kit
.next
.nuxt

# --------------- Docs ---------------

.next
docs/pages/reference
static
docs/manifest.mjs

# --------------- Packages ---------------

coverage
dist
packages/**/*.cjs
packages/**/*.js
!packages/*/scripts/*.js

# @auth/core
packages/core/src/providers/provider-types.ts
packages/core/src/lib/pages/styles.ts

# @auth/sveltekit
packages/frameworks-sveltekit/package
packages/frameworks-sveltekit/vite.config.{js,ts}.timestamp-*

# @auth/express
packages/frameworks-express/providers

# next-auth
packages/next-auth/src/providers/provider-types.ts
packages/next-auth/css/index.css

# Adapters
.branches
db.sqlite
dev.db
dynamodblocal-bin
firebase-debug.log
firestore-debug.log
migrations
test.schema.gql

# --------------- Apps ---------------

# Examples should have their own Prettier config since they are templates too
apps/example-sveltekit

# Development app
apps/dev/prisma
apps/dev/migrations
apps/dev/typeorm

================
File: eslint.config.mjs
================
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const gitignorePath = path.resolve(__dirname, ".gitignore")
⋮----
export default tsEslint.config(
⋮----
...includeIgnoreFile(gitignorePath).ignores,
"**/.*", // dotfiles aren't ignored by default in FlatConfig
".*", // dotfiles aren't ignored by default in FlatConfig

================
File: lefthook.yml
================
pre-commit:
  parallel: true
  commands:
    format:
      run: pnpm prettier --cache --write {staged_files}
      stage_fixed: true

================
File: LICENSE
================
ISC License

Copyright (c) 2022-2024, Balázs Orbán

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

================
File: package.json
================
{
  "name": "root",
  "version": "0.0.0",
  "private": true,
  "repository": "https://github.com/nextauthjs/next-auth.git",
  "scripts": {
    "build:app": "turbo run build --filter=next-auth-app",
    "build:docs": "turbo run build --filter=docs",
    "build": "turbo run build --filter=next-auth --filter=@auth/*",
    "test": "turbo run test --concurrency=1 --filter=[HEAD^1] --filter=./packages/* --filter=!*app* --filter=!*dynamo* --filter=!*edgedb* --filter=!*hasura* --filter=!*mikro* --filter=!*dgraph* --filter=!*xata* --filter=!*typeorm*",
    "test:e2e": "turbo run test:e2e --filter=next-auth",
    "test:e2e:watch": "turbo run test:e2e -- --ui",
    "clean": "turbo run clean --no-cache",
    "dev": "pnpm dev:next",
    "dev:next": "turbo run dev --parallel --continue --filter=next-auth-app... --filter=@auth/core --filter=!./packages/adapter-*",
    "dev:e2e:next": "turbo run dev --filter=next-auth-app",
    "dev:db": "turbo run dev --parallel --continue --filter=next-auth-app...",
    "dev:sveltekit": "turbo run dev --parallel --continue --filter=sveltekit-auth-app...",
    "dev:express": "turbo run dev --parallel --continue --filter=express-auth-app...",
    "dev:qwik": "turbo run dev --parallel --continue --filter=qwik-auth-app...",
    "dev:docs": "turbo run dev --filter=docs",
    "email": "fake-smtp-server",
    "lint": "eslint --cache .",
    "format": "prettier --cache --check .",
    "format:write": "prettier --cache --write .",
    "release": "release",
    "peek": "pnpm release --peek",
    "version:pr": "node ./config/version-pr",
    "setup-fw-integration": "pnpm clean --filter=@auth/frameworks-template && node packages/utils/scripts/setup-fw-integration.js"
  },
  "devDependencies": {
    "@actions/core": "^1.10.0",
    "@balazsorban/monorepo-release": "0.5.1",
    "@eslint/compat": "^1.1.1",
    "@eslint/js": "^9.9.1",
    "@playwright/test": "1.40.0",
    "@types/node": "^20.8.10",
    "@typescript-eslint/eslint-plugin": "v6.19.1",
    "@typescript-eslint/parser": "v6.19.1",
    "@vitest/coverage-v8": "1.2.1",
    "@vitest/ui": "^1.2.2",
    "eslint": "9.9.1",
    "eslint-config-prettier": "^8.10.0",
    "eslint-plugin-import-x": "^4.1.1",
    "eslint-plugin-jsdoc": "^39.9.1",
    "eslint-plugin-promise": "^6.0.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-svelte": "^2.38.0",
    "fake-smtp-server": "^0.8.0",
    "lefthook": "1.7.15",
    "globals": "^15.9.0",
    "prettier": "3.3.3",
    "prettier-plugin-svelte": "^3.2.6",
    "prettier-plugin-tailwindcss": "^0.6.6",
    "svelte-eslint-parser": "^0.35.0",
    "turbo": "^2.1.1",
    "typescript": "5.3.3",
    "typescript-eslint": "^8.3.0",
    "utils": "workspace:*",
    "vite": "^5.1.8",
    "vitest": "1.2.2"
  },
  "engines": {
    "node": "^18.18.0 || ^20.8.0 || ^22.0.0"
  },
  "packageManager": "pnpm@9.2.0+sha512.98a80fd11c2e7096747762304106432b3ddc67dcf54b5a8c01c93f68a2cd5e05e6821849522a06fb76284d41a2660d5e334f2ee3bbf29183bf2e739b1dafa771",
  "funding": [
    {
      "type": "github",
      "url": "https://github.com/sponsors/balazsorban44"
    },
    {
      "type": "opencollective",
      "url": "https://opencollective.com/nextauth"
    }
  ],
  "prettier": {
    "semi": false,
    "singleQuote": false,
    "trailingComma": "es5",
    "plugins": [
      "prettier-plugin-svelte",
      "prettier-plugin-tailwindcss"
    ]
  },
  "pnpm": {
    "overrides": {
      "mailparser": "3.6.6"
    },
    "patchedDependencies": {
      "@balazsorban/monorepo-release@0.5.1": "patches/@balazsorban__monorepo-release@0.5.1.patch"
    }
  }
}

================
File: pnpm-workspace.yaml
================
packages:
  - "packages/*"
  - "apps/dev/*"
  - "docs"

================
File: README.md
================
> [!NOTE]
> The Auth.js/NextAuth.js project is not provided by, nor otherwise affiliated with Vercel Inc. or its subsidiaries. Any contributions to this project by individuals affiliated with Vercel are made in their personal capacity.

<p align="center">
  <br/>
  <a href="https://authjs.dev" target="_blank"><img width="96px" src="https://authjs.dev/img/logo-sm.png" /></a>
  <h3 align="center">Auth.js</h3>
  <p align="center">Authentication for the Web.</p>
  <p align="center">Open Source. Full Stack. Own Your Data.</p>
  <p align="center" style="align: center;">
    <a href="https://x.com/authjs" ><img src="https://shields.io/badge/Follow @authjs-000?logo=x&style=flat-square" alt="X (formerly known Twitter)" /></a>
    <a href="https://github.com/nextauthjs/next-auth/releases"><img src="https://img.shields.io/npm/v/next-auth/latest?style=flat-square&label=latest%20stable" alt="NPM next-auth@latest release" /></a>
    <a href="https://github.com/nextauthjs/next-auth/releases"><img src="https://img.shields.io/npm/v/next-auth/beta?style=flat-square&label=latest%20NextAuth.js v5" alt="NPM next-auth@beta release" /></a>
    <!-- TODO: Should count `@auth/core` when NextAuth.js v5 is released as stable. -->
    <a href="https://www.npmtrends.com/next-auth"><img src="https://img.shields.io/npm/dm/next-auth?style=flat-square&color=cyan" alt="Downloads" /></a>
    <a href="https://github.com/nextauthjs/next-auth/stargazers"><img src="https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square&color=orange" alt="GitHub Stars" /></a>
    <!-- <a href="https://codecov.io/gh/nextauthjs/next-auth" ><img alt="Codecov" src="https://img.shields.io/codecov/c/github/nextauthjs/next-auth?token=o2KN5GrPsY&style=flat-square&logo=codecov"></a> -->
    <img src="https://shields.io/badge/TypeScript-3178C6?logo=TypeScript&logoColor=fff&style=flat-square" alt="TypeScript" />
  </p>
  <p align="center">
    Auth.js is a set of open-source packages that are built on standard Web APIs for authentication in modern applications with any framework on any platform in any JS runtime.
  </p>
  <p align="center">
    Need help? See <a href="https://authjs.dev">authjs.dev</a> for the documentation, or <a href="https://discord.authjs.dev">
    join our community on Discord&nbsp;
      <img src="https://assets-global.website-files.com/6257adef93867e50d84d30e2/636e0a69f118df70ad7828d4_icon_clyde_blurple_RGB.svg" height=12 alt="TypeScript" />
    </a>
    .
  </p>
  <p align="center">
     <kbd>Sponsored</kbd> Looking for a hosted alternative? <a href="https://go.clerk.com/5115vfK" target="_blank">Use Clerk →</a>
  </p>
</p>

## Features

### Flexible and easy to use

- Designed to work with any OAuth service, it supports 2.0+, OIDC
- Built-in support for [many popular sign-in services](https://github.com/nextauthjs/next-auth/tree/main/packages/core/src/providers)
- Email/Passwordless authentication
- Passkeys/WebAuthn support
- Bring Your Database - or none! - stateless authentication with any backend (Active Directory, LDAP, etc.)
- Runtime-agnostic, runs anywhere! (Docker, Node.js, Serverless, etc.)

### Own your data

Auth.js can be used with or without a database.

- An open-source solution that allows you to keep control of your data
- Built-in support for [MySQL, MariaDB, Postgres, Microsoft SQL Server, MongoDB, SQLite, GraphQL, etc.](https://adapters.authjs.dev)
- Works great with databases from popular hosting providers

### Secure by default

- Promotes the use of passwordless sign-in mechanisms
- Designed to be secure by default and encourage best practices for safeguarding user data
- Uses Cross-Site Request Forgery (CSRF) Tokens on POST routes (sign in, sign out)
- Default cookie policy aims for the most restrictive policy appropriate for each cookie
- When JSON Web Tokens are used, they are encrypted by default (JWE) with A256CBC-HS512
- Features tab/window syncing and session polling to support short-lived sessions
- Attempts to implement the latest guidance published by [Open Web Application Security Project](https://owasp.org)

Advanced configuration allows you to define your routines to handle controlling what accounts are allowed to sign in, for encoding and decoding JSON Web Tokens and to set custom cookie security policies and session properties, so you can control who can sign in and how often sessions have to be re-validated.

### TypeScript

Auth.js libraries are written with type safety in mind. [Check out the docs](https://authjs.dev/getting-started/typescript) for more information.

## Security

If you think you have found a vulnerability (or are not sure) in Auth.js or any of the related packages (i.e. Adapters), we ask you to read our [Security Policy](https://authjs.dev/security) to reach out responsibly. Please do not open Pull Requests/Issues/Discussions before consulting with us.

## Acknowledgments

[Auth.js is made possible thanks to all of its contributors.](https://authjs.dev/contributors)

<a href="https://github.com/nextauthjs/next-auth/graphs/contributors">
  <img width="500px" src="https://contrib.rocks/image?repo=nextauthjs/next-auth" />
</a>
<div>
<a href="https://vercel.com?utm_source=nextauthjs&utm_campaign=oss"></a>
</div>

### Sponsors

We have an [OpenCollective](https://opencollective.com/nextauth) for companies and individuals looking to contribute financially to the project!

<!--sponsors start-->
<table>
  <tbody>
    <tr>
      <td align="center" valign="top">
        <a href="https://clerk.com?utm_source=sponsorship&utm_medium=github&utm_campaign=authjs&utm_content=sponsor" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/49538330?s=200&v=4" alt="Clerk Logo" />
        </a><br />
        <div>Clerk</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://a0.to/signup/nextauthjs" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/2824157?v=4" alt="Auth0 Logo" />
        </a><br />
        <div>Auth0</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://fusionauth.io" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/41974756?s=200&v=4" alt="FusionAuth Logo" />
        </a><br />
        <div>FusionAuth</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://stytch.com" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/69983493?s=200&v=4" alt="Stytch Logo" />
        </a><br />
        <div>Stytch</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://prisma.io" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/17219288?s=200&v=4" alt="Prisma Logo" />
        </a><br />
        <div>Prisma</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://neon.tech" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/77690634?v=4" alt="Neon Logo" />
        </a><br />
        <div>Neon</div>
        <sub>💵</sub>
      </td>
    </tr>
    <tr>
      <td align="center" valign="top">
        <a href="https://www.beyondidentity.com" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/69811361?s=200&v=4" alt="Beyond Identity Logo" />
        </a><br />
        <div>Beyond Identity</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://lowdefy.com" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/47087496?s=200&v=4" alt="Lowdefy Logo" />
        </a><br />
        <div>Lowdefy</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://www.descope.com" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/97479186?s=200&v=4" alt="Descope Logo" />
        </a><br />
        <div>Descope</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://badass.dev" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/136839242?v=4" alt="Badass Courses Logo" />
        </a><br />
        <div>Badass Courses</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://github.com/encoredev/encore" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/50438175?v=4" alt="Encore Logo" />
        </a><br />
        <div>Encore</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://sent.dm/?ref=auth.js" target="_blank">
          <img width="108" src="https://avatars.githubusercontent.com/u/153308555?v=4" alt="Sent.dm Logo" />
        </a><br />
        <div>Sent.dm</div>
        <sub>💵</sub>
      </td>
    </tr>
    <tr>
      <td align="center" valign="top">
        <a href="https://arcjet.com/?ref=auth.js" target="_blank">
          <img width="108" src="https://avatars.githubusercontent.com/u/24397786?s=200&v=4" alt="Arcjet Logo" />
        </a><br />
        <div>Arcjet</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://route4me.com/?ref=auth.js" target="_blank">
          <img width="108" src="https://avatars.githubusercontent.com/u/7936820?v=4" alt="Route4Me Logo" />
        </a><br />
        <div>Route4Me</div>
        <sub>💵</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://www.netlight.com/" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/1672348?s=200&v=4" alt="Netlight logo" />
        </a><br />
        <div>Netlight</div>
        <sub>☁️</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://checklyhq.com" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/25982255?s=200&v=4" alt="Checkly Logo" />
        </a><br />
        <div>Checkly</div>
        <sub>☁️</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://superblog.ai/" target="_blank">
          <img height="96" src="https://d33wubrfki0l68.cloudfront.net/cdc4a3833bd878933fcc131655878dbf226ac1c5/10cd6/images/logo_bolt_small.png" alt="superblog Logo" />
        </a><br />
        <div>superblog</div>
        <sub>☁️</sub>
      </td>
      <td align="center" valign="top">
        <a href="https://vercel.com" target="_blank">
          <img height="96" src="https://avatars.githubusercontent.com/u/14985020?s=200&v=4" alt="Vercel Logo" />
        </a><br />
        <div>Vercel</div>
        <sub>☁️</sub>
      </td>
    </tr>
  </tbody>
</table>

- 💵 Financial Sponsor
- ☁️ Infrastructure Support

<br />
<!--sponsors end-->

## Contributing

We're open to all community contributions! If you'd like to contribute in any way, please first read
our [Contributing Guide](https://github.com/nextauthjs/.github/blob/main/CONTRIBUTING.md).

> [!NOTE]
> The Auth.js/NextAuth.js project is not provided by, nor otherwise affiliated with Vercel Inc. or its subsidiaries. Any contributions to this project by individuals affiliated with Vercel are made in their personal capacity.

## License

ISC

================
File: turbo.json
================
{
  "$schema": "https://turbo.build/schema.json",
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [
        ".next",
        "dist/**",
        "lib/**",
        "providers/**",
        "generated/**",
        "*.js",
        "*.d.ts",
        "*.d.ts.map",
        "src/lib/pages/styles.ts",
        "src/providers/provider-types.ts",
        ".svelte-kit/**"
      ],
      "outputLogs": "new-only"
    },
    "clean": {
      "cache": false
    },
    "dev": {
      "cache": false
    },
    "test": {
      "outputs": ["coverage/**"],
      "inputs": ["src/**/", "test/**/"],
      "outputLogs": "new-only"
    },
    "test:e2e": {
      "dependsOn": ["next-auth#build"],
      "outputs": [
        "blob-report/**",
        "playwright-report/**",
        "playwright/.cache/**",
        "test-results/**"
      ],
      "env": [
        "TEST_KEYCLOAK_PASSWORD",
        "TEST_KEYCLOAK_USERNAME",
        "AUTH_SECRET",
        "AUTH_KEYCLOAK_ID",
        "AUTH_KEYCLOAK_SECRET",
        "AUTH_KEYCLOAK_ISSUER",
        "AUTH_TRUST_HOST"
      ]
    },
    "@auth/xata-adapter#test": {
      "passThroughEnv": ["XATA_API_KEY", "XATA_DATABASE_URL"]
    },
    "@auth/hasura-adapter#build": {
      "dependsOn": ["@auth/core#build"],
      "outputs": [
        "lib/**",
        "*.js",
        "*.d.ts",
        "*.d.ts.map",
        "src/lib/generated/**"
      ]
    },
    "docs#dev": {
      "dependsOn": [
        "next-auth#build",
        "@auth/core#build",
        "@auth/sveltekit#build",
        "@auth/express#build",
        "@auth/solid-start#build",
        "@auth/qwik#build"
      ],
      "persistent": true,
      "cache": false,
      "outputs": [
        ".next/**/*",
        "build/**/*",
        "!.next/cache/**",
        "docs/reference/**/*.mdx",
        "docs/reference/*.mdx"
      ]
    },
    "docs#build": {
      "inputs": [
        "pages/**",
        "utils/**",
        "public/**",
        "components/**",
        "theme.config.tsx",
        "typedoc*",
        "vercel.json",
        "next-sitemap.config.cjs",
        "next.config.js"
      ],
      "dependsOn": [
        "@auth/core#build",
        "@auth/azure-tables-adapter#build",
        "@auth/d1-adapter#build",
        "@auth/dgraph-adapter#build",
        "@auth/drizzle-adapter#build",
        "@auth/dynamodb-adapter#build",
        "@auth/edgedb-adapter#build",
        "@auth/fauna-adapter#build",
        "@auth/firebase-adapter#build",
        "@auth/hasura-adapter#build",
        "@auth/kysely-adapter#build",
        "@auth/mikro-orm-adapter#build",
        "@auth/mongodb-adapter#build",
        "@auth/neo4j-adapter#build",
        "@auth/pg-adapter#build",
        "@auth/pouchdb-adapter#build",
        "@auth/prisma-adapter#build",
        "@auth/sequelize-adapter#build",
        "@auth/solid-start#build",
        "@auth/supabase-adapter#build",
        "@auth/surrealdb-adapter#build",
        "@auth/sveltekit#build",
        "@auth/typeorm-adapter#build",
        "@auth/unstorage-adapter#build",
        "@auth/upstash-redis-adapter#build",
        "@auth/xata-adapter#build",
        "@auth/qwik#build",
        "next-auth#build",
        "^build"
      ],
      "outputs": [
        ".next/**/*",
        "build/**/*",
        "!.next/cache/**",
        "docs/reference/**/*.mdx",
        "docs/reference/**/*.js",
        "docs/reference/*.mdx"
      ]
    }
  }
}



================================================================
End of Codebase
================================================================
